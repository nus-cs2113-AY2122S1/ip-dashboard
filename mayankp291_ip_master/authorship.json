[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"package duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"import duke.manager.TaskManager;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"mayankp291"},"content":"        welcomeMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"mayankp291"},"content":"        TaskManager.processInput();","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"        byeMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"mayankp291"},"content":"     * Prints a welcome message on the console","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"mayankp291"},"content":"    private static void welcomeMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"mayankp291"},"content":"        TaskManager.printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"Howdy there! I\u0027m Fluke\");","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"What can I do for you today master?\");","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"mayankp291"},"content":"        TaskManager.printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"mayankp291"},"content":"     * Prints a bye message on the console","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"mayankp291"},"content":"    private static void byeMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"mayankp291"},"content":"        TaskManager.printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"Bye. Hope to serve you again master!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"mayankp291"},"content":"        TaskManager.printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"mayankp291"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"mayankp291":30,"-":1}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"package duke.exception;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"        super(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"mayankp291":7}},{"path":"src/main/java/duke/manager/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"package duke.manager;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"mayankp291"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"mayankp291"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"public class TaskManager {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"mayankp291"},"content":"     * Prints a line on the console","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"mayankp291"},"content":"    public static void printLine() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"mayankp291"},"content":"     * Determines the task type,","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"mayankp291"},"content":"     * assuming it is the first","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"mayankp291"},"content":"     * word in the message and","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"mayankp291"},"content":"     * returns it","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"mayankp291"},"content":"     * @param message The input by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"mayankp291"},"content":"     * @return The first word of the string.","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"mayankp291"},"content":"    private static String taskType(String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"mayankp291"},"content":"        String[] type \u003d message.split(\" \");","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"mayankp291"},"content":"        return type[0];","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"mayankp291"},"content":"     * The function adds the task input by the user","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"mayankp291"},"content":"     * @param tasks   the array of tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"mayankp291"},"content":"     * @param message the input string containing","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"mayankp291"},"content":"     *                the task description","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"mayankp291"},"content":"    private static void addTask(Task[] tasks, String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"mayankp291"},"content":"        switch (taskType(message)) {","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"mayankp291"},"content":"        case \"todo\":","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"mayankp291"},"content":"            addTodo(tasks, message);","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"mayankp291"},"content":"            break;","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"mayankp291"},"content":"        case \"deadline\":","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"mayankp291"},"content":"            addDeadline(tasks, message);","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"mayankp291"},"content":"            break;","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"mayankp291"},"content":"        case \"event\":","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"mayankp291"},"content":"            addEvent(tasks, message);","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"mayankp291"},"content":"            break;","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"mayankp291"},"content":"        default:","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"I really cannot understand what you wrote\");","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"mayankp291"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"mayankp291"},"content":"        if (Task.COUNT \u003e 0) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"mayankp291"},"content":"            printAddedTask(tasks[Task.COUNT - 1]);","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"mayankp291"},"content":"     * The function prints the recently added task","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"mayankp291"},"content":"    private static void printAddedTask(Task task) {","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"mayankp291"},"content":"        printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"mayankp291"},"content":"        System.out.println(task.getDescription());","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"Now you have \" + Task.COUNT + \" tasks in the list.\");","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"mayankp291"},"content":"        printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"mayankp291"},"content":"     * The function adds the todo task input by the user","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"mayankp291"},"content":"     * @param tasks   the array of tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"mayankp291"},"content":"     * @param message the input string containing","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"mayankp291"},"content":"     *                the task description","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"mayankp291"},"content":"    private static void addEvent(Task[] tasks, String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"mayankp291"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"mayankp291"},"content":"            message \u003d message.substring(6);","lastModifiedDate":"2021-09-01"},{"lineNumber":84,"author":{"gitId":"mayankp291"},"content":"            String[] eventData \u003d message.split(\"/\", 2);","lastModifiedDate":"2021-09-01"},{"lineNumber":85,"author":{"gitId":"mayankp291"},"content":"            tasks[Task.COUNT] \u003d new Event(eventData[0], eventData[1].substring(3));","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"mayankp291"},"content":"            Task.COUNT++;","lastModifiedDate":"2021-09-01"},{"lineNumber":87,"author":{"gitId":"mayankp291"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"YOU IDIOT !!??!! The description of an event cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"mayankp291"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"YOU IDIOT !!??!! The input format should be : \");","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"event description /on date or time\");","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":95,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"mayankp291"},"content":"     * The function adds the deadline task input by the user","lastModifiedDate":"2021-09-01"},{"lineNumber":97,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":98,"author":{"gitId":"mayankp291"},"content":"     * @param tasks   the array of tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":99,"author":{"gitId":"mayankp291"},"content":"     * @param message the input string containing","lastModifiedDate":"2021-09-01"},{"lineNumber":100,"author":{"gitId":"mayankp291"},"content":"     *                the task description","lastModifiedDate":"2021-09-01"},{"lineNumber":101,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":102,"author":{"gitId":"mayankp291"},"content":"    private static void addDeadline(Task[] tasks, String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":103,"author":{"gitId":"mayankp291"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"mayankp291"},"content":"            message \u003d message.substring(9);","lastModifiedDate":"2021-09-01"},{"lineNumber":105,"author":{"gitId":"mayankp291"},"content":"            String[] deadlineData \u003d message.split(\"/\", 2);","lastModifiedDate":"2021-09-01"},{"lineNumber":106,"author":{"gitId":"mayankp291"},"content":"            tasks[Task.COUNT] \u003d new Deadline(deadlineData[0], deadlineData[1].substring(3));","lastModifiedDate":"2021-09-01"},{"lineNumber":107,"author":{"gitId":"mayankp291"},"content":"            Task.COUNT++;","lastModifiedDate":"2021-09-01"},{"lineNumber":108,"author":{"gitId":"mayankp291"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"YOU IDIOT !!??!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"mayankp291"},"content":"        } catch (ArrayIndexOutOfBoundsException d) {","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"YOU IDIOT !!??!! The input format should be : \");","lastModifiedDate":"2021-09-07"},{"lineNumber":115,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"deadline description /by date or time\");","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":119,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":120,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":121,"author":{"gitId":"mayankp291"},"content":"     * The function adds the event input by the user","lastModifiedDate":"2021-09-01"},{"lineNumber":122,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":123,"author":{"gitId":"mayankp291"},"content":"     * @param tasks   the array of tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":124,"author":{"gitId":"mayankp291"},"content":"     * @param message the input string containing","lastModifiedDate":"2021-09-01"},{"lineNumber":125,"author":{"gitId":"mayankp291"},"content":"     *                the task description","lastModifiedDate":"2021-09-01"},{"lineNumber":126,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":127,"author":{"gitId":"mayankp291"},"content":"    private static void addTodo(Task[] tasks, String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":128,"author":{"gitId":"mayankp291"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":129,"author":{"gitId":"mayankp291"},"content":"            tasks[Task.COUNT] \u003d new Todo(message.substring(5));","lastModifiedDate":"2021-09-01"},{"lineNumber":130,"author":{"gitId":"mayankp291"},"content":"            Task.COUNT++;","lastModifiedDate":"2021-09-01"},{"lineNumber":131,"author":{"gitId":"mayankp291"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":133,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":135,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":137,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":138,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":139,"author":{"gitId":"mayankp291"},"content":"     * Prints all the tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":140,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":141,"author":{"gitId":"mayankp291"},"content":"    private static void printTasks(Task[] tasks) {","lastModifiedDate":"2021-09-01"},{"lineNumber":142,"author":{"gitId":"mayankp291"},"content":"        printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":143,"author":{"gitId":"mayankp291"},"content":"        for (int i \u003d 0; i \u003c Task.COUNT; i++) {","lastModifiedDate":"2021-09-01"},{"lineNumber":144,"author":{"gitId":"mayankp291"},"content":"            System.out.println((i + 1) + \". \" + tasks[i].getDescription());","lastModifiedDate":"2021-09-01"},{"lineNumber":145,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":146,"author":{"gitId":"mayankp291"},"content":"        if (Task.COUNT \u003d\u003d 0) {","lastModifiedDate":"2021-09-07"},{"lineNumber":147,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"Smartass, you need to add tasks before listing them !!!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":148,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":149,"author":{"gitId":"mayankp291"},"content":"        printLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":150,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":151,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":152,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":153,"author":{"gitId":"mayankp291"},"content":"     * Marks the task done based","lastModifiedDate":"2021-09-01"},{"lineNumber":154,"author":{"gitId":"mayankp291"},"content":"     * on the integer value provided","lastModifiedDate":"2021-09-01"},{"lineNumber":155,"author":{"gitId":"mayankp291"},"content":"     * by the user in the String message.","lastModifiedDate":"2021-09-01"},{"lineNumber":156,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":157,"author":{"gitId":"mayankp291"},"content":"     * @param tasks   the array of tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":158,"author":{"gitId":"mayankp291"},"content":"     * @param message the input string containing","lastModifiedDate":"2021-09-01"},{"lineNumber":159,"author":{"gitId":"mayankp291"},"content":"     *                the task description","lastModifiedDate":"2021-09-01"},{"lineNumber":160,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":161,"author":{"gitId":"mayankp291"},"content":"    private static void markDone(Task[] tasks, String message) {","lastModifiedDate":"2021-09-01"},{"lineNumber":162,"author":{"gitId":"mayankp291"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":163,"author":{"gitId":"mayankp291"},"content":"            String[] arrOfStr \u003d message.split(\" \");","lastModifiedDate":"2021-09-01"},{"lineNumber":164,"author":{"gitId":"mayankp291"},"content":"            int index \u003d Integer.parseInt(arrOfStr[arrOfStr.length - 1]) - 1;","lastModifiedDate":"2021-09-01"},{"lineNumber":165,"author":{"gitId":"mayankp291"},"content":"            tasks[index].isDone();","lastModifiedDate":"2021-09-01"},{"lineNumber":166,"author":{"gitId":"mayankp291"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":167,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":168,"author":{"gitId":"mayankp291"},"content":"            System.out.println(\"OH MY GOD, can you maybe type a task that exists ?\");","lastModifiedDate":"2021-09-07"},{"lineNumber":169,"author":{"gitId":"mayankp291"},"content":"            printLine();","lastModifiedDate":"2021-09-07"},{"lineNumber":170,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":171,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":172,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":173,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":174,"author":{"gitId":"mayankp291"},"content":"     * The function processes the inputs","lastModifiedDate":"2021-09-01"},{"lineNumber":175,"author":{"gitId":"mayankp291"},"content":"     * by the user and calls the necessary","lastModifiedDate":"2021-09-01"},{"lineNumber":176,"author":{"gitId":"mayankp291"},"content":"     * functions to add, print and manipulate","lastModifiedDate":"2021-09-01"},{"lineNumber":177,"author":{"gitId":"mayankp291"},"content":"     * tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":178,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":179,"author":{"gitId":"mayankp291"},"content":"    public static void processInput() {","lastModifiedDate":"2021-09-01"},{"lineNumber":180,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":181,"author":{"gitId":"mayankp291"},"content":"        Task[] tasks \u003d new Task[Task.MAX];","lastModifiedDate":"2021-09-01"},{"lineNumber":182,"author":{"gitId":"mayankp291"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-01"},{"lineNumber":183,"author":{"gitId":"mayankp291"},"content":"        String message \u003d scanner.nextLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":184,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":185,"author":{"gitId":"mayankp291"},"content":"        while (!message.equals(\"bye\")) {","lastModifiedDate":"2021-09-01"},{"lineNumber":186,"author":{"gitId":"mayankp291"},"content":"            if (message.equals(\"list\")) {","lastModifiedDate":"2021-09-01"},{"lineNumber":187,"author":{"gitId":"mayankp291"},"content":"                printTasks(tasks);","lastModifiedDate":"2021-09-01"},{"lineNumber":188,"author":{"gitId":"mayankp291"},"content":"            } else if (message.contains(\"done\")) {","lastModifiedDate":"2021-09-01"},{"lineNumber":189,"author":{"gitId":"mayankp291"},"content":"                markDone(tasks, message);","lastModifiedDate":"2021-09-01"},{"lineNumber":190,"author":{"gitId":"mayankp291"},"content":"            } else {","lastModifiedDate":"2021-09-01"},{"lineNumber":191,"author":{"gitId":"mayankp291"},"content":"                addTask(tasks, message);","lastModifiedDate":"2021-09-01"},{"lineNumber":192,"author":{"gitId":"mayankp291"},"content":"            }","lastModifiedDate":"2021-09-01"},{"lineNumber":193,"author":{"gitId":"mayankp291"},"content":"            message \u003d scanner.nextLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":194,"author":{"gitId":"mayankp291"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":195,"author":{"gitId":"mayankp291"},"content":"        scanner.close();","lastModifiedDate":"2021-09-01"},{"lineNumber":196,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":197,"author":{"gitId":"mayankp291"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"mayankp291":197}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"package duke.task;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"    protected String by;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"mayankp291"},"content":"     * Constructor to initialise the description","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"mayankp291"},"content":"     * and the deadline of the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"mayankp291"},"content":"     * @param description string with the task","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"mayankp291"},"content":"     *                    description","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"mayankp291"},"content":"     * @param by          deadline for the task","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"mayankp291"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"mayankp291"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"mayankp291"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"mayankp291"},"content":"     * Returns the formatted Description of the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"mayankp291"},"content":"     * @return returns a String with the deadline task description","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"mayankp291"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"mayankp291"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"mayankp291"},"content":"        return \"[D]\" + super.getDescription() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"mayankp291"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"mayankp291":29}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"package duke.task;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"    protected String on;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"mayankp291"},"content":"     * Constructor to initialise the description","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"mayankp291"},"content":"     * and the date/time of the event.","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"mayankp291"},"content":"     * @param description string with the event","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"mayankp291"},"content":"     *                    description","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"mayankp291"},"content":"     * @param on          date/time for the event","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"mayankp291"},"content":"    public Event(String description, String on) {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"mayankp291"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"mayankp291"},"content":"        this.on \u003d on;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"mayankp291"},"content":"     * Returns the formatted Description of the event.","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"mayankp291"},"content":"     * @return returns a String with the event description","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"mayankp291"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"mayankp291"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"mayankp291"},"content":"        return \"[E]\" + super.getDescription() + \" (on: \" + on + \")\";","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"mayankp291"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"mayankp291":29}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"package duke.task;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"mayankp291"},"content":"    public static int COUNT \u003d 0;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"    public static final int MAX \u003d 100;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"     * Constructor to initialise Task description","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"mayankp291"},"content":"     * and make isDone false","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"mayankp291"},"content":"     * @param description string with the task","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"mayankp291"},"content":"     *                    description","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"mayankp291"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"mayankp291"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"mayankp291"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"mayankp291"},"content":"     * Returns a string based on","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"mayankp291"},"content":"     * the boolean isDone.","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"mayankp291"},"content":"     * @return \"X\" if task is done and \" \" if task not done","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"mayankp291"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"mayankp291"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"mayankp291"},"content":"     * Returns the formatted Description of the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"mayankp291"},"content":"     * @return returns a String with the task description","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"mayankp291"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"mayankp291"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"mayankp291"},"content":"     * Makes the boolean isDone true,","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"mayankp291"},"content":"     * indicating that the task is done","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"mayankp291"},"content":"     * and prints the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"mayankp291"},"content":"    public void isDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"mayankp291"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"\\n____________________________________________________________\");","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"mayankp291"},"content":"        System.out.println(this.getDescription());","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"mayankp291"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"mayankp291"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"mayankp291":52}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"package duke.task;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"mayankp291"},"content":"     * Constructor to initialise Todo description","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"     * and make isDone false","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"mayankp291"},"content":"     * @param description string with the task","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"     *                    description","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"mayankp291"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"mayankp291"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"mayankp291"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"mayankp291"},"content":"     * Returns the formatted Description of the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"mayankp291"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"mayankp291"},"content":"     * @return returns a String with the task description","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"mayankp291"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"mayankp291"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"mayankp291"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"mayankp291"},"content":"        return \"[T]\" + super.getDescription();","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"mayankp291"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"mayankp291"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"mayankp291":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"mayankp291"},"content":"todo eat lunch","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"mayankp291"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"mayankp291"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"mayankp291"},"content":"deadline do homework /by September 10th","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"mayankp291"},"content":"done 2","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"mayankp291"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"mayankp291"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"mayankp291"},"content":"todo get supper","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"mayankp291"},"content":"done 4","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"done 3","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"mayankp291"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"mayankp291"},"content":"bye","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"mayankp291"},"content":"","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"mayankp291":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"mayankp291"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"mayankp291":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"mayankp291"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"mayankp291":1,"-":37}}]
