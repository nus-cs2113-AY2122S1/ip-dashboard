[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"_Dude_ is a **Command Line Application** that aims to provide users with a **convenient and fast** platform to **manage and track tasks**. ","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"With its bubbly personality and user-friendly commands, _Dude_ will surely become your best friend for task management! :smile: :ok_man: :sparkles:","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"- [Features](#features)","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"  - [Add a Todo task : `todo`](#add-a-todo-task-todo)","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"  - [Add a Deadline task: `deadline`](#add-a-deadline-task-deadline)","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"  - [Add an Event task: `event`](#add-an-event-task-event)","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"  - [List all tasks: `list`](#list-all-tasks-list)","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"  - [Mark a task as done: `done`](#mark-a-task-as-done-done)","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"  - [Delete a task: `delete`](#delete-a-task-delete)","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"  - [Search for a task: `search`](#search-for-a-task-search)","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"  - [View list of commands: `commands`](#view-list-of-commands-commands)","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"  - [Exit the application: `bye`](#exit-the-application-bye)","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"- [Frequently Asked Questions (FAQ)](#frequently-asked-questions-faq)","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    ","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"## Quick Start","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"1. Ensure that you have Java 11 installed on your computer. If not, [install Java from here](https://www.oracle.com/java/technologies/downloads/).","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"2. Download the latest release of `Dude.jar` from [here](https://github.com/tlyi/ip/releases).","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"3. Copy `Dude.jar` into an empty folder of your choice.","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"4. Open a command window in that folder. [_Not sure how to do this?_](https://www.groovypost.com/howto/open-command-window-terminal-window-specific-folder-windows-mac-linux/)","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"5. In the same window, run the command `java -jar Dude.jar`. ","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"All ready to go! Enjoy using _Dude_! üòÉ","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"#### ‚ÑπÔ∏è Notes about the command format:","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"- `command` words are **case-sensitive** and are to be supplied in **lower case** only","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"- Words in `UPPER_CASE` are details to be provided by the user","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"- ‚ùó Date and time needs to be specified in `dd/MM/yyyy HHmm` format. E.g: `12/12/2021 2359` ","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"### Add a Todo task: `todo`","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"Adds a Todo task to the list. Todo tasks are general tasks that do not have any date and time attached to it.","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"\u003e Format: `todo TASK_DESCRIPTION`","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"Example: `todo water the plants`","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"todo water the plants","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"Okie! Added to list:","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"[T][ ] water the plants","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"Current number of tasks: 1","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"### Add a Deadline task: `deadline`","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"Adds a Deadline task to the list. Deadline tasks can be used to keep track of tasks that need to be completed by a certain date and time.","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"\u003e Format: `deadline TASK_DESCRIPTION /by DATE_AND_TIME`","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"Example: `deadline watch lecture 3 /by 12/10/2021 1200`","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"deadline watch lecture 3 /by 12/10/2021 1200","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"Okie! Added to list:","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"[D][ ] watch lecture 3 (by: Oct 12 2021 12.00PM)","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"Current number of tasks: 2","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"### Add an Event task: `event`","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"Adds an Event task to the list. Event tasks can be used to keep track of events that occur on a certain date and time.","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"\u003e Format: `event TASK_DESCRIPTION /at DATE_AND_TIME`","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"Example: `event lunch with Jamie /at 11/11/2021 1300`","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"event lunch with Jamie /at 11/11/2021 1300","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"Okie! Added to list:","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"[E][ ] lunch with Jamie (at: Nov 11 2021 1.00PM)","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"Current number of tasks: 3","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"### List all tasks: `list`","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"Lists all the tasks you currently have, along with their completion status. ","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"`[ ]` indicates a task that is yet to be complete and `[X]` indicates a completed task.","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"\u003eFormat: `list`","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"Example: `list`","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"list","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"tlyi"},"content":"These are your current tasks:","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"tlyi"},"content":"1.[T][ ] water the plants","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"tlyi"},"content":"2.[D][ ] watch lecture 3 (by: Oct 12 2021 12.00PM)","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"tlyi"},"content":"3.[E][ ] lunch with Jamie (at: Nov 11 2021 1.00PM)","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"tlyi"},"content":"### Mark a task as done: `done`","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"tlyi"},"content":"Marks the task at the given task number as done.","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"tlyi"},"content":"\u003e Format: `done TASK_NUMBER`","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"tlyi"},"content":"Example: `done 2`","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"tlyi"},"content":"done 2","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"tlyi"},"content":"Well done! I\u0027ve marked this task as done. ^_^","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"tlyi"},"content":"[D][X] watch lecture 3 (by: Oct 12 2021 12.00PM)","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":114,"author":{"gitId":"tlyi"},"content":"### Delete a task: `delete`","lastModifiedDate":"2021-09-30"},{"lineNumber":115,"author":{"gitId":"tlyi"},"content":"Deletes the task at the given task number.","lastModifiedDate":"2021-09-30"},{"lineNumber":116,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":117,"author":{"gitId":"tlyi"},"content":"\u003e Format: `delete TASK_NUMBER`","lastModifiedDate":"2021-09-30"},{"lineNumber":118,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":119,"author":{"gitId":"tlyi"},"content":"Example: `delete 1`","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":121,"author":{"gitId":"tlyi"},"content":"delete 1","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":123,"author":{"gitId":"tlyi"},"content":"Alrightys! I have removed the following task:","lastModifiedDate":"2021-09-30"},{"lineNumber":124,"author":{"gitId":"tlyi"},"content":"[T][ ] water the plants","lastModifiedDate":"2021-09-30"},{"lineNumber":125,"author":{"gitId":"tlyi"},"content":"Current number of tasks: 2","lastModifiedDate":"2021-09-30"},{"lineNumber":126,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":128,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":129,"author":{"gitId":"tlyi"},"content":"### Search for a task: `search`","lastModifiedDate":"2021-09-30"},{"lineNumber":130,"author":{"gitId":"tlyi"},"content":"Shows a list of tasks with descriptions that match a given search term, along with their respective task numbers.","lastModifiedDate":"2021-09-30"},{"lineNumber":131,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":132,"author":{"gitId":"tlyi"},"content":":bulb: The search term can consist of a single word, or multiple words, and is **case-insensitive**.","lastModifiedDate":"2021-09-30"},{"lineNumber":133,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":134,"author":{"gitId":"tlyi"},"content":"\u003e Format: `search SEARCH_TERM`","lastModifiedDate":"2021-09-30"},{"lineNumber":135,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":136,"author":{"gitId":"tlyi"},"content":"Example: `search lunch`","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":138,"author":{"gitId":"tlyi"},"content":"search lunch","lastModifiedDate":"2021-09-30"},{"lineNumber":139,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":140,"author":{"gitId":"tlyi"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-09-30"},{"lineNumber":141,"author":{"gitId":"tlyi"},"content":"2.[E][ ] lunch with Jamie (at: Nov 11 2021 1.00PM)","lastModifiedDate":"2021-09-30"},{"lineNumber":142,"author":{"gitId":"tlyi"},"content":"_________________________________________________________________________________","lastModifiedDate":"2021-09-30"},{"lineNumber":143,"author":{"gitId":"tlyi"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":145,"author":{"gitId":"tlyi"},"content":"### View list of commands: `commands`","lastModifiedDate":"2021-09-30"},{"lineNumber":146,"author":{"gitId":"tlyi"},"content":"Shows the list of commands that Dude accepts and their respective formats.","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":148,"author":{"gitId":"tlyi"},"content":"\u003e Format: `list`","lastModifiedDate":"2021-09-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":150,"author":{"gitId":"tlyi"},"content":"### Exit the application: `bye`","lastModifiedDate":"2021-09-30"},{"lineNumber":151,"author":{"gitId":"tlyi"},"content":"Exits the application. Bye _Dude_! :frowning_face:","lastModifiedDate":"2021-09-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":154,"author":{"gitId":"tlyi"},"content":"## Frequently Asked Questions (FAQ)","lastModifiedDate":"2021-09-30"},{"lineNumber":155,"author":{"gitId":"tlyi"},"content":"_**Q**: How do I save my tasks?_","lastModifiedDate":"2021-09-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":157,"author":{"gitId":"tlyi"},"content":"**A**: No need to worry about that!  All tasks are automatically saved onto your computer everytime the list is modified. ","lastModifiedDate":"2021-09-30"},{"lineNumber":158,"author":{"gitId":"tlyi"},"content":"_Dude_ will then reload your data the next time you start it.","lastModifiedDate":"2021-09-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":160,"author":{"gitId":"tlyi"},"content":"_**Q**: Can I edit my tasks directly without starting the application?_","lastModifiedDate":"2021-09-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":162,"author":{"gitId":"tlyi"},"content":"**A**: Sure! The text file containing the data can be found at `/data/dude.txt` and can be directly edited using a text file editor. ","lastModifiedDate":"2021-09-30"},{"lineNumber":163,"author":{"gitId":"tlyi"},"content":"Each new task should be written on a new line. Note that you will need to strictly follow the format of previously stored data, ","lastModifiedDate":"2021-09-30"},{"lineNumber":164,"author":{"gitId":"tlyi"},"content":"else _Dude_ will be unable to load that line of data into your task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":168,"author":{"gitId":"tlyi"},"content":"## Command Summary","lastModifiedDate":"2021-09-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":170,"author":{"gitId":"tlyi"},"content":"Action | Format | Example","lastModifiedDate":"2021-09-30"},{"lineNumber":171,"author":{"gitId":"tlyi"},"content":"------ | ------ | -------","lastModifiedDate":"2021-09-30"},{"lineNumber":172,"author":{"gitId":"tlyi"},"content":"Add Todo task |  `todo TASK_DESCRIPTION` | `todo water the plants`","lastModifiedDate":"2021-09-30"},{"lineNumber":173,"author":{"gitId":"tlyi"},"content":"Add Deadline task | `deadline TASK_DESCRIPTION /by DATE_AND_TIME` | `deadline watch lecture 3 /by 12/10/2021 1200`","lastModifiedDate":"2021-09-30"},{"lineNumber":174,"author":{"gitId":"tlyi"},"content":"Add Event task | `event TASK_DESCRIPTION /at DATE_AND_TIME` |  `event lunch with Jamie /at 11/11/2021 1300`","lastModifiedDate":"2021-09-30"},{"lineNumber":175,"author":{"gitId":"tlyi"},"content":"List all tasks | `list` | `list`","lastModifiedDate":"2021-09-30"},{"lineNumber":176,"author":{"gitId":"tlyi"},"content":"Mark a task as done | `done TASK_NUMBER` | `done 2`","lastModifiedDate":"2021-09-30"},{"lineNumber":177,"author":{"gitId":"tlyi"},"content":"Delete a task | `delete TASK_NUMBER` | `delete 1`","lastModifiedDate":"2021-09-30"},{"lineNumber":178,"author":{"gitId":"tlyi"},"content":"Search for a task | `search SEARCH_TERM` | `search lunch with`","lastModifiedDate":"2021-09-30"},{"lineNumber":179,"author":{"gitId":"tlyi"},"content":"View list of commands | `command` | `command`","lastModifiedDate":"2021-09-30"},{"lineNumber":180,"author":{"gitId":"tlyi"},"content":"Exit | `bye` | `bye`","lastModifiedDate":"2021-09-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"-":16,"tlyi":165}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.ByeCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.Command;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.CommandResult;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"import duke.logic.parser.Parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"import duke.storage.exceptions.CannotReadFromFileException;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"import duke.storage.exceptions.UnableToWriteToFileException;","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":" * Main class of the Dude bot.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":" * Initialises the application and starts user interaction.","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"public class Main {","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    private static Ui ui;","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    private static TaskList tasks;","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    private static Storage storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     * Initialises the application by creating the required objects (Ui, Tasks, Storage) and loading data from the","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     * storage file, then showing the welcome message.","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    private void start() {","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"            this.ui \u003d new Ui();","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"            this.storage \u003d new Storage();","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"            ui.showWelcome();","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"            this.tasks \u003d storage.loadTasksFromFile();","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"            ui.showTasksLoaded(tasks);","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"        } catch (CannotReadFromFileException | UnableToWriteToFileException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"            ui.showMessageFramedWithDivider(e.toString());","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"    /** Shows the Goodbye message and exits the application.*/","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"    private void exit() {","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"        ui.showBye();","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"        System.exit(0);","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"     * Executes the given Command and calls for storage operation if required.","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"     * @param command Command to be executed","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"     * @return CommandResult representing result of execution of the command","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"    private CommandResult executeCommand(Command command) {","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"        command.setTasks(this.tasks);","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"        CommandResult result \u003d command.execute();","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"        if (Command.requiresStorageRewrite(command)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"            try {","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"                storage.rewriteTaskListToFile(tasks);","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"            } catch (UnableToWriteToFileException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"                ui.showMessageFramedWithDivider(e.toString());","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"        return result;","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"     * Reads the user input and executes appropriate command.","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"     * Runs indefinitely until user inputs the Bye command.","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"    private void enterTaskModeUntilByeCommand() {","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"        Command command;","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"        do {","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"            String userInput \u003d ui.getUserInput();","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"            command \u003d new Parser().parseCommand(userInput);","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"            CommandResult result \u003d executeCommand(command);","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"            ui.showMessageFramedWithDivider(result.toString());","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"        } while (!ByeCommand.isBye(command));","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"    /** Entry point of the application. */","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"        new Main().run(args);","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"    /** Runs the application until command is given to exit it. **/","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"    private void run(String[] args) {","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"        start();","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"        enterTaskModeUntilByeCommand();","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"        exit();","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":89}},{"path":"src/main/java/duke/data/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks that need to be done before a specific date/time.","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":" * E.g: submit iP by 23/12/2001 2359","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    private LocalDateTime dateAndTime;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public Deadline(String description, LocalDateTime dateAndTime) {","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public Deadline(String description, LocalDateTime dateAndTime, boolean isDone) {","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    public String getFormattedDateAndTime() {","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"        return this.dateAndTime.format(DateTimeFormatter.ofPattern(Ui.DATE_TIME_FORMAT_TO_PRINT));","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"     * Returns Deadline task formatted for application UI, in the form \"[D][ ] description (by: deadline)\"","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Deadline task string","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"        return DEADLINE_LOGO + super.toString() + \" (by: \" + getFormattedDateAndTime() + \")\";","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"     * Returns Deadline task formatted for data file in the form \"D | 1/0 | description | deadline\"","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Deadline task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"        return DEADLINE_ACRONYM + \" | \" + super.toTextFileString() + \" | \" + dateAndTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":48}},{"path":"src/main/java/duke/data/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks that start at a specific date and time","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":" * E.g: team meeting at 23/12/2012 2pm","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    private LocalDateTime dateAndTime;","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public Event(String description, LocalDateTime dateAndTime) {","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public Event(String description, LocalDateTime dateAndTime, boolean isDone) {","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    public String getFormattedDateAndTime() {","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"        return this.dateAndTime.format(DateTimeFormatter.ofPattern(Ui.DATE_TIME_FORMAT_TO_PRINT));","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"     * Returns Event task formatted for application UI,  in the form \"[E][ ] description (at: date/time)\"","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Event task string","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"        return EVENT_LOGO + super.toString() + \" (at: \" + getFormattedDateAndTime() + \")\";","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"     * Returns Event task formatted for data file in the form \"E | 1/0 | description | dateAndTime\"","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Event task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"        return EVENT_ACRONYM + \" | \" + super.toTextFileString() + \" | \" + dateAndTime;","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":49}},{"path":"src/main/java/duke/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskAlreadyDoneException;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" * This class is used to create tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" * Each Task must contain a description and can either be marked done or not done.","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    protected String description;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    protected static final String ICON_DONE \u003d \"[X]\";","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    protected static final String ICON_NOT_DONE \u003d  \"[ ]\";","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public static final String TODO_ACRONYM \u003d \"T\";","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    protected static final String TODO_LOGO \u003d \"[\" + TODO_ACRONYM + \"]\";","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    public static final String DEADLINE_ACRONYM \u003d \"D\";","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    protected static final String DEADLINE_LOGO \u003d \"[\" + DEADLINE_ACRONYM + \"]\";","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    public static final String EVENT_ACRONYM \u003d \"E\";","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    protected static final String EVENT_LOGO \u003d \"[\" + EVENT_ACRONYM + \"]\";","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"        return (this.isDone ? ICON_DONE : ICON_NOT_DONE); //marks task done with \"X\"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"     * Marks Task as done","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"     * @throws TaskAlreadyDoneException If task is already marked as done","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    public void markAsDone() throws TaskAlreadyDoneException {","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"        if (!this.isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"            throw new TaskAlreadyDoneException();","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"     * Returns Task formatted for application UI, in the form \"[ ] description\"","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Task string for application","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"        return getStatusIcon() + \" \" + getDescription();","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"     * Returns Task formatted for data file, in the form \"1/0 | description\"","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"     * where 1 \u003d done, 0 \u003d not done","lastModifiedDate":"2021-09-14"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"        return (this.isDone ? \"1\" : \"0\") + \" | \" + getDescription();","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"tlyi":72}},{"path":"src/main/java/duke/data/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskAlreadyDoneException;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskListEmptyException;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskNumOutOfBoundsException;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"import java.util.List;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":" * Represents the list of tasks and contains methods for actions that can be done on the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"public class TaskList {","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    private final ArrayList\u003cTask\u003e internalTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"     * Constructs empty list","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     * Constructs task list from list of Tasks (from storage)","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"       internalTasks.addAll(tasks);","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"     * Converts task number to index number (difference is a result of 0-base vs 1-base)","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"    public int convertToIndexNum(int taskNum) {","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"        return taskNum - 1;","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"     * Gets task number of task (difference from index is a result of 0-base vs 1-base)","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"    public int getTaskNum(Task task) {","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"        return internalTasks.indexOf(task) + 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"     * Adds task to list","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"      internalTasks.add(task);","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"     * Deletes task in list, given the task number","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"     * @throws TaskListEmptyException If current task list is empty","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"     * @throws TaskNumOutOfBoundsException If taskNum is not within the indexes that the TaskList has","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"    public void deleteTask(int taskNum) throws TaskListEmptyException, TaskNumOutOfBoundsException {","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"        if (internalTasks.isEmpty()) {","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"            throw new TaskListEmptyException();","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"            internalTasks.remove(convertToIndexNum(taskNum));","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"            throw new TaskNumOutOfBoundsException();","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"     * Marks task as done, given the task number","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"     * @param taskNum Task number","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"     * @throws TaskListEmptyException If current task list is empty","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"     * @throws TaskNumOutOfBoundsException If taskNum is not within the indexes that the TaskList has","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"    public void markTaskAsDone(int taskNum) throws TaskListEmptyException, TaskNumOutOfBoundsException,","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"            TaskAlreadyDoneException {","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"        if (internalTasks.isEmpty()) {","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"            throw new TaskListEmptyException();","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"            internalTasks.get(convertToIndexNum(taskNum)).markAsDone();","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"            throw new TaskNumOutOfBoundsException();","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"tlyi"},"content":"    /** Returns the ArrayList of tasks*/","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"tlyi"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"tlyi"},"content":"        return this.internalTasks;","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"tlyi"},"content":"     * Returns the Task at the given task number","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"tlyi"},"content":"     * @param taskNum Task number","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"tlyi"},"content":"     * @return Task at the given task number","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"tlyi"},"content":"     * @throws TaskListEmptyException If current task list is empty","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"tlyi"},"content":"     * @throws TaskNumOutOfBoundsException If taskNum is not within the indexes that the TaskList has","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"tlyi"},"content":"    public Task getTaskAtNum(int taskNum) throws TaskListEmptyException, TaskNumOutOfBoundsException {","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"tlyi"},"content":"        if (this.internalTasks.isEmpty()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"tlyi"},"content":"            throw new TaskListEmptyException();","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"tlyi"},"content":"            return this.internalTasks.get(convertToIndexNum(taskNum));","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"tlyi"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"tlyi"},"content":"            throw new TaskNumOutOfBoundsException();","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"tlyi"},"content":"    /** Returns size of tasks */","lastModifiedDate":"2021-09-30"},{"lineNumber":117,"author":{"gitId":"tlyi"},"content":"    public int getNumTasks() {","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"tlyi"},"content":"        return this.internalTasks.size();","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"tlyi"},"content":"    /** Returns true if TaskList is empty */","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"tlyi"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-09-28"},{"lineNumber":123,"author":{"gitId":"tlyi"},"content":"        return this.internalTasks.isEmpty();","lastModifiedDate":"2021-09-28"},{"lineNumber":124,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":125,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":126,"author":{"gitId":"tlyi"},"content":"    /** Returns all the tasks in string form */","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"tlyi"},"content":"    public String getStringOfAllTasks() {","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"tlyi"},"content":"        String stringOfAllTasks \u003d Ui.EMPTY;","lastModifiedDate":"2021-09-30"},{"lineNumber":129,"author":{"gitId":"tlyi"},"content":"        for (Task task : internalTasks) {","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"tlyi"},"content":"            stringOfAllTasks \u003d stringOfAllTasks + getTaskNum(task) + \".\" + task.toString() + Ui.LS;","lastModifiedDate":"2021-09-30"},{"lineNumber":131,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"tlyi"},"content":"        return stringOfAllTasks.trim();","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":135,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":136,"author":{"gitId":"tlyi"},"content":"     * Returns all the tasks in the given list in string form","lastModifiedDate":"2021-09-28"},{"lineNumber":137,"author":{"gitId":"tlyi"},"content":"     * @param listOfTasks List of tasks that is a subset of the internalTasks list","lastModifiedDate":"2021-09-28"},{"lineNumber":138,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":139,"author":{"gitId":"tlyi"},"content":"    public String getStringOfTasksInList(List\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2021-09-28"},{"lineNumber":140,"author":{"gitId":"tlyi"},"content":"        String stringOfAllTasks \u003d Ui.EMPTY;","lastModifiedDate":"2021-09-30"},{"lineNumber":141,"author":{"gitId":"tlyi"},"content":"        for (Task task : listOfTasks) {","lastModifiedDate":"2021-09-28"},{"lineNumber":142,"author":{"gitId":"tlyi"},"content":"            stringOfAllTasks \u003d stringOfAllTasks + getTaskNum(task) + \".\" + task.toString() + Ui.LS;","lastModifiedDate":"2021-09-30"},{"lineNumber":143,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"tlyi"},"content":"        return stringOfAllTasks.trim();","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":147,"author":{"gitId":"tlyi"},"content":"    /** Returns list of tasks that match search term */","lastModifiedDate":"2021-09-30"},{"lineNumber":148,"author":{"gitId":"tlyi"},"content":"    public List\u003cTask\u003e getListOfTasksWithMatchingTerm(String searchTerm) {","lastModifiedDate":"2021-09-28"},{"lineNumber":149,"author":{"gitId":"tlyi"},"content":"        final String lowerCaseSearchTerm \u003d searchTerm.toLowerCase();","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"tlyi"},"content":"        return internalTasks.stream().filter(task -\u003e task.description.toLowerCase().contains(lowerCaseSearchTerm)).collect(Collectors.toList());","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":152,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":153,"author":{"gitId":"tlyi"},"content":"    /** Returns list of tasks that match search term in string form */","lastModifiedDate":"2021-09-30"},{"lineNumber":154,"author":{"gitId":"tlyi"},"content":"    public String getStringOfTasksWithMatchingTerm(String searchTerm) {","lastModifiedDate":"2021-09-28"},{"lineNumber":155,"author":{"gitId":"tlyi"},"content":"        List\u003cTask\u003e listOfTasks \u003d getListOfTasksWithMatchingTerm(searchTerm);","lastModifiedDate":"2021-09-28"},{"lineNumber":156,"author":{"gitId":"tlyi"},"content":"        return getStringOfTasksInList(listOfTasks);","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":158,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":158}},{"path":"src/main/java/duke/data/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * Represents tasks without any date/time attached to it.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" * E.g: visit new theme park","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"     * Returns Todo task formatted for application UI, in the form \"[T][ ] description\"","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Todo task string for application","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"        return TODO_LOGO + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"     * Returns Todo task formatted for data file in the form \"T | 1/0 | description\"","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Todo task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"        return TODO_ACRONYM + \" | \" + super.toTextFileString();","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":38}},{"path":"src/main/java/duke/logic/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" *  Represents the command that when executed, adds a new Deadline to the TaskList","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + \" X /by \" + Ui.DATE_TIME_FORMAT + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : Add deadline X with date and time details\";","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d   \"Invalid format! Please input a deadline, \"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"            + Ui.LS + \"in the format \" + MESSAGE_COMMAND_FORMAT + \", where X is the task!\";","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_PREFIX \u003d \"by\";","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    private Deadline toAdd;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    public AddDeadlineCommand(String description, LocalDateTime dateAndTime) {","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"        this.toAdd \u003d new Deadline(description, dateAndTime);","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"        super.tasks.addTask(toAdd);","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(String.format(Ui.MESSAGE_TASK_ADDED, toAdd.toString(), super.tasks.getNumTasks()));","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":31}},{"path":"src/main/java/duke/logic/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Event;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" *  Represents the command that when executed, adds a new Event to the TaskList","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + \" X /at \" + Ui.DATE_TIME_FORMAT + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : Add event X with date and time details\";","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d  \"Invalid format! Please input a date and time, \"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"            + Ui.LS + \"in the format \" + MESSAGE_COMMAND_FORMAT + \", where X is the event!\";","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_PREFIX \u003d \"at\";","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    private Event toAdd;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    public AddEventCommand(String description, LocalDateTime dateAndTime) {","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"        this.toAdd \u003d new Event(description, dateAndTime);","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"        super.tasks.addTask(toAdd);","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(String.format(Ui.MESSAGE_TASK_ADDED, toAdd, super.tasks.getNumTasks()));","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":31}},{"path":"src/main/java/duke/logic/commands/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" * Represents the command that when executed, adds a new Todo to the TaskList","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"public class AddTodoCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d  Ui.QUOTATION + COMMAND_WORD + \" X\" + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : Add task X\";","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d \"Please specify a name for the task!\";","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    private Todo toAdd;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    public AddTodoCommand(String description) {","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        this.toAdd \u003d new Todo(description);","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"        super.tasks.addTask(toAdd);","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(String.format(Ui.MESSAGE_TASK_ADDED, toAdd, super.tasks.getNumTasks()));","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":27}},{"path":"src/main/java/duke/logic/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" * Represents the command that when executed, signals to the Main class to exit the program.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : Stop Dude :(\";","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_SUCCESS \u003d \"Stopping Dude... :(\";","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public static boolean isBye(Command command) {","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"        return command instanceof ByeCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":23}},{"path":"src/main/java/duke/logic/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" * Abstract class used to represent executable Commands","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" * All Commands can be executed to return a CommandResult","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    protected TaskList tasks;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"     * Returns the appropriate CommandResult after execution of the command.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"     * Each Command class will have its own implementation of this method that is specific to the actions it is expected","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"     * to execute.","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"     * @return CommandResult Result of execution of command","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public abstract CommandResult execute();","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"     * Provides the task list that the command will operate on","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     * @param tasks TaskList class containing current tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public void setTasks(TaskList tasks) {","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"     * Returns true if the command requires the storage file to be rewritten after execution,","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"     * i.e. after making modifications to the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"     * @param command Command that has just been executed","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"     * @return True if storage file is to be rewritten after execution of the command","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    public static boolean requiresStorageRewrite(Command command) {","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"        return command instanceof AddDeadlineCommand","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"                || command instanceof AddEventCommand","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"                || command instanceof AddTodoCommand","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"                || command instanceof DeleteTaskCommand","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"                || command instanceof MarkTaskAsDoneCommand","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"                || command instanceof ByeCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":47}},{"path":"src/main/java/duke/logic/commands/CommandListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" *  Represents the command that when executed, lists the possible commands that the user can execute along with their","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" *  description and format.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"public class CommandListCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"commands\";","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : See this list of commands again\";","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(Ui.MESSAGE_COMMAND_LIST);","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":18}},{"path":"src/main/java/duke/logic/commands/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" *  Represents the result of the execution of commands. Contains a String of message that describes the result of the","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" *  execution.","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class CommandResult {","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    public final String messageToBeShown;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public CommandResult(String messageToBeShown) {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        this.messageToBeShown \u003d messageToBeShown;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        return this.messageToBeShown;","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":19}},{"path":"src/main/java/duke/logic/commands/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskListEmptyException;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskNumOutOfBoundsException;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" *  Represents the command that when executed, deletes the task at the given task number.","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + \" X\" + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : Delete task number X\";","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d \"Invalid format! Please input a task number to be deleted, \"","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"        + Ui.LS + \"in the format \" + MESSAGE_COMMAND_FORMAT + \", where X is the task number!\";","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_SUCCESS \u003d \"Alrightys! I have removed the following task:\" + Ui.LS + \"%s\"","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"            + Ui.LS + \"Current number of tasks: %2$d\";","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    private int taskNum;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    public DeleteTaskCommand(int taskNum) {","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"            final String deletedTaskString \u003d super.tasks.getTaskAtNum(this.taskNum).toString();","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"            super.tasks.deleteTask(this.taskNum);","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, deletedTaskString, super.tasks.getNumTasks()));","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"        } catch (TaskListEmptyException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(e.toString());","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"        } catch (TaskNumOutOfBoundsException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(String.format(e.toString(), super.tasks.getNumTasks()));","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":38}},{"path":"src/main/java/duke/logic/commands/IncorrectCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" *  Represents any incorrect command that has been parsed from user input.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" *  Contains a String of message that describes the error in parsing.","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class IncorrectCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    private String errorMessage;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public IncorrectCommand(String errorMessage) {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(this.errorMessage);","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":18}},{"path":"src/main/java/duke/logic/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" *  Represents the command that when executed, lists all the tasks in the current TaskList","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : See lists of tasks\";","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"        if (super.tasks.isEmpty()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(Ui.MESSAGE_NO_TASKS_YET);","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        String listOfTasksInString \u003d super.tasks.getStringOfAllTasks();","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(String.format(Ui.MESSAGE_INTRODUCE_TASKS, listOfTasksInString));","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":22}},{"path":"src/main/java/duke/logic/commands/MarkTaskAsDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskAlreadyDoneException;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskListEmptyException;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.TaskNumOutOfBoundsException;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" * Represents the command that when executed, marks the task at the given task number as done.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"public class MarkTaskAsDoneCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + \" X\" + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : Mark task number X as done\";","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d \"Invalid format! Please input a task number to be marked as done, \"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"            + Ui.LS + \"in the format \" + MESSAGE_COMMAND_FORMAT + \", where X is the task number!\";","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_SUCCESS \u003d \"Well done! I\u0027ve marked this task as done. ^_^\" + Ui.LS + \"%s\";","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    private int taskNum;","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    public MarkTaskAsDoneCommand(int taskNum) {","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"            super.tasks.markTaskAsDone(taskNum);","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"            final String taskString \u003d  super.tasks.getTaskAtNum(taskNum).toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, taskString));","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"        } catch (TaskListEmptyException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(e.toString());","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"        } catch (TaskNumOutOfBoundsException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(String.format(e.toString(), super.tasks.getNumTasks()));","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"        } catch (TaskAlreadyDoneException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(String.format(e.toString()));","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":40}},{"path":"src/main/java/duke/logic/commands/SearchTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" *  Represents the command that when executed, returns a list of tasks with names that match the search term","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"public class SearchTaskCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public static final String COMMAND_WORD \u003d \"search\";","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_FORMAT \u003d Ui.QUOTATION + COMMAND_WORD + \" X\" + Ui.QUOTATION;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_DESCRIPTION \u003d MESSAGE_COMMAND_FORMAT + \" : Search for task containing search term X\";","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_NO_TASKS_FOUND \u003d \"No matching tasks found! :( Try using another search term?\";","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_INVALID_FORMAT \u003d \"Please input a search term!\";","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_INTRODUCE_TASKS \u003d \"Here are the matching tasks in your list:\" + Ui.LS + \"%s\";","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    private final String searchTerm;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    public SearchTaskCommand(String searchTerm) {","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"        this.searchTerm \u003d searchTerm;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"        if (super.tasks.isEmpty()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(Ui.MESSAGE_NO_TASKS_YET);","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"        String listOfTasksInString \u003d super.tasks.getStringOfTasksWithMatchingTerm(this.searchTerm);","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"        if (listOfTasksInString.equals(Ui.EMPTY)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"            return new CommandResult(MESSAGE_NO_TASKS_FOUND);","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"        return new CommandResult(String.format(MESSAGE_INTRODUCE_TASKS, listOfTasksInString));","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"tlyi":35}},{"path":"src/main/java/duke/logic/exceptions/InvalidCommandFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.exceptions;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * Represents an error where the command format given by the user input is determined to be invalid.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"public class InvalidCommandFormatException extends Exception{","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"tlyi":7}},{"path":"src/main/java/duke/logic/exceptions/MissingTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.exceptions;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * Represents an error where the user input did not specify a description/name for the task.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" * Contains a fixed error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class MissingTaskDescriptionException extends Exception {","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    private static final String ERROR_MESSAGE \u003d \"Please specify a name for the task!\";","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public MissingTaskDescriptionException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"     * Returns the error message in String form.","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":21}},{"path":"src/main/java/duke/logic/exceptions/TaskAlreadyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.exceptions;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" * Represents an error where the task at the given task number to be marked as done has already been marked as done.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" * Contains a fixed error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"public class TaskAlreadyDoneException extends Exception{","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    private static final String ERROR_MESSAGE \u003d  \"Task has already been marked as done! Good job!\" + Ui.LS +","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"            \"Try marking another task as done! ^\u003d^\";","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public TaskAlreadyDoneException() {","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"     * Returns the error message in String form.","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"tlyi":25}},{"path":"src/main/java/duke/logic/exceptions/TaskListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.exceptions;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" * Represents an error where the user tries to access something in the task list but the list is currently empty.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" * Contains a fixed error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"public class TaskListEmptyException extends Exception {","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    private static final String ERROR_MESSAGE \u003d Ui.MESSAGE_NO_TASKS_YET;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    public TaskListEmptyException() {","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"     * Returns the error message in String form.","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":23}},{"path":"src/main/java/duke/logic/exceptions/TaskNumOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.exceptions;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * Represents an error where the user tries to access a task number that does not exist.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" * Contains a fixed error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class TaskNumOutOfBoundsException extends Exception {","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    private static final String ERROR_MESSAGE \u003d  \"Please input a valid task number from 1 to %d!\";","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public TaskNumOutOfBoundsException() {","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"     * Returns the error message in String form.","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"tlyi":21}},{"path":"src/main/java/duke/logic/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.logic.parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.AddDeadlineCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.AddEventCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.AddTodoCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.ByeCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.Command;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.CommandListCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.DeleteTaskCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.IncorrectCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.ListCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.MarkTaskAsDoneCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.SearchTaskCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"import duke.logic.exceptions.MissingTaskDescriptionException;","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":" * Parses user input to execute the appropriate commands.","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":" * Method of parsing commands partially adapted from https://github.com/se-edu/addressbook-level2","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"public class Parser {","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"     * Returns a String array where 0th index is command string and 1st index is the remaining parameters","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"     * Command string and parameter string is assumed to be separated by the first \" \" in input","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"     * If no parameters are provided in the input, 1st index will be set to EMPTY","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"     * @param input Raw user input string","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"     * @return String array [command, parameters]","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"    private String[] splitInputIntoCommandAndParams(String input) {","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"        String[] commandAndParams \u003d new String[2];","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"        final String[] splitInput \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"        //command string","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"        commandAndParams[0] \u003d splitInput[0];","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"        //param string, if not given, set to EMPTY for error handling","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"        commandAndParams[1] \u003d (splitInput.length \u003e\u003d 2) ? splitInput[1] : Ui.EMPTY;","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"        return commandAndParams;","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"     * Returns a String array where the 0th index is the task description and 1st index is the additional info (i.e date)","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"     * Description and info is assumed to be separated by the first \"/\" in input","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"     * If no description is provided, throw MissingTaskDescriptionException","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"     * If no additional info is provided, 1st index will be set to EMPTY","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"     * @param params Params string intended to be returned from splitInputIntoCommandAndParams(),","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"     *               thus assumed to be from a valid command.","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"     * @return String array [description, info]","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"     * @throws MissingTaskDescriptionException If no task description is provided","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"    private String[] splitParamsIntoDescriptionAndInfo(String params) throws MissingTaskDescriptionException {","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"        final String[] splitParams \u003d params.trim().split(\"/\", 2);","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"        String[] descriptionAndInfo \u003d new String[2];","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"        //description string","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"        descriptionAndInfo[0] \u003d splitParams[0].trim();","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"        if (descriptionAndInfo[0].equals(Ui.EMPTY)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"            throw new MissingTaskDescriptionException();","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"        //other info string, if not given, return EMPTY for error handling","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"        descriptionAndInfo[1] \u003d (splitParams.length \u003e\u003d 2) ? splitParams[1].trim() : Ui.EMPTY;","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"        return descriptionAndInfo;","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"     * Returns the date of the task in LocalDateTime form","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"     * Date string is assumed to be after the command prefix strings \"at\" or \"by\"","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"     * @param commandPrefix Prefix to extract date with (\"at\" or \"by\")","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"     * @param info String containing prefix and date","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"     * @return Date in LocalDateTime form","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"     * @throws InvalidCommandFormatException If invalid command prefix is given or no date is provided","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"     * @throws DateTimeParseException If date string is not in the expected pattern","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"    public static LocalDateTime extractDateIntoDateTime(String commandPrefix, String info) throws InvalidCommandFormatException, DateTimeParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"        LocalDateTime dateAndTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"        final String[] words \u003d info.split(\" \", 2);","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"        if (words[0].equals(commandPrefix) \u0026\u0026 words.length \u003e 1) {","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(Ui.DATE_TIME_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"            dateAndTime \u003d LocalDateTime.parse(words[1], formatter);","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"        return dateAndTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"tlyi"},"content":"    private Command parseAddTodo (String params) {","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"tlyi"},"content":"        if (params.trim().equals(Ui.EMPTY)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(AddTodoCommand.MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"tlyi"},"content":"        return new AddTodoCommand(params);","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"tlyi"},"content":"    private Command parseAddDeadline (String params) {","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"tlyi"},"content":"        final String[] descriptionAndInfo;","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"tlyi"},"content":"            descriptionAndInfo \u003d splitParamsIntoDescriptionAndInfo(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"tlyi"},"content":"            final String description \u003d descriptionAndInfo[0];","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"tlyi"},"content":"            final String info \u003d descriptionAndInfo[1];","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"tlyi"},"content":"            LocalDateTime dateAndTime \u003d extractDateIntoDateTime(AddDeadlineCommand.COMMAND_PREFIX, info);","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"tlyi"},"content":"            return new AddDeadlineCommand(description, dateAndTime);","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"tlyi"},"content":"        } catch (MissingTaskDescriptionException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(e.toString());","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"tlyi"},"content":"        } catch (InvalidCommandFormatException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(AddDeadlineCommand.MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"tlyi"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(Ui.MESSAGE_ERROR_DATE_FORMAT_WRONG);","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"tlyi"},"content":"    private Command parseAddEvent (String params) {","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"tlyi"},"content":"        final String[] descriptionAndInfo;","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"tlyi"},"content":"            descriptionAndInfo \u003d splitParamsIntoDescriptionAndInfo(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"tlyi"},"content":"            final String description \u003d descriptionAndInfo[0];","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"tlyi"},"content":"            final String info \u003d descriptionAndInfo[1];","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"tlyi"},"content":"            LocalDateTime dateAndTime \u003d extractDateIntoDateTime(AddEventCommand.COMMAND_PREFIX, info);","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"tlyi"},"content":"            return new AddEventCommand(description, dateAndTime);","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"tlyi"},"content":"        } catch (MissingTaskDescriptionException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(e.toString());","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"tlyi"},"content":"        } catch (InvalidCommandFormatException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":127,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(AddEventCommand.MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-26"},{"lineNumber":128,"author":{"gitId":"tlyi"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(Ui.MESSAGE_ERROR_DATE_FORMAT_WRONG);","lastModifiedDate":"2021-09-30"},{"lineNumber":130,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":132,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":133,"author":{"gitId":"tlyi"},"content":"    private Command parseMarkTaskAsDone (String params) {","lastModifiedDate":"2021-09-26"},{"lineNumber":134,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":135,"author":{"gitId":"tlyi"},"content":"            int taskNum \u003d Integer.parseInt(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"tlyi"},"content":"            return new MarkTaskAsDoneCommand(taskNum);","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"tlyi"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(MarkTaskAsDoneCommand.MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"tlyi"},"content":"    private Command parseDeleteTask (String params) {","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":144,"author":{"gitId":"tlyi"},"content":"            int taskNum \u003d Integer.parseInt(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":145,"author":{"gitId":"tlyi"},"content":"            return new DeleteTaskCommand(taskNum);","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"tlyi"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":147,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(DeleteTaskCommand.MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-26"},{"lineNumber":148,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":149,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":150,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":151,"author":{"gitId":"tlyi"},"content":"    private Command parseSearchTask (String params) {","lastModifiedDate":"2021-09-28"},{"lineNumber":152,"author":{"gitId":"tlyi"},"content":"        if (params.trim().equals(Ui.EMPTY)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":153,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(SearchTaskCommand.MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-09-28"},{"lineNumber":154,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":155,"author":{"gitId":"tlyi"},"content":"        return new SearchTaskCommand(params);","lastModifiedDate":"2021-09-28"},{"lineNumber":156,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":158,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":159,"author":{"gitId":"tlyi"},"content":"     * Returns the correct command to be executed depending on user input","lastModifiedDate":"2021-09-26"},{"lineNumber":160,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":161,"author":{"gitId":"tlyi"},"content":"     * @param input Raw user input string","lastModifiedDate":"2021-09-26"},{"lineNumber":162,"author":{"gitId":"tlyi"},"content":"     * @return Command class representing the correct command to be executed","lastModifiedDate":"2021-09-30"},{"lineNumber":163,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":164,"author":{"gitId":"tlyi"},"content":"    public Command parseCommand(String input) {","lastModifiedDate":"2021-09-26"},{"lineNumber":165,"author":{"gitId":"tlyi"},"content":"        final String[] commandAndParams \u003d splitInputIntoCommandAndParams(input);","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"tlyi"},"content":"        final String commandWord \u003d commandAndParams[0];","lastModifiedDate":"2021-09-26"},{"lineNumber":167,"author":{"gitId":"tlyi"},"content":"        final String params \u003d commandAndParams[1];","lastModifiedDate":"2021-09-26"},{"lineNumber":168,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":169,"author":{"gitId":"tlyi"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-09-26"},{"lineNumber":170,"author":{"gitId":"tlyi"},"content":"        case AddTodoCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":171,"author":{"gitId":"tlyi"},"content":"            return parseAddTodo(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":172,"author":{"gitId":"tlyi"},"content":"        case AddDeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":173,"author":{"gitId":"tlyi"},"content":"            return parseAddDeadline(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":174,"author":{"gitId":"tlyi"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":175,"author":{"gitId":"tlyi"},"content":"            return parseAddEvent(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":176,"author":{"gitId":"tlyi"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":177,"author":{"gitId":"tlyi"},"content":"            return new ListCommand();","lastModifiedDate":"2021-09-26"},{"lineNumber":178,"author":{"gitId":"tlyi"},"content":"        case MarkTaskAsDoneCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":179,"author":{"gitId":"tlyi"},"content":"            return parseMarkTaskAsDone(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":180,"author":{"gitId":"tlyi"},"content":"        case DeleteTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":181,"author":{"gitId":"tlyi"},"content":"            return parseDeleteTask(params);","lastModifiedDate":"2021-09-26"},{"lineNumber":182,"author":{"gitId":"tlyi"},"content":"        case SearchTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-28"},{"lineNumber":183,"author":{"gitId":"tlyi"},"content":"            return parseSearchTask(params);","lastModifiedDate":"2021-09-28"},{"lineNumber":184,"author":{"gitId":"tlyi"},"content":"        case ByeCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":185,"author":{"gitId":"tlyi"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-09-26"},{"lineNumber":186,"author":{"gitId":"tlyi"},"content":"        case CommandListCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-26"},{"lineNumber":187,"author":{"gitId":"tlyi"},"content":"            return new CommandListCommand();","lastModifiedDate":"2021-09-26"},{"lineNumber":188,"author":{"gitId":"tlyi"},"content":"        default:","lastModifiedDate":"2021-09-26"},{"lineNumber":189,"author":{"gitId":"tlyi"},"content":"            return new IncorrectCommand(Ui.MESSAGE_ERROR_COMMAND_DOES_NOT_EXIST);","lastModifiedDate":"2021-09-30"},{"lineNumber":190,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":191,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":192,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":193,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"},{"lineNumber":194,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":194}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.storage.exceptions.CannotReadFromFileException;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.storage.exceptions.UnableToWriteToFileException;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"import java.io.File;","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"import java.util.List;","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":" * Handles all read/write operations to the storage file containing user data of Tasks.","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"public class Storage {","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    /** File path to store task data */","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    private static final String DATA_FILE_PATH \u003d \"./data/dude.txt\";","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    private static TaskListEncoder taskListEncoder;","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    private static TaskListDecoder taskListDecoder;","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public Storage() {","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        this.taskListEncoder \u003d new TaskListEncoder();","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"        this.taskListDecoder \u003d new TaskListDecoder();","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"     * Create data file if it does not exist.","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"     * As a precaution, this function should be run before every read/write operation to the file.","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"     * @throws UnableToWriteToFileException If system does not have permission to write to this directory/file","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    private void createFileIfDoesNotExist() throws UnableToWriteToFileException{","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"        File f \u003d new File(DATA_FILE_PATH);","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"            f.getParentFile().mkdirs(); //Make the directory for the file if it does not exist","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"            if (!f.exists()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"                f.createNewFile();","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"           throw new UnableToWriteToFileException();","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"     * Rewrite file with updated list of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"     * @param tasks TaskList containing all the tasks to be written into the storage file","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"     * @throws UnableToWriteToFileException If system does not have permission to write to this directory/file","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"    public void rewriteTaskListToFile(TaskList tasks) throws UnableToWriteToFileException {","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"        createFileIfDoesNotExist();","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"            FileWriter fw \u003d new FileWriter(DATA_FILE_PATH);","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"            List\u003cString\u003e encodedTaskList \u003d new TaskListEncoder().encodeTaskList(tasks);","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"            for (String encodedTask : encodedTaskList) {","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"                fw.write(encodedTask + Ui.LS);","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"            fw.close();","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"           throw new UnableToWriteToFileException();","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"     * Load tasks from file into TaskList","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"     * @return TaskList containing tasks stored in the storage file","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"     * @throws UnableToWriteToFileException If system does not have permission to write to this directory/file (To create the storage file if it does not exist)","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"     * @throws CannotReadFromFileException If system does not have permission to read from this directory/file","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"    public TaskList loadTasksFromFile() throws UnableToWriteToFileException, CannotReadFromFileException {","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"        createFileIfDoesNotExist();","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"        File f \u003d new File(DATA_FILE_PATH);","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"        final List\u003cString\u003e encodedTaskList \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"                encodedTaskList.add(s.nextLine());","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"            return taskListDecoder.decodeTaskList(encodedTaskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"            throw new CannotReadFromFileException();","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"tlyi":93}},{"path":"src/main/java/duke/storage/TaskListDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Event;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"import duke.storage.exceptions.InvalidStorageDataException;","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"import java.util.List;","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":" * Decodes the data from the storage file into corresponding Tasks.","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"public class TaskListDecoder {","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"     * Decodes the data from the storage file into a TaskList","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     * @param encodedTaskList List of String from the storage file where each index contains an encoded task","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     * @return TaskList List of tasks represented in the TaskList class customised for the application","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    public static TaskList decodeTaskList(List\u003cString\u003e encodedTaskList) {","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"        final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"        for (String encodedTask : encodedTaskList) {","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"            try {","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"                taskList.add(decodeTaskFromString(encodedTask));","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"            } catch (InvalidStorageDataException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"                Ui.showMessageFramedWithDivider(e.toString());","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"                Ui.showMessageFramedWithDivider(new InvalidStorageDataException(encodedTask).toString());","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"        return new TaskList(taskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"     * Decodes each line of data from the storage file into a specific Task","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"     * @param encodedTask String representing an encoded task","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"     * @return Subclass of Task that represents the specific task that is encoded","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"     * @throws InvalidStorageDataException If encoded task string is of invalid syntax","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"     * @throws DateTimeParseException If encoded date and time string is of invalid syntax","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"    private static Task decodeTaskFromString(String encodedTask) throws InvalidStorageDataException, DateTimeParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"        final Task task;","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"        final boolean isDone;","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"        final String[] words \u003d encodedTask.split(\" \\\\| \"); //Length \u003d 3 for Todo; 4 for Deadline, Event","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"        switch (words[1]) {","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"        case \"0\":","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"            isDone \u003d false;","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"        case \"1\":","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"            isDone \u003d true;","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"        default: //if second letter (done status) is not 0 or 1","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"            throw new InvalidStorageDataException(encodedTask);","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"        switch (words[0]) {","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"        case Task.TODO_ACRONYM:","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"            return new Todo(words[2], isDone);","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"        case Task.DEADLINE_ACRONYM:","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"            return new Deadline(words[2], parseDateTimeFromString(words[3]), isDone);","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"        case Task.EVENT_ACRONYM:","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"            return new Event(words[2], parseDateTimeFromString(words[3]), isDone);","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"        default: //if first letter is not any of the valid task acronyms","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"            throw new InvalidStorageDataException(encodedTask);","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"     * Parses date and time string from the storage file into a LocalDateTime object","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"     * @param dateAndTimeString Date and time represented in string","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"     * @return LocalDateTime object containing date and time details","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"     * @throws DateTimeParseException If encoded date and time string is of invalid syntax","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"    private static LocalDateTime parseDateTimeFromString(String dateAndTimeString) throws DateTimeParseException {","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"        final DateTimeFormatter formatter \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"        return LocalDateTime.parse(dateAndTimeString);","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"tlyi":91}},{"path":"src/main/java/duke/storage/TaskListEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"import java.util.List;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":" * Encodes Task from the application into the appropriate syntax for storing into the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"public class TaskListEncoder {","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"     * Encodes task list into String representation for the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"     * @param tasks TaskList containing tasks to be encoded","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"     * @return List\u003cString\u003e where each index is an encoded task corresponding to its index in the TaskList","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public List\u003cString\u003e encodeTaskList(TaskList tasks) {","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"        final List\u003cString\u003e encodedTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"        for (Task task : tasks.getTasks()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"            encodedTaskList.add(task.toTextFileString());","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"        return encodedTaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"tlyi":30}},{"path":"src/main/java/duke/storage/exceptions/CannotReadFromFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.storage.exceptions;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" * Represents an error where the system is unable to read the data file due to insufficient permissions.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" * Contains a fixed error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"public class CannotReadFromFileException extends Exception {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    private static final String ERROR_MESSAGE \u003d \"Error! System does not have sufficient permission to read data file?!\" + Ui.LS","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"            + \"Dude is unable to restore your task data. :(\";","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public CannotReadFromFileException() {","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"     * Returns the error message in String form.","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"tlyi":24}},{"path":"src/main/java/duke/storage/exceptions/InvalidStorageDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.storage.exceptions;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" * Represents an error in decoding the data from the storage file into its corresponding Task due to invalid syntax.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" * This is a possible error if the user edits the storage file by themselves without following the correct syntax.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" * Contains a fixed error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"public class InvalidStorageDataException extends Exception {","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    private static String errorMessage \u003d","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"            \"Error restoring data due to invalid syntax! This line of data will not be added:\" + Ui.LS","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"            + \"%s\";","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    private String invalidEncodedTask;","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    public InvalidStorageDataException(String encodedTask) {","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"        super(String.format(errorMessage, encodedTask));","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        this.invalidEncodedTask \u003d encodedTask;","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    };","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"     * Returns the error message in String form along with the invalid line of data.","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"        return String.format(errorMessage, invalidEncodedTask);","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"tlyi":29}},{"path":"src/main/java/duke/storage/exceptions/UnableToWriteToFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.storage.exceptions;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" * Represents an error where the system is unable to write to the data file due to insufficient permissions.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":" * Contains a fixed error message.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"public class UnableToWriteToFileException extends Exception {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    private static final String ERROR_MESSAGE \u003d \"Error! System does not have sufficient permission to write to data file?!\"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"            + Ui.LS + \"Dude is unable to store your task data locally. :(\";","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public UnableToWriteToFileException() {","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"     * Returns the error message in String form along with the invalid line of data.","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"        return super.toString();","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"tlyi":26}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.AddDeadlineCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.AddEventCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.AddTodoCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.ByeCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.CommandListCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.DeleteTaskCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.ListCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.MarkTaskAsDoneCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"import duke.logic.commands.SearchTaskCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":" * This class handles all text UI to be displayed to user.","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"public class Ui {","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    //Commonly used message formats in UI","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    public static final String DIVIDER \u003d \"_________________________________________________________________________________\";","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    public static final String LS \u003d System.lineSeparator();","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    public static final String QUOTATION \u003d \"\\\"\";","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    public static final String EMPTY \u003d \"\";","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    public static final String DATE_TIME_FORMAT \u003d \"dd/MM/yyyy HHmm\";","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public static final String DATE_TIME_FORMAT_TO_PRINT \u003d \"MMM d yyyy h.mma\";","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_WELCOME_DUDE \u003d \"Hello! I\u0027m Dude ^__^\";","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_BYE \u003d \"Bye! Hope to see you again soon! ~^u^~ \";","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_NO_TASKS_YET \u003d \"No tasks yet, add a task now! \u003eu\u003c\";","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_INTRODUCE_TASKS \u003d \"These are your current tasks:\" + LS + \"%s\";","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_TASK_ADDED \u003d  \"Okie! Added to list:\" + LS + \"%1$s\" + LS + \"Current number of tasks: %2$d\";","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_COMMAND_LIST \u003d \"Commands:\" + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"            + AddTodoCommand.MESSAGE_COMMAND_DESCRIPTION + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"            + AddDeadlineCommand.MESSAGE_COMMAND_DESCRIPTION + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"            + AddEventCommand.MESSAGE_COMMAND_DESCRIPTION + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"            + ListCommand.MESSAGE_COMMAND_DESCRIPTION + \" : See lists of tasks\" + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"            + MarkTaskAsDoneCommand.MESSAGE_COMMAND_DESCRIPTION + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"            + DeleteTaskCommand.MESSAGE_COMMAND_DESCRIPTION + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"            + SearchTaskCommand.MESSAGE_COMMAND_DESCRIPTION + LS","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"            + CommandListCommand.MESSAGE_COMMAND_DESCRIPTION + LS","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"            + ByeCommand.MESSAGE_COMMAND_DESCRIPTION;","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_ERROR_COMMAND_DOES_NOT_EXIST \u003d \"Command does not exist @_@\" + LS + \"Lost? Type \"","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"            + CommandListCommand.MESSAGE_COMMAND_FORMAT + \" to see the list of commands that Dude understands!\";","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    public static final String MESSAGE_ERROR_DATE_FORMAT_WRONG \u003d \"Please input the date and time in the format \" +","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"            QUOTATION + DATE_TIME_FORMAT + QUOTATION + \"!\" + LS + \"E.g: 12/12/2012 2359\";","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_DATA_LOADED \u003d \"Your old data has been successfully loaded!\" + LS","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"            + \"You have %d tasks. Type \" + ListCommand.MESSAGE_COMMAND_FORMAT + \" to see current tasks!\";","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"    private Scanner scanner;","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"    public Ui() {","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"    public String getUserInput() {","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"     * Prints lines of messages. Can take in variable number of arguments.","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"     * @param lines Strings to be printed, each on a new line","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"    public static void showMessage(String... lines) {","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"            System.out.println(line);","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"     * Prints lines of messages framed by divider. Can take in variable number of arguments.","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"     * @param lines Strings to be printed, each on a new line","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"    public static void showMessageFramedWithDivider(String... lines) {","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"            System.out.println(line);","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"     * Prints Welcome message and list of commands.","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"    public static void showWelcome() {","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"        showMessageFramedWithDivider(MESSAGE_WELCOME_DUDE, DIVIDER, MESSAGE_COMMAND_LIST);","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"tlyi"},"content":"     * Prints Goodbye message","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"tlyi"},"content":"    public static void showBye() {","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"tlyi"},"content":"        showMessageFramedWithDivider(MESSAGE_BYE);","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"tlyi"},"content":"     * Prints message to user to indicate that tasks from storage file has been loaded, along with the","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"tlyi"},"content":"     * current number of tasks.","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"tlyi"},"content":"     * @param tasks TaskList loaded from storage file","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"tlyi"},"content":"    public static void showTasksLoaded(TaskList tasks) {","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"tlyi"},"content":"        showMessage(String.format(MESSAGE_DATA_LOADED, tasks.getNumTasks()), DIVIDER);","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tlyi":110}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"no such command","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"todo this is a todo item","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"deadline no date","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"deadline wrong prefix /at boo","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"deadline prefix with no date /by","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"deadline ip /by thurs night","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"event no date","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"event wrong prefix /by 5pm","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"event prefix with no date /at","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"event 2113t /at fri 2pm","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"done 5","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"done -5","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"done 0","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"done 2","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"done 3","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"commands","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tlyi":20}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"tlyi":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"tlyi":2}}]
