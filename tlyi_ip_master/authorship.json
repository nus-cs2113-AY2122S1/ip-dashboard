[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks that need to be done before a specific date/time.","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":" * E.g: submit iP by thurs 2359","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"    protected String deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"    protected static final String DEADLINE_LOGO \u003d \"[D]\";","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        setDeadline(deadline);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public String getDeadline() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"        return deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    public void setDeadline(String deadline) {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"     * Returns Deadline task formatted in the form \"[D][ ] description (by: deadline)\"","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Event task string","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"        return DEADLINE_LOGO + super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":31}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * This class is the main class of the Dude bot.","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"    //Commands","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_DEADLINE_PREFIX \u003d \"by\";","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_EVENT_PREFIX \u003d \"at\";","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_COMMAND_LIST \u003d \"commands\";","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    //Commonly used message formats in UI","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________________________\";","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    private static final String LS \u003d System.lineSeparator();","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    private static final String QUOTATION \u003d \"\\\"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    private static final String EMPTY \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_WELCOME_DUDE \u003d \"Hello! I\u0027m Dude ^__^\";","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_BYE \u003d \"Bye! Hope to see you again soon! ~^u^~ \";","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_NO_TASKS_YET \u003d \"No tasks yet, add a task now!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_INTRODUCE_TASKS \u003d \"These are your current tasks:\";","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_TODO_FORMAT \u003d QUOTATION + COMMAND_TODO + \" X\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_DEADLINE_FORMAT \u003d QUOTATION + COMMAND_DEADLINE + \" X /by Y\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_EVENT_FORMAT \u003d QUOTATION + COMMAND_EVENT + \" X /at Y\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_LIST_FORMAT \u003d QUOTATION + COMMAND_LIST + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_DONE_FORMAT \u003d QUOTATION + COMMAND_DONE + \" X\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_BYE_FORMAT \u003d QUOTATION + COMMAND_BYE + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_LIST \u003d \"Commands:\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_TODO_FORMAT + \" : Add task X\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_DEADLINE_FORMAT + \" : Add task X with deadline Y\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_EVENT_FORMAT + \" : Add event X with date/time details Y\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_LIST_FORMAT + \" : See lists of tasks\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_DONE_FORMAT + \" : Mark task number X as done\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_BYE_FORMAT + \" : Stop Dude :(\";","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_NO_DESCRIPTION \u003d \"Please specify a name for the task!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_COMMAND_DOES_NOT_EXIST \u003d \"Command does not exist @_@\";","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_SUGGEST_COMMAND_LIST \u003d \"PS: Forgot the commands? Type \"","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"            + QUOTATION + COMMAND_COMMAND_LIST + QUOTATION + \"!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_COMMAND_DONE_FORMAT \u003d \"Invalid format! Please input a task number to be marked as done, \"","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"            + LS + \"in the format \" + MESSAGE_COMMAND_DONE_FORMAT + \", where X is the task number!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_COMMAND_DEADLINE_FORMAT \u003d \"Invalid format! Please input a deadline, \"","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"            + LS + \"in the format \" + MESSAGE_COMMAND_DEADLINE_FORMAT + \", where X is the task and Y is the deadline!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_COMMAND_EVENT_FORMAT \u003d \"Invalid format! Please input a date, \"","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"            + LS + \"in the format \" + MESSAGE_COMMAND_EVENT_FORMAT + \", where X is the event and Y is the date!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"    /** List of all tasks (Event, Deadline, Todo all inherit \u0027Task\u0027 class) */","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"    private static Task[] tasks \u003d new Task[100];","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"     * Prints lines of messages. Can take in variable number of arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"     * @param lines Strings to be printed, each on a new line","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"    public static void showMessage(String... lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"            System.out.println(line);","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"     * Prints lines of messages framed by divider. Can take in variable number of arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"     * @param lines Strings to be printed, each on a new line","lastModifiedDate":"2021-09-02"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"    public static void showMessageFramedWithDivider(String... lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"            System.out.println(line);","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"     * Prints list of commands","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"    public static void showListOfCommands() {","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"        showMessageFramedWithDivider(MESSAGE_COMMAND_LIST);","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"     * Prints Welcome message and list of commands","lastModifiedDate":"2021-09-02"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"    public static void welcome() {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"tlyi"},"content":"        showMessageFramedWithDivider(MESSAGE_WELCOME_DUDE);","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"tlyi"},"content":"        showListOfCommands();","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"tlyi"},"content":"     * Prints Goodbye message and exits the program.","lastModifiedDate":"2021-09-02"},{"lineNumber":98,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"tlyi"},"content":"    public static void exit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"tlyi"},"content":"        showMessageFramedWithDivider(MESSAGE_BYE);","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"tlyi"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":103,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"tlyi"},"content":"     * Prints current tasks","lastModifiedDate":"2021-09-02"},{"lineNumber":106,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":107,"author":{"gitId":"tlyi"},"content":"    public static void printTasks() {","lastModifiedDate":"2021-08-31"},{"lineNumber":108,"author":{"gitId":"tlyi"},"content":"        if (Task.getNumTasks() \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_NO_TASKS_YET);","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"tlyi"},"content":"            showMessage(DIVIDER, MESSAGE_INTRODUCE_TASKS);","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"tlyi"},"content":"            for (int i \u003d 1; i \u003c\u003d Task.getNumTasks(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"tlyi"},"content":"                System.out.println(i + \". \" + tasks[i]);","lastModifiedDate":"2021-08-31"},{"lineNumber":114,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":115,"author":{"gitId":"tlyi"},"content":"            showMessage(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":116,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":117,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":118,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":119,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":120,"author":{"gitId":"tlyi"},"content":"     * Returns a String array where 0th index is command string and 1st index is the remaining parameters","lastModifiedDate":"2021-09-02"},{"lineNumber":121,"author":{"gitId":"tlyi"},"content":"     * Command string and parameter string is assumed to be separated by the first \" \" in input","lastModifiedDate":"2021-09-02"},{"lineNumber":122,"author":{"gitId":"tlyi"},"content":"     * If no parameters are provided in the input, 1st index will be set to EMPTY","lastModifiedDate":"2021-09-02"},{"lineNumber":123,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":124,"author":{"gitId":"tlyi"},"content":"     * @param input Raw user input string","lastModifiedDate":"2021-09-02"},{"lineNumber":125,"author":{"gitId":"tlyi"},"content":"     * @return String array [command, parameters]","lastModifiedDate":"2021-09-02"},{"lineNumber":126,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":127,"author":{"gitId":"tlyi"},"content":"    public static String[] splitInputIntoCommandAndParams(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":128,"author":{"gitId":"tlyi"},"content":"        String[] commandAndParams \u003d new String[2];","lastModifiedDate":"2021-08-31"},{"lineNumber":129,"author":{"gitId":"tlyi"},"content":"        final String[] splitInput \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":130,"author":{"gitId":"tlyi"},"content":"        //command string","lastModifiedDate":"2021-08-31"},{"lineNumber":131,"author":{"gitId":"tlyi"},"content":"        commandAndParams[0] \u003d splitInput[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":132,"author":{"gitId":"tlyi"},"content":"        //param string, if not given, set to EMPTY for error handling","lastModifiedDate":"2021-09-02"},{"lineNumber":133,"author":{"gitId":"tlyi"},"content":"        commandAndParams[1] \u003d (splitInput.length \u003e\u003d 2) ? splitInput[1] : EMPTY;","lastModifiedDate":"2021-08-31"},{"lineNumber":134,"author":{"gitId":"tlyi"},"content":"        return commandAndParams;","lastModifiedDate":"2021-08-31"},{"lineNumber":135,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":136,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":137,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":138,"author":{"gitId":"tlyi"},"content":"     * Returns a String array where the 0th index is the task description and 1st index is the additional info (i.e date)","lastModifiedDate":"2021-09-02"},{"lineNumber":139,"author":{"gitId":"tlyi"},"content":"     * Description and info is assumed to be separated by the first \"/\" in input","lastModifiedDate":"2021-09-02"},{"lineNumber":140,"author":{"gitId":"tlyi"},"content":"     * If no additional info is provided, 1st index will be set to EMPTY","lastModifiedDate":"2021-09-02"},{"lineNumber":141,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":142,"author":{"gitId":"tlyi"},"content":"     * @param params Params string intended to be returned from splitInputIntoCommandAndParams(),","lastModifiedDate":"2021-09-02"},{"lineNumber":143,"author":{"gitId":"tlyi"},"content":"     *               thus assumed to be from a valid command.","lastModifiedDate":"2021-09-02"},{"lineNumber":144,"author":{"gitId":"tlyi"},"content":"     * @return String array [description, info]","lastModifiedDate":"2021-09-02"},{"lineNumber":145,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":146,"author":{"gitId":"tlyi"},"content":"    public static String[] splitParamsIntoDescriptionAndInfo(String params) {","lastModifiedDate":"2021-08-31"},{"lineNumber":147,"author":{"gitId":"tlyi"},"content":"        final String[] splitParams \u003d params.trim().split(\"/\");","lastModifiedDate":"2021-08-31"},{"lineNumber":148,"author":{"gitId":"tlyi"},"content":"        String[] descriptionAndInfo \u003d new String[2];","lastModifiedDate":"2021-08-31"},{"lineNumber":149,"author":{"gitId":"tlyi"},"content":"        //description string","lastModifiedDate":"2021-08-31"},{"lineNumber":150,"author":{"gitId":"tlyi"},"content":"        descriptionAndInfo[0] \u003d splitParams[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":151,"author":{"gitId":"tlyi"},"content":"        //other info string, if not given, return EMPTY for error handling","lastModifiedDate":"2021-08-31"},{"lineNumber":152,"author":{"gitId":"tlyi"},"content":"        descriptionAndInfo[1] \u003d (splitParams.length \u003e\u003d 2) ? splitParams[1] : EMPTY;","lastModifiedDate":"2021-08-31"},{"lineNumber":153,"author":{"gitId":"tlyi"},"content":"        return descriptionAndInfo;","lastModifiedDate":"2021-08-31"},{"lineNumber":154,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":155,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":156,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":157,"author":{"gitId":"tlyi"},"content":"     * Returns the date of the task in String form","lastModifiedDate":"2021-09-02"},{"lineNumber":158,"author":{"gitId":"tlyi"},"content":"     * Date is assumed to be after the command prefix strings \"at\" or \"by\"","lastModifiedDate":"2021-09-02"},{"lineNumber":159,"author":{"gitId":"tlyi"},"content":"     * If invalid command prefix is given or no date is provided, returns EMPTY","lastModifiedDate":"2021-09-02"},{"lineNumber":160,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":161,"author":{"gitId":"tlyi"},"content":"     * @param commandPrefix Prefix to extract date with","lastModifiedDate":"2021-09-02"},{"lineNumber":162,"author":{"gitId":"tlyi"},"content":"     * @param info String containing prefix and date","lastModifiedDate":"2021-09-02"},{"lineNumber":163,"author":{"gitId":"tlyi"},"content":"     * @return Date in String form","lastModifiedDate":"2021-09-02"},{"lineNumber":164,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":165,"author":{"gitId":"tlyi"},"content":"    public static String extractDate(String commandPrefix, String info) {","lastModifiedDate":"2021-09-02"},{"lineNumber":166,"author":{"gitId":"tlyi"},"content":"        final String[] words \u003d info.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":167,"author":{"gitId":"tlyi"},"content":"        if (!words[0].equals(commandPrefix) || words.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-02"},{"lineNumber":168,"author":{"gitId":"tlyi"},"content":"            return EMPTY;","lastModifiedDate":"2021-08-31"},{"lineNumber":169,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":170,"author":{"gitId":"tlyi"},"content":"            return words[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":171,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":172,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":173,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":174,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":175,"author":{"gitId":"tlyi"},"content":"     * Executes the correct command depending on user input","lastModifiedDate":"2021-09-02"},{"lineNumber":176,"author":{"gitId":"tlyi"},"content":"     * Prints an error if command does not exist","lastModifiedDate":"2021-09-02"},{"lineNumber":177,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":178,"author":{"gitId":"tlyi"},"content":"     * @param input Raw user input string","lastModifiedDate":"2021-09-02"},{"lineNumber":179,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":180,"author":{"gitId":"tlyi"},"content":"    public static void manageUserInput(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":181,"author":{"gitId":"tlyi"},"content":"        final String[] commandAndParams \u003d splitInputIntoCommandAndParams(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":182,"author":{"gitId":"tlyi"},"content":"        final String commandWord \u003d commandAndParams[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":183,"author":{"gitId":"tlyi"},"content":"        final String params \u003d commandAndParams[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":184,"author":{"gitId":"tlyi"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-08-31"},{"lineNumber":185,"author":{"gitId":"tlyi"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2021-08-31"},{"lineNumber":186,"author":{"gitId":"tlyi"},"content":"            addTask(COMMAND_TODO, params);","lastModifiedDate":"2021-08-31"},{"lineNumber":187,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":188,"author":{"gitId":"tlyi"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-08-31"},{"lineNumber":189,"author":{"gitId":"tlyi"},"content":"            addTask(COMMAND_DEADLINE, params);","lastModifiedDate":"2021-08-31"},{"lineNumber":190,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":191,"author":{"gitId":"tlyi"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-08-31"},{"lineNumber":192,"author":{"gitId":"tlyi"},"content":"            addTask(COMMAND_EVENT, params);","lastModifiedDate":"2021-08-31"},{"lineNumber":193,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":194,"author":{"gitId":"tlyi"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-08-31"},{"lineNumber":195,"author":{"gitId":"tlyi"},"content":"            printTasks();","lastModifiedDate":"2021-08-31"},{"lineNumber":196,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":197,"author":{"gitId":"tlyi"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-08-31"},{"lineNumber":198,"author":{"gitId":"tlyi"},"content":"            markTaskAsDone(params);","lastModifiedDate":"2021-08-31"},{"lineNumber":199,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":200,"author":{"gitId":"tlyi"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2021-08-31"},{"lineNumber":201,"author":{"gitId":"tlyi"},"content":"            exit();","lastModifiedDate":"2021-08-31"},{"lineNumber":202,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":203,"author":{"gitId":"tlyi"},"content":"        case COMMAND_COMMAND_LIST:","lastModifiedDate":"2021-08-31"},{"lineNumber":204,"author":{"gitId":"tlyi"},"content":"            showListOfCommands();","lastModifiedDate":"2021-08-31"},{"lineNumber":205,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":206,"author":{"gitId":"tlyi"},"content":"        default:","lastModifiedDate":"2021-08-31"},{"lineNumber":207,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_COMMAND_DOES_NOT_EXIST, MESSAGE_SUGGEST_COMMAND_LIST);","lastModifiedDate":"2021-08-31"},{"lineNumber":208,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":209,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":210,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":211,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":212,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":213,"author":{"gitId":"tlyi"},"content":"     * Creates and adds specific type of task to the Task array","lastModifiedDate":"2021-09-02"},{"lineNumber":214,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":215,"author":{"gitId":"tlyi"},"content":"     * @param typeOfTask Guaranteed to be either COMMAND_TODO, COMMAND_DEADLINE, or COMMAND_EVENT","lastModifiedDate":"2021-09-02"},{"lineNumber":216,"author":{"gitId":"tlyi"},"content":"     * @param params String containing description and other info of the task","lastModifiedDate":"2021-09-02"},{"lineNumber":217,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":218,"author":{"gitId":"tlyi"},"content":"    public static void addTask(String typeOfTask, String params) {","lastModifiedDate":"2021-08-31"},{"lineNumber":219,"author":{"gitId":"tlyi"},"content":"        final String[] descriptionAndInfo \u003d splitParamsIntoDescriptionAndInfo(params);","lastModifiedDate":"2021-08-31"},{"lineNumber":220,"author":{"gitId":"tlyi"},"content":"        final String description \u003d descriptionAndInfo[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":221,"author":{"gitId":"tlyi"},"content":"        final String info \u003d descriptionAndInfo[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":222,"author":{"gitId":"tlyi"},"content":"        if (description.equals(EMPTY)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":223,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_NO_DESCRIPTION);","lastModifiedDate":"2021-08-31"},{"lineNumber":224,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":225,"author":{"gitId":"tlyi"},"content":"            switch (typeOfTask){","lastModifiedDate":"2021-08-31"},{"lineNumber":226,"author":{"gitId":"tlyi"},"content":"            case COMMAND_TODO:","lastModifiedDate":"2021-08-31"},{"lineNumber":227,"author":{"gitId":"tlyi"},"content":"                Todo todo \u003d new Todo(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":228,"author":{"gitId":"tlyi"},"content":"                tasks[Task.getNumTasks()] \u003d todo;","lastModifiedDate":"2021-08-31"},{"lineNumber":229,"author":{"gitId":"tlyi"},"content":"                showMessageFramedWithDivider(\"Added to list: \" , todo.toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":230,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":231,"author":{"gitId":"tlyi"},"content":"            case COMMAND_DEADLINE:","lastModifiedDate":"2021-08-31"},{"lineNumber":232,"author":{"gitId":"tlyi"},"content":"                String dateDeadline \u003d extractDate(COMMAND_DEADLINE_PREFIX, info);","lastModifiedDate":"2021-08-31"},{"lineNumber":233,"author":{"gitId":"tlyi"},"content":"                if (dateDeadline.equals(EMPTY)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":234,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_DEADLINE_FORMAT);","lastModifiedDate":"2021-08-31"},{"lineNumber":235,"author":{"gitId":"tlyi"},"content":"                } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":236,"author":{"gitId":"tlyi"},"content":"                    Deadline deadline \u003d new Deadline(description, dateDeadline);","lastModifiedDate":"2021-08-31"},{"lineNumber":237,"author":{"gitId":"tlyi"},"content":"                    tasks[Task.getNumTasks()] \u003d deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":238,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(\"Added to list: \", deadline.toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":239,"author":{"gitId":"tlyi"},"content":"                }","lastModifiedDate":"2021-08-31"},{"lineNumber":240,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":241,"author":{"gitId":"tlyi"},"content":"            case COMMAND_EVENT:","lastModifiedDate":"2021-08-31"},{"lineNumber":242,"author":{"gitId":"tlyi"},"content":"                String dateEvent \u003d extractDate(COMMAND_EVENT_PREFIX, info);","lastModifiedDate":"2021-08-31"},{"lineNumber":243,"author":{"gitId":"tlyi"},"content":"                if (dateEvent.equals(EMPTY)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":244,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_EVENT_FORMAT);","lastModifiedDate":"2021-08-31"},{"lineNumber":245,"author":{"gitId":"tlyi"},"content":"                } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":246,"author":{"gitId":"tlyi"},"content":"                    Event event \u003d new Event(description, dateEvent);","lastModifiedDate":"2021-08-31"},{"lineNumber":247,"author":{"gitId":"tlyi"},"content":"                    tasks[Task.getNumTasks()] \u003d event;","lastModifiedDate":"2021-08-31"},{"lineNumber":248,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(\"Added to list: \", event.toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":249,"author":{"gitId":"tlyi"},"content":"                }","lastModifiedDate":"2021-08-31"},{"lineNumber":250,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":251,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":252,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":253,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":254,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":255,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":256,"author":{"gitId":"tlyi"},"content":"     * Mark a specific task as done","lastModifiedDate":"2021-09-02"},{"lineNumber":257,"author":{"gitId":"tlyi"},"content":"     * If task number is not provided or invalid, prints an error","lastModifiedDate":"2021-09-02"},{"lineNumber":258,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":259,"author":{"gitId":"tlyi"},"content":"     * @param params String in the format \"done X\", where X is supposed to be the task number","lastModifiedDate":"2021-09-02"},{"lineNumber":260,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":261,"author":{"gitId":"tlyi"},"content":"    public static void markTaskAsDone(String params) {","lastModifiedDate":"2021-08-31"},{"lineNumber":262,"author":{"gitId":"tlyi"},"content":"        if (params.equals(EMPTY)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":263,"author":{"gitId":"tlyi"},"content":"            //error if user inputs only \"done\" with no number behind","lastModifiedDate":"2021-08-24"},{"lineNumber":264,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_DONE_FORMAT);","lastModifiedDate":"2021-08-31"},{"lineNumber":265,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":266,"author":{"gitId":"tlyi"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":267,"author":{"gitId":"tlyi"},"content":"                int taskNum \u003d Integer.parseInt(params);","lastModifiedDate":"2021-08-31"},{"lineNumber":268,"author":{"gitId":"tlyi"},"content":"                if (Task.getNumTasks() \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":269,"author":{"gitId":"tlyi"},"content":"                    //error if user does not have any tasks to be marked completed","lastModifiedDate":"2021-08-25"},{"lineNumber":270,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(MESSAGE_NO_TASKS_YET);","lastModifiedDate":"2021-08-31"},{"lineNumber":271,"author":{"gitId":"tlyi"},"content":"                } else if (taskNum \u003e Task.getNumTasks() || taskNum \u003c 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":272,"author":{"gitId":"tlyi"},"content":"                    //error if user inputs a task number that does not exist","lastModifiedDate":"2021-08-24"},{"lineNumber":273,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(\"Please input a valid task number from 1 to \" + Task.getNumTasks() + \"!\");","lastModifiedDate":"2021-08-31"},{"lineNumber":274,"author":{"gitId":"tlyi"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":275,"author":{"gitId":"tlyi"},"content":"                    showMessage(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":276,"author":{"gitId":"tlyi"},"content":"                    tasks[taskNum].markAsDone();","lastModifiedDate":"2021-08-31"},{"lineNumber":277,"author":{"gitId":"tlyi"},"content":"                    showMessage(tasks[taskNum].toString(), DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":278,"author":{"gitId":"tlyi"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":279,"author":{"gitId":"tlyi"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":280,"author":{"gitId":"tlyi"},"content":"                //error if user did not input a valid integer for task number","lastModifiedDate":"2021-08-24"},{"lineNumber":281,"author":{"gitId":"tlyi"},"content":"               showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_DONE_FORMAT);","lastModifiedDate":"2021-08-31"},{"lineNumber":282,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":283,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":284,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":285,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":286,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":287,"author":{"gitId":"tlyi"},"content":"     * Continuously processes user inputs","lastModifiedDate":"2021-09-02"},{"lineNumber":288,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":289,"author":{"gitId":"tlyi"},"content":"    public static void enterTaskMode() {","lastModifiedDate":"2021-08-31"},{"lineNumber":290,"author":{"gitId":"tlyi"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":291,"author":{"gitId":"tlyi"},"content":"        String input;","lastModifiedDate":"2021-08-24"},{"lineNumber":292,"author":{"gitId":"tlyi"},"content":"        while (true) {","lastModifiedDate":"2021-08-31"},{"lineNumber":293,"author":{"gitId":"tlyi"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":294,"author":{"gitId":"tlyi"},"content":"            manageUserInput(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":296,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":297,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":298,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":299,"author":{"gitId":"tlyi"},"content":"     * Entry point of the application.","lastModifiedDate":"2021-09-02"},{"lineNumber":300,"author":{"gitId":"tlyi"},"content":"     * Shows welcome message and enters task mode, which handles the user interaction","lastModifiedDate":"2021-09-02"},{"lineNumber":301,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":303,"author":{"gitId":"tlyi"},"content":"      welcome();","lastModifiedDate":"2021-08-24"},{"lineNumber":304,"author":{"gitId":"tlyi"},"content":"      enterTaskMode();","lastModifiedDate":"2021-08-31"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-24"},{"lineNumber":307,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":308,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"-":6,"tlyi":302}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks that start at a specific time and ends at a specific time.","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":" * E.g: team meeting at 9pm","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"    protected String dateAndTime;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"    protected static final String EVENT_LOGO \u003d \"[E]\";","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"    public Event(String description, String dateAndTime) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        setDateAndTime(dateAndTime);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    public String getDateAndTime() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"        return dateAndTime;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    public void setDateAndTime(String dateAndTime) {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"     * Returns Event task formatted in the form \"[E][ ] description (at: date/time)\"","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Event task string","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"        return EVENT_LOGO + super.toString() + \" (at: \" + dateAndTime + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":31}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":" * This class is used to create tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":" * Each Task must contain a description and can either be marked done or not done.","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"    protected String description;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    protected static int numTasks \u003d 0;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    protected static final String ICON_DONE \u003d \"[X]\";","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    protected static final String ICON_NOT_DONE \u003d  \"[ ]\";","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        numTasks++;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"        return (this.isDone ? ICON_DONE : ICON_NOT_DONE); //marks task done with \"X\"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"        if (!this.isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"            System.out.println(\"Well done! I\u0027ve marked this task as done. *w*\");","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"            System.out.println(\"Task has already been marked as done! Good job!\");","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"            System.out.println(\"Try marking another task as done! ^\u003d^\");","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"    public static int getNumTasks() {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"        return numTasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"     * Returns Task formatted in the form \"[ ] description\"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Task string","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"        return getStatusIcon() + \" \" + getDescription();","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"tlyi":50}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks without any date/time attached to it.","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":" * E.g: visit new theme park","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"    protected static final String TODO_LOGO \u003d \"[T]\";","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"     * Returns Todo task formatted in the form \"[T][ ] description\"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Todo task string","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"        return TODO_LOGO + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"no such command","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"todo this is a todo item","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"deadline no date","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"deadline wrong prefix /at boo","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"deadline prefix with no date /by","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"deadline ip /by thurs night","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"event no date","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"event wrong prefix /by 5pm","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"event prefix with no date /at","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"event 2113t /at fri 2pm","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"done 5","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"done -5","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"done 0","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"done 2","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"done 3","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"commands","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tlyi":20}}]
