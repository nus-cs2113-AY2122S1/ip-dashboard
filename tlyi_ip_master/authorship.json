[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"import duke.exception.InvalidCommandFormatException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"import java.io.File;","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":" * This class is the main class of the Dude bot.","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    //File path to store task data","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    private static final String DATA_FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    //Commands","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_DEADLINE_PREFIX \u003d \"by\";","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_EVENT_PREFIX \u003d \"at\";","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"    private static final String COMMAND_COMMAND_LIST \u003d \"commands\";","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"    //Commonly used message formats in UI","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"    private static final String DIVIDER \u003d \"_________________________________________________________________________________\";","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"    private static final String LS \u003d System.lineSeparator();","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    private static final String QUOTATION \u003d \"\\\"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"    private static final String EMPTY \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_WELCOME_DUDE \u003d \"Hello! I\u0027m Dude ^__^\";","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_BYE \u003d \"Bye! Hope to see you again soon! ~^u^~ \";","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_NO_TASKS_YET \u003d \"No tasks yet, add a task now!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_INTRODUCE_TASKS \u003d \"These are your current tasks:\";","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_TODO_FORMAT \u003d QUOTATION + COMMAND_TODO + \" X\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_DEADLINE_FORMAT \u003d QUOTATION + COMMAND_DEADLINE + \" X /by Y\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_EVENT_FORMAT \u003d QUOTATION + COMMAND_EVENT + \" X /at Y\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_LIST_FORMAT \u003d QUOTATION + COMMAND_LIST + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_DONE_FORMAT \u003d QUOTATION + COMMAND_DONE + \" X\" + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_DELETE_FORMAT \u003d QUOTATION + COMMAND_DELETE + \" X\" + QUOTATION;","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_COMMAND_LIST_FORMAT \u003d  QUOTATION + COMMAND_COMMAND_LIST + QUOTATION;","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_BYE_FORMAT \u003d QUOTATION + COMMAND_BYE + QUOTATION;","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_COMMAND_LIST \u003d \"Commands:\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_TODO_FORMAT + \" : Add task X\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_DEADLINE_FORMAT + \" : Add task X with deadline Y\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_EVENT_FORMAT + \" : Add event X with date/time details Y\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_LIST_FORMAT + \" : See lists of tasks\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_DONE_FORMAT + \" : Mark task number X as done\" + LS","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_DELETE_FORMAT + \" : Delete task number X\" + LS","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_COMMAND_LIST_FORMAT + \" : See this list of commands again\" + LS","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_BYE_FORMAT + \" : Stop Dude :(\";","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_DATA_LOADING \u003d \"Loading old data...\";","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_DATA_LOADED \u003d \"Your old data has been successfully loaded!\" + LS","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"tlyi"},"content":"            + \"Type \" + MESSAGE_COMMAND_LIST_FORMAT + \" to see current tasks!\";","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_NO_DESCRIPTION \u003d \"Please specify a name for the task!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_COMMAND_DOES_NOT_EXIST \u003d \"Command does not exist @_@\";","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_SUGGEST_COMMAND_LIST \u003d \"PS: Forgot the commands? Type \"","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"tlyi"},"content":"            + MESSAGE_COMMAND_COMMAND_LIST_FORMAT + \"!\";","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_COMMAND_DONE_FORMAT \u003d \"Invalid format! Please input a task number to be marked as done, \"","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"tlyi"},"content":"            + LS + \"in the format \" + MESSAGE_COMMAND_DONE_FORMAT + \", where X is the task number!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_COMMAND_DELETE_FORMAT \u003d \"Invalid format! Please input a task number to be deleted, \"","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"tlyi"},"content":"            + LS + \"in the format \" + MESSAGE_COMMAND_DELETE_FORMAT + \", where X is the task number!\";","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_COMMAND_DEADLINE_FORMAT \u003d \"Invalid format! Please input a deadline, \"","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"tlyi"},"content":"            + LS + \"in the format \" + MESSAGE_COMMAND_DEADLINE_FORMAT + \", where X is the task and Y is the deadline!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_COMMAND_EVENT_FORMAT \u003d \"Invalid format! Please input a date, \"","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"tlyi"},"content":"            + LS + \"in the format \" + MESSAGE_COMMAND_EVENT_FORMAT + \", where X is the event and Y is the date!\";","lastModifiedDate":"2021-09-02"},{"lineNumber":77,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_CANNOT_WRITE_TO_FILE \u003d \"Error! System does not have sufficient permission to write to data file?!\" + LS","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"tlyi"},"content":"            + \"Dude is unable to store your task data locally. :(\";","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_CANNOT_READ_FROM_FILE \u003d \"Error! System does not have sufficient permission to read data file?!\" + LS","lastModifiedDate":"2021-09-14"},{"lineNumber":80,"author":{"gitId":"tlyi"},"content":"            + \"Dude is unable to restore your task data. :(\";","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_INVALID_FILE_SYNTAX \u003d \"Error restoring data due to invalid syntax! This line of data will not be added:\";","lastModifiedDate":"2021-09-14"},{"lineNumber":82,"author":{"gitId":"tlyi"},"content":"    private static final String MESSAGE_ERROR_DATA_FILE_MISSING \u003d \"Hmm? Your data file suddenly got deleted... I\u0027ll add this task to the new file,\" + LS","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"tlyi"},"content":"            + \"but all the tasks above this will not be stored! :(\";","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"tlyi"},"content":"    /** Array list of all tasks (Event, Deadline, Todo all inherit \u0027Task\u0027 class) */","lastModifiedDate":"2021-09-14"},{"lineNumber":86,"author":{"gitId":"tlyi"},"content":"    private static final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-14"},{"lineNumber":87,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"tlyi"},"content":"     * Prints lines of messages. Can take in variable number of arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":90,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":91,"author":{"gitId":"tlyi"},"content":"     * @param lines Strings to be printed, each on a new line","lastModifiedDate":"2021-09-02"},{"lineNumber":92,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"tlyi"},"content":"    public static void showMessage(String... lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"tlyi"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"tlyi"},"content":"            System.out.println(line);","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"tlyi"},"content":"     * Prints lines of messages framed by divider. Can take in variable number of arguments.","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":102,"author":{"gitId":"tlyi"},"content":"     * @param lines Strings to be printed, each on a new line","lastModifiedDate":"2021-09-02"},{"lineNumber":103,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":104,"author":{"gitId":"tlyi"},"content":"    public static void showMessageFramedWithDivider(String... lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":105,"author":{"gitId":"tlyi"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":106,"author":{"gitId":"tlyi"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"tlyi"},"content":"            System.out.println(line);","lastModifiedDate":"2021-08-31"},{"lineNumber":108,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"tlyi"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":113,"author":{"gitId":"tlyi"},"content":"     * Prints list of commands.","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":115,"author":{"gitId":"tlyi"},"content":"    public static void showListOfCommands() {","lastModifiedDate":"2021-08-31"},{"lineNumber":116,"author":{"gitId":"tlyi"},"content":"        showMessageFramedWithDivider(MESSAGE_COMMAND_LIST);","lastModifiedDate":"2021-08-31"},{"lineNumber":117,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":120,"author":{"gitId":"tlyi"},"content":"     * Prints Welcome message and list of commands.","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":122,"author":{"gitId":"tlyi"},"content":"    public static void welcome() {","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"tlyi"},"content":"        showMessage(DIVIDER, MESSAGE_WELCOME_DUDE);","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"tlyi"},"content":"        showListOfCommands();","lastModifiedDate":"2021-08-31"},{"lineNumber":125,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":128,"author":{"gitId":"tlyi"},"content":"     * Prints Goodbye message and exits the program.","lastModifiedDate":"2021-09-02"},{"lineNumber":129,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":130,"author":{"gitId":"tlyi"},"content":"    public static void exit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"tlyi"},"content":"        showMessageFramedWithDivider(MESSAGE_BYE);","lastModifiedDate":"2021-08-31"},{"lineNumber":132,"author":{"gitId":"tlyi"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":134,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":136,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":137,"author":{"gitId":"tlyi"},"content":"     * Create data file if it does not exist.","lastModifiedDate":"2021-09-14"},{"lineNumber":138,"author":{"gitId":"tlyi"},"content":"     * As a precaution, this function should be run before every read/write operation to the file.","lastModifiedDate":"2021-09-14"},{"lineNumber":139,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":140,"author":{"gitId":"tlyi"},"content":"     * @param shouldExist True if this function is called while program is running (Add/Update tasks)","lastModifiedDate":"2021-09-14"},{"lineNumber":141,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":142,"author":{"gitId":"tlyi"},"content":"    public static void createFileIfDoesNotExist(boolean shouldExist) {","lastModifiedDate":"2021-09-14"},{"lineNumber":143,"author":{"gitId":"tlyi"},"content":"        File f \u003d new File(DATA_FILE_PATH);","lastModifiedDate":"2021-09-14"},{"lineNumber":144,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":145,"author":{"gitId":"tlyi"},"content":"            f.getParentFile().mkdirs(); //Make the directory for the file if it does not exist","lastModifiedDate":"2021-09-14"},{"lineNumber":146,"author":{"gitId":"tlyi"},"content":"            if (!f.exists()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":147,"author":{"gitId":"tlyi"},"content":"                if (shouldExist) {","lastModifiedDate":"2021-09-14"},{"lineNumber":148,"author":{"gitId":"tlyi"},"content":"                    /*This file should exist while the program is running, if it is deleted mid-run, print error","lastModifiedDate":"2021-09-14"},{"lineNumber":149,"author":{"gitId":"tlyi"},"content":"                    and create new file*/","lastModifiedDate":"2021-09-14"},{"lineNumber":150,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(MESSAGE_ERROR_DATA_FILE_MISSING);","lastModifiedDate":"2021-09-14"},{"lineNumber":151,"author":{"gitId":"tlyi"},"content":"                }","lastModifiedDate":"2021-09-14"},{"lineNumber":152,"author":{"gitId":"tlyi"},"content":"                f.createNewFile();","lastModifiedDate":"2021-09-14"},{"lineNumber":153,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":154,"author":{"gitId":"tlyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":155,"author":{"gitId":"tlyi"},"content":"           showMessageFramedWithDivider(MESSAGE_ERROR_CANNOT_WRITE_TO_FILE, DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":156,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":157,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":158,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":159,"author":{"gitId":"tlyi"},"content":"     * Load data from task list file","lastModifiedDate":"2021-09-14"},{"lineNumber":160,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":161,"author":{"gitId":"tlyi"},"content":"    public static void loadTasksFromFile() {","lastModifiedDate":"2021-09-14"},{"lineNumber":162,"author":{"gitId":"tlyi"},"content":"        createFileIfDoesNotExist(false);","lastModifiedDate":"2021-09-14"},{"lineNumber":163,"author":{"gitId":"tlyi"},"content":"        showMessage(MESSAGE_DATA_LOADING, DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":164,"author":{"gitId":"tlyi"},"content":"        File f \u003d new File(DATA_FILE_PATH);","lastModifiedDate":"2021-09-14"},{"lineNumber":165,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":166,"author":{"gitId":"tlyi"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-14"},{"lineNumber":167,"author":{"gitId":"tlyi"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":168,"author":{"gitId":"tlyi"},"content":"                addTaskFromFile(s.nextLine());","lastModifiedDate":"2021-09-14"},{"lineNumber":169,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":170,"author":{"gitId":"tlyi"},"content":"            showMessage(MESSAGE_DATA_LOADED, DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":171,"author":{"gitId":"tlyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":172,"author":{"gitId":"tlyi"},"content":"            showMessage(MESSAGE_ERROR_CANNOT_READ_FROM_FILE, DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":173,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":174,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":175,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":176,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":177,"author":{"gitId":"tlyi"},"content":"     * Add task from task list file","lastModifiedDate":"2021-09-14"},{"lineNumber":178,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":179,"author":{"gitId":"tlyi"},"content":"     * @param taskDataString String from data file with all necessary information to create Task","lastModifiedDate":"2021-09-14"},{"lineNumber":180,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":181,"author":{"gitId":"tlyi"},"content":"    public static void addTaskFromFile(String taskDataString) {","lastModifiedDate":"2021-09-14"},{"lineNumber":182,"author":{"gitId":"tlyi"},"content":"        Task task;","lastModifiedDate":"2021-09-14"},{"lineNumber":183,"author":{"gitId":"tlyi"},"content":"        boolean isDone;","lastModifiedDate":"2021-09-14"},{"lineNumber":184,"author":{"gitId":"tlyi"},"content":"        String[] words \u003d taskDataString.split(\" \\\\| \"); //Length \u003d 3 for Todo; 4 for Deadline, Event","lastModifiedDate":"2021-09-14"},{"lineNumber":185,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":186,"author":{"gitId":"tlyi"},"content":"            switch (words[1]) {","lastModifiedDate":"2021-09-14"},{"lineNumber":187,"author":{"gitId":"tlyi"},"content":"            case \"0\":","lastModifiedDate":"2021-09-14"},{"lineNumber":188,"author":{"gitId":"tlyi"},"content":"                isDone \u003d false;","lastModifiedDate":"2021-09-14"},{"lineNumber":189,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":190,"author":{"gitId":"tlyi"},"content":"            case \"1\":","lastModifiedDate":"2021-09-14"},{"lineNumber":191,"author":{"gitId":"tlyi"},"content":"                isDone \u003d true;","lastModifiedDate":"2021-09-14"},{"lineNumber":192,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":193,"author":{"gitId":"tlyi"},"content":"            default: //if second letter (done status) is not 0 or 1","lastModifiedDate":"2021-09-14"},{"lineNumber":194,"author":{"gitId":"tlyi"},"content":"                throw new InvalidCommandFormatException(MESSAGE_ERROR_INVALID_FILE_SYNTAX + LS + taskDataString);","lastModifiedDate":"2021-09-14"},{"lineNumber":195,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":196,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":197,"author":{"gitId":"tlyi"},"content":"            switch (words[0]) {","lastModifiedDate":"2021-09-14"},{"lineNumber":198,"author":{"gitId":"tlyi"},"content":"            case Task.TODO_ACRONYM:","lastModifiedDate":"2021-09-14"},{"lineNumber":199,"author":{"gitId":"tlyi"},"content":"                task \u003d new Todo(words[2]);","lastModifiedDate":"2021-09-14"},{"lineNumber":200,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":201,"author":{"gitId":"tlyi"},"content":"            case Task.DEADLINE_ACRONYM:","lastModifiedDate":"2021-09-14"},{"lineNumber":202,"author":{"gitId":"tlyi"},"content":"                task \u003d new Deadline(words[2], words[3]);","lastModifiedDate":"2021-09-14"},{"lineNumber":203,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":204,"author":{"gitId":"tlyi"},"content":"            case Task.EVENT_ACRONYM:","lastModifiedDate":"2021-09-14"},{"lineNumber":205,"author":{"gitId":"tlyi"},"content":"                task \u003d new Event(words[2], words[3]);","lastModifiedDate":"2021-09-14"},{"lineNumber":206,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":207,"author":{"gitId":"tlyi"},"content":"            default: //if first letter is not any of the valid task acronyms","lastModifiedDate":"2021-09-14"},{"lineNumber":208,"author":{"gitId":"tlyi"},"content":"                throw new InvalidCommandFormatException(MESSAGE_ERROR_INVALID_FILE_SYNTAX + LS + taskDataString);","lastModifiedDate":"2021-09-14"},{"lineNumber":209,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":210,"author":{"gitId":"tlyi"},"content":"            tasks.add(task);","lastModifiedDate":"2021-09-14"},{"lineNumber":211,"author":{"gitId":"tlyi"},"content":"            if (isDone)  {","lastModifiedDate":"2021-09-14"},{"lineNumber":212,"author":{"gitId":"tlyi"},"content":"                task.markAsDone();","lastModifiedDate":"2021-09-14"},{"lineNumber":213,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":214,"author":{"gitId":"tlyi"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":215,"author":{"gitId":"tlyi"},"content":"            showMessage(MESSAGE_ERROR_INVALID_FILE_SYNTAX, taskDataString, DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":216,"author":{"gitId":"tlyi"},"content":"        } catch (InvalidCommandFormatException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":217,"author":{"gitId":"tlyi"},"content":"            showMessage(e.toString(), DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":218,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":219,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":220,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":221,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":222,"author":{"gitId":"tlyi"},"content":"     * Append new data into task list file","lastModifiedDate":"2021-09-14"},{"lineNumber":223,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":224,"author":{"gitId":"tlyi"},"content":"     * @param task Task to be appended to end of file","lastModifiedDate":"2021-09-14"},{"lineNumber":225,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":226,"author":{"gitId":"tlyi"},"content":"    public static void appendNewTaskToFile(Task task) {","lastModifiedDate":"2021-09-14"},{"lineNumber":227,"author":{"gitId":"tlyi"},"content":"        createFileIfDoesNotExist(true);","lastModifiedDate":"2021-09-14"},{"lineNumber":228,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":229,"author":{"gitId":"tlyi"},"content":"            FileWriter fw \u003d new FileWriter(DATA_FILE_PATH, true);","lastModifiedDate":"2021-09-14"},{"lineNumber":230,"author":{"gitId":"tlyi"},"content":"            fw.write(task.toTextFileString() + LS);","lastModifiedDate":"2021-09-14"},{"lineNumber":231,"author":{"gitId":"tlyi"},"content":"            fw.close();","lastModifiedDate":"2021-09-14"},{"lineNumber":232,"author":{"gitId":"tlyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":233,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_CANNOT_WRITE_TO_FILE);","lastModifiedDate":"2021-09-14"},{"lineNumber":234,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":235,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":236,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":237,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":238,"author":{"gitId":"tlyi"},"content":"     * Rewrite file with updated list of tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":239,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":240,"author":{"gitId":"tlyi"},"content":"    public static void rewriteTaskListToFile() {","lastModifiedDate":"2021-09-14"},{"lineNumber":241,"author":{"gitId":"tlyi"},"content":"        createFileIfDoesNotExist(true);","lastModifiedDate":"2021-09-14"},{"lineNumber":242,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":243,"author":{"gitId":"tlyi"},"content":"            FileWriter fw \u003d new FileWriter(DATA_FILE_PATH);","lastModifiedDate":"2021-09-14"},{"lineNumber":244,"author":{"gitId":"tlyi"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2021-09-14"},{"lineNumber":245,"author":{"gitId":"tlyi"},"content":"               appendNewTaskToFile(task);","lastModifiedDate":"2021-09-14"},{"lineNumber":246,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":247,"author":{"gitId":"tlyi"},"content":"            fw.close();","lastModifiedDate":"2021-09-14"},{"lineNumber":248,"author":{"gitId":"tlyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":249,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_CANNOT_WRITE_TO_FILE);","lastModifiedDate":"2021-09-14"},{"lineNumber":250,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":251,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":252,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":253,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":254,"author":{"gitId":"tlyi"},"content":"     * Prints current tasks","lastModifiedDate":"2021-09-02"},{"lineNumber":255,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":256,"author":{"gitId":"tlyi"},"content":"    public static void printTasks() {","lastModifiedDate":"2021-08-31"},{"lineNumber":257,"author":{"gitId":"tlyi"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":258,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_NO_TASKS_YET);","lastModifiedDate":"2021-08-31"},{"lineNumber":259,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":260,"author":{"gitId":"tlyi"},"content":"            showMessage(DIVIDER, MESSAGE_INTRODUCE_TASKS);","lastModifiedDate":"2021-08-31"},{"lineNumber":261,"author":{"gitId":"tlyi"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-14"},{"lineNumber":262,"author":{"gitId":"tlyi"},"content":"                System.out.println(i+1 + \". \" + tasks.get(i));","lastModifiedDate":"2021-09-14"},{"lineNumber":263,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":264,"author":{"gitId":"tlyi"},"content":"            showMessage(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":265,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":266,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":267,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":268,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":269,"author":{"gitId":"tlyi"},"content":"     * Returns invalid command format error message specific to the command","lastModifiedDate":"2021-09-07"},{"lineNumber":270,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":271,"author":{"gitId":"tlyi"},"content":"     * @param commandWord Command word","lastModifiedDate":"2021-09-07"},{"lineNumber":272,"author":{"gitId":"tlyi"},"content":"     * @return String Invalid command format error message","lastModifiedDate":"2021-09-07"},{"lineNumber":273,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":274,"author":{"gitId":"tlyi"},"content":"    public static String getInvalidCommandFormatErrorMessage(String commandWord) {","lastModifiedDate":"2021-09-07"},{"lineNumber":275,"author":{"gitId":"tlyi"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-09-07"},{"lineNumber":276,"author":{"gitId":"tlyi"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-07"},{"lineNumber":277,"author":{"gitId":"tlyi"},"content":"            return MESSAGE_ERROR_INVALID_COMMAND_DEADLINE_FORMAT;","lastModifiedDate":"2021-09-07"},{"lineNumber":278,"author":{"gitId":"tlyi"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-09-07"},{"lineNumber":279,"author":{"gitId":"tlyi"},"content":"            return MESSAGE_ERROR_INVALID_COMMAND_EVENT_FORMAT;","lastModifiedDate":"2021-09-07"},{"lineNumber":280,"author":{"gitId":"tlyi"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-09-07"},{"lineNumber":281,"author":{"gitId":"tlyi"},"content":"            return MESSAGE_COMMAND_DONE_FORMAT;","lastModifiedDate":"2021-09-07"},{"lineNumber":282,"author":{"gitId":"tlyi"},"content":"        default:","lastModifiedDate":"2021-09-07"},{"lineNumber":283,"author":{"gitId":"tlyi"},"content":"            return \"Invalid command format\";","lastModifiedDate":"2021-09-07"},{"lineNumber":284,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":285,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":286,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":287,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":288,"author":{"gitId":"tlyi"},"content":"     * Returns a String array where 0th index is command string and 1st index is the remaining parameters","lastModifiedDate":"2021-09-02"},{"lineNumber":289,"author":{"gitId":"tlyi"},"content":"     * Command string and parameter string is assumed to be separated by the first \" \" in input","lastModifiedDate":"2021-09-02"},{"lineNumber":290,"author":{"gitId":"tlyi"},"content":"     * If no parameters are provided in the input, 1st index will be set to EMPTY","lastModifiedDate":"2021-09-02"},{"lineNumber":291,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":292,"author":{"gitId":"tlyi"},"content":"     * @param input Raw user input string","lastModifiedDate":"2021-09-02"},{"lineNumber":293,"author":{"gitId":"tlyi"},"content":"     * @return String array [command, parameters]","lastModifiedDate":"2021-09-02"},{"lineNumber":294,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":295,"author":{"gitId":"tlyi"},"content":"    public static String[] splitInputIntoCommandAndParams(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":296,"author":{"gitId":"tlyi"},"content":"        String[] commandAndParams \u003d new String[2];","lastModifiedDate":"2021-08-31"},{"lineNumber":297,"author":{"gitId":"tlyi"},"content":"        final String[] splitInput \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":298,"author":{"gitId":"tlyi"},"content":"        //command string","lastModifiedDate":"2021-08-31"},{"lineNumber":299,"author":{"gitId":"tlyi"},"content":"        commandAndParams[0] \u003d splitInput[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":300,"author":{"gitId":"tlyi"},"content":"        //param string, if not given, set to EMPTY for error handling","lastModifiedDate":"2021-09-02"},{"lineNumber":301,"author":{"gitId":"tlyi"},"content":"        commandAndParams[1] \u003d (splitInput.length \u003e\u003d 2) ? splitInput[1] : EMPTY;","lastModifiedDate":"2021-08-31"},{"lineNumber":302,"author":{"gitId":"tlyi"},"content":"        return commandAndParams;","lastModifiedDate":"2021-08-31"},{"lineNumber":303,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":304,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":305,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":306,"author":{"gitId":"tlyi"},"content":"     * Returns a String array where the 0th index is the task description and 1st index is the additional info (i.e date)","lastModifiedDate":"2021-09-02"},{"lineNumber":307,"author":{"gitId":"tlyi"},"content":"     * Description and info is assumed to be separated by the first \"/\" in input","lastModifiedDate":"2021-09-02"},{"lineNumber":308,"author":{"gitId":"tlyi"},"content":"     * If no description is provided, throw InvalidCommandFormatException","lastModifiedDate":"2021-09-07"},{"lineNumber":309,"author":{"gitId":"tlyi"},"content":"     * If no additional info is provided, 1st index will be set to EMPTY","lastModifiedDate":"2021-09-02"},{"lineNumber":310,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":311,"author":{"gitId":"tlyi"},"content":"     * @param params Params string intended to be returned from splitInputIntoCommandAndParams(),","lastModifiedDate":"2021-09-02"},{"lineNumber":312,"author":{"gitId":"tlyi"},"content":"     *               thus assumed to be from a valid command.","lastModifiedDate":"2021-09-02"},{"lineNumber":313,"author":{"gitId":"tlyi"},"content":"     * @return String array [description, info]","lastModifiedDate":"2021-09-02"},{"lineNumber":314,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":315,"author":{"gitId":"tlyi"},"content":"    public static String[] splitParamsIntoDescriptionAndInfo(String params) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":316,"author":{"gitId":"tlyi"},"content":"        final String[] splitParams \u003d params.trim().split(\"/\");","lastModifiedDate":"2021-08-31"},{"lineNumber":317,"author":{"gitId":"tlyi"},"content":"        String[] descriptionAndInfo \u003d new String[2];","lastModifiedDate":"2021-08-31"},{"lineNumber":318,"author":{"gitId":"tlyi"},"content":"        //description string","lastModifiedDate":"2021-08-31"},{"lineNumber":319,"author":{"gitId":"tlyi"},"content":"        descriptionAndInfo[0] \u003d splitParams[0].trim();","lastModifiedDate":"2021-09-14"},{"lineNumber":320,"author":{"gitId":"tlyi"},"content":"        if (descriptionAndInfo[0].equals(EMPTY)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":321,"author":{"gitId":"tlyi"},"content":"            throw new InvalidCommandFormatException(MESSAGE_ERROR_NO_DESCRIPTION);","lastModifiedDate":"2021-09-07"},{"lineNumber":322,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":323,"author":{"gitId":"tlyi"},"content":"        //other info string, if not given, return EMPTY for error handling","lastModifiedDate":"2021-08-31"},{"lineNumber":324,"author":{"gitId":"tlyi"},"content":"        descriptionAndInfo[1] \u003d (splitParams.length \u003e\u003d 2) ? splitParams[1].trim() : EMPTY;","lastModifiedDate":"2021-09-14"},{"lineNumber":325,"author":{"gitId":"tlyi"},"content":"        return descriptionAndInfo;","lastModifiedDate":"2021-08-31"},{"lineNumber":326,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":327,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":328,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":329,"author":{"gitId":"tlyi"},"content":"     * Returns the date of the task in String form","lastModifiedDate":"2021-09-02"},{"lineNumber":330,"author":{"gitId":"tlyi"},"content":"     * Date is assumed to be after the command prefix strings \"at\" or \"by\"","lastModifiedDate":"2021-09-02"},{"lineNumber":331,"author":{"gitId":"tlyi"},"content":"     * If invalid command prefix is given or no date is provided, throw InvalidCommandFormatException","lastModifiedDate":"2021-09-07"},{"lineNumber":332,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":333,"author":{"gitId":"tlyi"},"content":"     * @param commandPrefix Prefix to extract date with","lastModifiedDate":"2021-09-02"},{"lineNumber":334,"author":{"gitId":"tlyi"},"content":"     * @param commandWord Command word specifying type of command, used to decide specific exception message","lastModifiedDate":"2021-09-07"},{"lineNumber":335,"author":{"gitId":"tlyi"},"content":"     * @param info String containing prefix and date","lastModifiedDate":"2021-09-02"},{"lineNumber":336,"author":{"gitId":"tlyi"},"content":"     * @return Date in String form","lastModifiedDate":"2021-09-02"},{"lineNumber":337,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":338,"author":{"gitId":"tlyi"},"content":"    public static String extractDate(String commandPrefix, String commandWord, String info) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":339,"author":{"gitId":"tlyi"},"content":"        final String[] words \u003d info.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":340,"author":{"gitId":"tlyi"},"content":"        if (!words[0].equals(commandPrefix) || words.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-02"},{"lineNumber":341,"author":{"gitId":"tlyi"},"content":"            throw new InvalidCommandFormatException(getInvalidCommandFormatErrorMessage(commandWord));","lastModifiedDate":"2021-09-07"},{"lineNumber":342,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":343,"author":{"gitId":"tlyi"},"content":"            return words[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":344,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":345,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":346,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":347,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":348,"author":{"gitId":"tlyi"},"content":"     * Executes the correct command depending on user input","lastModifiedDate":"2021-09-02"},{"lineNumber":349,"author":{"gitId":"tlyi"},"content":"     * Prints an error if command does not exist","lastModifiedDate":"2021-09-02"},{"lineNumber":350,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":351,"author":{"gitId":"tlyi"},"content":"     * @param input Raw user input string","lastModifiedDate":"2021-09-02"},{"lineNumber":352,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":353,"author":{"gitId":"tlyi"},"content":"    public static void manageUserInput(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":354,"author":{"gitId":"tlyi"},"content":"        final String[] commandAndParams \u003d splitInputIntoCommandAndParams(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":355,"author":{"gitId":"tlyi"},"content":"        final String commandWord \u003d commandAndParams[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":356,"author":{"gitId":"tlyi"},"content":"        final String params \u003d commandAndParams[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":357,"author":{"gitId":"tlyi"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-08-31"},{"lineNumber":358,"author":{"gitId":"tlyi"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2021-08-31"},{"lineNumber":359,"author":{"gitId":"tlyi"},"content":"            addTask(COMMAND_TODO, params);","lastModifiedDate":"2021-08-31"},{"lineNumber":360,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":361,"author":{"gitId":"tlyi"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-08-31"},{"lineNumber":362,"author":{"gitId":"tlyi"},"content":"            addTask(COMMAND_DEADLINE, params);","lastModifiedDate":"2021-08-31"},{"lineNumber":363,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":364,"author":{"gitId":"tlyi"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-08-31"},{"lineNumber":365,"author":{"gitId":"tlyi"},"content":"            addTask(COMMAND_EVENT, params);","lastModifiedDate":"2021-08-31"},{"lineNumber":366,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":367,"author":{"gitId":"tlyi"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-08-31"},{"lineNumber":368,"author":{"gitId":"tlyi"},"content":"            printTasks();","lastModifiedDate":"2021-08-31"},{"lineNumber":369,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":370,"author":{"gitId":"tlyi"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-08-31"},{"lineNumber":371,"author":{"gitId":"tlyi"},"content":"            markTaskAsDone(params);","lastModifiedDate":"2021-08-31"},{"lineNumber":372,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":373,"author":{"gitId":"tlyi"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-09-14"},{"lineNumber":374,"author":{"gitId":"tlyi"},"content":"            deleteTask(params);","lastModifiedDate":"2021-09-14"},{"lineNumber":375,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-09-14"},{"lineNumber":376,"author":{"gitId":"tlyi"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2021-08-31"},{"lineNumber":377,"author":{"gitId":"tlyi"},"content":"            exit();","lastModifiedDate":"2021-08-31"},{"lineNumber":378,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":379,"author":{"gitId":"tlyi"},"content":"        case COMMAND_COMMAND_LIST:","lastModifiedDate":"2021-08-31"},{"lineNumber":380,"author":{"gitId":"tlyi"},"content":"            showListOfCommands();","lastModifiedDate":"2021-08-31"},{"lineNumber":381,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":382,"author":{"gitId":"tlyi"},"content":"        default:","lastModifiedDate":"2021-08-31"},{"lineNumber":383,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_COMMAND_DOES_NOT_EXIST, MESSAGE_SUGGEST_COMMAND_LIST);","lastModifiedDate":"2021-08-31"},{"lineNumber":384,"author":{"gitId":"tlyi"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":385,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":386,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":387,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":388,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":389,"author":{"gitId":"tlyi"},"content":"     * Creates and adds specific type of task to the Task array","lastModifiedDate":"2021-09-02"},{"lineNumber":390,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":391,"author":{"gitId":"tlyi"},"content":"     * @param typeOfTask Guaranteed to be either COMMAND_TODO, COMMAND_DEADLINE, or COMMAND_EVENT","lastModifiedDate":"2021-09-02"},{"lineNumber":392,"author":{"gitId":"tlyi"},"content":"     * @param params String containing description and other info of the task","lastModifiedDate":"2021-09-02"},{"lineNumber":393,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":394,"author":{"gitId":"tlyi"},"content":"    public static void addTask(String typeOfTask, String params) {","lastModifiedDate":"2021-08-31"},{"lineNumber":395,"author":{"gitId":"tlyi"},"content":"        final String[] descriptionAndInfo;","lastModifiedDate":"2021-09-07"},{"lineNumber":396,"author":{"gitId":"tlyi"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":397,"author":{"gitId":"tlyi"},"content":"            descriptionAndInfo \u003d splitParamsIntoDescriptionAndInfo(params);","lastModifiedDate":"2021-09-07"},{"lineNumber":398,"author":{"gitId":"tlyi"},"content":"            final String description \u003d descriptionAndInfo[0];","lastModifiedDate":"2021-08-31"},{"lineNumber":399,"author":{"gitId":"tlyi"},"content":"            final String info \u003d descriptionAndInfo[1];","lastModifiedDate":"2021-08-31"},{"lineNumber":400,"author":{"gitId":"tlyi"},"content":"            Task task;","lastModifiedDate":"2021-09-07"},{"lineNumber":401,"author":{"gitId":"tlyi"},"content":"            switch (typeOfTask){","lastModifiedDate":"2021-08-31"},{"lineNumber":402,"author":{"gitId":"tlyi"},"content":"            case COMMAND_TODO:","lastModifiedDate":"2021-08-31"},{"lineNumber":403,"author":{"gitId":"tlyi"},"content":"                task \u003d new Todo(description);","lastModifiedDate":"2021-09-07"},{"lineNumber":404,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":405,"author":{"gitId":"tlyi"},"content":"            case COMMAND_DEADLINE:","lastModifiedDate":"2021-08-31"},{"lineNumber":406,"author":{"gitId":"tlyi"},"content":"                String dateDeadline \u003d extractDate(COMMAND_DEADLINE_PREFIX, COMMAND_DEADLINE, info);","lastModifiedDate":"2021-09-07"},{"lineNumber":407,"author":{"gitId":"tlyi"},"content":"                task \u003d new Deadline(description, dateDeadline);","lastModifiedDate":"2021-09-07"},{"lineNumber":408,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":409,"author":{"gitId":"tlyi"},"content":"            case COMMAND_EVENT:","lastModifiedDate":"2021-08-31"},{"lineNumber":410,"author":{"gitId":"tlyi"},"content":"                String dateEvent \u003d extractDate(COMMAND_EVENT_PREFIX, COMMAND_EVENT, info);","lastModifiedDate":"2021-09-07"},{"lineNumber":411,"author":{"gitId":"tlyi"},"content":"                task \u003d new Event(description, dateEvent);","lastModifiedDate":"2021-09-07"},{"lineNumber":412,"author":{"gitId":"tlyi"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":413,"author":{"gitId":"tlyi"},"content":"            default:","lastModifiedDate":"2021-09-07"},{"lineNumber":414,"author":{"gitId":"tlyi"},"content":"                //Since typeofTask is guaranteed to be either of the 3 above, code should not be reaching this point","lastModifiedDate":"2021-09-07"},{"lineNumber":415,"author":{"gitId":"tlyi"},"content":"                throw new InvalidCommandFormatException(\"Error occurred, please check command format!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":416,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":417,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":418,"author":{"gitId":"tlyi"},"content":"            tasks.add(task);","lastModifiedDate":"2021-09-14"},{"lineNumber":419,"author":{"gitId":"tlyi"},"content":"            appendNewTaskToFile(task);","lastModifiedDate":"2021-09-14"},{"lineNumber":420,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(\"Added to list: \" , task.toString(),","lastModifiedDate":"2021-09-07"},{"lineNumber":421,"author":{"gitId":"tlyi"},"content":"                    \"Current number of tasks: \" + tasks.size());","lastModifiedDate":"2021-09-14"},{"lineNumber":422,"author":{"gitId":"tlyi"},"content":"        } catch (InvalidCommandFormatException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":423,"author":{"gitId":"tlyi"},"content":"            //Print error for any invalid command format exceptions caught","lastModifiedDate":"2021-09-07"},{"lineNumber":424,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(e.toString());","lastModifiedDate":"2021-09-07"},{"lineNumber":425,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":426,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":427,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":428,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":429,"author":{"gitId":"tlyi"},"content":"     * Deletes a specific task","lastModifiedDate":"2021-09-14"},{"lineNumber":430,"author":{"gitId":"tlyi"},"content":"     * If task number is not provided or invalid, prints an error","lastModifiedDate":"2021-09-14"},{"lineNumber":431,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":432,"author":{"gitId":"tlyi"},"content":"     * @param params String in the format \"delete X\", where X is supposed to be the task number","lastModifiedDate":"2021-09-14"},{"lineNumber":433,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":434,"author":{"gitId":"tlyi"},"content":"    public static void deleteTask(String params) {","lastModifiedDate":"2021-09-14"},{"lineNumber":435,"author":{"gitId":"tlyi"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":436,"author":{"gitId":"tlyi"},"content":"            //error if user does not have any tasks to be deleted","lastModifiedDate":"2021-09-14"},{"lineNumber":437,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_NO_TASKS_YET);","lastModifiedDate":"2021-09-14"},{"lineNumber":438,"author":{"gitId":"tlyi"},"content":"        } else if (params.equals(EMPTY)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":439,"author":{"gitId":"tlyi"},"content":"            //error if user inputs only \"delete\" with no number behind","lastModifiedDate":"2021-09-14"},{"lineNumber":440,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_DELETE_FORMAT);","lastModifiedDate":"2021-09-14"},{"lineNumber":441,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":442,"author":{"gitId":"tlyi"},"content":"            try {","lastModifiedDate":"2021-09-14"},{"lineNumber":443,"author":{"gitId":"tlyi"},"content":"                int taskNum \u003d Integer.parseInt(params);","lastModifiedDate":"2021-09-14"},{"lineNumber":444,"author":{"gitId":"tlyi"},"content":"                if (taskNum \u003e tasks.size() || taskNum \u003c 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":445,"author":{"gitId":"tlyi"},"content":"                    //error if user inputs a task number that does not exist","lastModifiedDate":"2021-09-14"},{"lineNumber":446,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(\"Please input a valid task number from 1 to \" + tasks.size() + \"!\");","lastModifiedDate":"2021-09-14"},{"lineNumber":447,"author":{"gitId":"tlyi"},"content":"                } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":448,"author":{"gitId":"tlyi"},"content":"                    final String deletedTaskString \u003d tasks.get(taskNum-1).toString();","lastModifiedDate":"2021-09-14"},{"lineNumber":449,"author":{"gitId":"tlyi"},"content":"                    tasks.remove(taskNum-1);","lastModifiedDate":"2021-09-14"},{"lineNumber":450,"author":{"gitId":"tlyi"},"content":"                    rewriteTaskListToFile();","lastModifiedDate":"2021-09-14"},{"lineNumber":451,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(\"Alrightys! I have removed the following task:\", deletedTaskString,","lastModifiedDate":"2021-09-14"},{"lineNumber":452,"author":{"gitId":"tlyi"},"content":"                            \"Current number of tasks: \" + tasks.size());","lastModifiedDate":"2021-09-14"},{"lineNumber":453,"author":{"gitId":"tlyi"},"content":"                }","lastModifiedDate":"2021-09-14"},{"lineNumber":454,"author":{"gitId":"tlyi"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":455,"author":{"gitId":"tlyi"},"content":"                //error if user did not input a valid integer for task number","lastModifiedDate":"2021-09-14"},{"lineNumber":456,"author":{"gitId":"tlyi"},"content":"                showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_DELETE_FORMAT);","lastModifiedDate":"2021-09-14"},{"lineNumber":457,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":458,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":459,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":460,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":461,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":462,"author":{"gitId":"tlyi"},"content":"     * Mark a specific task as done","lastModifiedDate":"2021-09-02"},{"lineNumber":463,"author":{"gitId":"tlyi"},"content":"     * If task number is not provided or invalid, prints an error","lastModifiedDate":"2021-09-02"},{"lineNumber":464,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":465,"author":{"gitId":"tlyi"},"content":"     * @param params String in the format \"done X\", where X is supposed to be the task number","lastModifiedDate":"2021-09-02"},{"lineNumber":466,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":467,"author":{"gitId":"tlyi"},"content":"    public static void markTaskAsDone(String params) {","lastModifiedDate":"2021-08-31"},{"lineNumber":468,"author":{"gitId":"tlyi"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":469,"author":{"gitId":"tlyi"},"content":"            //error if user does not have any tasks to be marked completed","lastModifiedDate":"2021-09-14"},{"lineNumber":470,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_NO_TASKS_YET);","lastModifiedDate":"2021-09-14"},{"lineNumber":471,"author":{"gitId":"tlyi"},"content":"        } else if (params.equals(EMPTY)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":472,"author":{"gitId":"tlyi"},"content":"            //error if user inputs only \"done\" with no number behind","lastModifiedDate":"2021-08-24"},{"lineNumber":473,"author":{"gitId":"tlyi"},"content":"            showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_DONE_FORMAT);","lastModifiedDate":"2021-08-31"},{"lineNumber":474,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":475,"author":{"gitId":"tlyi"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":476,"author":{"gitId":"tlyi"},"content":"                int taskNum \u003d Integer.parseInt(params);","lastModifiedDate":"2021-08-31"},{"lineNumber":477,"author":{"gitId":"tlyi"},"content":"                if (taskNum \u003e tasks.size() || taskNum \u003c 1) {","lastModifiedDate":"2021-09-14"},{"lineNumber":478,"author":{"gitId":"tlyi"},"content":"                    //error if user inputs a task number that does not exist","lastModifiedDate":"2021-08-24"},{"lineNumber":479,"author":{"gitId":"tlyi"},"content":"                    showMessageFramedWithDivider(\"Please input a valid task number from 1 to \" + tasks.size() + \"!\");","lastModifiedDate":"2021-09-14"},{"lineNumber":480,"author":{"gitId":"tlyi"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":481,"author":{"gitId":"tlyi"},"content":"                    showMessage(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":482,"author":{"gitId":"tlyi"},"content":"                    showMessage(tasks.get(taskNum-1).markAsDone());","lastModifiedDate":"2021-09-14"},{"lineNumber":483,"author":{"gitId":"tlyi"},"content":"                    rewriteTaskListToFile();","lastModifiedDate":"2021-09-14"},{"lineNumber":484,"author":{"gitId":"tlyi"},"content":"                    showMessage(tasks.get(taskNum-1).toString(), DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":485,"author":{"gitId":"tlyi"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":486,"author":{"gitId":"tlyi"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":487,"author":{"gitId":"tlyi"},"content":"                //error if user did not input a valid integer for task number","lastModifiedDate":"2021-08-24"},{"lineNumber":488,"author":{"gitId":"tlyi"},"content":"               showMessageFramedWithDivider(MESSAGE_ERROR_INVALID_COMMAND_DONE_FORMAT);","lastModifiedDate":"2021-08-31"},{"lineNumber":489,"author":{"gitId":"tlyi"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":490,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":491,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":492,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":493,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":494,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":495,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":496,"author":{"gitId":"tlyi"},"content":"     * Continuously processes user inputs","lastModifiedDate":"2021-09-02"},{"lineNumber":497,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":498,"author":{"gitId":"tlyi"},"content":"    public static void enterTaskMode() {","lastModifiedDate":"2021-08-31"},{"lineNumber":499,"author":{"gitId":"tlyi"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":500,"author":{"gitId":"tlyi"},"content":"        String input;","lastModifiedDate":"2021-08-24"},{"lineNumber":501,"author":{"gitId":"tlyi"},"content":"        while (true) {","lastModifiedDate":"2021-08-31"},{"lineNumber":502,"author":{"gitId":"tlyi"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":503,"author":{"gitId":"tlyi"},"content":"            manageUserInput(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":505,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":506,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":507,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":508,"author":{"gitId":"tlyi"},"content":"     * Entry point of the application.","lastModifiedDate":"2021-09-02"},{"lineNumber":509,"author":{"gitId":"tlyi"},"content":"     * Shows welcome message and enters task mode, which handles the user interaction","lastModifiedDate":"2021-09-02"},{"lineNumber":510,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":511,"author":{"gitId":"tlyi"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":512,"author":{"gitId":"tlyi"},"content":"        welcome();","lastModifiedDate":"2021-08-24"},{"lineNumber":513,"author":{"gitId":"tlyi"},"content":"        loadTasksFromFile();","lastModifiedDate":"2021-09-14"},{"lineNumber":514,"author":{"gitId":"tlyi"},"content":"        enterTaskMode();","lastModifiedDate":"2021-08-31"},{"lineNumber":515,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":516,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-24"},{"lineNumber":517,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":518,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"-":3,"tlyi":515}},{"path":"src/main/java/duke/exception/InvalidCommandFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"public class InvalidCommandFormatException extends Exception{","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"    protected final String errorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"    public InvalidCommandFormatException(String errorMessage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"        return this.errorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"tlyi":14}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks that need to be done before a specific date/time.","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" * E.g: submit iP by thurs 2359","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    protected String deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"        setDeadline(deadline);","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public String getDeadline() {","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        return deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    public void setDeadline(String deadline) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     * Returns Deadline task formatted in the form \"[D][ ] description (by: deadline)\"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Event task string","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"        return DEADLINE_LOGO + super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"     * Returns Deadline task formatted for data file in the form \"D | 1/0 | description | deadline\"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Deadline task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"        return DEADLINE_ACRONYM + \" | \" + super.toTextFileString() + \" | \" + deadline;","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":42}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks that start at a specific time and ends at a specific time.","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" * E.g: team meeting at 9pm","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    protected String dateAndTime;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public Event(String description, String dateAndTime) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"        setDateAndTime(dateAndTime);","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public String getDateAndTime() {","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"        return dateAndTime;","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    public void setDateAndTime(String dateAndTime) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"        this.dateAndTime \u003d dateAndTime;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"     * Returns Event task formatted in the form \"[E][ ] description (at: date/time)\"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Event task string","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"        return EVENT_LOGO + super.toString() + \" (at: \" + dateAndTime + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"     * Returns Event task formatted for data file in the form \"E | 1/0 | description | dateAndTime\"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Event task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"        return EVENT_ACRONYM + \" | \" + super.toTextFileString() + \" | \" + dateAndTime;","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * This class is used to create tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" * Each Task must contain a description and can either be marked done or not done.","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"    protected String description;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"    protected static final String ICON_DONE \u003d \"[X]\";","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    protected static final String ICON_NOT_DONE \u003d  \"[ ]\";","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"    public static final String TODO_ACRONYM \u003d \"T\";","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    protected static final String TODO_LOGO \u003d \"[\" + TODO_ACRONYM + \"]\";","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"    public static final String DEADLINE_ACRONYM \u003d \"D\";","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"    protected static final String DEADLINE_LOGO \u003d \"[\" + DEADLINE_ACRONYM + \"]\";","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"    public static final String EVENT_ACRONYM \u003d \"E\";","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"    protected static final String EVENT_LOGO \u003d \"[\" + EVENT_ACRONYM + \"]\";","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"        return (this.isDone ? ICON_DONE : ICON_NOT_DONE); //marks task done with \"X\"","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"    public String markAsDone() {","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"        if (!this.isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"tlyi"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"tlyi"},"content":"            return \"Well done! I\u0027ve marked this task as done. ^_^\";","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"tlyi"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"tlyi"},"content":"            return \"Task has already been marked as done! Good job!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"tlyi"},"content":"                    \"Try marking another task as done! ^\u003d^\";","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"tlyi"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"tlyi"},"content":"     * Returns Task formatted for application, in the form \"[ ] description\"","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Task string for application","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"tlyi"},"content":"        return getStatusIcon() + \" \" + getDescription();","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"tlyi"},"content":"     * Returns Task formatted for data file, in the form \"1/0 | description\"","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"tlyi"},"content":"     * where 1 \u003d done, 0 \u003d not done","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"tlyi"},"content":"        return (this.isDone ? \"1\" : \"0\") + \" | \" + getDescription();","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"tlyi":62}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":" * This class is used for tasks without any date/time attached to it.","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":" * E.g: visit new theme park","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"     * Returns Todo task formatted for application, in the form \"[T][ ] description\"","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Todo task string for application","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"tlyi"},"content":"        return TODO_LOGO + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"tlyi"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"tlyi"},"content":"     * Returns Todo task formatted for data file in the form \"T | 1/0 | description\"","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"tlyi"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"tlyi"},"content":"     * @return Formatted Todo task string for data file","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"tlyi"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"tlyi"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"tlyi"},"content":"    public String toTextFileString() {","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"tlyi"},"content":"        return TODO_ACRONYM + \" | \" + super.toTextFileString();","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"tlyi"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"tlyi"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"tlyi"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"tlyi":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tlyi"},"content":"no such command","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tlyi"},"content":"todo this is a todo item","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tlyi"},"content":"deadline no date","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tlyi"},"content":"deadline wrong prefix /at boo","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tlyi"},"content":"deadline prefix with no date /by","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tlyi"},"content":"deadline ip /by thurs night","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tlyi"},"content":"event no date","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tlyi"},"content":"event wrong prefix /by 5pm","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tlyi"},"content":"event prefix with no date /at","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"event 2113t /at fri 2pm","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tlyi"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tlyi"},"content":"done 5","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tlyi"},"content":"done -5","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tlyi"},"content":"done 0","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tlyi"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tlyi"},"content":"done 2","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"done 3","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"tlyi"},"content":"commands","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tlyi"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tlyi":20}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"tlyi"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tlyi"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"tlyi":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"tlyi"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"tlyi"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"tlyi":2}}]
