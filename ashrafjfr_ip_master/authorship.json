[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"Jarvis is a **desktop app for managing tasks via a Command Line Interface (CLI)**.","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"* **[Quick Start](#start)**","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"* **[Features](#features)**","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"    * **[Adding a Todo task](#todo)**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"    * **[Adding a Deadline task](#deadline)**","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"    * **[Adding an Event task](#event)**","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"    * **[Listing all tasks](#list)**","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"    * **[Marking a task as done](#done)**","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"    * **[Deleting a task](#delete)**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"    * **[Finding task by keyword](#find)**","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"    * **[Exiting the program](#bye)**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"    * **[Saving the data](#save)**","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"* **[Command Summary](#summary)**","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"start\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"## Quick Start","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"1. Download the latest `jarvis.jar` from [here](https://github.com/ashrafjfr/ip/releases).","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for **Jarvis**.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"1. Open your desired _Command Line Interface_ from the folder with `jarvis.jar` and enter the following code: `java -jar jarvis.jar`","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"1. Type a command in the command box and press Enter to execute it.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"   Some example commands you can try:","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"    * **`todo read book`** : Adds a `read book` task to your list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"    * **`deadline return book /by 01/11/2021 1800`** : Adds a `return book` **deadline** task with a **specific date and time** to your list of tasks.*","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"    * **`event attend CS2113T lecture /at 30/10/2021 1600`** : Adds an `attend CS2113T lecture` **event** task with a **specific date and time** to your list of tasks.*","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"    * **`list`** : Lists all tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"ashrafjfr"},"content":"    * **`done 1`** : Marks the 1st task in the current list as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"ashrafjfr"},"content":"    * **`delete 2`** : Deletes the 2nd task in the current list.","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"ashrafjfr"},"content":"    * **`bye`** : Exits the app.","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"ashrafjfr"},"content":"      ***Note:** date and time must be entered in either of these formats **`DD/MM/YYYY hhmm`** or **`DD-MM-YYYY hhmm`** \u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"ashrafjfr"},"content":"      where **`D: Date, M: Month, Y: Year, h: Hour, m: Minute`** and time must be in **`24-hour notation`**.","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"ashrafjfr"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"features\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"ashrafjfr"},"content":"## Features","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"ashrafjfr"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"ashrafjfr"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"ashrafjfr"},"content":"  e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo read book`.","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"ashrafjfr"},"content":"* Parameters have to be in correct order.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"ashrafjfr"},"content":"  e.g. if the command specifies `deadline DESCRIPTION /by DATE TIME`, the order of command and parameters have to be followed.","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"ashrafjfr"},"content":"* Parameters have to be in correct format.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"ashrafjfr"},"content":"  e.g. for date and time, it must be entered in either of these formats **`DD/MM/YYYY hhmm`** or **`DD-MM-YYYY hhmm`** \u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"ashrafjfr"},"content":"  where **`D: Date, M: Month, Y: Year, h: Hour, m: Minute`** and time must be in **`24-hour notation`**.","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"ashrafjfr"},"content":"* Parameters have to be the correct type (such as `done` and `delete` must be followed by an integer).\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"ashrafjfr"},"content":"  e.g. in `done 2`, `2` has to be an integer character, `two` will not be recognised.","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"ashrafjfr"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `list` and `bye`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"ashrafjfr"},"content":"  e.g. if the command specifies `list 123`, it will be not be recognised and you will have to input your `list` command again.","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"todo\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"ashrafjfr"},"content":"### Adding a Todo task: `todo`","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"ashrafjfr"},"content":"Adds a todo task to current list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"ashrafjfr"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"ashrafjfr"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"ashrafjfr"},"content":"* `todo read book`","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"ashrafjfr"},"content":"* `todo rewatch CS2113T lecture`","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"deadline\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"ashrafjfr"},"content":"### Adding a Deadline task: `deadline ... /by ...`","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"ashrafjfr"},"content":"Adds a deadline task with a **specific date and time** to your current list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"ashrafjfr"},"content":"Format: `deadline DESCRIPTION /by DATE TIME`","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"ashrafjfr"},"content":"Note: **DATE** and **TIME** must be entered in either of these formats **`DD/MM/YYYY hhmm`** or **`DD-MM-YYYY hhmm`** \u003cbr\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"ashrafjfr"},"content":"where **`D: Date, M: Month, Y: Year, h: Hour, m: Minute`** and time must be in **`24-hour notation`**.","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"ashrafjfr"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"ashrafjfr"},"content":"* `deadline return book /by 31/10/2021 1800`","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"ashrafjfr"},"content":"* `deadline submit assignment /by 01/11/2021 2359`","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"event\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"ashrafjfr"},"content":"### Adding an Event task: `event ... /at ...`","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"ashrafjfr"},"content":"Adds an event task with a **specific date and time** to your current list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"ashrafjfr"},"content":"Format: `event DESCRIPTION /at DATE TIME`","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"ashrafjfr"},"content":"Note: **DATE** and **TIME** must be entered in either of these formats **`DD/MM/YYYY hhmm`** or **`DD-MM-YYYY hhmm`** \u003cbr\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"ashrafjfr"},"content":"where **`D: Date, M: Month, Y: Year, h: Hour, m: Minute`** and time must be in **`24-hour notation`**.","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"ashrafjfr"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"ashrafjfr"},"content":"* `event lecture quiz /at 30/09/2021 1200`","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"ashrafjfr"},"content":"* `event attend concert /at 24/11/2021 2000`","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"list\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"ashrafjfr"},"content":"### Listing all tasks : `list`","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"ashrafjfr"},"content":"Shows a list of all tasks in your current list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"ashrafjfr"},"content":"Format: `list`","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"done\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"ashrafjfr"},"content":"### Marking a task as done : `done`","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":120,"author":{"gitId":"ashrafjfr"},"content":"Marks the specified task as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"ashrafjfr"},"content":"Format: `done INDEX`","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"ashrafjfr"},"content":"* Marks the task at the specified `INDEX` as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"ashrafjfr"},"content":"* The index refers to the index number shown in the displayed list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"ashrafjfr"},"content":"* The index **must be a positive integer** 1, 2, 3, ...","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"ashrafjfr"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"ashrafjfr"},"content":"* `list` followed by `done 2` marks the 2nd task as done in the current list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"delete\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"ashrafjfr"},"content":"### Deleting a task : `delete`","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"ashrafjfr"},"content":"Deletes the specified task from the current list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"ashrafjfr"},"content":"Format: `delete INDEX`","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"ashrafjfr"},"content":"* Deletes the task at the specified `INDEX`.","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"ashrafjfr"},"content":"* The index refers to the index number shown in the displayed list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"ashrafjfr"},"content":"* The index **must be a positive integer** 1, 2, 3, ...","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"ashrafjfr"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"ashrafjfr"},"content":"* `list` followed by `delete 2` deletes the 2nd task in the current list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"find\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"ashrafjfr"},"content":"### Finding task by keyword: `find`","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":148,"author":{"gitId":"ashrafjfr"},"content":"Find tasks containing the given keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":149,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"ashrafjfr"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"ashrafjfr"},"content":"* The search is case-insensitive. e.g `book` will match `BOOK`","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"ashrafjfr"},"content":"* Only the description is searched","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"ashrafjfr"},"content":"* Partial words can be matched e.g. `boo` will match `book`","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"ashrafjfr"},"content":"* Tasks matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"ashrafjfr"},"content":"  e.g. `book` will return `read book`, `return book`","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"ashrafjfr"},"content":"Examples:","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"ashrafjfr"},"content":"* `find book` returns `read book` and `return book`","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"bye\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":162,"author":{"gitId":"ashrafjfr"},"content":"### Exiting the program : `bye`","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"ashrafjfr"},"content":"Prints a `bye` message and exits the program.","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"ashrafjfr"},"content":"Format: `bye`","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"save\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"ashrafjfr"},"content":"### Saving the data","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":171,"author":{"gitId":"ashrafjfr"},"content":"Jarvis\u0027 data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":173,"author":{"gitId":"ashrafjfr"},"content":"\u003ca name\u003d\"summary\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":174,"author":{"gitId":"ashrafjfr"},"content":"## Command Summary","lastModifiedDate":"2021-09-29"},{"lineNumber":175,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":176,"author":{"gitId":"ashrafjfr"},"content":"Action | Format, Examples","lastModifiedDate":"2021-09-29"},{"lineNumber":177,"author":{"gitId":"ashrafjfr"},"content":"--------|------------------","lastModifiedDate":"2021-09-29"},{"lineNumber":178,"author":{"gitId":"ashrafjfr"},"content":"**Add Todo** | `todo DESCRIPTION` \u003cbr\u003e e.g. `todo read book`","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"ashrafjfr"},"content":"**Add Deadline** | `deadline DESCRIPTION /by DATE TIME` \u003cbr\u003e e.g. `deadline return book /by 31/10/2021 2100`","lastModifiedDate":"2021-09-29"},{"lineNumber":180,"author":{"gitId":"ashrafjfr"},"content":"**Add Event** | `event DESCRIPTION /by DATE TIME` \u003cbr\u003e e.g. `event attend lecture /at 27/10/2021 1400`","lastModifiedDate":"2021-09-29"},{"lineNumber":181,"author":{"gitId":"ashrafjfr"},"content":"**List** | `list`","lastModifiedDate":"2021-09-29"},{"lineNumber":182,"author":{"gitId":"ashrafjfr"},"content":"**Done Task** | `done INDEX`\u003cbr\u003e e.g. `done 2`","lastModifiedDate":"2021-09-29"},{"lineNumber":183,"author":{"gitId":"ashrafjfr"},"content":"**Delete Task** | `delete INDEX`\u003cbr\u003e e.g. `delete 2`","lastModifiedDate":"2021-09-29"},{"lineNumber":184,"author":{"gitId":"ashrafjfr"},"content":"**Find** | `find KEYWORD`\u003cbr\u003e e.g. `find book`","lastModifiedDate":"2021-09-29"},{"lineNumber":185,"author":{"gitId":"ashrafjfr"},"content":"**Exit** | `bye`","lastModifiedDate":"2021-09-29"},{"lineNumber":186,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":187,"author":{"gitId":"ashrafjfr"},"content":"## References","lastModifiedDate":"2021-10-01"},{"lineNumber":188,"author":{"gitId":"ashrafjfr"},"content":"[AddressBook Level 3 (AB3) User Guide](https://se-education.org/addressbook-level3/UserGuide.html)","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"ashrafjfr":178,"-":10}},{"path":"src/main/java/exceptions/DeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package exceptions;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"public class DeadlineException extends Exception{","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"ashrafjfr":4}},{"path":"src/main/java/exceptions/EventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package exceptions;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"public class EventException extends Exception{","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"ashrafjfr":4}},{"path":"src/main/java/exceptions/InputErrorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"public class InputErrorException extends Exception{","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"ashrafjfr":4}},{"path":"src/main/java/exceptions/InputOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package exceptions;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"public class InputOutOfRangeException extends Exception{","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"ashrafjfr":4}},{"path":"src/main/java/input/Input.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package input;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.DeadlineException;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.EventException;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.InputErrorException;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.InputOutOfRangeException;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"import parser.Parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"import tasklist.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"import tasklist.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"public class Input {","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"    public static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"     * Handles the inputs given by the user. Extracts the keyword from the input by calling","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"     * the parseUserInput method from Parser and will handle the remaining input based on the","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"     * command that has been extracted. The remaining input will be added to the user\u0027s list of task.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"    public static void inputHandler(String userLine, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"        String[] splitString \u003d Parser.parseCommand(userLine);","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"        String taskKeyword \u003d splitString[0];","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"            switch (taskKeyword) {","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"            case COMMAND_LIST:","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"                TaskList.listTasks(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"ashrafjfr"},"content":"                break;","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"ashrafjfr"},"content":"            case COMMAND_DONE:","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"ashrafjfr"},"content":"                TaskList.markTaskDone(userLine, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"ashrafjfr"},"content":"                break;","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"ashrafjfr"},"content":"            case COMMAND_TODO:","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"ashrafjfr"},"content":"                TaskList.addTodoTask(userLine, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"ashrafjfr"},"content":"                break;","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"ashrafjfr"},"content":"            case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"ashrafjfr"},"content":"                TaskList.addDeadlineTask(userLine, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"ashrafjfr"},"content":"                break;","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"ashrafjfr"},"content":"            case COMMAND_EVENT:","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"ashrafjfr"},"content":"                TaskList.addEventTask(userLine, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"ashrafjfr"},"content":"                break;","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"ashrafjfr"},"content":"            case COMMAND_DELETE:","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"ashrafjfr"},"content":"                TaskList.deleteTask(userLine, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"ashrafjfr"},"content":"                break;","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"ashrafjfr"},"content":"            case COMMAND_FIND:","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"ashrafjfr"},"content":"                TaskList.findKeyTasks(userLine, taskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"ashrafjfr"},"content":"                break;","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"ashrafjfr"},"content":"            default:","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"ashrafjfr"},"content":"                throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"ashrafjfr"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"ashrafjfr"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"ashrafjfr"},"content":"            Ui.printIndexOutOfBoundExceptionMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"ashrafjfr"},"content":"        } catch (InputErrorException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"ashrafjfr"},"content":"            Ui.printInputErrorExceptionMessage();","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"ashrafjfr"},"content":"        } catch (InputOutOfRangeException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"ashrafjfr"},"content":"            Ui.printInputOutOfRangeExceptionMessage(taskList.size());","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"ashrafjfr"},"content":"        } catch (DeadlineException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"ashrafjfr"},"content":"            Ui.printDeadlineExceptionMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"ashrafjfr"},"content":"        } catch (EventException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"ashrafjfr"},"content":"            Ui.printEventExceptionMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"ashrafjfr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"ashrafjfr"},"content":"            Ui.printDateTimeParseExceptionMessage();","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"ashrafjfr":75}},{"path":"src/main/java/jarvis/Jarvis.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package jarvis;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import input.Input;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"import tasklist.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"public class Jarvis {","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"     * Runs the Jarvis bot by first greeting the user. It will then create","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"     * the list of task followed by finding any saved task file that has been created","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"     * from prior usage. Then, take in inputs from the user and send the inputs to the","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"     * inputHandler. When the user inputs \"bye\", the loop will exit and the bot will","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"     * print a bye message.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"    public void run() {","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"        Ui.printGreetMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"        Storage.findTaskFile(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"        String userLine \u003d scanner.nextLine().trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"        while(!userLine.equalsIgnoreCase(Input.COMMAND_BYE)) {","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"            Input.inputHandler(userLine, taskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"            userLine \u003d scanner.nextLine().trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"        Ui.printByeMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"        Jarvis jarvis \u003d new Jarvis();","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"        jarvis.run();","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"ashrafjfr":38}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.DeadlineException;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.EventException;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.InputErrorException;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.InputOutOfRangeException;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"import tasklist.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"public class Parser {","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"     * Parses the user input to extract the command which is the first word.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"     * @return String[] a split between the command and task description from user","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"    public static String[] parseCommand(String userLine) {","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"        return userLine.toLowerCase().split(\" \", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"     * Parses the user input to extract the task to be marked as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"     * @return taskNum int of the task in the list to be marked as done","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"     * @throws InputOutOfRangeException if the taskNum is negative or is more than the size of list","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"    public static int parseDoneTask(String userLine, ArrayList\u003cTask\u003e taskList) throws InputOutOfRangeException {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"        String[] extractDoneTask \u003d userLine.toLowerCase().split(\" \", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"        int taskNum \u003d Integer.parseInt(extractDoneTask[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"        if (taskNum \u003c\u003d 0 || taskNum \u003e taskList.size()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"            throw new InputOutOfRangeException();","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"        return taskNum;","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"ashrafjfr"},"content":"     * Parses the user input to extract the task to be deleted.","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"ashrafjfr"},"content":"     * @return taskNum int of the task in the list to be deleted","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"ashrafjfr"},"content":"     * @throws InputOutOfRangeException if the taskNum is negative or is more than the size of list","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"ashrafjfr"},"content":"    public static int parseDeleteTask(String userLine, ArrayList\u003cTask\u003e taskList) throws InputOutOfRangeException {","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"ashrafjfr"},"content":"        String[] extractDeleteTask \u003d userLine.toLowerCase().split(\" \", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"ashrafjfr"},"content":"        int taskNum \u003d Integer.parseInt(extractDeleteTask[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"ashrafjfr"},"content":"        if (taskNum \u003c\u003d 0 || taskNum \u003e taskList.size()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"ashrafjfr"},"content":"            throw new InputOutOfRangeException();","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"ashrafjfr"},"content":"        return taskNum;","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"ashrafjfr"},"content":"     * Parses the user input to extract the task description when todo command is called.","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"ashrafjfr"},"content":"     * @return String task description for todo task","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"ashrafjfr"},"content":"     * @throws InputErrorException if input is missing the description","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"ashrafjfr"},"content":"    public static String parseTodoTask(String userLine) throws InputErrorException {","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"ashrafjfr"},"content":"        String[] todoInputs \u003d userLine.split(\" \", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"ashrafjfr"},"content":"        if (todoInputs.length \u003c 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"ashrafjfr"},"content":"            throw new InputErrorException();","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"ashrafjfr"},"content":"        return todoInputs[1];","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"ashrafjfr"},"content":"     * Parses the user input to extract the task description and deadline date \u0026 time when","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"ashrafjfr"},"content":"     * deadline command is called.","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"ashrafjfr"},"content":"     * @return String[] where index 0 is the task description and index 1 is deadline date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"ashrafjfr"},"content":"     * @throws DeadlineException if input does not contain \u0027/by\u0027 key to split the description and","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"ashrafjfr"},"content":"     * @throws InputErrorException if input is missing the description and deadline date \u0026 time","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"ashrafjfr"},"content":"     * deadline date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"ashrafjfr"},"content":"    public static String[] parseDeadlineTask(String userLine) throws DeadlineException, InputErrorException {","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"ashrafjfr"},"content":"        String[] deadlineInputs \u003d userLine.split(\" \", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"ashrafjfr"},"content":"        if (deadlineInputs.length \u003c 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"ashrafjfr"},"content":"            throw new InputErrorException();","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"ashrafjfr"},"content":"        if (!userLine.contains(\"/by\")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"ashrafjfr"},"content":"            throw new DeadlineException();","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"ashrafjfr"},"content":"        return deadlineInputs[1].split(\" /by \");","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"ashrafjfr"},"content":"     * Parses the user input to extract the task description and event date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"ashrafjfr"},"content":"     * when event command is called.","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"ashrafjfr"},"content":"     * @return String[] where index 0 is the task description and index 1 is event date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"ashrafjfr"},"content":"     * @throws EventException if input does not contain \u0027/by\u0027 key to split the description and","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"ashrafjfr"},"content":"     * @throws InputErrorException if input is missing the description and deadline date \u0026 time","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"ashrafjfr"},"content":"     * event date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"ashrafjfr"},"content":"    public static String[] parseEventTask(String userLine) throws EventException, InputErrorException {","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"ashrafjfr"},"content":"        String[] eventInputs \u003d userLine.split(\" \", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"ashrafjfr"},"content":"        if (eventInputs.length \u003c 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"ashrafjfr"},"content":"            throw new InputErrorException();","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"ashrafjfr"},"content":"        if (!userLine.contains(\"/at\")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"ashrafjfr"},"content":"            throw new EventException();","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"ashrafjfr"},"content":"        return eventInputs[1].split(\" /at \");","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":111,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"ashrafjfr"},"content":"     * Returns the date \u0026 time as a LocalDateTime type from string input by user.","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"ashrafjfr"},"content":"     * @param userDateTimeInput is the date \u0026 time input by user of String type","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"ashrafjfr"},"content":"     * @return date \u0026 time input by user as a LocalDateTime type","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"ashrafjfr"},"content":"     * @throws DateTimeParseException when date \u0026 time are input in the wrong format","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"ashrafjfr"},"content":"    public static LocalDateTime parseDateTime(String userDateTimeInput) throws DateTimeParseException {","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"ashrafjfr"},"content":"        return LocalDateTime.parse(userDateTimeInput, DateTimeFormatter.ofPattern(\"[dd/MM/yyyy HHmm][dd-MM-yyyy HHmm]\"));","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"ashrafjfr"},"content":"     * Returns the date \u0026 time as a LocalDateTime type from string read from saved text file.","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"ashrafjfr"},"content":"     * @param storedDateTime is the date \u0026 time saved in text file from previous use of bot","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"ashrafjfr"},"content":"     * @return date \u0026 time from text file as a LocalDateTime type","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"ashrafjfr"},"content":"     * @throws DateTimeParseException when date \u0026 time are saved in the wrong format","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"ashrafjfr"},"content":"    public static LocalDateTime parseStoredDateTime(String storedDateTime) throws DateTimeParseException {","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"ashrafjfr"},"content":"        return LocalDateTime.parse(storedDateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"ashrafjfr"},"content":"     * Returns the keyword user is finding for when searching for tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"ashrafjfr"},"content":"     * @return keyword extracted from user line","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"ashrafjfr"},"content":"    public static String parseFindTaskKey(String userLine) {","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"ashrafjfr"},"content":"        String[] userFindInputs \u003d userLine.split(\" \", 2);","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"ashrafjfr"},"content":"        return userFindInputs[1];","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"ashrafjfr":141}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package storage;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import tasklist.Task;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"public class Storage {","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"    private static final String LINE \u003d Ui.LINE;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"    public static final String JARVIS_TXT \u003d \"jarvis/jarvis.txt\";","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"    private static final String DIVIDER \u003d \",\";","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"     * Attempt to find the file that saved the list of tasks from previous usage","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"     * of Jarvis bot. If file not found, a new directory and file will be created using the","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"     * given file path to store the tasks in a text file.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"    public static void findTaskFile(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"        File jarvisFile \u003d new File(JARVIS_TXT);","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"            if (!jarvisFile.exists()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"                jarvisFile.getParentFile().mkdirs();","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"                jarvisFile.createNewFile();","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"                System.out.println(\"A new file has been created to store your tasks Sir!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"                        + \"What would you like me to do Sir?\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"                        + LINE);","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"            } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"                System.out.println(\"Give me a moment to load up your tasks Sir!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"                        + \".\" + System.lineSeparator() + \".\" + System.lineSeparator() + \"Done\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"                        + \"What would you like me to do Sir?\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"                        + LINE);","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"                loadTasks(taskList, jarvisFile);","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"ashrafjfr"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"ashrafjfr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"ashrafjfr"},"content":"                    + \"There has been an error detected when creating a new file Sir!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"ashrafjfr"},"content":"                    + \"You might want to take a look at it.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"ashrafjfr"},"content":"                    + LINE);","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"ashrafjfr"},"content":"     * Load the previous saved task text file to into the list of tasks for current use.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"ashrafjfr"},"content":"     * @param jarvisFile the task text file retrieved from findTaskfile method","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"ashrafjfr"},"content":"    public static void loadTasks(ArrayList\u003cTask\u003e taskList, File jarvisFile) {","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"ashrafjfr"},"content":"        int lineCount \u003d 0;","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"ashrafjfr"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"ashrafjfr"},"content":"            Scanner j \u003d new Scanner(jarvisFile);","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"ashrafjfr"},"content":"            while(j.hasNext()){","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"ashrafjfr"},"content":"                inputTask(taskList,j.nextLine(),lineCount);","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"ashrafjfr"},"content":"                lineCount++;","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"ashrafjfr"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"ashrafjfr"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"ashrafjfr"},"content":"                    + \"I can\u0027t seem to find the file Sir.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"ashrafjfr"},"content":"                    + LINE);","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"ashrafjfr"},"content":"     * Input tasks from each line on the text file into the list of tasks depending","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"ashrafjfr"},"content":"     * on the type of task as stated in the text.","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"ashrafjfr"},"content":"     * @param textLine is the current line of text in the text file","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"ashrafjfr"},"content":"     * @param lineCount is the line number of the current line being loaded","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"ashrafjfr"},"content":"    public static void inputTask(ArrayList\u003cTask\u003e taskList, String textLine, int lineCount) {","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"ashrafjfr"},"content":"        String[] lineInputs \u003d textLine.split(DIVIDER);","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"ashrafjfr"},"content":"        switch(lineInputs[0]){","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"ashrafjfr"},"content":"        case \"T\":","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"ashrafjfr"},"content":"            tasklist.TaskList.addTodoFileTask(lineInputs[2], taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"ashrafjfr"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"ashrafjfr"},"content":"        case \"D\":","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"ashrafjfr"},"content":"            tasklist.TaskList.addDeadlineFileTask(lineInputs[2], lineInputs[3], taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"ashrafjfr"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"ashrafjfr"},"content":"        case \"E\":","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"ashrafjfr"},"content":"            tasklist.TaskList.addEventFileTask(lineInputs[2],lineInputs[3], taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"ashrafjfr"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"ashrafjfr"},"content":"        default:","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"ashrafjfr"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"ashrafjfr"},"content":"        if (lineInputs[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"ashrafjfr"},"content":"            taskList.get(lineCount).markAsDone();","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"ashrafjfr"},"content":"     * Write tasks from the current list of tasks onto the text file for it to be","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"ashrafjfr"},"content":"     * saved when the user exits from bot. The same file will be loaded up when the","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"ashrafjfr"},"content":"     * user starts the bot again in the future with the saved tasks loaded.","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"ashrafjfr"},"content":"    public static void fillJarvisFile(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"ashrafjfr"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"ashrafjfr"},"content":"            FileWriter writer \u003d new FileWriter(JARVIS_TXT);","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"ashrafjfr"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"ashrafjfr"},"content":"                String type \u003d task.getType();","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"ashrafjfr"},"content":"                String doneStatus;","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"ashrafjfr"},"content":"                if (task.isDone()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"ashrafjfr"},"content":"                    doneStatus \u003d \"1\";","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"ashrafjfr"},"content":"                } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"ashrafjfr"},"content":"                    doneStatus \u003d \"0\";","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"ashrafjfr"},"content":"                }","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"ashrafjfr"},"content":"                writer.write(type + DIVIDER + doneStatus + DIVIDER + task.getDescription() + System.lineSeparator());","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"ashrafjfr"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"ashrafjfr"},"content":"            writer.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"ashrafjfr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"ashrafjfr"},"content":"                    + \"There seems to be an error saving the task Sir.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"ashrafjfr"},"content":"                    + LINE);","lastModifiedDate":"2021-09-15"},{"lineNumber":120,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":121,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":122,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":123,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"ashrafjfr":123}},{"path":"src/main/java/tasklist/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package tasklist;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"        this.type \u003d \"D\";","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"     * Returns additional information which is the type icon and deadline date","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"     * \u0026 time at the end when toString method is called.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"     * @return the type icon followed by the usual toString method of Task and","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"     * the deadline date \u0026 time at the end","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"        return \"[\" + getType() + \"]\" + super.toString() + \" (by: \"","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"                + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm\")) + \")\";","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"     * Adds additional character to support file format when saving deadline","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"     * @return adds a comma between \u0027description\u0027 and \u0027by\u0027 strings to follow","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"     * the CSV format when saving to text file","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"    @Override","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"        return description + \",\" + by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"ashrafjfr":36}},{"path":"src/main/java/tasklist/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package tasklist;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"    protected LocalDateTime at;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"    public Event(String description, LocalDateTime at) {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"        this.type \u003d \"E\";","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"     * Returns additional information which is the type icon and event date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"     * at the end when toString method is called.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"     * @return the type icon followed by the usual toString method of Task and","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"     * the event date \u0026 time at the end","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"        return \"[\" + getType() + \"]\" + super.toString() + \" (at: \"","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"                + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm\")) + \")\";","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"     * Adds additional character to support file format when saving event","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"     * @return adds a comma between \u0027description\u0027 and \u0027at\u0027 strings to follow","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"     * the CSV format when saving to text file","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"    @Override","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"        return description + \",\" + at.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"ashrafjfr":36}},{"path":"src/main/java/tasklist/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package tasklist;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"public class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"    protected String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"    protected String type;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"     * Returns an icon depicting whether the task is done or not.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"     * @return [X] icon if task is done and [ ] empty icon is task is not done","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"        return (isDone ? \"[X] \" : \"[ ] \");","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"    public void markAsDone(){","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"        //change isDone for task to true","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"    public String getType() {","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"        return type;","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"        return isDone;","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"        return description;","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"ashrafjfr"},"content":"        return getStatusIcon() + description;","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ashrafjfr":41}},{"path":"src/main/java/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package tasklist;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.DeadlineException;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.EventException;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.InputErrorException;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"import exceptions.InputOutOfRangeException;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"import parser.Parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"public class TaskList {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"    private static final String LINE \u003d Ui.LINE;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"     * Prints out all the tasks in the list when user inputs list keyword as command.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"     * @throws InputOutOfRangeException if list is empty","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"    public static void listTasks(ArrayList\u003cTask\u003e taskList) throws InputOutOfRangeException {","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"            throw new InputOutOfRangeException();","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE + System.lineSeparator() + \"Here are the tasks in your list Sir:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"                System.out.println((i + 1) + \".\" + taskList.get(i).toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"     * Marks a task as done when user inputs that task is done.","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"     * It will then print a message to show that the task is done.","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"ashrafjfr"},"content":"    public static void markTaskDone(String userLine, ArrayList\u003cTask\u003e taskList) throws InputOutOfRangeException {","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"ashrafjfr"},"content":"        int taskNum \u003d Parser.parseDoneTask(userLine, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"ashrafjfr"},"content":"        taskList.get(taskNum-1).markAsDone();","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"ashrafjfr"},"content":"        Ui.printMarkTaskDoneMessage(taskList, taskNum);","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"ashrafjfr"},"content":"        Storage.fillJarvisFile(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"ashrafjfr"},"content":"     * Deletes a task when user inputs to delete that task.","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"ashrafjfr"},"content":"     * It will then print a message to show that the task has been deleted.","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"ashrafjfr"},"content":"    public static void deleteTask(String userLine, ArrayList\u003cTask\u003e taskList) throws InputOutOfRangeException {","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"ashrafjfr"},"content":"        int taskNum \u003d Parser.parseDeleteTask(userLine, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"ashrafjfr"},"content":"        Ui.printDeleteMessage(taskList, taskNum);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"ashrafjfr"},"content":"        taskList.remove(taskNum-1);","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"ashrafjfr"},"content":"        Storage.fillJarvisFile(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"ashrafjfr"},"content":"     * Adds a todo task from user input to the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"ashrafjfr"},"content":"     * It will then print a message to show that the todo task has been added.","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"ashrafjfr"},"content":"    public static void addTodoTask(String userLine, ArrayList\u003cTask\u003e taskList) throws InputErrorException {","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"ashrafjfr"},"content":"        String description \u003d Parser.parseTodoTask(userLine);","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"ashrafjfr"},"content":"        Todo t \u003d new Todo(description);","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"ashrafjfr"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"ashrafjfr"},"content":"        Ui.printAddedTask(taskList.get(taskList.size() - 1), taskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"ashrafjfr"},"content":"        Storage.fillJarvisFile(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"ashrafjfr"},"content":"     * Adds a deadline task from user input to the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"ashrafjfr"},"content":"     * It will then print a message to show that the deadline task has been added.","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"ashrafjfr"},"content":"     * @throws DeadlineException if input does not contain \u0027/by\u0027 key to split the description and","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"ashrafjfr"},"content":"     * deadline date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"ashrafjfr"},"content":"    public static void addDeadlineTask(String userLine, ArrayList\u003cTask\u003e taskList) throws DeadlineException, InputErrorException {","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"ashrafjfr"},"content":"        String[] deadlineDescriptions \u003d Parser.parseDeadlineTask(userLine);","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"ashrafjfr"},"content":"        Deadline t \u003d new Deadline(deadlineDescriptions[0], Parser.parseDateTime(deadlineDescriptions[1]));","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"ashrafjfr"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"ashrafjfr"},"content":"        Ui.printAddedTask(taskList.get(taskList.size() - 1), taskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"ashrafjfr"},"content":"        Storage.fillJarvisFile(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"ashrafjfr"},"content":"     * Adds an event task from user input to the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"ashrafjfr"},"content":"     * It will then print a message to show that the event task has been added.","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"ashrafjfr"},"content":"     * @throws EventException if input does not contain \u0027/by\u0027 key to split the description and","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"ashrafjfr"},"content":"     * event date \u0026 time","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"ashrafjfr"},"content":"    public static void addEventTask(String userLine, ArrayList\u003cTask\u003e taskList) throws EventException, InputErrorException {","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"ashrafjfr"},"content":"        String[] eventDescriptions \u003d Parser.parseEventTask(userLine);","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"ashrafjfr"},"content":"        Event t \u003d new Event(eventDescriptions[0], Parser.parseDateTime(eventDescriptions[1]));","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"ashrafjfr"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"ashrafjfr"},"content":"        Ui.printAddedTask(taskList.get(taskList.size() - 1), taskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"ashrafjfr"},"content":"        Storage.fillJarvisFile(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":104,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"ashrafjfr"},"content":"     * Adds a todo task from saved file to the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"ashrafjfr"},"content":"     * @param description is the task description","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"ashrafjfr"},"content":"    public static void addTodoFileTask(String description, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":111,"author":{"gitId":"ashrafjfr"},"content":"        Todo t \u003d new Todo(description);","lastModifiedDate":"2021-09-25"},{"lineNumber":112,"author":{"gitId":"ashrafjfr"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":113,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":114,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":115,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"ashrafjfr"},"content":"     * Adds a deadline task from saved file to the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"ashrafjfr"},"content":"     * @param description is the task description","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"ashrafjfr"},"content":"     * @param by is the deadline for the task","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"ashrafjfr"},"content":"    public static void addDeadlineFileTask(String description, String by, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":122,"author":{"gitId":"ashrafjfr"},"content":"        Deadline t \u003d new Deadline(description, Parser.parseStoredDateTime(by));","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"ashrafjfr"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":124,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":126,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"ashrafjfr"},"content":"     * Adds an event task from saved file to the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"ashrafjfr"},"content":"     * @param description is the task description","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"ashrafjfr"},"content":"     * @param at is when the event will happen","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"ashrafjfr"},"content":"    public static void addEventFileTask(String description, String at, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"ashrafjfr"},"content":"        Event t \u003d new Event(description, Parser.parseStoredDateTime(at));","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"ashrafjfr"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":135,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":136,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"ashrafjfr"},"content":"     * Find tasks in task list that match the keyword user inputs. It will then print the","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"ashrafjfr"},"content":"     * list of matching tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"ashrafjfr"},"content":"     * @param userLine input given by user or line extracted from saved file","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"ashrafjfr"},"content":"     * @throws ArithmeticException when task list is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"ashrafjfr"},"content":"    public static void findKeyTasks(String userLine, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"ashrafjfr"},"content":"        String key \u003d Parser.parseFindTaskKey(userLine).toLowerCase();","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"ashrafjfr"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"ashrafjfr"},"content":"            throw new ArithmeticException();","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"ashrafjfr"},"content":"        } else {","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"ashrafjfr"},"content":"            int matchedTaskCount \u003d 0;","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"ashrafjfr"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"ashrafjfr"},"content":"                if (task.getDescription().toLowerCase().contains(key)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"ashrafjfr"},"content":"                    if (matchedTaskCount \u003d\u003d 0) {","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"ashrafjfr"},"content":"                        System.out.println(LINE + System.lineSeparator() + \"Here are the matching tasks in your list Sir:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"ashrafjfr"},"content":"                    }","lastModifiedDate":"2021-09-27"},{"lineNumber":155,"author":{"gitId":"ashrafjfr"},"content":"                    System.out.println((matchedTaskCount + 1) + \".\" + task.toString());","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"ashrafjfr"},"content":"                    matchedTaskCount++;","lastModifiedDate":"2021-09-27"},{"lineNumber":157,"author":{"gitId":"ashrafjfr"},"content":"                }","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"ashrafjfr"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"ashrafjfr"},"content":"            if (matchedTaskCount \u003d\u003d 0) {","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"ashrafjfr"},"content":"                System.out.println(LINE + System.lineSeparator() + \"Apologies, there are no matching tasks in your list Sir.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"ashrafjfr"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE);","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"ashrafjfr":165}},{"path":"src/main/java/tasklist/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package tasklist;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"        this.type \u003d \"T\";","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"     * Returns additional information which is the type icon when toString","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"     * method is called.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"     * @return the type icon followed by the usual toString method of Task","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"        return \"[\" + getType() + \"]\" + super.toString();","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"ashrafjfr":19}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"package ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"import jarvis.Jarvis;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"ashrafjfr"},"content":"import tasklist.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"ashrafjfr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"ashrafjfr"},"content":"public class Ui {","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"ashrafjfr"},"content":"    public static final String JARVIS_LOGO \u003d \"       __  ___      ____ _    __  ____ _____\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"ashrafjfr"},"content":"            + \"      / / /   |    / __ \\\\ |  / / /  _// ___/\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"ashrafjfr"},"content":"            + \" __  / / / /| |   / /_/ / | / /  / /  \\\\__ \\\\ \" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"ashrafjfr"},"content":"            + \"/ /_/ / / ___ |_ / _, _/| |/ / _/ /_ ___/ / \" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"ashrafjfr"},"content":"            + \"\\\\____(_)_/  |_(_)_/ |_(_)___(_)___(_)____/  \" + System.lineSeparator();","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"ashrafjfr"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"ashrafjfr"},"content":"     * Prints the logo and greets the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"ashrafjfr"},"content":"    public static void printGreetMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(JARVIS_LOGO","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"ashrafjfr"},"content":"                + LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"ashrafjfr"},"content":"                + \"Good day Sir! J.A.R.V.I.S. here!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"ashrafjfr"},"content":"     * Prints the exit/bye message before closing the app.","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"ashrafjfr"},"content":"    public static void printByeMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"ashrafjfr"},"content":"                + \"As always Sir, a great pleasure watching you work!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"ashrafjfr"},"content":"     * Prints an error message when user inputs an unknown command.","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"ashrafjfr"},"content":"    public static void printIndexOutOfBoundExceptionMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"ashrafjfr"},"content":"                + \"Apologies Sir, I don\u0027t quite get what you mean.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"ashrafjfr"},"content":"                + \"Try a new command!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"ashrafjfr"},"content":"     * Prints an error message when user inputs a command with missing details.","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"ashrafjfr"},"content":"    public static void printInputErrorExceptionMessage() {","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"ashrafjfr"},"content":"                + \"Apologies Sir, your input is missing something.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"ashrafjfr"},"content":"                + \"Try a new command!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"ashrafjfr"},"content":"     * Prints an error message when list is empty or when the number input by user","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"ashrafjfr"},"content":"     * is out of range.","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"ashrafjfr"},"content":"     * @param listSize is the current size of the list of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"ashrafjfr"},"content":"    public static void printInputOutOfRangeExceptionMessage(int listSize) {","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"ashrafjfr"},"content":"        if (listSize \u003d\u003d 0) {","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"ashrafjfr"},"content":"                    + \"Apologies Sir, your list is currently empty.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"ashrafjfr"},"content":"                    + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"ashrafjfr"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"ashrafjfr"},"content":"            System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"ashrafjfr"},"content":"                    + \"Apologies Sir, you picked an out of range number.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"ashrafjfr"},"content":"                    + \"Please choose a positive integer until \" + listSize + \"!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"ashrafjfr"},"content":"                    + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"ashrafjfr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"ashrafjfr"},"content":"     * Prints an error message when a deadline input is missing the date \u0026 time of deadline.","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"ashrafjfr"},"content":"    public static void printDeadlineExceptionMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"ashrafjfr"},"content":"                + \"Apologies Sir, you did not mention the deadline.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"ashrafjfr"},"content":"                + \"Please include the deadline in your command!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"ashrafjfr"},"content":"     * Prints an error message when an event input is missing the date \u0026 time of the event.","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"ashrafjfr"},"content":"    public static void printEventExceptionMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"ashrafjfr"},"content":"                + \"Apologies Sir, you did not mention when the event will be held.\" + System.lineSeparator()","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"ashrafjfr"},"content":"                + \"Please include the date and time in your command!\" + System.lineSeparator()","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"ashrafjfr"},"content":"     * Prints a message when a new task has been added to the list along with the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"ashrafjfr"},"content":"     * @param task is the new task that has been added","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"ashrafjfr"},"content":"    public static void printAddedTask(Task task, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"ashrafjfr"},"content":"                + \"Noted Sir. I\u0027ve added this task:\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"ashrafjfr"},"content":"                + \" \" + task.toString() + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"ashrafjfr"},"content":"                + \"You currently have \" + taskList.size() + \" tasks in your list Sir.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"ashrafjfr"},"content":"     * Prints a message when a task had been marked as done along with the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskNum is the index of the task in the list of task","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"ashrafjfr"},"content":"    public static void printMarkTaskDoneMessage(ArrayList\u003cTask\u003e taskList, int taskNum) {","lastModifiedDate":"2021-09-25"},{"lineNumber":113,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"ashrafjfr"},"content":"                + \"Good one Sir! I\u0027ve marked this task as done:\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"ashrafjfr"},"content":"                + \" \" + taskList.get(taskNum-1).toString() + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":117,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":118,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":119,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"ashrafjfr"},"content":"     * Prints a message when a task has been deleted along with the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskList main list keeping track of user\u0027s tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"ashrafjfr"},"content":"     * @param taskNum is the index of the task in the list of task","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"ashrafjfr"},"content":"    public static void printDeleteMessage(ArrayList\u003cTask\u003e taskList, int taskNum) {","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"ashrafjfr"},"content":"                + \"Noted Sir! I\u0027ve removed this task:\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"ashrafjfr"},"content":"                + \" \" + taskList.get(taskNum-1).toString() + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"ashrafjfr"},"content":"                + \"You now have \" + (taskList.size()-1) + \" tasks in the list Sir!\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"ashrafjfr"},"content":"                + LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":130,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":131,"author":{"gitId":"ashrafjfr"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"ashrafjfr"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"ashrafjfr"},"content":"     * Prints an error message when input date \u0026 time are in the wrong format.","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"ashrafjfr"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"ashrafjfr"},"content":"    public static void printDateTimeParseExceptionMessage() {","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"ashrafjfr"},"content":"        System.out.println(LINE + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"ashrafjfr"},"content":"                + \"Apologies Sir, the date \u0026 time you entered is in the wrong format.\" + System.lineSeparator()","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"ashrafjfr"},"content":"                + \"Please re-enter the command with the date \u0026 time in the correct format [DD/MM/YYYY hhmm].\"","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"ashrafjfr"},"content":"                + System.lineSeparator() + LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"ashrafjfr"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"ashrafjfr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"ashrafjfr":141}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ashrafjfr"},"content":"todo read book","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"ashrafjfr"},"content":"deadline return book /by Tuesday","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"ashrafjfr"},"content":"bye","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"ashrafjfr":3}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ashrafjfr"},"content":"java -classpath ..\\bin jarvis\\Jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ashrafjfr":1,"-":20}}]
