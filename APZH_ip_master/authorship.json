[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"T | 1 | read book","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"D | 0 | return book | June 6th","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"E | 0 | project meeting | Aug 6th 2-4pm","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"T | 1 | join sports club","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"APZH":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"Duke is a **desktop application for managing tasks, optimised for usage","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"via a Command Line Interface (CLI).** If you can type fast, Duke can help","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"you manage your daily tasks faster than traditional GUI application.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"- [1. Quick Start](#1-quick-start)","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"- [2. Features](#2-features)","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"  - [2.1 Viewing help: `help`](#2-1-viewing-help--help)","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"  - [2.2 Adding a task:](#22-adding-a-task)","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"    - [2.2.1 Todo: `todo`](#221-todo-todo)","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    - [2.2.2 Deadline: `deadline`](#222-deadline-deadline)","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    - [2.2.3 Event: `event`](#223-event-event)","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"  - [2.3 Listing all tasks: `list`](#23-listing-all-tasks-list)","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"  - [2.4 Marking a task as done: `done`](#24-marking-a-task-as-done-done)","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"  - [2.5 Deleting a task: `delete`](#25-deleting-a-task-delete)","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"  - [2.6 Finding a task with a keyword: `find`](#26-finding-a-task-with-a-keyword-find)","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"  - [2.7 Exiting the program: `bye`](#27-exiting-the-program-bye)","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"  - [2.8 Saving the data](#28-saving-the-data)","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"- [3. FAQ](#3-faq)","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"- [4. Command Summary](#4-command-summary)","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"## 1. Quick Start","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"2. Download the latest `Duke_A0217143N.jar` from [here](https://github.com/APZH/ip/releases/tag/A-Release)","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for Duke.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"4. Open a terminal window in the _home folder_.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"5. Type `java -jar Duke_A0217143N.jar` into the terminal to start Duke. ","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"6. The following display should appear in a few seconds:","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"    ```","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    +++++++++++++++++++++++++++++++++++++++++++++","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"      __         __","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"     /  \\.-\"\"\"-./  \\     ____        _","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"     \\    -   -    /    |  _ \\ _   _| | _____","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"      |   o   o   |     | | | | | | | |/ / _ \\","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"      \\  .-\u0027\u0027\u0027-.  /     | |_| | |_| |   \u003c  __/","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"       \u0027-\\__Y__/-\u0027      |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"          `---`","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"    [A NUS CS2113T Project by: Peh Zhenhao, Amos]","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"    +++++++++++++++++++++++++++++++++++++++++++++","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"    ","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"    [Duke]:","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"    \u003d\u003e Hello! I\u0027m Duke :)","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"    \u003d\u003e I\u0027m so hungry, would you mind feeding me tasks?","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"    ","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"    [You]:","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"    \u003d\u003e ","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"    ```","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"7. You may now enter commands into Duke. Type a command beside the cursor `\u003d\u003e`","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"and press `Enter` on your keyboard to execute the command.","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"8. Some example commands you can try:","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"    - **`help`** : Displays all commands available for the Duke application.","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"    - **`todo read book`** : Adds a `Todo` task with description `read book` to the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"    - **`list`** : Lists all tasks in the tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"    - **`bye`** : Exit the Duke application.","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"9. Refer to the [Features](#2-features) below for details of each command.","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"## 2. Features","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"### 2. 1 Viewing help : `help`","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"Displays all commands available for the Duke application. ","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"**Format:** `help`","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"### 2.2 Adding a task:","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"### 2.2.1 Todo: `todo`","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"Adds a **todo** task to the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"**Format:** `todo [description]`","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"APZH"},"content":"- `[description]` specifies the details of the todo.","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":72,"author":{"gitId":"APZH"},"content":"**Example:** `todo read book`","lastModifiedDate":"2021-09-28"},{"lineNumber":73,"author":{"gitId":"APZH"},"content":"- Adds a todo task with description `read book` to the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"APZH"},"content":"- Specifies new number of tasks in tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":77,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"APZH"},"content":"\u003d\u003e todo read book","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"APZH"},"content":"\u003d\u003e Chomp-chomp! I\u0027ve added this new task:","lastModifiedDate":"2021-09-28"},{"lineNumber":84,"author":{"gitId":"APZH"},"content":"   \u003c[T][ ] read book\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"APZH"},"content":"\u003d\u003e Now you have 1 tasks in your list.","lastModifiedDate":"2021-09-28"},{"lineNumber":86,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":87,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"APZH"},"content":"### 2.2.2 Deadline: `deadline`","lastModifiedDate":"2021-09-28"},{"lineNumber":89,"author":{"gitId":"APZH"},"content":"Adds a **deadline** task to the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":91,"author":{"gitId":"APZH"},"content":"**Format:** `deadline [description] /by [due date]`","lastModifiedDate":"2021-09-28"},{"lineNumber":92,"author":{"gitId":"APZH"},"content":"- `[description]` specifies the details of the deadline.","lastModifiedDate":"2021-09-28"},{"lineNumber":93,"author":{"gitId":"APZH"},"content":"- `[due date]` specifies when the deadline is due.","lastModifiedDate":"2021-09-28"},{"lineNumber":94,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"APZH"},"content":"**Example:** `deadline return book /by June 6th`","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"APZH"},"content":"- Adds a deadline task with description `return book` and due date `June 6th` to the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"APZH"},"content":"- Specifies new number of tasks in tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":101,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":103,"author":{"gitId":"APZH"},"content":"\u003d\u003e deadline return book /by June 6th","lastModifiedDate":"2021-09-28"},{"lineNumber":104,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":105,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":106,"author":{"gitId":"APZH"},"content":"\u003d\u003e Chomp-chomp! I\u0027ve added this new task:","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"APZH"},"content":"   \u003c[D][ ] return book (by: June 6th)\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"APZH"},"content":"\u003d\u003e Now you have 2 tasks in your list.","lastModifiedDate":"2021-09-28"},{"lineNumber":109,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":111,"author":{"gitId":"APZH"},"content":"### 2.2.3 Event: `event`","lastModifiedDate":"2021-09-28"},{"lineNumber":112,"author":{"gitId":"APZH"},"content":"Adds a **event** task to the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":114,"author":{"gitId":"APZH"},"content":"**Format:** `event [description] /at [occurrence]`","lastModifiedDate":"2021-09-30"},{"lineNumber":115,"author":{"gitId":"APZH"},"content":"- `[description]` specifies the details of the event.","lastModifiedDate":"2021-09-28"},{"lineNumber":116,"author":{"gitId":"APZH"},"content":"- `[occurence]` specifies when the event occurs.","lastModifiedDate":"2021-09-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":118,"author":{"gitId":"APZH"},"content":"**Example:** `event project meeting /at Aug 6th 2-4pm`","lastModifiedDate":"2021-09-28"},{"lineNumber":119,"author":{"gitId":"APZH"},"content":"- Creates an event task with description `project meeting` and occurs at `Aug 6th 2-4pm` to the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":120,"author":{"gitId":"APZH"},"content":"- Specifies new number of tasks in tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":122,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":123,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":124,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":125,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":126,"author":{"gitId":"APZH"},"content":"\u003d\u003e event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-09-28"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":128,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":129,"author":{"gitId":"APZH"},"content":"\u003d\u003e Chomp-chomp! I\u0027ve added this new task:","lastModifiedDate":"2021-09-28"},{"lineNumber":130,"author":{"gitId":"APZH"},"content":"   \u003c[E][ ] project meeting (at: Aug 6th 2-4pm)\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":131,"author":{"gitId":"APZH"},"content":"\u003d\u003e Now you have 3 tasks in your list.","lastModifiedDate":"2021-09-28"},{"lineNumber":132,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":134,"author":{"gitId":"APZH"},"content":"### 2.3 Listing all tasks: `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":135,"author":{"gitId":"APZH"},"content":"Lists all tasks in the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":136,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":137,"author":{"gitId":"APZH"},"content":"**Format:** `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":138,"author":{"gitId":"APZH"},"content":"- The command displays the following information for each task:","lastModifiedDate":"2021-09-28"},{"lineNumber":139,"author":{"gitId":"APZH"},"content":"  - **Task id**: ","lastModifiedDate":"2021-09-28"},{"lineNumber":140,"author":{"gitId":"APZH"},"content":"    - A positive integer i.e. `1.` to identify the task","lastModifiedDate":"2021-09-28"},{"lineNumber":141,"author":{"gitId":"APZH"},"content":"  - **Task type**:","lastModifiedDate":"2021-09-28"},{"lineNumber":142,"author":{"gitId":"APZH"},"content":"    - A task can be either Todo, Deadline or Event and is represented with the first letter of their task type","lastModifiedDate":"2021-09-28"},{"lineNumber":143,"author":{"gitId":"APZH"},"content":"    - `[T]` represents a Todo","lastModifiedDate":"2021-09-28"},{"lineNumber":144,"author":{"gitId":"APZH"},"content":"    - `[D]` represents a Deadline","lastModifiedDate":"2021-09-28"},{"lineNumber":145,"author":{"gitId":"APZH"},"content":"    - `[E]` represents a Event","lastModifiedDate":"2021-09-28"},{"lineNumber":146,"author":{"gitId":"APZH"},"content":"  - **Whether the task is done**:","lastModifiedDate":"2021-09-28"},{"lineNumber":147,"author":{"gitId":"APZH"},"content":"    - A completed task is identified as `[X]`","lastModifiedDate":"2021-09-28"},{"lineNumber":148,"author":{"gitId":"APZH"},"content":"    - An incomplete task is identified as `[ ]`","lastModifiedDate":"2021-09-28"},{"lineNumber":149,"author":{"gitId":"APZH"},"content":"  - **Task description**:","lastModifiedDate":"2021-09-28"},{"lineNumber":150,"author":{"gitId":"APZH"},"content":"    - General details of the task","lastModifiedDate":"2021-09-28"},{"lineNumber":151,"author":{"gitId":"APZH"},"content":"- And specifies number of completed tasks.","lastModifiedDate":"2021-09-28"},{"lineNumber":152,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":153,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":154,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":155,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":156,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"APZH"},"content":"\u003d\u003e list","lastModifiedDate":"2021-09-28"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":159,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":160,"author":{"gitId":"APZH"},"content":"\u003d\u003e Ahh! Here are the tasks in your list:","lastModifiedDate":"2021-09-28"},{"lineNumber":161,"author":{"gitId":"APZH"},"content":"1.[T][ ] read book","lastModifiedDate":"2021-09-28"},{"lineNumber":162,"author":{"gitId":"APZH"},"content":"2.[D][ ] return book (by: June 6th)","lastModifiedDate":"2021-09-28"},{"lineNumber":163,"author":{"gitId":"APZH"},"content":"3.[E][ ] project meeting (at: Aug 6th 2-4pm)","lastModifiedDate":"2021-09-28"},{"lineNumber":164,"author":{"gitId":"APZH"},"content":"\u003d\u003e You have done 0/3 tasks in your list.","lastModifiedDate":"2021-09-28"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":166,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":167,"author":{"gitId":"APZH"},"content":"### 2.4 Marking a task as done: `done`","lastModifiedDate":"2021-09-28"},{"lineNumber":168,"author":{"gitId":"APZH"},"content":"Marks an existing task in the tasklist as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":169,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":170,"author":{"gitId":"APZH"},"content":"**Format:** `done [task ID]`","lastModifiedDate":"2021-09-28"},{"lineNumber":171,"author":{"gitId":"APZH"},"content":"- Mark a task with the specified `[task ID]` as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":172,"author":{"gitId":"APZH"},"content":"- The task ID refers to the index number shown in the displayed tasklist when the `list` command is entered.","lastModifiedDate":"2021-09-28"},{"lineNumber":173,"author":{"gitId":"APZH"},"content":"- The task ID **must be a positive integer 1, 2, 3...**","lastModifiedDate":"2021-09-28"},{"lineNumber":174,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":175,"author":{"gitId":"APZH"},"content":"**Example:** `done 1`","lastModifiedDate":"2021-09-28"},{"lineNumber":176,"author":{"gitId":"APZH"},"content":"- Marks the task with task ID equals to `1` as done in the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":177,"author":{"gitId":"APZH"},"content":"- Specifies number of completed tasks.","lastModifiedDate":"2021-09-28"},{"lineNumber":178,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":179,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":180,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":181,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":182,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":183,"author":{"gitId":"APZH"},"content":"\u003d\u003e done 1","lastModifiedDate":"2021-09-28"},{"lineNumber":184,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":185,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":186,"author":{"gitId":"APZH"},"content":"\u003d\u003e Burrrp! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-28"},{"lineNumber":187,"author":{"gitId":"APZH"},"content":"   \u003c[T][X] read book\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":188,"author":{"gitId":"APZH"},"content":"\u003d\u003e You have done 1/3 tasks in your list.","lastModifiedDate":"2021-09-28"},{"lineNumber":189,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":190,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":191,"author":{"gitId":"APZH"},"content":"### 2.5 Deleting a task: `delete`","lastModifiedDate":"2021-09-28"},{"lineNumber":192,"author":{"gitId":"APZH"},"content":"Deletes an existing task in the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":193,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":194,"author":{"gitId":"APZH"},"content":"**Format:** `delete [task ID]`","lastModifiedDate":"2021-09-28"},{"lineNumber":195,"author":{"gitId":"APZH"},"content":"- Deletes a task with the specified `[task ID]`.","lastModifiedDate":"2021-09-28"},{"lineNumber":196,"author":{"gitId":"APZH"},"content":"- The task ID refers to the index number shown in the displayed tasklist when the `list` command is entered.","lastModifiedDate":"2021-09-28"},{"lineNumber":197,"author":{"gitId":"APZH"},"content":"- The task ID **must be a positive integer 1, 2, 3...**","lastModifiedDate":"2021-09-28"},{"lineNumber":198,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":199,"author":{"gitId":"APZH"},"content":"**Example:** `delete 1`","lastModifiedDate":"2021-09-28"},{"lineNumber":200,"author":{"gitId":"APZH"},"content":"- Deletes the task with task ID equals to `1` in the tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":201,"author":{"gitId":"APZH"},"content":"- Specifies new number of tasks in tasklist.","lastModifiedDate":"2021-09-28"},{"lineNumber":202,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":203,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":204,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":205,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":206,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":207,"author":{"gitId":"APZH"},"content":"\u003d\u003e delete 1","lastModifiedDate":"2021-09-28"},{"lineNumber":208,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":209,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":210,"author":{"gitId":"APZH"},"content":"\u003d\u003e Blaargh! I\u0027ve deleted this task from the list:","lastModifiedDate":"2021-09-28"},{"lineNumber":211,"author":{"gitId":"APZH"},"content":"   \u003c[T][X] read book\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":212,"author":{"gitId":"APZH"},"content":"\u003d\u003e Now you have 2 tasks in your list.","lastModifiedDate":"2021-09-28"},{"lineNumber":213,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":214,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":215,"author":{"gitId":"APZH"},"content":"### 2.6 Finding a task with a keyword: `find`","lastModifiedDate":"2021-09-28"},{"lineNumber":216,"author":{"gitId":"APZH"},"content":"Find tasks whose description contains a given keyword.","lastModifiedDate":"2021-09-28"},{"lineNumber":217,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":218,"author":{"gitId":"APZH"},"content":"**Format:** `find [keyword]`","lastModifiedDate":"2021-09-28"},{"lineNumber":219,"author":{"gitId":"APZH"},"content":"- The search is case-sensitive. e.g. `book` will not match `Book`","lastModifiedDate":"2021-09-28"},{"lineNumber":220,"author":{"gitId":"APZH"},"content":"- The order of the keywords matter. e.g. `return book` will not match `book return`","lastModifiedDate":"2021-09-28"},{"lineNumber":221,"author":{"gitId":"APZH"},"content":"- The keyword will match substrings. e.g. `oo` will match with `book`","lastModifiedDate":"2021-09-28"},{"lineNumber":222,"author":{"gitId":"APZH"},"content":"- Only the task description is searched.","lastModifiedDate":"2021-09-28"},{"lineNumber":223,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":224,"author":{"gitId":"APZH"},"content":"**Example:** `find book`","lastModifiedDate":"2021-09-28"},{"lineNumber":225,"author":{"gitId":"APZH"},"content":"- Finds all tasks that contains the substring `book` in their task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":226,"author":{"gitId":"APZH"},"content":"- Specifies number of successful search results returned.","lastModifiedDate":"2021-09-28"},{"lineNumber":227,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":228,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":229,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":230,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":231,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":232,"author":{"gitId":"APZH"},"content":"\u003d\u003e find book","lastModifiedDate":"2021-09-28"},{"lineNumber":233,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":234,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":235,"author":{"gitId":"APZH"},"content":"\u003d\u003e Ahh! Here are the matching tasks in your list:","lastModifiedDate":"2021-09-28"},{"lineNumber":236,"author":{"gitId":"APZH"},"content":"1.[T][ ] read book","lastModifiedDate":"2021-09-28"},{"lineNumber":237,"author":{"gitId":"APZH"},"content":"2.[D][ ] return book (by: June 6th)","lastModifiedDate":"2021-09-28"},{"lineNumber":238,"author":{"gitId":"APZH"},"content":"\u003d\u003e It has successfully returned 2 result/s.","lastModifiedDate":"2021-09-28"},{"lineNumber":239,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":240,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":241,"author":{"gitId":"APZH"},"content":"### 2.7 Exiting the program: `bye`","lastModifiedDate":"2021-09-28"},{"lineNumber":242,"author":{"gitId":"APZH"},"content":"Displays goodbye message and exits the program.","lastModifiedDate":"2021-09-28"},{"lineNumber":243,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":244,"author":{"gitId":"APZH"},"content":"**Format:** `bye`","lastModifiedDate":"2021-09-28"},{"lineNumber":245,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":246,"author":{"gitId":"APZH"},"content":"**Expected Outcome:**","lastModifiedDate":"2021-09-28"},{"lineNumber":247,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":248,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":249,"author":{"gitId":"APZH"},"content":"[You]:","lastModifiedDate":"2021-09-28"},{"lineNumber":250,"author":{"gitId":"APZH"},"content":"\u003d\u003e bye","lastModifiedDate":"2021-09-28"},{"lineNumber":251,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":252,"author":{"gitId":"APZH"},"content":"[Duke]:","lastModifiedDate":"2021-09-28"},{"lineNumber":253,"author":{"gitId":"APZH"},"content":"\u003d\u003e Come back soon, I\u0027m still hungry!","lastModifiedDate":"2021-09-28"},{"lineNumber":254,"author":{"gitId":"APZH"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":255,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":256,"author":{"gitId":"APZH"},"content":"### 2.8 Saving the data","lastModifiedDate":"2021-09-28"},{"lineNumber":257,"author":{"gitId":"APZH"},"content":"For first time users, a default folder `data` is created upon running the Duke program. ","lastModifiedDate":"2021-09-28"},{"lineNumber":258,"author":{"gitId":"APZH"},"content":"A text file `duke.txt` is also generated in the `data` folder to serve as the local storage","lastModifiedDate":"2021-09-28"},{"lineNumber":259,"author":{"gitId":"APZH"},"content":"to store the user\u0027s task data.","lastModifiedDate":"2021-09-28"},{"lineNumber":260,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":261,"author":{"gitId":"APZH"},"content":"\u003e **Note**: The `data` folder is created in the same directory as `Duke_A0217143N.jar`.","lastModifiedDate":"2021-09-30"},{"lineNumber":262,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":263,"author":{"gitId":"APZH"},"content":"The user\u0027s tasklist data are saved to `duke.txt` automatically after any command","lastModifiedDate":"2021-09-28"},{"lineNumber":264,"author":{"gitId":"APZH"},"content":"that modifies the tasklist. e.g. adding a task, deleting a task, marking a task as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":265,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":266,"author":{"gitId":"APZH"},"content":"There is no need to manually save the data.","lastModifiedDate":"2021-09-28"},{"lineNumber":267,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":268,"author":{"gitId":"APZH"},"content":"## 3. FAQ","lastModifiedDate":"2021-09-28"},{"lineNumber":269,"author":{"gitId":"APZH"},"content":"**Q:** How do I transfer my data to another computer?","lastModifiedDate":"2021-09-28"},{"lineNumber":270,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":271,"author":{"gitId":"APZH"},"content":"**A:** Install the program on the other computer and replace the new empty `duke.txt`","lastModifiedDate":"2021-09-28"},{"lineNumber":272,"author":{"gitId":"APZH"},"content":"it creates with the `duke.txt` that you wish to transfer from your previous `Duke.jar`","lastModifiedDate":"2021-09-28"},{"lineNumber":273,"author":{"gitId":"APZH"},"content":"home folder.","lastModifiedDate":"2021-09-28"},{"lineNumber":274,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":275,"author":{"gitId":"APZH"},"content":"## 4. Command Summary","lastModifiedDate":"2021-09-28"},{"lineNumber":276,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":277,"author":{"gitId":"APZH"},"content":"Action   | Format                                  | Example                                   |","lastModifiedDate":"2021-09-28"},{"lineNumber":278,"author":{"gitId":"APZH"},"content":"-------- | --------------------------------------- | ----------------------------------------- |","lastModifiedDate":"2021-09-28"},{"lineNumber":279,"author":{"gitId":"APZH"},"content":"help     | `help`                                  | `help`                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":280,"author":{"gitId":"APZH"},"content":"todo     | `todo [description]`                    | `todo read book`                          |","lastModifiedDate":"2021-09-28"},{"lineNumber":281,"author":{"gitId":"APZH"},"content":"deadline | `deadline [description] /by [due date]` | `deadline return book /by June 6th`       |","lastModifiedDate":"2021-09-28"},{"lineNumber":282,"author":{"gitId":"APZH"},"content":"event    | `event [description] /at [occurrence]`  | `event project meeting /at Aug 6th 2-4pm` |","lastModifiedDate":"2021-09-30"},{"lineNumber":283,"author":{"gitId":"APZH"},"content":"list     | `list`                                  | `list`                                    |","lastModifiedDate":"2021-09-28"},{"lineNumber":284,"author":{"gitId":"APZH"},"content":"done     | `done [task ID]`                        | `done 1`                                  |","lastModifiedDate":"2021-09-28"},{"lineNumber":285,"author":{"gitId":"APZH"},"content":"delete   | `delete [task ID]`                      | `delete 1`                                |","lastModifiedDate":"2021-09-28"},{"lineNumber":286,"author":{"gitId":"APZH"},"content":"find     | `find [keyword]`                        | `find book`                               |","lastModifiedDate":"2021-09-28"},{"lineNumber":287,"author":{"gitId":"APZH"},"content":"bye      | `bye`                                   | `bye`                                     |","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"APZH":267,"-":20}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.command.CommandResult;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"import duke.ui.DukeInterface;","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"import duke.local.DataManager;","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":" * \u003ch1\u003eDuke\u003c/h1\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":" * The Duke program implements a command-line application","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":" * that allows users to keep track of their tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":" * Some inspiration for code abstraction and organisation were adapted","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":" * from the {@code addressbook-level2} Java application on GitHub.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":" * The code for {@code addressbook-level2} can be found at the following link:","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":" * \u003ca href\u003d\"https://github.com/se-edu/addressbook-level2\"\u003e{@link https://github.com/se-edu/addressbook-level2}\u003c/a\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":" *","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":" * @author Peh Zhenhao, Amos","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":" * @version 0.2","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"    private final Scanner in;","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"    private final DukeInterface dukeUi;","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    private final DataManager dataManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"    private final Parser parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    private final String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"     * Sets up required objects needed for Duke to run.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"     * Creates new instances of Scanner, DukeInterface, DataManager, TaskManager, Parser","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"     * and initializes any pre-existing tasks stored in duke.txt into {@code taskManager}.","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"    public Duke() {","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"        dukeUi \u003d new DukeInterface();","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"        dataManager \u003d new DataManager(FILE_PATH);","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"        taskManager \u003d new TaskManager();","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"        taskManager.setTasks(dataManager.getLoadedTaskList());","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"     * Prints cursor for user and reads user input typed into the terminal.","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"     * @return user\u0027s terminal input.","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"    public String readInput() {","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"        dukeUi.printUserName();","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"        dukeUi.printCursor();","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"        return input;","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"     * Executes user command and returns the appropriate command result.","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"     * If an exception occurs, returns a {@code CommandResult} object containing the error message.","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"APZH"},"content":"     * @param userCommand {@code Command} object to be executed.","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"     * @return the {@code CommandResult} object after executing the command.","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"APZH"},"content":"    public CommandResult runCommand(Command userCommand) {","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"APZH"},"content":"        CommandResult commandResult \u003d null;","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"APZH"},"content":"            commandResult \u003d userCommand.executeCommand();","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"APZH"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"APZH"},"content":"            commandResult \u003d new CommandResult(e.toString(), false, false);","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"APZH"},"content":"        return commandResult;","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"APZH"},"content":"     * Checks and saves any changes made to the user\u0027s tasklist to duke.txt.","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"APZH"},"content":"     * @param commandResult contains {@code isModified} variable to see if changes were made to the tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"APZH"},"content":"    public void saveTaskListChangesIfAny(CommandResult commandResult) {","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"APZH"},"content":"        if (commandResult.getIsModified() \u003d\u003d true) {","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"APZH"},"content":"            taskManager \u003d commandResult.getTaskManager();","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"APZH"},"content":"            dataManager.writeToFile(taskManager.getTasks());","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"APZH"},"content":"     * Reads and executes user commands, and saves any changes made to the tasklist","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"APZH"},"content":"     * until the {@code bye} command is entered by the user, which exits the program.","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"APZH"},"content":"    public void startDuke() {","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"APZH"},"content":"        dukeUi.printLogo();","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"APZH"},"content":"        dukeUi.printWelcomeMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"APZH"},"content":"        Command userCommand;","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"APZH"},"content":"        CommandResult commandResult \u003d null;","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":105,"author":{"gitId":"APZH"},"content":"        do {","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"APZH"},"content":"            String userInput \u003d readInput();","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"APZH"},"content":"            userCommand \u003d parser.parseCommand(taskManager, userInput);","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"APZH"},"content":"            commandResult \u003d runCommand(userCommand);","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":113,"author":{"gitId":"APZH"},"content":"            saveTaskListChangesIfAny(commandResult);","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"APZH"},"content":"            dukeUi.printDukeMessage(commandResult.getDukeMessage());","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"APZH"},"content":"        } while (commandResult.getIsExited() !\u003d true);","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":120,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":121,"author":{"gitId":"APZH"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-17"},{"lineNumber":122,"author":{"gitId":"APZH"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-21"},{"lineNumber":123,"author":{"gitId":"APZH"},"content":"        duke.startDuke();","lastModifiedDate":"2021-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":125,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"APZH":123,"-":3}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.DeadlineFormatException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":" * Represents an add {@code Deadline} task command.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":" * This command adds a new {@code Deadline} task into the user\u0027s existing tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public AddDeadlineCommand(TaskManager taskManager, String commandArguments) {","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        super(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     * Executes the command to add a {@code Deadline} task into the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     * Stores the message to be displayed to the user into {@code dukeMessage}","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     * and to be passed as an input parameter of the {@code CommandResult} object to be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"        String dukeMessage \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d taskManager.addDeadline(commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"        } catch (DeadlineFormatException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, dukeMessage, true, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":37}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.EventFormatException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":" * Represents an add {@code Event} task command.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":" * This command adds a new {@code Event} task into the user\u0027s existing tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public AddEventCommand(TaskManager taskManager, String commandArguments) {","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        super(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     * Executes the command to add a {@code Event} task into the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     * Stores the message to be displayed to the user into {@code dukeMessage}","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     * and to be passed as an input parameter of the {@code CommandResult} object to be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"        String dukeMessage \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d taskManager.addEvent(commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"        } catch (EventFormatException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, dukeMessage, true, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":36}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.ToDoFormatException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":" * Represents an add {@code ToDo} task command.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":" * This command adds a new {@code ToDo} task into the user\u0027s existing tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public AddToDoCommand(TaskManager taskManager, String commandArguments) {","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        super(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     * Executes the command to add a {@code ToDo} task into the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     * Stores the message to be displayed to the user into {@code dukeMessage}","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     * and to be passed as an input parameter of the {@code CommandResult} object to be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"        String dukeMessage \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d taskManager.addToDo(commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"        } catch (ToDoFormatException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, dukeMessage, true, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":37}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" * Represents a command.","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"     * {@code taskManager} represents and contains the tasklist that the command will be executing upon.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    public TaskManager taskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"     * {@code commandArguments} represents the arguments for the command.","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"    public String commandArguments;","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     * Empty default constructor for {@code Command} subclasses that do not take in any parameters.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * Example of such subclasses would include: InvalidCommand, HelpCommand, TerminateCommand.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    public Command() {","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"     * Constructor for commands that only require {@code TaskManager} object as a parameter.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"     * Example of such subclasses would include: ListCommand.","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    public Command(TaskManager taskManager) {","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        this.taskManager \u003d taskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"     * Constructor for commands that requires both {@code TaskManager} object and command arguments as parameters.","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"     * Example of such subclasses would include: AddToDoCommand, AddDeadlineCommand, AddEventCommand,","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"     * SetTaskDoneCommand, DeleteTaskCommand, FindTaskCommand.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"    public Command(TaskManager taskManager, String commandArguments) {","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"        this.taskManager \u003d taskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"     * @throws Exception if the command is executed by the abstract {@Command} parent class, which is not allowed.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"    public abstract CommandResult executeCommand() throws Exception;","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":53}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"public class CommandResult {","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"     * Represents the updated {@code TaskManager} object that was produced by the command.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"     * Indicates whether the command executed will modify {@code taskManager}.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"    private boolean isModified;","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * Indicates whether the command executed is to terminate Duke\u0027s program.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     * Only the \"bye\" command will initialise {@code isExited} to be {@code true};","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    private boolean isExited;","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"     * Indicates the message to be displayed to the user after the command execution.","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"     * Contains description of the command execution result.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"    private String dukeMessage;","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"     * Constructor for command execution results that do not modify the {@code TaskManager} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    public CommandResult(String dukeMessage, boolean isModified, boolean isExited) {","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"        this.isModified \u003d isModified;","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"        this.isExited \u003d isExited;","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"        this.dukeMessage \u003d dukeMessage;","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"     * Constructor for command execution results that modifies the {@code TaskManager} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"    public CommandResult(TaskManager taskManager, String dukeMessage, boolean isModified, boolean isExited) {","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"        this.taskManager \u003d taskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"        this.isModified \u003d isModified;","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"        this.isExited \u003d isExited;","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"        this.dukeMessage \u003d dukeMessage;","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"     * Gets {@code TaskManager} object containing the user\u0027s tasklist after executing a {@code Command} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"    public TaskManager getTaskManager() {","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"        return this.taskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"     * Gets {@code dukeMessage} to be displayed to user after executing a {@code Command} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"    public String getDukeMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"        return this.dukeMessage;","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"     * Gets {@code isModified} to check if {@code TaskManager} was changed after executing a {@code Command} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"APZH"},"content":"    public boolean getIsModified() {","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"        return this.isModified;","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"APZH"},"content":"     * Gets {@code isExited} to check if the {@code Command} object executed results in the termination of Duke.","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"APZH"},"content":"    public boolean getIsExited() {","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"APZH"},"content":"        return this.isExited;","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":80}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.DeleteFormatException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.exception.InvalidTaskIdException;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":" * Represents a command to delete a {@code Task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":" * The command deletes an existing task from the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    public DeleteTaskCommand(TaskManager taskManager, String commandArguments) {","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"        super(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     * Executes the command to delete a task from the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     * Stores the message to be displayed to the user into {@code dukeMessage}","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     * and to be passed as an input parameter of the {@code CommandResult} object to be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"        String dukeMessage \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d taskManager.deleteTask(commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"        } catch (DeleteFormatException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"        } catch (InvalidTaskIdException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, dukeMessage, true, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":39}},{"path":"src/main/java/duke/command/FindTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.NoTaskFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":" * Represents a command to find a {@code Task} in the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":" * The command searches all tasks in the user\u0027s tasklist that contains a given keyword in their task description.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"public class FindTaskCommand extends Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public FindTaskCommand (TaskManager taskManager, String commandArguments) {","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        super(taskManager, commandArguments);","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     * Executes the command to search through all tasks in the user\u0027s tasklist that contains the search term.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     * Stores the message to be displayed to the user into {@code dukeMessage}","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     * and to be passed as an input parameter of the {@code CommandResult} object to be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"        String dukeMessage \u003d \"\";","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d taskManager.findTask(commandArguments);","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"        } catch (NoTaskFoundException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, dukeMessage, false, false);","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"APZH":37}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents a command to print the help message.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    // Message containing list of all available Duke commands and their input formats required.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String HELP_MSG \u003d \"Here are the types of commands available [?]:\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \"1. Terminate Duke            -\u003e bye \\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"            + \"2. Print Available Commands  -\u003e help \\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"            + \"3. Print Tasklist            -\u003e list \\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"            + \"4. Add Todos                 -\u003e todo [description]\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"            + \"5. Add Deadlines             -\u003e deadline [description] /by [due date]\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"            + \"6. Add Events                -\u003e event [description] /at [occurence]\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"            + \"7. Set Task as Done          -\u003e done [task ID]\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"            + \"8. Delete Task               -\u003e delete [task ID]\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"            + \"9. Find Task                 -\u003e find [keyword]\";","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * Executes the command to print the {@code HELP_MSG} to the user\u0027s terminal.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"        return new CommandResult(HELP_MSG, false, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":30}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an invalid command.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    // Message notifying user that their command is invalid.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String INVALID_COMMAND_MSG \u003d \"Yikes, I do not recognise your input! (refer to \u0027help\u0027 command)\";","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"     * Executes the command to print the {@code INVALID_COMMAND_MSG} to the user\u0027s terminal.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, INVALID_COMMAND_MSG, false, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":20}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.EmptyTasklistException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":" * Represents a command to list all {@code Task} in a tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":" * The command prints all current tasks in the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"public class ListCommand extends Command{","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public ListCommand(TaskManager taskManager) {","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        super(taskManager);","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     * Executes the command to show all current tasks in the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     * Stores the message to be displayed to the user into {@code dukeMessage}","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     * and to be passed as an input parameter of the {@code CommandResult} object to be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"        String dukeMessage \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d taskManager.getTasklistEntries();","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"        } catch (EmptyTasklistException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, dukeMessage, false, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":37}},{"path":"src/main/java/duke/command/SetTaskDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.DoneFormatException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.exception.InvalidTaskIdException;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"import duke.exception.TaskAlreadyDoneException;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":" * Represents a command to mark a {@code Task} as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":" * This command marks an existing task in the user\u0027s tasklist that is incomplete to done.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"public class SetTaskDoneCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    public SetTaskDoneCommand(TaskManager taskManager, String commandArguments) {","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"        super(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     * Executes the command to mark a {@code Task} in the user\u0027s tasklist as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     * Stores the message to be displayed to the user into {@code dukeMessage}","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * and to be passed as an input parameter of the {@code CommandResult} object to be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"        String dukeMessage \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d taskManager.setTaskComplete(commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        } catch (DoneFormatException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        } catch (InvalidTaskIdException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"        } catch (TaskAlreadyDoneException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"            dukeMessage \u003d e.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"        return new CommandResult(taskManager, dukeMessage, true, false);","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":43}},{"path":"src/main/java/duke/command/TerminateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents a command to terminate the Duke program.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class TerminateCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    // Message displayed prior to Duke terminating.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String EXIT_MSG \u003d \"Come back soon, I\u0027m still hungry!\";","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"     * Executes the command to terminate Duke and print the {@code EXIT_MSG} to the user\u0027s terminal.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"     * @return the command result of the execution.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"        return new CommandResult(EXIT_MSG, false, true);","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":21}},{"path":"src/main/java/duke/exception/DeadlineFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception where the user\u0027s Deadline command does not comply with the correct format.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" * Deadline command correct format: deadline [task description] /by [task date\u0026time].","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"public class DeadlineFormatException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String DEADLINE_INCORRECT_FORMAT_MSG \u003d \"Yikes, your deadline command is wrong!\"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \" Please follow the format:\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"            + \"   [?] 5. Add Deadlines -\u003e deadline [description] /by [due date]\";","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"        return DEADLINE_INCORRECT_FORMAT_MSG;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"APZH":18}},{"path":"src/main/java/duke/exception/DeleteFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception where the user\u0027s delete command does not comply with the correct format.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" * Delete command correct format: delete [task ID], where task ID must be an integer.","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"public class DeleteFormatException extends Exception {","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String DELETE_INCORRECT_FORMAT_MSG \u003d \"Yikes, your delete command is wrong!\"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \" Please follow the format:\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"            + \"   [?] 8. Delete Task -\u003e delete [task ID]\";","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"        return DELETE_INCORRECT_FORMAT_MSG;","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"APZH":18}},{"path":"src/main/java/duke/exception/DoneFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception where the user\u0027s done command does not comply with the correct format.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" * Delete command correct format: done [task ID], where task ID must be an integer.","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"public class DoneFormatException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String DONE_INCORRECT_FORMAT_MSG \u003d \"Yikes, your done command is wrong!\"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \" Please follow the format:\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"            + \"   [?] 7. Set Task as Done -\u003e done [task ID]\";","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"        return DONE_INCORRECT_FORMAT_MSG;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"APZH":18}},{"path":"src/main/java/duke/exception/EmptyTasklistException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception when the user executes the list command when their tasklist is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class EmptyTasklistException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    private final String TASKLIST_EMPTY_MSG \u003d \"Yikes, there are currently no tasks in the tasklist!\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"            + \"\u003d\u003e Please kindly add a task (todo/deadline/event) first...\";","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        return TASKLIST_EMPTY_MSG;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"APZH":16}},{"path":"src/main/java/duke/exception/EventFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception where the user\u0027s Event command does not comply with the correct format.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" * Event command correct format: event [task description] /at [task date\u0026time].","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"public class EventFormatException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String EVENT_INCORRECT_FORMAT_MSG \u003d \"\u003d\u003e Yikes, your event command is wrong!\"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \" Please follow the format:\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"            + \"   [?] 6. Add Events -\u003e event [description] /at [occurrence]\";","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"        return EVENT_INCORRECT_FORMAT_MSG;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"APZH":18}},{"path":"src/main/java/duke/exception/InvalidTaskIdException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception when the user executes the done or delete command","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" * with a task ID that does not exist in the user\u0027s tasklist (negative or bigger than the tasklist size).","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"public class InvalidTaskIdException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String INVALID_TASK_ID_MSG \u003d \"Yikes, the task id given is out of range of the tasklist!\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \"\u003d\u003e Please enter another task id...\";","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"        return INVALID_TASK_ID_MSG;","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"APZH":17}},{"path":"src/main/java/duke/exception/NoTaskFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception where the find command produces no results with the supplied keyword by the user.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class NoTaskFoundException extends Exception {","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    private final String NO_TASK_FOUND_MSG \u003d \"Yikes, the keyword supplied returned 0 results!\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"            + \"\u003d\u003e Please enter another keyword...\";","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        return NO_TASK_FOUND_MSG;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"APZH":16}},{"path":"src/main/java/duke/exception/TaskAlreadyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception where the user tries to mark an already completed task as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class TaskAlreadyDoneException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    private final String TASK_ALREADY_DONE_MSG \u003d \"Yikes, this task is already marked done!\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"            + \"\u003d\u003e Please enter another task to complete...\";","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"        return TASK_ALREADY_DONE_MSG;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"APZH":16}},{"path":"src/main/java/duke/exception/ToDoFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents an exception where the user\u0027s ToDo command does not comply with the correct format.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" * ToDo command correct format: todo [task description].","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"public class ToDoFormatException extends Exception {","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    private final String TODO_INCORRECT_FORMAT_MSG \u003d \"Yikes, your todo command is wrong!\"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \" Please follow the format:\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"            + \"   [?] 4. Add Todos -\u003e todo [description]\";","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"        return TODO_INCORRECT_FORMAT_MSG;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"APZH":18}},{"path":"src/main/java/duke/local/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.local;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import java.io.File;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":" * Handles reading and writing of the user\u0027s tasklist to a local storage file (default: {@code duke.txt}).","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"public class DataManager {","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     * Represents the file path of the local storage file containing the user\u0027s tasklist entries.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    private final String filePath;","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"     * Represents the file object of the local storage file pointed by {@code filePath}.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"    private final File dataFile;","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    private final String FILE_SEPARATOR_REGEX \u003d \"\\\\s\\\\|\\\\s\";","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"    private final String TODO_TYPE \u003d \"T\";","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"    private final String DEADLINE_TYPE \u003d \"D\";","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    private final String EVENT_TYPE \u003d \"E\";","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"    private final String FILE_NOT_FOUND_MSG \u003d \"[!] File does not exist! Trying to create duke.txt...\";","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"    private final String FILE_CREATION_SUCCESS_MSG \u003d \"[!] duke.txt created successfully...\";","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"    private final String FILE_CREATION_ERROR_MSG \u003d \"[!] File cannot be created!\";","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"    private final String FILE_WRITE_ERROR_MSG \u003d \"[!] File cannot be written to!\";","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"     * Constructor that initialises the String {@code filePath} and File {@code dataFile} variable.","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"     * @param filePath file path pointing to the location of the local storage file containing the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"    public DataManager(String filePath) {","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"        this.dataFile \u003d new File(filePath);","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"     * Gets the user\u0027s tasklist entries from the local storage file as an {@code ArrayList\u003cTask\u003e} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"     * If the local storage file {@code dataFile} cannot be found, it creates a new empty storage file.","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"     * @return {@code ArrayList\u003cTask\u003e} object of user\u0027s tasks retrieved from the local storage file.","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"    public ArrayList\u003cTask\u003e getLoadedTaskList() {","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"APZH"},"content":"            tasks \u003d loadDataIntoTaskList();","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"        } catch (FileNotFoundException e1) {","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"APZH"},"content":"            System.out.println(FILE_NOT_FOUND_MSG);","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"            try {","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"APZH"},"content":"                createFile();","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"APZH"},"content":"                System.out.println(FILE_CREATION_SUCCESS_MSG);","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"APZH"},"content":"            } catch (IOException e2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"APZH"},"content":"                System.out.println(FILE_CREATION_ERROR_MSG);","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"APZH"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"APZH"},"content":"        return tasks;","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"APZH"},"content":"     * Creates a new local storage file, and it\u0027s parent directories.","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"APZH"},"content":"     * @throws IOException if the file path is unavailable.","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"APZH"},"content":"    public void createFile() throws IOException {","lastModifiedDate":"2021-09-14"},{"lineNumber":86,"author":{"gitId":"APZH"},"content":"        Files.createDirectories(Path.of(dataFile.getParent()));","lastModifiedDate":"2021-09-14"},{"lineNumber":87,"author":{"gitId":"APZH"},"content":"        dataFile.createNewFile();","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"APZH"},"content":"     * Loads and returns the user\u0027s tasklist entries from the {@code dataFile} into an {@code ArrayList\u003cTask\u003e} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"APZH"},"content":"     * @return {@code ArrayList\u003cTask\u003e} object containing the tasklist of the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"APZH"},"content":"     * @throws FileNotFoundException if the {@code dataFile} does not exist.","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"APZH"},"content":"    public ArrayList\u003cTask\u003e loadDataIntoTaskList() throws FileNotFoundException {","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"APZH"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"APZH"},"content":"        Scanner in \u003d new Scanner(dataFile);","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"APZH"},"content":"        while (in.hasNext()) {","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"APZH"},"content":"            String task \u003d in.nextLine();","lastModifiedDate":"2021-09-14"},{"lineNumber":102,"author":{"gitId":"APZH"},"content":"            String[] taskArgs \u003d task.split(FILE_SEPARATOR_REGEX, 4);","lastModifiedDate":"2021-09-14"},{"lineNumber":103,"author":{"gitId":"APZH"},"content":"            String taskType \u003d taskArgs[0];","lastModifiedDate":"2021-09-14"},{"lineNumber":104,"author":{"gitId":"APZH"},"content":"            boolean isDone \u003d taskArgs[1].equals(\"1\");","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"APZH"},"content":"            String taskDescription \u003d taskArgs[2];","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"APZH"},"content":"            String byAtDescription \u003d \"\";","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":108,"author":{"gitId":"APZH"},"content":"            if (taskArgs.length \u003d\u003d 4) {","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"APZH"},"content":"                byAtDescription \u003d taskArgs[3].trim();","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"APZH"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":111,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":112,"author":{"gitId":"APZH"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"APZH"},"content":"            case TODO_TYPE:","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"APZH"},"content":"                Task newToDo \u003d new ToDo(taskDescription.trim(), isDone);","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"APZH"},"content":"                tasks.add(newToDo);","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"APZH"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":117,"author":{"gitId":"APZH"},"content":"            case DEADLINE_TYPE:","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"APZH"},"content":"                Task newDeadline \u003d new Deadline(taskDescription.trim(), isDone, byAtDescription);","lastModifiedDate":"2021-09-22"},{"lineNumber":119,"author":{"gitId":"APZH"},"content":"                tasks.add(newDeadline);","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"APZH"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"APZH"},"content":"            case EVENT_TYPE:","lastModifiedDate":"2021-09-14"},{"lineNumber":122,"author":{"gitId":"APZH"},"content":"                Task newEvent \u003d new Event(taskDescription.trim(), isDone, byAtDescription);","lastModifiedDate":"2021-09-22"},{"lineNumber":123,"author":{"gitId":"APZH"},"content":"                tasks.add(newEvent);","lastModifiedDate":"2021-09-22"},{"lineNumber":124,"author":{"gitId":"APZH"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"APZH"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":126,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":127,"author":{"gitId":"APZH"},"content":"        return tasks;","lastModifiedDate":"2021-09-22"},{"lineNumber":128,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"APZH"},"content":"     * Writes tasklist {@code tasks} into the local storage file {@code dataFile}.","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"APZH"},"content":"     * @param tasks tasklist to be written to the {@code dataFile}.","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"APZH"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":137,"author":{"gitId":"APZH"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":138,"author":{"gitId":"APZH"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-14"},{"lineNumber":139,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":140,"author":{"gitId":"APZH"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"APZH"},"content":"                fw.write(tasks.get(i).getTaskFileFormat() + \"\\n\");","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"APZH"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":143,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":144,"author":{"gitId":"APZH"},"content":"            fw.close();","lastModifiedDate":"2021-09-14"},{"lineNumber":145,"author":{"gitId":"APZH"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":146,"author":{"gitId":"APZH"},"content":"            System.out.println(FILE_WRITE_ERROR_MSG);","lastModifiedDate":"2021-09-14"},{"lineNumber":147,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":148,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":149,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":150,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":151,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"APZH":151}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"import duke.command.DeleteTaskCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"import duke.command.FindTaskCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"import duke.command.InvalidCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"import duke.command.SetTaskDoneCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"import duke.command.TerminateCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":" * Parses user input.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"public class Parser {","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"    // All valid commands the user can type","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    private final String TERMINATE_CMD \u003d \"bye\";","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    private final String HELP_CMD \u003d \"help\";","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    private final String LIST_CMD \u003d \"list\";","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"    private final String ADD_TODO_CMD \u003d \"todo\";","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"    private final String ADD_DEADLINE_CMD \u003d \"deadline\";","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"    private final String ADD_EVENT_CMD \u003d \"event\";","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"    private final String SET_TASK_DONE_CMD \u003d \"done\";","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"    private final String DELETE_TASK_CMD \u003d \"delete\";","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    private final String FIND_TASK_CMD \u003d \"find\";","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"     * Parses a {@code userInput} and returns a {@code Command} to be executed.","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"     * @param taskManager {@code TaskManager} object that contains the tasklist to be executed upon.","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"     * @param userInput   full raw user input to determine the {@code Command} to be executed.","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"     * @return {@code Command} to be executed.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"    public Command parseCommand(TaskManager taskManager, String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"        String[] inputArguments \u003d userInput.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"        String command \u003d inputArguments[0];","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"        String commandArguments \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"        if (inputArguments.length \u003d\u003d 2) {","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"            commandArguments \u003d inputArguments[1];","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"        switch (command) {","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"        case TERMINATE_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"            return new TerminateCommand();","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"        case HELP_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"        case LIST_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"            return new ListCommand(taskManager);","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"        case ADD_TODO_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"            return new AddToDoCommand(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"        case ADD_DEADLINE_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"            return new AddDeadlineCommand(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"        case ADD_EVENT_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"            return new AddEventCommand(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"        case SET_TASK_DONE_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"            return new SetTaskDoneCommand(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"APZH"},"content":"        case DELETE_TASK_CMD:","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"            return new DeleteTaskCommand(taskManager, commandArguments);","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"        case FIND_TASK_CMD:","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"            return new FindTaskCommand(taskManager, commandArguments);","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"APZH"},"content":"        default:","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"            return new InvalidCommand();","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"APZH":73}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents a {@code Deadline} task (Subclass of {@code Task}).","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"     * Represents the deadline of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    protected String by;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in {@code description} and {@code by} only.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"     * @param description description of the Deadline task.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     * @param by          deadline of the Deadline task.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in {@code description}, {@code isDone} and {@code by}.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"     * @param description description of the Deadline task.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"     * @param isDone      whether the Deadline task is done.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"     * @param by          deadline of the Deadline task.","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    public Deadline(String description, boolean isDone, String by) {","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"     * Gets full task description of a {@code Deadline} task and the task type symbol.","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"     * @return a String containing the task type symbol, description and isDone status.","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"        return \"[D]\" + super.getTaskDescription() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"     * Gets task information that matches the format of the {@code Deadline} tasks stored in duke.txt.","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"     * @return a String in the format of duke.txt {@code Deadline} task entry.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"    public String getTaskFileFormat() {","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"        String isDoneString \u003d \"0\";","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"            isDoneString \u003d \"1\";","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"        return \"D | \" + isDoneString + \" | \" + description + \" | \" + by;","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"APZH":62}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents a {@code Event} task (Subclass of {@code Task}).","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"     * Represents the occasion of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"    protected String at;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in {@code description} and {@code by} only.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"     * @param description description of the Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"     * @param at          deadline of the Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in {@code description}, {@code isDone} and {@code by}.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"     * @param description description of the Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"     * @param isDone      whether the Event task is done.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"     * @param at          deadline of the Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    public Event(String description, boolean isDone, String at) {","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"     * Gets full task description of a {@code Event} task and the task type symbol.","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"     * @return a String containing the task type symbol, description and isDone status.","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"        return \"[E]\" + super.getTaskDescription() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"     * Gets task information that matches the format of the {@code Event} tasks stored in duke.txt.","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"     * @return a String in the format of duke.txt {@code Event} task entry.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"    public String getTaskFileFormat() {","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"        String isDoneString \u003d \"0\";","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"            isDoneString \u003d \"1\";","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"        return \"E | \" + isDoneString + \" | \" + description + \" | \" + at;","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"APZH":62}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents a {@code Task} in the user\u0027s tasklist that is managed by the {@code TaskManager}.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" * It is the parent class of the {@code ToDo}, {@code Deadline} and {@code Event} subclasses.","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"     * Represents the description of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"    protected String description;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"     * Indicates whether the Task has been marked as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in {@code description} only.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     * @param description description of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in both {@code description} and {@code isDone}.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"     * @param description description of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"     * @param isDone      whether the task is done.","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"     * Gets full task description of task.","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"     * @return a String containing both task description and isDone status.","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"     * Gets status icon of task.","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"     * @return a String containing a symbol to indicate whether task is done.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"            return \"X\";","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"            return \" \";","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"     * Gets task information that matches the format of the tasks stored in duke.txt.","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"     * @return a String in the format of duke.txt task entry.","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"    public abstract String getTaskFileFormat();","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"APZH":69}},{"path":"src/main/java/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"import duke.exception.DeadlineFormatException;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"import duke.exception.DeleteFormatException;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"import duke.exception.DoneFormatException;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"import duke.exception.EmptyTasklistException;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"import duke.exception.EventFormatException;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"import duke.exception.InvalidTaskIdException;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"import duke.exception.NoTaskFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"import duke.exception.TaskAlreadyDoneException;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"import duke.exception.ToDoFormatException;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":" * Represents the {@code TaskManager} that manages the user\u0027s tasklist.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":" * The {@code TaskManager} can add, delete and mark tasks as done to the user\u0027s tasklist in this class.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":" * Other additional features includes displaying the user\u0027s tasklist and finding tasks with keywords.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     * Represents the list of tasks of the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"    private final String ADD_TASK_MSG \u003d \"Chomp-chomp! I\u0027ve added this new task:\";","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"    private final String SET_TASK_COMPLETE_MSG \u003d \"Burrrp! I\u0027ve marked this task as done:\";","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"    private final String DELETE_TASK_MSG \u003d \"Blaargh! I\u0027ve deleted this task from the list:\";","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"    private final String FIND_TASK_MSG \u003d \"Ahh! Here are the matching tasks in your list:\";","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"    private final String PRINT_TASKLIST_MSG \u003d \"Ahh! Here are the tasks in your list:\";","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"    private final String TODO_FORMAT_REGEX \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"    private final String DEADLINE_FORMAT_REGEX \u003d \".+/by.+\";","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    private final String DEADLINE_SPLIT_REGEX \u003d \"/by\";","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"    private final String EVENT_FORMAT_REGEX \u003d \".+/at.+\";","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"    private final String EVENT_SPLIT_REGEX \u003d \"/at\";","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"    private final String DONE_FORMAT_REGEX \u003d \"\\\\d+\";","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"    private final String DELETE_FORMAT_REGEX \u003d \"\\\\d+\";","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"     * Default constructor that initialises {@code tasks} to be initially empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"    public TaskManager() {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"     * Gets tasklist {@code tasks} from {@code TaskManager} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"     * @return tasklist managed by {@code TaskManager}.","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"        return this.tasks;","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"     * Sets tasklist {@code tasks} for {@code TaskManager} object.","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"     * @param tasks tasklist to be managed by {@code TaskManager}.","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"    public void setTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"     * Adds {@code ToDo} task to the tasklist {@code task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"     * @param {@code toDoInfo} contains ToDo task description.","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"APZH"},"content":"     * @return a String that acknowledges the task added and the current number of tasks in the tasklist {@code task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"APZH"},"content":"     * @throws ToDoFormatException if {@code toDoInfo} equals to an empty string.","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"APZH"},"content":"    public String addToDo(String toDoInfo) throws ToDoFormatException {","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"APZH"},"content":"        if (toDoInfo.equals(TODO_FORMAT_REGEX)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"APZH"},"content":"            throw new ToDoFormatException();","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":79,"author":{"gitId":"APZH"},"content":"        Task newToDo \u003d new ToDo(toDoInfo.trim());","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"APZH"},"content":"        this.tasks.add(newToDo);","lastModifiedDate":"2021-09-05"},{"lineNumber":81,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"APZH"},"content":"        int idOfTaskAdded \u003d tasks.size() - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"APZH"},"content":"        return getAddTaskMessage(idOfTaskAdded) + getNumTasksInList();","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":88,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"APZH"},"content":"     * Adds {@code Deadline} task to the tasklist {@code task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"APZH"},"content":"     * @param {@code deadlineInfo} contains Deadline task description and deadline.","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"APZH"},"content":"     * @return a String that acknowledges the task added and the current number of tasks in the tasklist {@code task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"APZH"},"content":"     * @throws DeadlineFormatException if {@code deadlineInfo} does not follow the format \"description /by date\u0026time\".","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"APZH"},"content":"    public String addDeadline(String deadlineInfo) throws DeadlineFormatException {","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"APZH"},"content":"        if (deadlineInfo.matches(DEADLINE_FORMAT_REGEX) \u003d\u003d false) {","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"APZH"},"content":"            throw new DeadlineFormatException();","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"APZH"},"content":"        String deadlineArgs[] \u003d deadlineInfo.split(DEADLINE_SPLIT_REGEX, 2);","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"APZH"},"content":"        Task newDeadline \u003d new Deadline(deadlineArgs[0].trim(), deadlineArgs[1].trim());","lastModifiedDate":"2021-09-05"},{"lineNumber":103,"author":{"gitId":"APZH"},"content":"        this.tasks.add(newDeadline);","lastModifiedDate":"2021-09-05"},{"lineNumber":104,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"APZH"},"content":"        int idOfTaskAdded \u003d tasks.size() - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"APZH"},"content":"        return getAddTaskMessage(idOfTaskAdded) + getNumTasksInList();","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":111,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"APZH"},"content":"     * Adds {@code Event} task to the tasklist {@code task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"APZH"},"content":"     * @param {@code eventInfo} contains Event task description and occasion.","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"APZH"},"content":"     * @return a String that acknowledges the task added and the current number of tasks in the tasklist {@code task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"APZH"},"content":"     * @throws EventFormatException if {@code eventInfo} does not follow the format \"description /at date\u0026time\".","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"APZH"},"content":"    public String addEvent(String eventInfo) throws EventFormatException {","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"APZH"},"content":"        if (eventInfo.matches(EVENT_FORMAT_REGEX) \u003d\u003d false) {","lastModifiedDate":"2021-09-13"},{"lineNumber":121,"author":{"gitId":"APZH"},"content":"            throw new EventFormatException();","lastModifiedDate":"2021-09-06"},{"lineNumber":122,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":123,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":124,"author":{"gitId":"APZH"},"content":"        String eventArgs[] \u003d eventInfo.split(EVENT_SPLIT_REGEX, 2);","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"APZH"},"content":"        Task newEvent \u003d new Event(eventArgs[0].trim(), eventArgs[1].trim());","lastModifiedDate":"2021-09-05"},{"lineNumber":126,"author":{"gitId":"APZH"},"content":"        this.tasks.add(newEvent);","lastModifiedDate":"2021-09-05"},{"lineNumber":127,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"APZH"},"content":"        int idOfTaskAdded \u003d tasks.size() - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"APZH"},"content":"        return getAddTaskMessage(idOfTaskAdded) + getNumTasksInList();","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"APZH"},"content":"     * Sets task at {@code taskIndex} in tasklist {@code tasks} as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"APZH"},"content":"     * @param taskIndex index of task in tasklist {@code tasks} to be marked as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"APZH"},"content":"     * @return a String that acknowledges the task marked as done and the current number of completed tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"APZH"},"content":"     * @throws DoneFormatException      if {@code taskIndex} is not an integer or an empty string.","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"APZH"},"content":"     * @throws InvalidTaskIdException   if {@code taskIndex} does not exist in tasklist {@code tasks}.","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"APZH"},"content":"     * @throws TaskAlreadyDoneException if the task pointed by {@code taskIndex} is already marked as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"APZH"},"content":"    public String setTaskComplete(String taskIndex) throws DoneFormatException, InvalidTaskIdException,","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"APZH"},"content":"            TaskAlreadyDoneException {","lastModifiedDate":"2021-09-06"},{"lineNumber":145,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":146,"author":{"gitId":"APZH"},"content":"        if (taskIndex.matches(DONE_FORMAT_REGEX) \u003d\u003d false) {","lastModifiedDate":"2021-09-13"},{"lineNumber":147,"author":{"gitId":"APZH"},"content":"            throw new DoneFormatException();","lastModifiedDate":"2021-09-06"},{"lineNumber":148,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":149,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":150,"author":{"gitId":"APZH"},"content":"        int taskID \u003d Integer.parseInt(taskIndex);","lastModifiedDate":"2021-09-06"},{"lineNumber":151,"author":{"gitId":"APZH"},"content":"        taskID \u003d taskID - 1;","lastModifiedDate":"2021-09-06"},{"lineNumber":152,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":153,"author":{"gitId":"APZH"},"content":"        if (taskID \u003e tasks.size() - 1 || taskID \u003c 0) {","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"APZH"},"content":"            throw new InvalidTaskIdException();","lastModifiedDate":"2021-09-06"},{"lineNumber":155,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":156,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":157,"author":{"gitId":"APZH"},"content":"        if (tasks.get(taskID).isDone) {","lastModifiedDate":"2021-08-30"},{"lineNumber":158,"author":{"gitId":"APZH"},"content":"            throw new TaskAlreadyDoneException();","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":160,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"APZH"},"content":"        tasks.get(taskID).isDone \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"APZH"},"content":"        return getSetTaskCompleteMessage(taskID) + getNumTaskComplete();","lastModifiedDate":"2021-09-22"},{"lineNumber":164,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":165,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":166,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":167,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":168,"author":{"gitId":"APZH"},"content":"     * Deletes task at {@code taskIndex} in tasklist {@code tasks}.","lastModifiedDate":"2021-09-27"},{"lineNumber":169,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"APZH"},"content":"     * @param taskIndex index of task in tasklist {@code tasks} to be deleted.","lastModifiedDate":"2021-09-27"},{"lineNumber":171,"author":{"gitId":"APZH"},"content":"     * @return a String that acknowledges the task deleted and the current number of tasks in the tasklist {@code task}.","lastModifiedDate":"2021-09-27"},{"lineNumber":172,"author":{"gitId":"APZH"},"content":"     * @throws DeleteFormatException  if {@code taskIndex} is not an integer or an empty string.","lastModifiedDate":"2021-09-27"},{"lineNumber":173,"author":{"gitId":"APZH"},"content":"     * @throws InvalidTaskIdException if {@code taskIndex} does not exist in tasklist {@code tasks}.","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":175,"author":{"gitId":"APZH"},"content":"    public String deleteTask(String taskIndex) throws DeleteFormatException, InvalidTaskIdException {","lastModifiedDate":"2021-09-21"},{"lineNumber":176,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":177,"author":{"gitId":"APZH"},"content":"        if (taskIndex.matches(DELETE_FORMAT_REGEX) \u003d\u003d false) {","lastModifiedDate":"2021-09-13"},{"lineNumber":178,"author":{"gitId":"APZH"},"content":"            throw new DeleteFormatException();","lastModifiedDate":"2021-09-13"},{"lineNumber":179,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":180,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":181,"author":{"gitId":"APZH"},"content":"        int taskID \u003d Integer.parseInt(taskIndex);","lastModifiedDate":"2021-09-13"},{"lineNumber":182,"author":{"gitId":"APZH"},"content":"        taskID \u003d taskID - 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":183,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":184,"author":{"gitId":"APZH"},"content":"        if (taskID \u003e tasks.size() - 1 || taskID \u003c 0) {","lastModifiedDate":"2021-09-13"},{"lineNumber":185,"author":{"gitId":"APZH"},"content":"            throw new InvalidTaskIdException();","lastModifiedDate":"2021-09-13"},{"lineNumber":186,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":187,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":188,"author":{"gitId":"APZH"},"content":"        String deleteTaskMessage \u003d getDeleteTaskMessage(taskID);","lastModifiedDate":"2021-09-21"},{"lineNumber":189,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":190,"author":{"gitId":"APZH"},"content":"        tasks.remove(taskID);","lastModifiedDate":"2021-09-13"},{"lineNumber":191,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":192,"author":{"gitId":"APZH"},"content":"        return deleteTaskMessage + getNumTasksInList();","lastModifiedDate":"2021-09-22"},{"lineNumber":193,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":194,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":195,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":196,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":197,"author":{"gitId":"APZH"},"content":"     * Finds task/s in tasklist {@code tasks} that contains {@code keyword} in its description.","lastModifiedDate":"2021-09-30"},{"lineNumber":198,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":199,"author":{"gitId":"APZH"},"content":"     * @param keyword search term to match with the task descriptions of all tasks in tasklist {@code tasks}.","lastModifiedDate":"2021-09-27"},{"lineNumber":200,"author":{"gitId":"APZH"},"content":"     * @return a String that contains the tasks that contains {@code keyword} and the number of matched tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":201,"author":{"gitId":"APZH"},"content":"     * @throws NoTaskFoundException if no matching cases were found with {@code keyword} in tasklist {@code tasks}.","lastModifiedDate":"2021-09-27"},{"lineNumber":202,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":203,"author":{"gitId":"APZH"},"content":"    public String findTask(String keyword) throws NoTaskFoundException {","lastModifiedDate":"2021-09-22"},{"lineNumber":204,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":205,"author":{"gitId":"APZH"},"content":"        String matchedTasks \u003d \"\";","lastModifiedDate":"2021-09-22"},{"lineNumber":206,"author":{"gitId":"APZH"},"content":"        int numMatched \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":207,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":208,"author":{"gitId":"APZH"},"content":"        for (int taskID \u003d 0; taskID \u003c tasks.size(); taskID++) {","lastModifiedDate":"2021-09-22"},{"lineNumber":209,"author":{"gitId":"APZH"},"content":"            if (tasks.get(taskID).getTaskDescription().contains(keyword)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":210,"author":{"gitId":"APZH"},"content":"                matchedTasks +\u003d taskID + 1 + \".\" + tasks.get(taskID).getTaskDescription() + \"\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":211,"author":{"gitId":"APZH"},"content":"                numMatched++;","lastModifiedDate":"2021-09-22"},{"lineNumber":212,"author":{"gitId":"APZH"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":213,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":214,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":215,"author":{"gitId":"APZH"},"content":"        if (numMatched \u003d\u003d 0) {","lastModifiedDate":"2021-09-22"},{"lineNumber":216,"author":{"gitId":"APZH"},"content":"            throw new NoTaskFoundException();","lastModifiedDate":"2021-09-22"},{"lineNumber":217,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":218,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":219,"author":{"gitId":"APZH"},"content":"        return getFindTaskMessage(matchedTasks, numMatched);","lastModifiedDate":"2021-09-22"},{"lineNumber":220,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":221,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":222,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":223,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":224,"author":{"gitId":"APZH"},"content":"     * Returns the list of tasks in tasklist {@code tasks} as a String.","lastModifiedDate":"2021-09-27"},{"lineNumber":225,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":226,"author":{"gitId":"APZH"},"content":"     * @return a String that contains all task entries in tasklist {@code tasks}.","lastModifiedDate":"2021-09-27"},{"lineNumber":227,"author":{"gitId":"APZH"},"content":"     * @throws EmptyTasklistException if the tasklist {@code tasks} is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":228,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":229,"author":{"gitId":"APZH"},"content":"    public String getTasklistEntries() throws EmptyTasklistException {","lastModifiedDate":"2021-09-27"},{"lineNumber":230,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":231,"author":{"gitId":"APZH"},"content":"        String taskList \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":232,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":233,"author":{"gitId":"APZH"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-06"},{"lineNumber":234,"author":{"gitId":"APZH"},"content":"            throw new EmptyTasklistException();","lastModifiedDate":"2021-09-06"},{"lineNumber":235,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":236,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":237,"author":{"gitId":"APZH"},"content":"        for (int taskID \u003d 0; taskID \u003c tasks.size(); taskID++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":238,"author":{"gitId":"APZH"},"content":"            taskList +\u003d taskID + 1 + \".\" + tasks.get(taskID).getTaskDescription() + \"\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":239,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":240,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":241,"author":{"gitId":"APZH"},"content":"        return getListMessage(taskList) + getNumTaskComplete();","lastModifiedDate":"2021-09-22"},{"lineNumber":242,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":243,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":244,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":245,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":246,"author":{"gitId":"APZH"},"content":"     * Returns add task success message.","lastModifiedDate":"2021-09-27"},{"lineNumber":247,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":248,"author":{"gitId":"APZH"},"content":"    public String getAddTaskMessage(int idOfTaskAdded) {","lastModifiedDate":"2021-09-21"},{"lineNumber":249,"author":{"gitId":"APZH"},"content":"        return ADD_TASK_MSG + \"\\n   \u003c\" + tasks.get(idOfTaskAdded).getTaskDescription() + \"\u003e\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":250,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":251,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":252,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":253,"author":{"gitId":"APZH"},"content":"     * Returns set task as done success message.","lastModifiedDate":"2021-09-27"},{"lineNumber":254,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":255,"author":{"gitId":"APZH"},"content":"    public String getSetTaskCompleteMessage(int idOfTaskCompleted) {","lastModifiedDate":"2021-09-21"},{"lineNumber":256,"author":{"gitId":"APZH"},"content":"        return SET_TASK_COMPLETE_MSG + \"\\n   \u003c\" + tasks.get(idOfTaskCompleted).getTaskDescription() + \"\u003e\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":257,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":258,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":259,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":260,"author":{"gitId":"APZH"},"content":"     * Returns delete task success message.","lastModifiedDate":"2021-09-27"},{"lineNumber":261,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":262,"author":{"gitId":"APZH"},"content":"    public String getDeleteTaskMessage(int idOfTaskDeleted) {","lastModifiedDate":"2021-09-21"},{"lineNumber":263,"author":{"gitId":"APZH"},"content":"        return DELETE_TASK_MSG + \"\\n   \u003c\" + tasks.get(idOfTaskDeleted).getTaskDescription() + \"\u003e\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":264,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":265,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":266,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":267,"author":{"gitId":"APZH"},"content":"     * Returns find task success message.","lastModifiedDate":"2021-09-27"},{"lineNumber":268,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":269,"author":{"gitId":"APZH"},"content":"    public String getFindTaskMessage(String matchedTasks, int numMatched) {","lastModifiedDate":"2021-09-22"},{"lineNumber":270,"author":{"gitId":"APZH"},"content":"        return FIND_TASK_MSG + \"\\n\" + matchedTasks + \"\u003d\u003e It has successfully returned \" + numMatched + \" result/s.\";","lastModifiedDate":"2021-09-22"},{"lineNumber":271,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":272,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":273,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":274,"author":{"gitId":"APZH"},"content":"     * Returns get all tasklist entries success message.","lastModifiedDate":"2021-09-27"},{"lineNumber":275,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":276,"author":{"gitId":"APZH"},"content":"    public String getListMessage(String taskList) {","lastModifiedDate":"2021-09-21"},{"lineNumber":277,"author":{"gitId":"APZH"},"content":"        return PRINT_TASKLIST_MSG + \"\\n\" + taskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":278,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":279,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":280,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":281,"author":{"gitId":"APZH"},"content":"     * Returns current number of tasks in tasklist {@code tasks} as a String message.","lastModifiedDate":"2021-09-27"},{"lineNumber":282,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":283,"author":{"gitId":"APZH"},"content":"    public String getNumTasksInList() {","lastModifiedDate":"2021-09-21"},{"lineNumber":284,"author":{"gitId":"APZH"},"content":"        return \"\u003d\u003e Now you have \" + tasks.size() + \" tasks in your list.\";","lastModifiedDate":"2021-09-21"},{"lineNumber":285,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":286,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":287,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":288,"author":{"gitId":"APZH"},"content":"     * Returns current number of tasks in tasklist {@code tasks} marked as done as a String message.","lastModifiedDate":"2021-09-27"},{"lineNumber":289,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":290,"author":{"gitId":"APZH"},"content":"    public String getNumTaskComplete() {","lastModifiedDate":"2021-09-21"},{"lineNumber":291,"author":{"gitId":"APZH"},"content":"        int numComplete \u003d 0;","lastModifiedDate":"2021-09-21"},{"lineNumber":292,"author":{"gitId":"APZH"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-21"},{"lineNumber":293,"author":{"gitId":"APZH"},"content":"            if (tasks.get(i).isDone) {","lastModifiedDate":"2021-09-21"},{"lineNumber":294,"author":{"gitId":"APZH"},"content":"                numComplete +\u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":295,"author":{"gitId":"APZH"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":296,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":297,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":298,"author":{"gitId":"APZH"},"content":"        if (numComplete \u003d\u003d tasks.size()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":299,"author":{"gitId":"APZH"},"content":"            return \"\u003d\u003e You have completed all your tasks already.\";","lastModifiedDate":"2021-09-21"},{"lineNumber":300,"author":{"gitId":"APZH"},"content":"        } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":301,"author":{"gitId":"APZH"},"content":"            return \"\u003d\u003e You have done \" + numComplete + \"/\" + tasks.size() + \" tasks in your list.\";","lastModifiedDate":"2021-09-21"},{"lineNumber":302,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":303,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":304,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":305,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":306,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"APZH":306}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Represents a {@code ToDo} task (Subclass of {@code Task}).","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in {@code description} only.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"     * @param description description of the ToDo task.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"     * Constructor that takes in both {@code description} and {@code isDone}.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"     * @param description description of the ToDo task.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"     * @param isDone      whether the ToDo task is done.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"     * Gets full task description of a {@code ToDo} task and the task type symbol.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"     * @return a String containing the task type symbol, description and isDone status.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        return \"[T]\" + super.getTaskDescription();","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"     * Gets task information that matches the format of the {@code ToDo} tasks stored in duke.txt.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"     * @return a String in the format of duke.txt {@code ToDo} task entry.","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"    public String getTaskFileFormat() {","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"        String isDoneString \u003d \"0\";","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"            isDoneString \u003d \"1\";","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"        return \"T | \" + isDoneString + \" | \" + description;","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"APZH":53}},{"path":"src/main/java/duke/ui/DukeInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"package duke.ui;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":" * Text UI of the Duke application.","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"public class DukeInterface {","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"    private final String LOGO \u003d \"+++++++++++++++++++++++++++++++++++++++++++++\\n\"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"            + \"  __         __\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"            + \" /  \\\\.-\\\"\\\"\\\"-./  \\\\     ____        _        \\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"            + \" \\\\    -   -    /    |  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"            + \"  |   o   o   |     | | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"            + \"  \\\\  .-\u0027\u0027\u0027-.  /     | |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"            + \"   \u0027-\\\\__Y__/-\u0027      |____/ \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"            + \"      `---`\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"            + \"[A NUS CS2113T Project by: Peh Zhenhao, Amos]\\n\"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"            + \"+++++++++++++++++++++++++++++++++++++++++++++\";","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"    private final String WELCOME_MSG \u003d \"\u003d\u003e Hello! I\u0027m Duke :)\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"            + \"\u003d\u003e I\u0027m so hungry, would you mind feeding me tasks?\";","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"     * Prints logo of Duke upon the start of the Duke application.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"    public void printLogo() {","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"        System.out.println(LOGO);","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"     * Prints welcome message used upon the start of the Duke application.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"    public void printWelcomeMessage() {","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"        printDukeName();","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"APZH"},"content":"        System.out.println(WELCOME_MSG);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"APZH"},"content":"     * Prints user display name.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"APZH"},"content":"    public void printUserName() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"APZH"},"content":"        System.out.println(\"\\n[You]:\");","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"APZH"},"content":"     * Prints Duke\u0027s display name.","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"APZH"},"content":"    public void printDukeName() {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"APZH"},"content":"        System.out.println(\"\\n[Duke]:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"APZH"},"content":"     * Prints the cursor used for user input and Duke UI messages.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"APZH"},"content":"    public void printCursor() {","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"APZH"},"content":"        System.out.print(\"\u003d\u003e \");","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"APZH"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"APZH"},"content":"     * Shows dukeMessage to user on the terminal.","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"APZH"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"APZH"},"content":"     * @param dukeMessage message to be displayed on the user\u0027s terminal.","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"APZH"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"APZH"},"content":"    public void printDukeMessage(String dukeMessage) {","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"APZH"},"content":"        printDukeName();","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"APZH"},"content":"        printCursor();","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"APZH"},"content":"        System.out.println(dukeMessage);","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"APZH"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"APZH"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"APZH":69}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"APZH"},"content":"invalid command","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"APZH"},"content":"help","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"APZH"},"content":"todo","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"APZH"},"content":"deadline","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"APZH"},"content":"deadline test1","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"APZH"},"content":"deadline test1 /by","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"APZH"},"content":"event","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"APZH"},"content":"event test1","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"APZH"},"content":"event test1 /at","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"APZH"},"content":"delete","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"APZH"},"content":"delete 1","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"APZH"},"content":"todo read book","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"APZH"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"APZH"},"content":"event project meeting 1 /at Aug 6th 2-4pm","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"APZH"},"content":"done 1","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"APZH"},"content":"done 3","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"APZH"},"content":"done 2","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"APZH"},"content":"done 1","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"APZH"},"content":"delete 2","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"APZH"},"content":"delete 1","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"APZH"},"content":"delete 1","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"APZH"},"content":"list","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"APZH"},"content":"bye","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"APZH"},"content":"","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"APZH":33}}]
