[{"path":"src/main/java/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"todo read book","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"todo","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"event do homework /at home","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"event","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"even do homework","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"done 1","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"done 2","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"done 3","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"done 1000","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"deadline","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"deadline finish","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"deadline finish eating /by 2pm","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"done 2","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"done 3","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"delete 1","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"delete 3","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"delete 4","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"delete 2","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"delete 1","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"bye","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"lezongmun":27}},{"path":"src/main/java/karen/Karen.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import karen.program.ProgramManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"public class Karen {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"        ProgramManager programManager \u003d new ProgramManager();","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"        programManager.runProgram();","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"lezongmun":10,"-":2}},{"path":"src/main/java/karen/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import karen.program.ProgramManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"import karen.storage.Storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"import karen.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Deadline;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Event;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.ToDo;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"import java.util.List;","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"public class Command {","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"    private String commandType;","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"    private ProgramManager programManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"    public Command(String commandType, ProgramManager programManager, TaskList taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"        this.tasks \u003d taskList.getTaskList();","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"        this.programManager \u003d programManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"    public String getCommandType() {","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"        return this.commandType;","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"     * This method retrieves Task objects that contain the given keyword in their","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"     * description from the list of tasks and then prints them out.","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"     * @param keyword String given by user to query for matching Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"     * @param tasks a list of Task objects to query from","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"    public void executeFindCommand(String keyword, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"        List\u003cTask\u003e filteredTasks \u003d tasks.stream()","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"                .filter((t) -\u003e t.getTaskDescription().toLowerCase().contains(keyword.toLowerCase()))","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"        Ui.printFoundTasks(filteredTasks, keyword);","lastModifiedDate":"2021-09-24"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"     * This method retrieves Task objects that have the same date as the given","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"     * input date from the list of tasks and then prints them out.","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"     * @param date LocalDate given by user to find tasks occurring on that day","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"     * @param tasks list of Task objects to query from","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"    public void executeShowCommand(LocalDate date, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"        List\u003cTask\u003e filteredTasks \u003d tasks.stream()","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"                .filter((t) -\u003e t instanceof Deadline || t instanceof Event)","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"                .filter((t) -\u003e (t.getDate()).equals(date))","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"        Ui.printTasksOnDate(date, filteredTasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"     * This method marks the Task object with the specified doneIndex in the taskList as done.","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"     * @param doneIndex index of the Task object to be marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"     * @throws NumberFormatException if anything other than numbers are used as the index for the Task object","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"     * @throws IndexOutOfBoundsException if the doneIndex is \u003e size of taskList and \u003c 1, ie. there is no Task","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"     * object with doneIndex as their index","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"     * @throws IOException if there are errors when writing to storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"    public void executeDoneCommand(int doneIndex) throws NumberFormatException, IndexOutOfBoundsException, IOException {","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"        if (!tasks.get(doneIndex).getIsDone()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"            tasks.get(doneIndex).markAsDone();","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"            Ui.printTaskDoneMessage(tasks.get(doneIndex));","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"            Ui.printTaskAlreadyDoneMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"        Storage.writeToFile(taskList);","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"lezongmun"},"content":"     * This method removes the Task object with the specified deleteIndex from the taskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"lezongmun"},"content":"     * Any changes to taskList is then saved in the storage file.","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"lezongmun"},"content":"     * @param deleteIndex index of the Task object to be removed from taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"lezongmun"},"content":"     * @throws NumberFormatException if anything other than numbers are used as the index for the Task object","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"lezongmun"},"content":"     * @throws IndexOutOfBoundsException if the doneIndex is \u003e size of taskList and \u003c 1, ie. there is no Task","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"lezongmun"},"content":"     * object with doneIndex as their index","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"lezongmun"},"content":"     * @throws IOException if there are errors when writing to storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":95,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":96,"author":{"gitId":"lezongmun"},"content":"    public void executeDeleteCommand(int deleteIndex) throws NumberFormatException, IndexOutOfBoundsException, IOException {","lastModifiedDate":"2021-09-24"},{"lineNumber":97,"author":{"gitId":"lezongmun"},"content":"        Task taskToDelete \u003d tasks.get(deleteIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"lezongmun"},"content":"        taskList.removeTask(deleteIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":100,"author":{"gitId":"lezongmun"},"content":"        //number of tasks in taskList left after deleting","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"lezongmun"},"content":"        int totalTasks \u003d tasks.size();","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"lezongmun"},"content":"        Ui.printTaskDeletedMessage(taskToDelete, totalTasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"lezongmun"},"content":"        Storage.writeToFile(taskList);","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":107,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"lezongmun"},"content":"     * This method prints all Task objects in the taskList according to their formatted description.","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"lezongmun"},"content":"    public void executeListCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"lezongmun"},"content":"        Ui.printTaskList(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":113,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":114,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":115,"author":{"gitId":"lezongmun"},"content":"     * This method adds a ToDo task object into the taskList. Any changes to taskList is then","lastModifiedDate":"2021-09-25"},{"lineNumber":116,"author":{"gitId":"lezongmun"},"content":"     * saved in the storage file.","lastModifiedDate":"2021-09-25"},{"lineNumber":117,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":118,"author":{"gitId":"lezongmun"},"content":"     * @param todo ToDo task object to be added into taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":119,"author":{"gitId":"lezongmun"},"content":"     * @throws IOException if there are errors when writing to storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"lezongmun"},"content":"    public void executeToDoCommand(ToDo todo) throws IOException {","lastModifiedDate":"2021-09-24"},{"lineNumber":122,"author":{"gitId":"lezongmun"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2021-09-24"},{"lineNumber":123,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"lezongmun"},"content":"        int totalTasks \u003d taskList.getSize();","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"lezongmun"},"content":"        Ui.printTaskAddedMessage(todo, totalTasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":126,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":127,"author":{"gitId":"lezongmun"},"content":"        Storage.writeToFile(taskList);","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":129,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":130,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":131,"author":{"gitId":"lezongmun"},"content":"     * This method adds a Deadline task object into the taskList. Any changes to taskList is then","lastModifiedDate":"2021-09-25"},{"lineNumber":132,"author":{"gitId":"lezongmun"},"content":"     * saved in the storage file.","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"lezongmun"},"content":"     * @param deadline Deadline task object to be added into taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":135,"author":{"gitId":"lezongmun"},"content":"     * @throws IOException if there are errors when writing to storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":136,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":137,"author":{"gitId":"lezongmun"},"content":"    public void executeDeadlineCommand(Deadline deadline) throws IOException {","lastModifiedDate":"2021-09-24"},{"lineNumber":138,"author":{"gitId":"lezongmun"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2021-09-24"},{"lineNumber":139,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":140,"author":{"gitId":"lezongmun"},"content":"        int totalTasks \u003d taskList.getSize();","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"lezongmun"},"content":"        Ui.printTaskAddedMessage(deadline, totalTasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":142,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":143,"author":{"gitId":"lezongmun"},"content":"        Storage.writeToFile(taskList);","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":145,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":147,"author":{"gitId":"lezongmun"},"content":"     * This method adds a Event task object into the taskList. Any changes to taskList is then","lastModifiedDate":"2021-09-25"},{"lineNumber":148,"author":{"gitId":"lezongmun"},"content":"     * saved in the storage file.","lastModifiedDate":"2021-09-25"},{"lineNumber":149,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":150,"author":{"gitId":"lezongmun"},"content":"     * @param event Event task object to be added into taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":151,"author":{"gitId":"lezongmun"},"content":"     * @throws IOException if there are errors when writing to storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":152,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":153,"author":{"gitId":"lezongmun"},"content":"    public void executeEventCommand(Event event) throws IOException {","lastModifiedDate":"2021-09-24"},{"lineNumber":154,"author":{"gitId":"lezongmun"},"content":"        taskList.addTask(event);","lastModifiedDate":"2021-09-24"},{"lineNumber":155,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":156,"author":{"gitId":"lezongmun"},"content":"        int totalTasks \u003d taskList.getSize();","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"lezongmun"},"content":"        Ui.printTaskAddedMessage(event, totalTasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":158,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":159,"author":{"gitId":"lezongmun"},"content":"        Storage.writeToFile(taskList);","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":161,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":162,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":163,"author":{"gitId":"lezongmun"},"content":"     * This method ends the program.","lastModifiedDate":"2021-09-25"},{"lineNumber":164,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":165,"author":{"gitId":"lezongmun"},"content":"    public void executeByeCommand(){","lastModifiedDate":"2021-09-25"},{"lineNumber":166,"author":{"gitId":"lezongmun"},"content":"        Ui.printGoodByeMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"lezongmun"},"content":"        programManager.setIsRunningOff();","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":169,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"lezongmun":169}},{"path":"src/main/java/karen/exception/IncorrectDescriptionFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.exception;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"public class IncorrectDescriptionFormatException extends Exception{","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"lezongmun":4}},{"path":"src/main/java/karen/exception/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.exception;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"public class NoDescriptionException extends Exception {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"lezongmun":5}},{"path":"src/main/java/karen/exception/ValidityAndErrorCheck.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.exception;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"public abstract class ValidityAndErrorCheck {","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"     * This method checks for errors when parsing Task Commands, ie. Deadline Command, Event Command,","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"     * ToDo Command.","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"     * @param taskType String that represents the Task Command","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"     * @param separator String used to separate task description and date of task for Deadline and Event Commands","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if user inputs a Task Command with no description","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if user inputs a Task Command with incorrect formatting of description","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"    public static void checkTaskExceptions(String taskType, String separator, String rawUserInput)","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"            throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"        String[] inputWords \u003d rawUserInput.split(\" \");","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"        if (inputWords.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"        if (taskType.equals(\"todo\")) {","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"            return;","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"        String[] separatedDescription \u003d rawUserInput.split(separator, 2);","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"        // for eg. \"event /at\"","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"        if (separatedDescription.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"            throw new IncorrectDescriptionFormatException();","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"        // for eg. \"event 21-03-2020\"","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"        if (!rawUserInput.contains(separator)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"            throw new IncorrectDescriptionFormatException();","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"        // for eg. \"event /at 21-03-2020\"","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"        if (separatedDescription[0].equalsIgnoreCase(taskType)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"            throw new IncorrectDescriptionFormatException();","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"     * This method checks for errors when parsing the Commands given by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"     * @param command String that represents the user command","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if user inputs a Command with no description","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if user inputs a Command with incorrect formatting of description","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"    public static void checkCommandDescriptionExceptions(String command, String rawUserInput)","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"            throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"        String[] inputWords \u003d rawUserInput.split(\" \");","lastModifiedDate":"2021-09-24"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"        if (command.equals(\"find\")) {","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"            inputWords \u003d rawUserInput.split(\" \", 2);","lastModifiedDate":"2021-09-24"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2021-09-24"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"            if (inputWords.length !\u003d 1) {","lastModifiedDate":"2021-09-24"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"                throw new IncorrectDescriptionFormatException();","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"            }","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"            return;","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"        if (inputWords.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"        if (inputWords.length \u003e 2) {","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"            throw new IncorrectDescriptionFormatException();","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"lezongmun":68}},{"path":"src/main/java/karen/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import karen.exception.ValidityAndErrorCheck;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"import karen.exception.IncorrectDescriptionFormatException;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import karen.exception.NoDescriptionException;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"import karen.command.Command;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"import karen.program.ProgramManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Deadline;","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Event;","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.ToDo;","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"import karen.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"public class Parser {","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"    private static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"    private static final String DONE_COMMAND \u003d \"done\";","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"    private static final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"    private static final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"    private static final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"    private static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"    private static final String BYE_COMMAND \u003d \"bye\";","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"    private static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"    private static final String SHOW_COMMAND \u003d \"show\";","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"    private static final String DEADLINE_SEPARATOR \u003d \" /by \";","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"    private static final String EVENT_SEPARATOR \u003d \" /at \";","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"    private static final String TASK_DONE_STATUS \u003d \"X\";","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"    private static TaskList taskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"    private static ProgramManager programManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"    public Parser(TaskList taskList, ProgramManager programManager) {","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"        this.programManager \u003d programManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"     * Returns the query Keyword that user wants to use to search for matching Tasks in taskList,","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"     * as a String.","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"     * This method takes in raw user input and then parses it to obtain the search query Keyword","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"     * input by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"     * @return query Keyword given by user for searching matching tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if Find Command is given without a query Keyword","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if Find Command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"    public String parseFind(String rawUserInput) throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkCommandDescriptionExceptions(FIND_COMMAND,rawUserInput);","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"        String[] inputSplit \u003d rawUserInput.split(\" \",2);","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"        String keyword \u003d inputSplit[1].trim();","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"        return keyword;","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"     * Returns the query Date that user wants to use to search for Tasks in taskList occurring on","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"     * that given date.","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"     * This method takes in raw user input and then parses it to obtain the search query Date given","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"     * by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"     * @return query Date given by user for searching Tasks occurring on that date.","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if Show Command is given without any Date","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if Show Command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"     * @throws DateTimeParseException if Show Command has incorrect formatting for Date given by user/","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"     * invalid Date","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"    public LocalDate parseShow(String rawUserInput)","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"            throws NoDescriptionException, IncorrectDescriptionFormatException, DateTimeParseException {","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkCommandDescriptionExceptions(SHOW_COMMAND, rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"        String[] inputWords \u003d rawUserInput.split(\" \",0);","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"        String dateString \u003d inputWords[1].trim();","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"lezongmun"},"content":"        LocalDate parsedDate \u003d LocalDate.parse(dateString, dateFormatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"lezongmun"},"content":"        return parsedDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"lezongmun"},"content":"     * Returns an Event object to be added into the TaskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter and then parses","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"lezongmun"},"content":"     * it to obtain the description of the Event task to be done, as well as","lastModifiedDate":"2021-09-25"},{"lineNumber":95,"author":{"gitId":"lezongmun"},"content":"     * the date and time it occurs. An event object is then constructed","lastModifiedDate":"2021-09-25"},{"lineNumber":96,"author":{"gitId":"lezongmun"},"content":"     * using the parsed information and returned.","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"lezongmun"},"content":"     * @return the Event object constructed from the user inputs","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if an Event command is given without any task description","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if an Event command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"lezongmun"},"content":"    public Event parseEvent(String rawUserInput) throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":104,"author":{"gitId":"lezongmun"},"content":"        // checks if the input for Event Command is given correctly, ie. correct formatting and task description is given","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkTaskExceptions(EVENT_COMMAND, EVENT_SEPARATOR, rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":106,"author":{"gitId":"lezongmun"},"content":"        String fullTaskDescription \u003d parseFullTaskDescription(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":107,"author":{"gitId":"lezongmun"},"content":"        // obtains a list of 2 Strings, which includes the task description and the at string","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"lezongmun"},"content":"        String[] descriptionWords \u003d fullTaskDescription.split(EVENT_SEPARATOR, 2);","lastModifiedDate":"2021-09-24"},{"lineNumber":109,"author":{"gitId":"lezongmun"},"content":"        String eventTaskDescription \u003d descriptionWords[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"lezongmun"},"content":"        String at \u003d descriptionWords[1].trim();","lastModifiedDate":"2021-09-24"},{"lineNumber":111,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":112,"author":{"gitId":"lezongmun"},"content":"        LocalDate date \u003d parseDate(at);","lastModifiedDate":"2021-09-25"},{"lineNumber":113,"author":{"gitId":"lezongmun"},"content":"        LocalTime time \u003d parseTime(at);","lastModifiedDate":"2021-09-25"},{"lineNumber":114,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":115,"author":{"gitId":"lezongmun"},"content":"        Event event \u003d new Event(eventTaskDescription, at, date, time);","lastModifiedDate":"2021-09-25"},{"lineNumber":116,"author":{"gitId":"lezongmun"},"content":"        return event;","lastModifiedDate":"2021-09-24"},{"lineNumber":117,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":118,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":119,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"lezongmun"},"content":"     * Returns a Deadline object to be added into the TaskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":122,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter and then parses","lastModifiedDate":"2021-09-25"},{"lineNumber":123,"author":{"gitId":"lezongmun"},"content":"     * it to obtain the description of the Deadline task to be done, as well as","lastModifiedDate":"2021-09-25"},{"lineNumber":124,"author":{"gitId":"lezongmun"},"content":"     * the date and time to complete the task. A Deadline object is then constructed","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"lezongmun"},"content":"     * using the parsed information and returned.","lastModifiedDate":"2021-09-25"},{"lineNumber":126,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":127,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":128,"author":{"gitId":"lezongmun"},"content":"     * @return the Deadline object constructed from the user inputs","lastModifiedDate":"2021-09-25"},{"lineNumber":129,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if a Deadline command is given without any task description","lastModifiedDate":"2021-09-25"},{"lineNumber":130,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if a Deadline command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":131,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":132,"author":{"gitId":"lezongmun"},"content":"    public Deadline parseDeadline(String rawUserInput) throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":133,"author":{"gitId":"lezongmun"},"content":"        // checks if the input for Deadline Command is given correctly, ie. correct formatting and task description is given","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkTaskExceptions(DEADLINE_COMMAND, DEADLINE_SEPARATOR, rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":135,"author":{"gitId":"lezongmun"},"content":"        String fullTaskDescription \u003d parseFullTaskDescription(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":136,"author":{"gitId":"lezongmun"},"content":"        // obtains a list of 2 Strings, which includes the task description and the by string","lastModifiedDate":"2021-09-25"},{"lineNumber":137,"author":{"gitId":"lezongmun"},"content":"        String[] descriptionWords \u003d fullTaskDescription.split(DEADLINE_SEPARATOR, 2);","lastModifiedDate":"2021-09-24"},{"lineNumber":138,"author":{"gitId":"lezongmun"},"content":"        String deadlineTaskDescription \u003d descriptionWords[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":139,"author":{"gitId":"lezongmun"},"content":"        String by \u003d descriptionWords[1].trim();","lastModifiedDate":"2021-09-24"},{"lineNumber":140,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"lezongmun"},"content":"        LocalDate date \u003d parseDate(by);","lastModifiedDate":"2021-09-25"},{"lineNumber":142,"author":{"gitId":"lezongmun"},"content":"        LocalTime time \u003d parseTime(by);","lastModifiedDate":"2021-09-25"},{"lineNumber":143,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":144,"author":{"gitId":"lezongmun"},"content":"        Deadline deadline \u003d new Deadline(deadlineTaskDescription, by, date, time);","lastModifiedDate":"2021-09-25"},{"lineNumber":145,"author":{"gitId":"lezongmun"},"content":"        return deadline;","lastModifiedDate":"2021-09-24"},{"lineNumber":146,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":147,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":148,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":149,"author":{"gitId":"lezongmun"},"content":"     * Returns a ToDo object to be added into the TaskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":150,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":151,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter and then parses","lastModifiedDate":"2021-09-25"},{"lineNumber":152,"author":{"gitId":"lezongmun"},"content":"     * it to obtain the ToDo task description. A ToDo object is then constructed","lastModifiedDate":"2021-09-25"},{"lineNumber":153,"author":{"gitId":"lezongmun"},"content":"     * using the task description and returned.","lastModifiedDate":"2021-09-25"},{"lineNumber":154,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":156,"author":{"gitId":"lezongmun"},"content":"     * @return the Deadline object constructed from the user inputs","lastModifiedDate":"2021-09-25"},{"lineNumber":157,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if a ToDo command is given without any task description","lastModifiedDate":"2021-09-25"},{"lineNumber":158,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if a ToDo command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":159,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":160,"author":{"gitId":"lezongmun"},"content":"    public ToDo parseToDo(String rawUserInput) throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":161,"author":{"gitId":"lezongmun"},"content":"        // checks if there is a task description given","lastModifiedDate":"2021-09-25"},{"lineNumber":162,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkTaskExceptions(TODO_COMMAND, \"\", rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":163,"author":{"gitId":"lezongmun"},"content":"        String todoTaskDescription \u003d parseFullTaskDescription(rawUserInput);","lastModifiedDate":"2021-09-25"},{"lineNumber":164,"author":{"gitId":"lezongmun"},"content":"        ToDo todo \u003d new ToDo(todoTaskDescription);","lastModifiedDate":"2021-09-25"},{"lineNumber":165,"author":{"gitId":"lezongmun"},"content":"        return todo;","lastModifiedDate":"2021-09-24"},{"lineNumber":166,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":167,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":168,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":169,"author":{"gitId":"lezongmun"},"content":"     * Returns the index of the task in TaskList that is to be marked as done.","lastModifiedDate":"2021-09-25"},{"lineNumber":170,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":171,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter and then parses","lastModifiedDate":"2021-09-25"},{"lineNumber":172,"author":{"gitId":"lezongmun"},"content":"     * it to obtain the index of the task in the TaskList to be marked as done.","lastModifiedDate":"2021-09-25"},{"lineNumber":173,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":174,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":175,"author":{"gitId":"lezongmun"},"content":"     * @return index of the task in the TaskList to be marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":176,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if a Done Command is given without any task number","lastModifiedDate":"2021-09-25"},{"lineNumber":177,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if a Done Command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":178,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":179,"author":{"gitId":"lezongmun"},"content":"    public int parseDone(String rawUserInput) throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":180,"author":{"gitId":"lezongmun"},"content":"        // checks if there are exactly 2 elements in the rawUserInput, and a number is given as task number.","lastModifiedDate":"2021-09-25"},{"lineNumber":181,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkCommandDescriptionExceptions(DONE_COMMAND, rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":182,"author":{"gitId":"lezongmun"},"content":"        String[] inputWords \u003d rawUserInput.split(\" \");","lastModifiedDate":"2021-09-24"},{"lineNumber":183,"author":{"gitId":"lezongmun"},"content":"        int doneIndex \u003d Integer.parseInt(inputWords[1]) - 1;","lastModifiedDate":"2021-09-24"},{"lineNumber":184,"author":{"gitId":"lezongmun"},"content":"        return doneIndex;","lastModifiedDate":"2021-09-24"},{"lineNumber":185,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":186,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":187,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":188,"author":{"gitId":"lezongmun"},"content":"     * Returns the index of the task that is to be removed from TaskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":189,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":190,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter and then parses","lastModifiedDate":"2021-09-25"},{"lineNumber":191,"author":{"gitId":"lezongmun"},"content":"     * it to obtain the index of the task in the TaskList to be removed.","lastModifiedDate":"2021-09-25"},{"lineNumber":192,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":193,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":194,"author":{"gitId":"lezongmun"},"content":"     * @return index of the task in the TaskList to be removed","lastModifiedDate":"2021-09-25"},{"lineNumber":195,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if a Delete Command is given without any task number","lastModifiedDate":"2021-09-25"},{"lineNumber":196,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if a Delete Command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":197,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":198,"author":{"gitId":"lezongmun"},"content":"    public int parseDelete(String rawUserInput) throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":199,"author":{"gitId":"lezongmun"},"content":"        // checks if there are exactly 2 elements in the rawUserInput, and a number is given as task number.","lastModifiedDate":"2021-09-25"},{"lineNumber":200,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkCommandDescriptionExceptions(DELETE_COMMAND, rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":201,"author":{"gitId":"lezongmun"},"content":"        String[] inputWords \u003d rawUserInput.split(\" \");","lastModifiedDate":"2021-09-24"},{"lineNumber":202,"author":{"gitId":"lezongmun"},"content":"        int deleteIndex \u003d Integer.parseInt(inputWords[1]) - 1;","lastModifiedDate":"2021-09-24"},{"lineNumber":203,"author":{"gitId":"lezongmun"},"content":"        return deleteIndex;","lastModifiedDate":"2021-09-24"},{"lineNumber":204,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":205,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":206,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":207,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter and then parses","lastModifiedDate":"2021-09-25"},{"lineNumber":208,"author":{"gitId":"lezongmun"},"content":"     * it to check if it is a valid Bye Command.","lastModifiedDate":"2021-09-25"},{"lineNumber":209,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":210,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":211,"author":{"gitId":"lezongmun"},"content":"     * @throws NoDescriptionException if a Bye Command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":212,"author":{"gitId":"lezongmun"},"content":"     * @throws IncorrectDescriptionFormatException if a Bye Command is given with incorrect formatting","lastModifiedDate":"2021-09-25"},{"lineNumber":213,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":214,"author":{"gitId":"lezongmun"},"content":"    public void parseBye(String rawUserInput) throws NoDescriptionException, IncorrectDescriptionFormatException {","lastModifiedDate":"2021-09-25"},{"lineNumber":215,"author":{"gitId":"lezongmun"},"content":"        //checks if there is exactly 1 word, ie. \"bye\"","lastModifiedDate":"2021-09-25"},{"lineNumber":216,"author":{"gitId":"lezongmun"},"content":"        ValidityAndErrorCheck.checkCommandDescriptionExceptions(\"bye\", rawUserInput);","lastModifiedDate":"2021-09-25"},{"lineNumber":217,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":218,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":219,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":220,"author":{"gitId":"lezongmun"},"content":"     * Returns the type of input command given by the user as a String","lastModifiedDate":"2021-09-25"},{"lineNumber":221,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":222,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter and then parses","lastModifiedDate":"2021-09-25"},{"lineNumber":223,"author":{"gitId":"lezongmun"},"content":"     * it to obtain the type of command given by the user to be executed in","lastModifiedDate":"2021-09-25"},{"lineNumber":224,"author":{"gitId":"lezongmun"},"content":"     * the program, as a String.","lastModifiedDate":"2021-09-25"},{"lineNumber":225,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":226,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":227,"author":{"gitId":"lezongmun"},"content":"     * @return the input command type given by user as a String.","lastModifiedDate":"2021-09-25"},{"lineNumber":228,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":229,"author":{"gitId":"lezongmun"},"content":"    public String parseInputCommand(String rawUserInput) {","lastModifiedDate":"2021-09-25"},{"lineNumber":230,"author":{"gitId":"lezongmun"},"content":"        String[] inputWords \u003d rawUserInput.toLowerCase().split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":231,"author":{"gitId":"lezongmun"},"content":"        String inputCommand \u003d inputWords[0];","lastModifiedDate":"2021-09-25"},{"lineNumber":232,"author":{"gitId":"lezongmun"},"content":"        return inputCommand;","lastModifiedDate":"2021-09-25"},{"lineNumber":233,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":236,"author":{"gitId":"lezongmun"},"content":"     * Returns the full task description of the Task command given by the user","lastModifiedDate":"2021-09-25"},{"lineNumber":237,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":238,"author":{"gitId":"lezongmun"},"content":"     * This method takes in the raw user input as a parameter when one of the","lastModifiedDate":"2021-09-25"},{"lineNumber":239,"author":{"gitId":"lezongmun"},"content":"     * Task commands has been given by user. The raw user input is then parsed","lastModifiedDate":"2021-09-25"},{"lineNumber":240,"author":{"gitId":"lezongmun"},"content":"     * to obtain the full description of the task. If it is a ToDo task, the","lastModifiedDate":"2021-09-25"},{"lineNumber":241,"author":{"gitId":"lezongmun"},"content":"     * full description is just the task description. If it is a Deadline or","lastModifiedDate":"2021-09-25"},{"lineNumber":242,"author":{"gitId":"lezongmun"},"content":"     * Event task, the full description includes both the task description as","lastModifiedDate":"2021-09-25"},{"lineNumber":243,"author":{"gitId":"lezongmun"},"content":"     * well as the date and time to be done.","lastModifiedDate":"2021-09-25"},{"lineNumber":244,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":245,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":246,"author":{"gitId":"lezongmun"},"content":"     * @return full description of the task as a String","lastModifiedDate":"2021-09-25"},{"lineNumber":247,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":248,"author":{"gitId":"lezongmun"},"content":"    public String parseFullTaskDescription(String rawUserInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":249,"author":{"gitId":"lezongmun"},"content":"        int startIndex \u003d rawUserInput.indexOf(\" \") + 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":250,"author":{"gitId":"lezongmun"},"content":"        String FullTaskDescription \u003d rawUserInput.substring(startIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":251,"author":{"gitId":"lezongmun"},"content":"        return FullTaskDescription;","lastModifiedDate":"2021-09-23"},{"lineNumber":252,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":253,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":254,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":255,"author":{"gitId":"lezongmun"},"content":"     * Returns the date of task as a LocalDate from the given input String containing","lastModifiedDate":"2021-09-25"},{"lineNumber":256,"author":{"gitId":"lezongmun"},"content":"     * both the date and time of the task.","lastModifiedDate":"2021-09-25"},{"lineNumber":257,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":258,"author":{"gitId":"lezongmun"},"content":"     * This method only can read date String that are formatted as \"dd-MM-yyyy\", eg.","lastModifiedDate":"2021-09-25"},{"lineNumber":259,"author":{"gitId":"lezongmun"},"content":"     * \"21-02-2019\".","lastModifiedDate":"2021-09-25"},{"lineNumber":260,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":261,"author":{"gitId":"lezongmun"},"content":"     * @param dateAndTime String containing both date and time of the task","lastModifiedDate":"2021-09-25"},{"lineNumber":262,"author":{"gitId":"lezongmun"},"content":"     * @return a LocalDate object to represent the date of task","lastModifiedDate":"2021-09-25"},{"lineNumber":263,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":264,"author":{"gitId":"lezongmun"},"content":"    public static LocalDate parseDate(String dateAndTime) {","lastModifiedDate":"2021-09-25"},{"lineNumber":265,"author":{"gitId":"lezongmun"},"content":"        String[] splitDateAndTime \u003d dateAndTime.split(\" \", 0);","lastModifiedDate":"2021-09-25"},{"lineNumber":266,"author":{"gitId":"lezongmun"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-09-25"},{"lineNumber":267,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":268,"author":{"gitId":"lezongmun"},"content":"        String dateString \u003d splitDateAndTime[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":269,"author":{"gitId":"lezongmun"},"content":"        LocalDate date \u003d LocalDate.parse(dateString, formatter);","lastModifiedDate":"2021-09-25"},{"lineNumber":270,"author":{"gitId":"lezongmun"},"content":"        return date;","lastModifiedDate":"2021-09-25"},{"lineNumber":271,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":272,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":273,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":274,"author":{"gitId":"lezongmun"},"content":"     * Returns the time of task as a LocalDate from the given input String containing","lastModifiedDate":"2021-09-25"},{"lineNumber":275,"author":{"gitId":"lezongmun"},"content":"     * both the date and time of the task.","lastModifiedDate":"2021-09-25"},{"lineNumber":276,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":277,"author":{"gitId":"lezongmun"},"content":"     * This method only can read time String that are formatted as \"HHmm\", eg.","lastModifiedDate":"2021-09-25"},{"lineNumber":278,"author":{"gitId":"lezongmun"},"content":"     * \"1830\". If there is no input time, this method returns null.","lastModifiedDate":"2021-09-25"},{"lineNumber":279,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":280,"author":{"gitId":"lezongmun"},"content":"     * @param dateAndTime String containing both date and time of the task","lastModifiedDate":"2021-09-25"},{"lineNumber":281,"author":{"gitId":"lezongmun"},"content":"     * @return a LocalTime object to represent the time of task","lastModifiedDate":"2021-09-25"},{"lineNumber":282,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":283,"author":{"gitId":"lezongmun"},"content":"    public static LocalTime parseTime(String dateAndTime) {","lastModifiedDate":"2021-09-25"},{"lineNumber":284,"author":{"gitId":"lezongmun"},"content":"        String[] splitDateAndTime \u003d dateAndTime.split(\" \", 0);","lastModifiedDate":"2021-09-25"},{"lineNumber":285,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":286,"author":{"gitId":"lezongmun"},"content":"        if (splitDateAndTime.length \u003d\u003d 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":287,"author":{"gitId":"lezongmun"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-09-25"},{"lineNumber":288,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":289,"author":{"gitId":"lezongmun"},"content":"            String timeString \u003d splitDateAndTime[1].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":290,"author":{"gitId":"lezongmun"},"content":"            LocalTime time \u003d LocalTime.parse(timeString, formatter);","lastModifiedDate":"2021-09-25"},{"lineNumber":291,"author":{"gitId":"lezongmun"},"content":"            return time;","lastModifiedDate":"2021-09-25"},{"lineNumber":292,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":293,"author":{"gitId":"lezongmun"},"content":"        return null;","lastModifiedDate":"2021-09-25"},{"lineNumber":294,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":295,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":296,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":297,"author":{"gitId":"lezongmun"},"content":"     * This method parses the raw user input to find out the input command given by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":298,"author":{"gitId":"lezongmun"},"content":"     * The input command is then executed using the Command Object. This method also catches","lastModifiedDate":"2021-09-25"},{"lineNumber":299,"author":{"gitId":"lezongmun"},"content":"     * any exceptions thrown during the parsing and execution of commands, and prints their","lastModifiedDate":"2021-09-25"},{"lineNumber":300,"author":{"gitId":"lezongmun"},"content":"     * respective error messages.","lastModifiedDate":"2021-09-25"},{"lineNumber":301,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":302,"author":{"gitId":"lezongmun"},"content":"     * @param rawUserInput raw input given by the user that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":303,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":304,"author":{"gitId":"lezongmun"},"content":"    public void parseInput(String rawUserInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":305,"author":{"gitId":"lezongmun"},"content":"        String inputCommand \u003d parseInputCommand(rawUserInput);","lastModifiedDate":"2021-09-25"},{"lineNumber":306,"author":{"gitId":"lezongmun"},"content":"        Command command \u003d new Command(inputCommand, this.programManager, taskList);","lastModifiedDate":"2021-09-24"},{"lineNumber":307,"author":{"gitId":"lezongmun"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":308,"author":{"gitId":"lezongmun"},"content":"            switch (inputCommand) {","lastModifiedDate":"2021-09-24"},{"lineNumber":309,"author":{"gitId":"lezongmun"},"content":"            case FIND_COMMAND:","lastModifiedDate":"2021-09-24"},{"lineNumber":310,"author":{"gitId":"lezongmun"},"content":"                String keyword \u003d parseFind(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":311,"author":{"gitId":"lezongmun"},"content":"                command.executeFindCommand(keyword, taskList.getTaskList());","lastModifiedDate":"2021-09-24"},{"lineNumber":312,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-24"},{"lineNumber":313,"author":{"gitId":"lezongmun"},"content":"            case SHOW_COMMAND:","lastModifiedDate":"2021-09-24"},{"lineNumber":314,"author":{"gitId":"lezongmun"},"content":"                LocalDate localdate \u003d parseShow(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":315,"author":{"gitId":"lezongmun"},"content":"                command.executeShowCommand(localdate, taskList.getTaskList());","lastModifiedDate":"2021-09-24"},{"lineNumber":316,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-24"},{"lineNumber":317,"author":{"gitId":"lezongmun"},"content":"            case LIST_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":318,"author":{"gitId":"lezongmun"},"content":"                command.executeListCommand();","lastModifiedDate":"2021-09-23"},{"lineNumber":319,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":320,"author":{"gitId":"lezongmun"},"content":"            case DONE_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":321,"author":{"gitId":"lezongmun"},"content":"                int doneIndex \u003d parseDone(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":322,"author":{"gitId":"lezongmun"},"content":"                command.executeDoneCommand(doneIndex);","lastModifiedDate":"2021-09-24"},{"lineNumber":323,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":324,"author":{"gitId":"lezongmun"},"content":"            case TODO_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":325,"author":{"gitId":"lezongmun"},"content":"                ToDo todo \u003d parseToDo(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":326,"author":{"gitId":"lezongmun"},"content":"                command.executeToDoCommand(todo);","lastModifiedDate":"2021-09-24"},{"lineNumber":327,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":328,"author":{"gitId":"lezongmun"},"content":"            case DEADLINE_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":329,"author":{"gitId":"lezongmun"},"content":"                Deadline deadline \u003d parseDeadline(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":330,"author":{"gitId":"lezongmun"},"content":"                command.executeDeadlineCommand(deadline);","lastModifiedDate":"2021-09-24"},{"lineNumber":331,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":332,"author":{"gitId":"lezongmun"},"content":"            case EVENT_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":333,"author":{"gitId":"lezongmun"},"content":"                Event event \u003d parseEvent(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":334,"author":{"gitId":"lezongmun"},"content":"                command.executeEventCommand(event);","lastModifiedDate":"2021-09-24"},{"lineNumber":335,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":336,"author":{"gitId":"lezongmun"},"content":"            case DELETE_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":337,"author":{"gitId":"lezongmun"},"content":"                int deleteIndex \u003d parseDelete(rawUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":338,"author":{"gitId":"lezongmun"},"content":"                command.executeDeleteCommand(deleteIndex);","lastModifiedDate":"2021-09-24"},{"lineNumber":339,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":340,"author":{"gitId":"lezongmun"},"content":"            case BYE_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":341,"author":{"gitId":"lezongmun"},"content":"                parseBye(rawUserInput);","lastModifiedDate":"2021-09-25"},{"lineNumber":342,"author":{"gitId":"lezongmun"},"content":"                command.executeByeCommand();","lastModifiedDate":"2021-09-25"},{"lineNumber":343,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":344,"author":{"gitId":"lezongmun"},"content":"            default:","lastModifiedDate":"2021-09-23"},{"lineNumber":345,"author":{"gitId":"lezongmun"},"content":"                Ui.printInvalidCommandMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":346,"author":{"gitId":"lezongmun"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":347,"author":{"gitId":"lezongmun"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":348,"author":{"gitId":"lezongmun"},"content":"        } catch (NoDescriptionException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":349,"author":{"gitId":"lezongmun"},"content":"            Ui.printNoDescriptionMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":350,"author":{"gitId":"lezongmun"},"content":"        } catch (IncorrectDescriptionFormatException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":351,"author":{"gitId":"lezongmun"},"content":"            Ui.printIncorrectDescriptionFormatMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":352,"author":{"gitId":"lezongmun"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":353,"author":{"gitId":"lezongmun"},"content":"            Ui.printNumberFormatMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":354,"author":{"gitId":"lezongmun"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":355,"author":{"gitId":"lezongmun"},"content":"            Ui.printIndexOutOfBoundsMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":356,"author":{"gitId":"lezongmun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":357,"author":{"gitId":"lezongmun"},"content":"            Ui.printIOExceptionMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":358,"author":{"gitId":"lezongmun"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-24"},{"lineNumber":359,"author":{"gitId":"lezongmun"},"content":"            Ui.printDateTimeErrorMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":360,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":361,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":362,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":363,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":364,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":365,"author":{"gitId":"lezongmun"},"content":"     * Returns a Task object in the form of either a Deadline, an Event or a ToDo.","lastModifiedDate":"2021-09-25"},{"lineNumber":366,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":367,"author":{"gitId":"lezongmun"},"content":"     * This method takes in data from the storage file as a String and then parses it","lastModifiedDate":"2021-09-25"},{"lineNumber":368,"author":{"gitId":"lezongmun"},"content":"     * to obtain the task type, the task status, the task description, as well as the","lastModifiedDate":"2021-09-25"},{"lineNumber":369,"author":{"gitId":"lezongmun"},"content":"     * task date and time, if any. The Task object is then constructed accordingly with","lastModifiedDate":"2021-09-25"},{"lineNumber":370,"author":{"gitId":"lezongmun"},"content":"     * respect to the task type and parsed information, which will then be returned.","lastModifiedDate":"2021-09-25"},{"lineNumber":371,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":372,"author":{"gitId":"lezongmun"},"content":"     * @param fileData a String containing information about a task in the storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":373,"author":{"gitId":"lezongmun"},"content":"     * @return Task object in the form of either a Deadline, an Event or a ToDo.","lastModifiedDate":"2021-09-25"},{"lineNumber":374,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":375,"author":{"gitId":"lezongmun"},"content":"    public static Task parseFileData(String fileData) {","lastModifiedDate":"2021-09-25"},{"lineNumber":376,"author":{"gitId":"lezongmun"},"content":"        String splitData[] \u003d fileData.split(\"@\");","lastModifiedDate":"2021-09-25"},{"lineNumber":377,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":378,"author":{"gitId":"lezongmun"},"content":"        String taskType \u003d splitData[0].toLowerCase();","lastModifiedDate":"2021-09-25"},{"lineNumber":379,"author":{"gitId":"lezongmun"},"content":"        String taskStatus \u003d splitData[1];","lastModifiedDate":"2021-09-25"},{"lineNumber":380,"author":{"gitId":"lezongmun"},"content":"        String taskDescription \u003d splitData[2].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":381,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":382,"author":{"gitId":"lezongmun"},"content":"        Task task \u003d new Task(taskDescription);","lastModifiedDate":"2021-09-25"},{"lineNumber":383,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":384,"author":{"gitId":"lezongmun"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-25"},{"lineNumber":385,"author":{"gitId":"lezongmun"},"content":"        case TODO_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":386,"author":{"gitId":"lezongmun"},"content":"            task \u003d new ToDo(taskDescription);","lastModifiedDate":"2021-09-25"},{"lineNumber":387,"author":{"gitId":"lezongmun"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":388,"author":{"gitId":"lezongmun"},"content":"        case DEADLINE_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":389,"author":{"gitId":"lezongmun"},"content":"            String by \u003d splitData[3].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":390,"author":{"gitId":"lezongmun"},"content":"            LocalDate deadlineDate \u003d parseDate(by);","lastModifiedDate":"2021-09-25"},{"lineNumber":391,"author":{"gitId":"lezongmun"},"content":"            LocalTime deadlineTime \u003d parseTime(by);","lastModifiedDate":"2021-09-25"},{"lineNumber":392,"author":{"gitId":"lezongmun"},"content":"            task \u003d new Deadline(taskDescription, by, deadlineDate, deadlineTime);","lastModifiedDate":"2021-09-25"},{"lineNumber":393,"author":{"gitId":"lezongmun"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":394,"author":{"gitId":"lezongmun"},"content":"        case EVENT_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":395,"author":{"gitId":"lezongmun"},"content":"            String at \u003d splitData[3].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":396,"author":{"gitId":"lezongmun"},"content":"            LocalDate eventDate \u003d parseDate(at);","lastModifiedDate":"2021-09-25"},{"lineNumber":397,"author":{"gitId":"lezongmun"},"content":"            LocalTime eventTime \u003d parseTime(at);","lastModifiedDate":"2021-09-25"},{"lineNumber":398,"author":{"gitId":"lezongmun"},"content":"            task \u003d new Event(taskDescription, at, eventDate, eventTime);","lastModifiedDate":"2021-09-25"},{"lineNumber":399,"author":{"gitId":"lezongmun"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":400,"author":{"gitId":"lezongmun"},"content":"        default:","lastModifiedDate":"2021-09-25"},{"lineNumber":401,"author":{"gitId":"lezongmun"},"content":"            Ui.printIOExceptionMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":402,"author":{"gitId":"lezongmun"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":403,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":404,"author":{"gitId":"lezongmun"},"content":"        if (taskStatus.equals(TASK_DONE_STATUS)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":405,"author":{"gitId":"lezongmun"},"content":"            task.markAsDone();","lastModifiedDate":"2021-09-25"},{"lineNumber":406,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":407,"author":{"gitId":"lezongmun"},"content":"        return task;","lastModifiedDate":"2021-09-25"},{"lineNumber":408,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":409,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"lezongmun":409}},{"path":"src/main/java/karen/program/ProgramManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.program;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import karen.parser.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"import karen.storage.Storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"import karen.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"import java.io.File;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":" * Represents an interface to control the running of the program","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"public class ProgramManager {","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"    private static TaskList taskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"    private static Parser parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"    private static boolean isRunning;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"    private static boolean isFirstRun;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"     * This class constructor is used to start the set up of the the program by instantiating","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"     * a new TaskList and a new Parser. If there is existing data stored in the data","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"     * file from the previous runs, this constructor will load the existing data. This","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"     * constructor also prints out a starting message that depends on whether it is the","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"     * user\u0027s first run.","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"    public ProgramManager() {","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"        isRunning \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"        isFirstRun \u003d getIsFirstRun();","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"        parser \u003d new Parser(taskList, this);","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"        Storage.bootUpData(taskList, this.parser);","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"        Ui.printStartMessage(isFirstRun);","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"     * This method starts the program running, and keeps the program running while","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"     * prompting for user inputs. After getting user inputs, this method will parse","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"     * the input and execute the user\u0027s commands accordingly. The program will continue","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"     * to prompt for user inputs and process them, until the user inputs a bye command,","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"     * which will then end the program.","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"    public void runProgram() {","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"        do {","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"            String rawUserInput \u003d Ui.getUserInput();","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"            parser.parseInput(rawUserInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"        } while (getIsRunning());","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"     * Returns a boolean to check if program has ran before.","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"     * This method checks for existing storage file in the file path, to detect","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"     * if it is the program\u0027s first run.","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"     * @return boolean to check if it is the first program run","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"    public boolean getIsFirstRun() {","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"        File dataFile \u003d new File(Storage.getFilePath());","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"        if (dataFile.exists()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"            this.isFirstRun \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"            this.isFirstRun \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"        return this.isFirstRun;","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"     * This method provides a flag to end the program.","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"    public void setIsRunningOff() {","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"        this.isRunning \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"     * Return a boolean to check if the program is still running.","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"     * @return boolean to check the runnng status of the program","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"    public boolean getIsRunning() {","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"        return isRunning;","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"lezongmun":84}},{"path":"src/main/java/karen/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import karen.parser.Parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"import karen.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"public abstract class Storage {","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"    private static final String FILE_PATH \u003d \"data/bobby.txt\";","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"     * This method is called when there is no existing storage file in the specific file path,","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"     * FILE_PATH. It uses the File object to create a new storage file to the specified file path.","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"     * This method also catches any exceptions thrown when creating a new file.","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"     * @param dataFile file object with a specified path name, FILE_PATH","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"    public static void createFile(File dataFile) {","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"            if (!dataFile.getParentFile().exists()) {","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"                dataFile.getParentFile().mkdirs();","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"            Ui.printCreateFileErrorMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"    public static String getFilePath() {","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"        return FILE_PATH;","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"     * This method is used to load data into the TaskList object when the program starts","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"     * running. It checks for any existing storage file located in FILE_PATH, and creates","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"     * a new storage file if there is no existing file. If there is already a storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"     * located in FILE_PATH, this method will parse the data in the storage file into","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"     * the TaskList object.","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"     * @param taskList TaskList object used to manage the Task objects in its taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"     * @param parser Parser object to parse data from the file into Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"    public static void bootUpData(TaskList taskList, Parser parser) {","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"        File dataFile \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"            if (!dataFile.exists()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"                createFile(dataFile);","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"            //parse saved data into taskList","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"            readFile(taskList, dataFile, parser);","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"            Ui.printIOExceptionMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"     * This method is used to add Task objects parsed, using the Parser object,","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"     * from the data file into the TaskList object.","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"     * @param taskList TaskList object used for adding Task objects into its taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"     * @param dataFile File object with specified path name used for accessing of data in the path","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"     * @param parser Parser object to parse the data accessed in the file path into Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"     * @throws IOException if there are errors when reading the data in the specified file path","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"    public static void readFile(TaskList taskList, File dataFile, Parser parser) throws IOException{","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"        Scanner s \u003d new Scanner(dataFile);","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"            String fileData \u003d s.nextLine();","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"            Task task \u003d parser.parseFileData(fileData);","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"            taskList.addTask(task);","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"     * This method is used for saving all Task objects found in taskList as data in the storage file,","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"     * located in the specified file path.","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"     * @param taskList TaskList object to manage Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"     * @throws IOException if there are errors when writing data into the specified file path","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"lezongmun"},"content":"    public static void writeToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"lezongmun"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"lezongmun"},"content":"        int totalTasks \u003d taskList.getTaskList().size();","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"lezongmun"},"content":"        String textToAdd \u003d \"\";","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"lezongmun"},"content":"        for (int i \u003d 0; i \u003c totalTasks; i ++){","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"lezongmun"},"content":"            Task currentTask \u003d taskList.getTaskList().get(i);","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"lezongmun"},"content":"            textToAdd +\u003d currentTask.getFormattedFileDescription();","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"lezongmun"},"content":"            textToAdd +\u003d \"\\n\";","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"lezongmun"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"lezongmun"},"content":"        fw.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"lezongmun":98}},{"path":"src/main/java/karen/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.tasklist;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"public class TaskList {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"    private static ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"     * This class constructor is used to instantiate a new TaskList object that creates","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"     * a new ArrayList to store the Task objects.","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"     * Returns an ArrayList of Task objects in TaskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"     * @return ArrayList of Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"        return taskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"     * This method adds a Task object to the taskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"     * @param task Task object to be added into the taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"    public void addTask(Task task){","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"     * Returns the number of Task objects in taskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"     * @return number of Task objects in taskList as an Integer","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"        return this.getTaskList().size();","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"     * This method removes a Task object from the taskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"     * @param taskIndex index of the Task object to be removed from taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"    public void removeTask(int taskIndex) {","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"        this.taskList.remove(taskIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"lezongmun":53}},{"path":"src/main/java/karen/tasklist/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.tasklist.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"    private LocalDate date;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"    private LocalTime time;","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"    private String by;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"    public Deadline(String taskDescription, String by, LocalDate date, LocalTime time) {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"        super(taskDescription);","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"     * Returns \"Deadline\" as the task type.","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"     * @return String to represent task type of Deadline object","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"    public String getType() {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"        return \"Deadline\";","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"     * Returns completion date of the task.","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"     * @return task date as a LocalDate","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"        return this.date;","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"     * Returns time of the task to finish by.","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"     * @return task time as a LocalTime","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"        return this.time;","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"     * Returns the date and time which the Deadline task object is set to be completed by, as a String.","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"     * @return String to represent the date and time which the Deadline task object is to be completed by","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"    public String getBy() {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"        return this.by;","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"     * Returns a formatted task description of the Deadline task object,","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"     * eg. \"Finish Homework (by: Dec 18 2021, Mon, 1800h)\".","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"     * @return a formatted task description of the Deadline task object as a String","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"        String formattedDateAndTime \u003d getFormattedDateAndTime();","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"        return String.format(\"%s (by: %s)\", this.taskDescription, formattedDateAndTime);","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"     * Returns a formatted date and time String of the Deadline task object,","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"     * eg. \"Dec 18 2021, Mon, 1800h\"","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"     * @return a formatted date and time String of the Deadline task object","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedDateAndTime() {","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy, E\");","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"        String formattedDateAndTime \u003d this.date.format(dateFormatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"        if (this.time !\u003d null) {","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"            formattedDateAndTime +\u003d String.format(\", \" + this.time.format(timeFormatter) + \"h\");","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"        return formattedDateAndTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"     * Returns a formatted task description of the Deadline task object as a String to be","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"lezongmun"},"content":"     * saved in the storage file, eg. \"Deadline@ @Finish Homework@ 21-9-2021 1830\".","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"lezongmun"},"content":"     * @return a formatted task description of the Deadline task object as String to be saved in the storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedFileDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"lezongmun"},"content":"        return String.format(\"Deadline@%s@%s@%s\",getStatusIcon(), this.taskDescription, this.by);","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"lezongmun":92}},{"path":"src/main/java/karen/tasklist/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.tasklist.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"    private LocalDate date;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"    private LocalTime time;","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"    private String at;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"    public Event(String taskDescription, String at, LocalDate date, LocalTime time){","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"        super(taskDescription);","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"     * Returns \"Event\" as the task type.","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"     * @return String to represent task type of Event object","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"    public String getType() {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"        return \"Event\";","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"     * Returns the date that the task occurs on.","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"     * @return task date as a LocalDate","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"        return this.date;","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"     * Returns the time that the task occurs on.","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"     * @return task time as a LocalTime","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"        return this.time;","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"     * Returns the date and time which the Event task object is at, as a String.","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"     * @return String to represent the date which the Event task object is at","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"    public String getAt() {","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"        return at;","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"     * Returns a formatted task description of the Event task object,","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"     * eg. \"Attend Lessons (at: Dec 18 2021, Mon, 1800h)\".","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"     * @return a formatted task description of the Event task object as a String","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"        String formattedDateAndTime \u003d getFormattedDateAndTime();","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"        return String.format(\"%s (at: %s)\", this.taskDescription, formattedDateAndTime);","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"     * Returns a formatted task description of the Event task object as a String to be","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"     * saved in the storage file, eg. \"Event@X@Finish Homework@ 21-9-2021 1800h\".","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"     * @return a formatted task description of the Event task object as String to be saved in the storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedFileDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"        return String.format(\"Event@%s@%s@%s\",getStatusIcon(), taskDescription, this.at);","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"     * Returns a formatted date and time String of the Event task object,","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"     * eg. \"Dec 18 2021, Mon, 1800h\"","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"     * @return a formatted date and time String of the Event task object","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedDateAndTime() {","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy, E\");","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"        String formattedDateAndTime \u003d this.date.format(dateFormatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"        if (this.time !\u003d null) {","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"lezongmun"},"content":"            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"lezongmun"},"content":"            formattedDateAndTime +\u003d String.format(\", \" + this.time.format(timeFormatter) + \"h\");","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"lezongmun"},"content":"        return formattedDateAndTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"lezongmun":90}},{"path":"src/main/java/karen/tasklist/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.tasklist.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"public class Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"    protected String taskDescription;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"     * This class constructor is used to instantiate a new Task object with a given task description","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"     * and done status set as false by default.","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"     * @param taskDescription task description of the Task object","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"    public Task(String taskDescription){","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"     * Returns a String to represent whether the Task object has been completed.","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"     * @return \"X\" or \" \" to represent status of Task object","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"    public String getStatusIcon(){","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"        if (isDone){","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"            return \"X\";","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"        else {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"            return \" \";","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"     * Returns the task description of the Task object, eg. \"Finish Homework\"","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"     * @return task description of the Task object as a String","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"        return this.taskDescription;","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"     * Returns the completion status of the Task object.","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"     * @return boolean to check if Task object is done.","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"    public boolean getIsDone(){","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"     * This method sets the Task object status to completed/ done.","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"    public void markAsDone(){","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"     * Returns \"Task\" as the task type","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"     * @return String to represent task type of Task object","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"    public String getType(){","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"        return \"Task\";","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"     * Returns task date if any.","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"     * @return task date if any as a LocalDate","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"        return null;","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"     * Returns task time if any.","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"     * @return task time if any as a LocalTime","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"    public LocalTime getTime() {","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"        return null;","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"lezongmun"},"content":"     * Returns the taskDescription of the Task object, eg. \"Finish Homework\".","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"lezongmun"},"content":"     * @return task description of the Task object as a String","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"lezongmun"},"content":"        return this.taskDescription;","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"lezongmun"},"content":"     * Returns the task description of the Task object as a String to be","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"lezongmun"},"content":"     * saved in the storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"lezongmun"},"content":"     * @return task description of the Task object as String","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedFileDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"lezongmun"},"content":"        return this.taskDescription;","lastModifiedDate":"2021-09-25"},{"lineNumber":104,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"lezongmun":105}},{"path":"src/main/java/karen/tasklist/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.tasklist.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"public class ToDo extends Task{","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"    public ToDo(String taskDescription){","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"        super(taskDescription);","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"     * Returns \"To Do\" as the task type","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"     * @return String to represent task type of ToDo object","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"    public String getType(){","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"        return \"To Do\";","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"     * Returns the taskDescription of the ToDo task object, eg. \"Finish Homework\"","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"     * @return task description of the ToDo task object as a String","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedDescription(){","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"        return this.taskDescription;","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"     * Returns a formatted task description of the ToDo task object as a String to be","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"     * saved in the storage file, eg. \"Todo@X@Finish Homework\".","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"     * @return formatted description of the ToDo task object as String to be saved  in the storage file","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"    public String getFormattedFileDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"        return String.format(\"Todo@%s@%s\",getStatusIcon(), this.taskDescription);","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"lezongmun":37}},{"path":"src/main/java/karen/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"package karen.ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"import karen.tasklist.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"import java.util.List;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"public abstract class Ui {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"    public static final String LINE \u003d \"    _____________________________________________________________________________\\n\\n\";","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"lezongmun"},"content":"    public static final String LINE_SPACE \u003d \"    \";","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"lezongmun"},"content":"    public static final String KAREN_ON_LOGO \u003d","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"lezongmun"},"content":"            \"\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"lezongmun"},"content":"                    \"            ______________________\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"lezongmun"},"content":"                    \"         _~`o--------------------o: \\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"lezongmun"},"content":"                    \"        /- ||                    ||\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"lezongmun"},"content":"                    \"      -!|. ||          /\\\\        ||\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"lezongmun"},"content":"                    \"     ! ||. |!___ /\\\\   /  \\\\  /\\\\___!|\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"lezongmun"},"content":"                    \"     | |!. ||   V  \\\\ /    \\\\/     ||\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"lezongmun"},"content":"                    \"      -!!__!|       V            ||\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"lezongmun"},"content":"                    \"       `\\\\. ||____________________||\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"lezongmun"},"content":"                    \"         `~!o\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u0027---\u0027\u003d\u003d\u003d\u003d\u003d\u003d\u003d o!\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"lezongmun"},"content":"                    \"                     | |\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"lezongmun"},"content":"                    \"                     !_!\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"lezongmun"},"content":"                    \"                     | |\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"lezongmun"},"content":"                    \"                     !_!\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"lezongmun"},"content":"                    \"                    .! !.\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"lezongmun"},"content":"                    \"                   /___\u0027_\\\\\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"lezongmun"},"content":"                    \"              ____!----\u0027--!____\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"lezongmun"},"content":"                    \"             /    |    \u0027  |    \\\\\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"lezongmun"},"content":"                    \"            /  - - \\\\- _\u0027_/ - -  \\\\      \\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"lezongmun"},"content":"                    \"           /. _________________ .\\\\\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"lezongmun"},"content":"                    \"          [(_____________________)]\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"lezongmun"},"content":"                    \"             0                 0 \\n\" ;","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"lezongmun"},"content":"    public static final String KAREN_OFF_LOGO \u003d","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"lezongmun"},"content":"            \"            ______________________\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"lezongmun"},"content":"            \"         _~`o--------------------o: \\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"lezongmun"},"content":"            \"        /- ||                    ||\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"lezongmun"},"content":"            \"      -!|. ||                    ||\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"lezongmun"},"content":"            \"     ! ||. |!____________________!|\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"lezongmun"},"content":"            \"     | |!. ||                    ||\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"lezongmun"},"content":"            \"      -!!__!|                    ||\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"lezongmun"},"content":"            \"       `\\\\. ||____________________||\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"lezongmun"},"content":"            \"         `~!o\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u0027---\u0027\u003d\u003d\u003d\u003d\u003d\u003d\u003d o!\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"lezongmun"},"content":"            \"                     | |\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"lezongmun"},"content":"            \"                     !_!\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"lezongmun"},"content":"            \"                     | |\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"lezongmun"},"content":"            \"                     !_!\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"lezongmun"},"content":"            \"                    .! !.\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"lezongmun"},"content":"            \"                   /___\u0027_\\\\\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"lezongmun"},"content":"            \"              ____!----\u0027--!____\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"lezongmun"},"content":"            \"             /    |    \u0027  |    \\\\\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"lezongmun"},"content":"            \"            /  - - \\\\- _\u0027_/ - -  \\\\      \\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"lezongmun"},"content":"            \"           /. _________________ .\\\\\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"lezongmun"},"content":"            \"          [(_____________________)]\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"lezongmun"},"content":"            \"             0                 0 \";","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"lezongmun"},"content":"    public static final String PLANKTON_LOGO \u003d","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"lezongmun"},"content":"\" )_)  \\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"lezongmun"},"content":"        \" |0|  \\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"lezongmun"},"content":"        \"\u0027!_!` \\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"lezongmun"},"content":"        \" \u0027 \u0027  \" ;","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"lezongmun"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Hello there Plankton, what can I can do for you?\\n\";","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"lezongmun"},"content":"    public static final String WELCOME_BACK_MESSAGE \u003d \"Welcome back Plankton, anything else I can do for you?\\n\";","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"lezongmun"},"content":"     * Returns the user input.","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"lezongmun"},"content":"     * This method prompts the user for input, then returns the user input","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"lezongmun"},"content":"     * as a String.","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"lezongmun"},"content":"     * @return user input that is trimmed with no leading spaces","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"lezongmun"},"content":"    public static String getUserInput() {","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"lezongmun"},"content":"        System.out.print(PLANKTON_LOGO + \" \u003e \");","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"lezongmun"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"lezongmun"},"content":"        String rawUserInput \u003d in.nextLine().trim();","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"lezongmun"},"content":"        return rawUserInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"lezongmun"},"content":"     * This methods prints a welcome message when the program starts.","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"lezongmun"},"content":"     * @param isFirstRun boolean to check if the program is running for the first time","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"lezongmun"},"content":"    public static void printStartMessage(boolean isFirstRun) {","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"lezongmun"},"content":"        System.out.println(KAREN_ON_LOGO);","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"lezongmun"},"content":"        if (isFirstRun) {","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"lezongmun"},"content":"            printFormattedMessage(WELCOME_MESSAGE);","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"lezongmun"},"content":"        } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"lezongmun"},"content":"            printFormattedMessage(WELCOME_BACK_MESSAGE);","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":95,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":96,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"lezongmun"},"content":"     * This method prints the given message formatted between two lines.","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"lezongmun"},"content":"     * @param message String to be printed out","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"lezongmun"},"content":"    public static void printFormattedMessage(String message) {","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"lezongmun"},"content":"        System.out.println(LINE + LINE_SPACE + message + \"\\n\" + LINE);","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":105,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when a Task object has been added to taskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"lezongmun"},"content":"     * @param task Task object to be added into taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"lezongmun"},"content":"     * @param totalTasks number of tasks in taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":111,"author":{"gitId":"lezongmun"},"content":"    public static void printTaskAddedMessage(Task task, int totalTasks) {","lastModifiedDate":"2021-09-06"},{"lineNumber":112,"author":{"gitId":"lezongmun"},"content":"        String message \u003d String.format(\"Got it. I\u0027ve added the task: \\n\" + LINE_SPACE + \"   [%s][%s] %s\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"lezongmun"},"content":"                LINE_SPACE + \"Now you have %d tasks in your list.\\n\",","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"lezongmun"},"content":"                task.getType(), task.getStatusIcon(), task.getFormattedDescription(), totalTasks);","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":116,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":118,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":119,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when a Task object has been removed from taskList.","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"lezongmun"},"content":"     * @param task Task object to be added into taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":122,"author":{"gitId":"lezongmun"},"content":"     * @param totalTasks number of tasks in taskList","lastModifiedDate":"2021-09-25"},{"lineNumber":123,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":124,"author":{"gitId":"lezongmun"},"content":"    public static void printTaskDeletedMessage(Task task, int totalTasks) {","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"lezongmun"},"content":"        String message \u003d String.format(\"Alright Plankton, I\u0027ve removed the task: \\n\" + LINE_SPACE + \"   [%s][%s] %s\\n\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"lezongmun"},"content":"                        LINE_SPACE + \"Now you have %d tasks in your list.\\n\",","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"lezongmun"},"content":"                task.getType(), task.getStatusIcon(), task.getFormattedDescription(), totalTasks);","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":131,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":132,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"lezongmun"},"content":"     * This method prints the list of Task objects in taskList, with their formatted description.","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":135,"author":{"gitId":"lezongmun"},"content":"     * @param tasks list of the Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":136,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":137,"author":{"gitId":"lezongmun"},"content":"    public static void printTaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":138,"author":{"gitId":"lezongmun"},"content":"        int listSize \u003d tasks.size();","lastModifiedDate":"2021-09-24"},{"lineNumber":139,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":140,"author":{"gitId":"lezongmun"},"content":"        if (listSize \u003d\u003d 0) {","lastModifiedDate":"2021-09-14"},{"lineNumber":141,"author":{"gitId":"lezongmun"},"content":"            printFormattedMessage(\"You have nothing in your task list so far!\\n\");","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"lezongmun"},"content":"            return;","lastModifiedDate":"2021-09-14"},{"lineNumber":143,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":144,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":145,"author":{"gitId":"lezongmun"},"content":"        String message \u003d String.format(\"Here you go Plankton \\n\\n\" + LINE_SPACE + \"Task List:\\n\");","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":147,"author":{"gitId":"lezongmun"},"content":"        for (int i \u003d 0; i \u003c listSize; i ++) {","lastModifiedDate":"2021-09-14"},{"lineNumber":148,"author":{"gitId":"lezongmun"},"content":"           message \u003d message + String.format(LINE_SPACE + \"%d. [%s][%s] %s\\n\",","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"lezongmun"},"content":"                   i + 1, tasks.get(i).getType(), tasks.get(i).getStatusIcon(),","lastModifiedDate":"2021-09-24"},{"lineNumber":150,"author":{"gitId":"lezongmun"},"content":"                   tasks.get(i).getFormattedDescription());","lastModifiedDate":"2021-09-24"},{"lineNumber":151,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":152,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":153,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":155,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":156,"author":{"gitId":"lezongmun"},"content":"     * This method prints the list of Task objects in taskList that matches with the query keyword","lastModifiedDate":"2021-09-25"},{"lineNumber":157,"author":{"gitId":"lezongmun"},"content":"     * used in Find Command.","lastModifiedDate":"2021-09-25"},{"lineNumber":158,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":159,"author":{"gitId":"lezongmun"},"content":"     * @param tasks list of the Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":160,"author":{"gitId":"lezongmun"},"content":"     * @param keyword query keyword given by user to find tasks with matching description as the keyword","lastModifiedDate":"2021-09-25"},{"lineNumber":161,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":162,"author":{"gitId":"lezongmun"},"content":"    public static void printFoundTasks(List\u003cTask\u003e tasks, String keyword) {","lastModifiedDate":"2021-09-24"},{"lineNumber":163,"author":{"gitId":"lezongmun"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-24"},{"lineNumber":164,"author":{"gitId":"lezongmun"},"content":"            printFormattedMessage(\"You seem to have none of such tasks.\\n\");","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"lezongmun"},"content":"            return;","lastModifiedDate":"2021-09-24"},{"lineNumber":166,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":167,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"Found them. Here are your tasks matching with:  \" + keyword + \"\\n\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":168,"author":{"gitId":"lezongmun"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i ++) {","lastModifiedDate":"2021-09-24"},{"lineNumber":169,"author":{"gitId":"lezongmun"},"content":"            message +\u003d String.format(LINE_SPACE + \"  %d. [%s][%s] %s\\n\",","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"lezongmun"},"content":"                    i+1, tasks.get(i).getType(), tasks.get(i).getStatusIcon(), tasks.get(i).getFormattedDescription());","lastModifiedDate":"2021-09-24"},{"lineNumber":171,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":172,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":173,"author":{"gitId":"lezongmun"},"content":"        message +\u003d String.format(\"\\n\" + LINE_SPACE + \"Total number of tasks: \" + tasks.size() + \"\\n\");","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-25"},{"lineNumber":175,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":176,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":177,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":178,"author":{"gitId":"lezongmun"},"content":"     * This method prints the list of Task objects in taskList that occurs on the same date as the","lastModifiedDate":"2021-09-25"},{"lineNumber":179,"author":{"gitId":"lezongmun"},"content":"     * date given by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":180,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":181,"author":{"gitId":"lezongmun"},"content":"     * @param date LocalDate given by user for finding Tasks occurring on that date","lastModifiedDate":"2021-09-25"},{"lineNumber":182,"author":{"gitId":"lezongmun"},"content":"     * @param tasks list of the Task objects","lastModifiedDate":"2021-09-25"},{"lineNumber":183,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":184,"author":{"gitId":"lezongmun"},"content":"    public static void printTasksOnDate (LocalDate date, List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":185,"author":{"gitId":"lezongmun"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-24"},{"lineNumber":186,"author":{"gitId":"lezongmun"},"content":"            printFormattedMessage(\"You have nothing on that day Plankton\\n\");","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"lezongmun"},"content":"            return;","lastModifiedDate":"2021-09-24"},{"lineNumber":188,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":189,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":190,"author":{"gitId":"lezongmun"},"content":"        String formattedDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, E\"));","lastModifiedDate":"2021-09-24"},{"lineNumber":191,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"Okay Plankton, here are the tasks you have on \" + formattedDate + \".\\n\\n\" + LINE_SPACE + \"\" +","lastModifiedDate":"2021-09-27"},{"lineNumber":192,"author":{"gitId":"lezongmun"},"content":"                \"Task List:\\n\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":193,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":194,"author":{"gitId":"lezongmun"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i ++) {","lastModifiedDate":"2021-09-24"},{"lineNumber":195,"author":{"gitId":"lezongmun"},"content":"            message +\u003d String.format(LINE_SPACE + \"  %d. [%s][%s] %s\\n\",","lastModifiedDate":"2021-09-27"},{"lineNumber":196,"author":{"gitId":"lezongmun"},"content":"                    i+1, tasks.get(i).getType(), tasks.get(i).getStatusIcon(), tasks.get(i).getFormattedDescription());","lastModifiedDate":"2021-09-24"},{"lineNumber":197,"author":{"gitId":"lezongmun"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":198,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":199,"author":{"gitId":"lezongmun"},"content":"        message +\u003d String.format(\"\\n\" + LINE_SPACE + \"Total number of tasks: \" + tasks.size() + \"\\n\");","lastModifiedDate":"2021-09-27"},{"lineNumber":200,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":201,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":202,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":203,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":204,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when a Task object has been marked as done.","lastModifiedDate":"2021-09-25"},{"lineNumber":205,"author":{"gitId":"lezongmun"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":206,"author":{"gitId":"lezongmun"},"content":"     * @param task Task object to be marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":207,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":208,"author":{"gitId":"lezongmun"},"content":"    public static void printTaskDoneMessage(Task task) {","lastModifiedDate":"2021-09-06"},{"lineNumber":209,"author":{"gitId":"lezongmun"},"content":"        String message \u003d String.format(\"Alright, I\u0027ve marked the task as done!\\n\" + LINE_SPACE + \"[%s] %s\\n\",","lastModifiedDate":"2021-09-27"},{"lineNumber":210,"author":{"gitId":"lezongmun"},"content":"                task.getStatusIcon(), task.getFormattedDescription());","lastModifiedDate":"2021-09-06"},{"lineNumber":211,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":212,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":213,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":214,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":215,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when user is attempting to mark a Task object that is already marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":216,"author":{"gitId":"lezongmun"},"content":"     * as done.","lastModifiedDate":"2021-09-25"},{"lineNumber":217,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":218,"author":{"gitId":"lezongmun"},"content":"    public static void printTaskAlreadyDoneMessage() {","lastModifiedDate":"2021-09-06"},{"lineNumber":219,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"That Task has already been marked as done Plankton\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":220,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":221,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":222,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":223,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":224,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when a Bye Command is given and the program has ended.","lastModifiedDate":"2021-09-25"},{"lineNumber":225,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":226,"author":{"gitId":"lezongmun"},"content":"    public static void printGoodByeMessage() {","lastModifiedDate":"2021-09-06"},{"lineNumber":227,"author":{"gitId":"lezongmun"},"content":"        System.out.println(KAREN_OFF_LOGO);","lastModifiedDate":"2021-09-27"},{"lineNumber":228,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"See you again, Plankton. \\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":229,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":230,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":231,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":232,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":233,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when an invalid command has been given by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":234,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":235,"author":{"gitId":"lezongmun"},"content":"    public static void printInvalidCommandMessage() {","lastModifiedDate":"2021-09-06"},{"lineNumber":236,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"Come again? I don\u0027t quite understand that command Plankton.\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":237,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":238,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":239,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":240,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":241,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when a command with no description has been given by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":242,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":243,"author":{"gitId":"lezongmun"},"content":"    public static void printNoDescriptionMessage() {","lastModifiedDate":"2021-09-08"},{"lineNumber":244,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"Plankton you need to be a little bit clearer.\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":245,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":246,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":247,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":248,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":249,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when a command with incorrect formatting of description has been given by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":250,"author":{"gitId":"lezongmun"},"content":"     * eg. \"done 1 2\u0027, \"event /at 21-03-2020\"","lastModifiedDate":"2021-09-27"},{"lineNumber":251,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":252,"author":{"gitId":"lezongmun"},"content":"    public static void printIncorrectDescriptionFormatMessage() {","lastModifiedDate":"2021-09-08"},{"lineNumber":253,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"What\u0027s that? Can you rephrase yourself?\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":254,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":255,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":256,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":257,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":258,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when a non-number is given in a field where a number is expected.","lastModifiedDate":"2021-09-25"},{"lineNumber":259,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":260,"author":{"gitId":"lezongmun"},"content":"    public static void printNumberFormatMessage() {","lastModifiedDate":"2021-09-08"},{"lineNumber":261,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"I don\u0027t think that\u0027s even a number. Give a proper task number Plankton.\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":262,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":263,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":264,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":265,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":266,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when there is no Task object with the index given by user.","lastModifiedDate":"2021-09-25"},{"lineNumber":267,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":268,"author":{"gitId":"lezongmun"},"content":"    public static void printIndexOutOfBoundsMessage() {","lastModifiedDate":"2021-09-14"},{"lineNumber":269,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"You don\u0027t have any Tasks with that task number.\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":270,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":271,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":272,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":273,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":274,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when there are errors when accessing a File.","lastModifiedDate":"2021-09-25"},{"lineNumber":275,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":276,"author":{"gitId":"lezongmun"},"content":"    public static void printIOExceptionMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":277,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"Oops, there\u0027s an error when I try to access your saved file.\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":278,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-15"},{"lineNumber":279,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":280,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":281,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":282,"author":{"gitId":"lezongmun"},"content":"     * This method prints a message when there are errors when creating a File.","lastModifiedDate":"2021-09-25"},{"lineNumber":283,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":284,"author":{"gitId":"lezongmun"},"content":"    public static void printCreateFileErrorMessage() {","lastModifiedDate":"2021-09-19"},{"lineNumber":285,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"Oops, there\u0027s an error creating a file for you.\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":286,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-19"},{"lineNumber":287,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":288,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":289,"author":{"gitId":"lezongmun"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":290,"author":{"gitId":"lezongmun"},"content":"     * This methods a message when user inputs a date or time incorrectly.","lastModifiedDate":"2021-09-25"},{"lineNumber":291,"author":{"gitId":"lezongmun"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":292,"author":{"gitId":"lezongmun"},"content":"    public static void printDateTimeErrorMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":293,"author":{"gitId":"lezongmun"},"content":"        String message \u003d \"I don\u0027t think that\u0027s a valid date or time.\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":294,"author":{"gitId":"lezongmun"},"content":"        printFormattedMessage(message);","lastModifiedDate":"2021-09-24"},{"lineNumber":295,"author":{"gitId":"lezongmun"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":296,"author":{"gitId":"lezongmun"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":297,"author":{"gitId":"lezongmun"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"lezongmun":297}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"lezongmun"},"content":"todo borrow book","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"lezongmun"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"lezongmun"},"content":"done 1","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"lezongmun"},"content":"done 1","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"lezongmun"},"content":"done 2","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"lezongmun"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"lezongmun"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"lezongmun"},"content":"done 3","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"lezongmun"},"content":"bye","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"lezongmun":12}}]
