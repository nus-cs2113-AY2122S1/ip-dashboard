[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.common.Messages;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.exception.EmptyTaskException;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.exception.InvalidException;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":" * Entry point of the Duke application.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":" * Initialises the program and starts interaction with the user.","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"public class Duke {","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"    private TextUi ui;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     * Instantiates a new TaskList, TextUi, and Storage.","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     * Loads up the data from the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"    public Duke() {","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"        ui \u003d new TextUi();","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"        storage \u003d new Storage(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"        storage.initTaskList();","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user the welcome message.","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"     * Receive input from the user and runs the program until termination.","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"    public void run() {","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"        ui.showWelcomeMessage();","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"        while (!isExit) {","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"            try {","lastModifiedDate":"2021-09-16"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"                String fullCommand \u003d ui.getInput();","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"                ui.showLine();","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"                Command c \u003d Parser.parseCommand(fullCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"                isExit \u003d c.getExit();","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"            } catch (InvalidException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"                ui.showToUser(Messages.MESSAGE_INVALID_COMMAND);","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"            } catch (EmptyTaskException | NumberFormatException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"                ui.showToUser(Messages.MESSAGE_EMPTY_TASK_DESCRIPTION);","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"                ui.showToUser(Messages.MESSAGE_INVALID_TASK_INDEX);","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"            } finally {","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"                ui.showLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"            }","lastModifiedDate":"2021-09-16"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"        new Duke().run();","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jyxhazcake":62,"-":1}},{"path":"src/main/java/duke/commands/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" * Deletes every task in the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes every task in the task list. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_SUCCESSFUL_CLEAR \u003d \"Task list cleared! Real empty here now...\";","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"     * Deletes every task from the TaskList and the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user a message for successful deletion.","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"            tasks.clearList();","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"            storage.clearFile();","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"            ui.showToUser(MESSAGE_SUCCESSFUL_CLEAR);","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"            System.out.println(\"IO Error!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jyxhazcake":38}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":" * An abstract class that represents an executable command","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"    protected boolean isExit \u003d false;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public abstract void execute(TaskList tasks, TextUi ui, Storage storage);","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"    public boolean getExit() {","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"        return isExit;","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"    ;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":20}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":" * Adds a Deadline task to the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_SPLITTER \u003d \"/by\";","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline task to the task list. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"            + \"Parameters: TASK /by DEADLINE\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"            + \" Do CS2113T iP /by 2021-10-01\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"    protected String description;","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"    protected String by;","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"     * Simple constructor using raw values.","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"     * @param description a string that contains the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"     * @param by          a string that contains the deadline for the task","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"    public DeadlineCommand(String description, String by) {","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"     * Appends a Deadline task to the TaskList and storage file depending on the type of the deadline provided.","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user a message for successful creation.","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks   a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui      accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"            createDeadlineWithLocalDateTask(tasks, storage);","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"            createDeadlineWithStringTask(tasks, storage);","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"        ui.showSuccessfulAdd(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"     * Creates a Deadline task with the deadline as a LocalDate class.","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"     * Adds the task to the task list and saves the data to the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses the storage file","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"jyxhazcake"},"content":"     * @throws DateTimeParseException if the program is unable to parse the deadline into a LocalDate class.","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"jyxhazcake"},"content":"    private void createDeadlineWithLocalDateTask(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jyxhazcake"},"content":"        LocalDate d1 \u003d LocalDate.parse(by, DateTimeFormatter.ISO_DATE);","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"jyxhazcake"},"content":"        String date \u003d d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"jyxhazcake"},"content":"        tasks.addTask(new Deadline(description, d1));","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jyxhazcake"},"content":"        storage.appendDeadlineToFile(description, date);","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"jyxhazcake"},"content":"     * Creates a Deadline task with the deadline as a String.","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"jyxhazcake"},"content":"     * Adds the task to the task list and saves the data to the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses the storage file","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"jyxhazcake"},"content":"    private void createDeadlineWithStringTask(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jyxhazcake"},"content":"        tasks.addTask(new Deadline(description, by));","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jyxhazcake"},"content":"        storage.appendDeadlineToFile(description, by);","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":84}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Deletes a specific task from the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a task from the task list. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"Parameters: TASK_INDEX\"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"            + \" 2\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    public final String taskIndexString;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     * Simple constructor using raw values","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     * @param taskIndexString a string which represents the index of the given task.","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"    public DeleteCommand(String taskIndexString) {","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"        this.taskIndexString \u003d taskIndexString;","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"     * Finds the task from the given index and deletes it from the TaskList and storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user a message for successful deletion.","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"     * @throws IndexOutOfBoundsException if the index is out of the task list range","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"        int taskIndex \u003d Integer.parseInt(taskIndexString) - 1;","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"        Task currentTask \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"        tasks.removeTask(currentTask);","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"        storage.OverwriteListToFile();","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"        ui.showSuccessfulDelete(currentTask, tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":48}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Event;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Adds an Event task to the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_SPLITTER \u003d \"/at\";","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event task to the task list. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"            + \"Parameters: TASK /at DAY_TIME\"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"            + \" CS2113T tP Meeting /at Next Thursday 2-5pm\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"    protected String description;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"    protected String at;","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     * Simple constructor with raw values.","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"     * @param description a string that contains the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"     * @param at a string that contains the event date/time for the task","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"    public EventCommand(String description, String at) {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"     * Appends an Event task to the TaskList and storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user a message for successful creation.","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"        createEventTask(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"        storage.appendEventToFile(description, at);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"        ui.showSuccessfulAdd(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"    private void createEventTask(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"        tasks.addTask(new Event(description, at));","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":53}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.common.Messages;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Exits the program.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD + \"\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"     * Shows an exit message to the user and exits the program.","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"        ui.showToUser(ui.DASHES, Messages.MESSAGE_GOODBYE, ui.DASHES);","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"        isExit \u003d true;","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":29}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Finds and shows tasks that contain a specified keyword.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows tasks that match the provided keyword. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"            + \"Parameters: KEYWORD\"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"            + \" book\\n\";","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_NO_MATCH \u003d \"No matching tasks found!\";","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_SHOW_MATCHES \u003d \"Here are the matching tasks in your list: \";","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"    private final String keyword;","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     * Constructor using raw values.","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     * @param keyword the word that is used to find matching tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"     * Iterates through the task list to find tasks that match the keyword and prints the result to the user.","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks   the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui      accesses text ui that shows messages to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage access a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"        int matchCount \u003d 0;","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"        for (Task task : tasks.getList()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"                if (matchCount \u003d\u003d 0) {","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"                    ui.showToUser(MESSAGE_SHOW_MATCHES);","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"                }","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"                ui.showToUser((tasks.getIndex(task)+1) + \".\" + task);","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"                matchCount++;","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"        if (matchCount \u003d\u003d 0) {","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"            ui.showToUser(MESSAGE_NO_MATCH);","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jyxhazcake":54}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":" * Displays usage information about all available commands in the program.","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows usage information for all commands in the program. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_HELP \u003d \"Help initiated! Look below for command information~\";","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"     * Prints usage messages to the user for every command.","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"        ui.showToUser(MESSAGE_HELP,","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"                ui.EMPTY_STRING,","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"                TodoCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"                DeadlineCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"                EventCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"                ListCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"                MarkCompleteCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"                DeleteCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"                ClearCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"                FindCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"                HelpCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"                ExitCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jyxhazcake":40}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Displays all the tasks in the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"No tasks in the list!\";","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays all the tasks in the task list. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"            + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user a list of all the tasks in the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     * If the task list is empty, an empty list message will be shown instead.","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"        if (tasks.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"            ui.showToUser(MESSAGE_EMPTY_LIST);","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"        } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"            showAllTasks(tasks, ui);","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"    private static void showAllTasks(TaskList tasks, TextUi ui) {","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"        System.out.println(ui.LINE_PREFIX + \"Here are the tasks in your list:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"        for (Task item : tasks.getList()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"            System.out.println(ui.LINE_PREFIX + (tasks.getIndex(item) + 1) + \".\" + item);","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":43}},{"path":"src/main/java/duke/commands/MarkCompleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Sets the specified task as done.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class MarkCompleteCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the selected task as Complete. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"            + \"Parameters: TASK_INDEX\"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"            + \" 1\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_FAILED_MARK_COMPLETE \u003d \"You\u0027ve already done the task! Warning: Re-doing the same tasks may result in insanity.\";","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    private final String taskIndexString;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     * Simple constructor with raw values.","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     * @param taskIndexString a string that represents the index of the given task","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"    public MarkCompleteCommand(String taskIndexString) {","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"        this.taskIndexString \u003d taskIndexString;","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"     * Finds the specified task with the index and marks it as done.","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"     * Overwrites the storage file with a new list that has the task marked done.","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user a message for successful mark completion.","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"     * If the task is already done, shows the user a fail message.","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"     * @throws IndexOutOfBoundsException if the given index is out of the task list range","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"        int taskIndex \u003d Integer.parseInt(taskIndexString) - 1;","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"        Task currentTask \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"        if (currentTask.isDone()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"            ui.showToUser(MESSAGE_FAILED_MARK_COMPLETE);","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"        } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"            currentTask.setDone();","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"            storage.OverwriteListToFile();","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"            ui.showSuccessfulComplete(currentTask);","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jyxhazcake":54}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Adds a Todo task to the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a todo task to the task list. \"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"            + \"Parameters: TASK\"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"            + \"\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"            + \" Wash my dirty smelly clothes\\n\";","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"    private final String description;","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     * Simple constructor with raw values.","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     * @param description a string that contains the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"    public TodoCommand(String description) {","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"     * Appends a Todo task to the TasKList and storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"     * Shows the user a message for successful creation.","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks a task list that contains all the tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"     * @param ui accesses format and messages to show to the user","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"     * @param storage accesses a text file which stores the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"        createTodoTask(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"        storage.appendTodoToFile(description);","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"        ui.showSuccessfulAdd(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"    private void createTodoTask(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"        tasks.addTask(new Todo(description));","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":48}},{"path":"src/main/java/duke/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.common;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":" * Container for general user messages","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"public class Messages {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, your task management robot!\";","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_GOODBYE \u003d \"Bye! Do visit next time!\";","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_INVALID_COMMAND \u003d \"BEEP BEEP BOOP! ERROR... CANNOT UNDERSTAND...\";","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_EMPTY_TASK_DESCRIPTION \u003d \"Error! Please ensure that your inputs are correct!! \u003e:(\";","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_INVALID_TASK_INDEX \u003d \"Oops! The task index doesn\u0027t exist! Pls try again\";","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_INIT_NEW_STORAGE_FILE \u003d \"No saved task lists found! Created a new one for you :-)\";","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_INIT_FAILED \u003d \"We\u0027re unable to make a new data folder... perhaps you already have one but no file? \\n|| In any case, adding a new storage file should work fine! :-)\";","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_ENTER_COMMAND \u003d \"What would you like to do?  Type \u0027help\u0027 if you\u0027re confused!\";","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"jyxhazcake":15}},{"path":"src/main/java/duke/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.data;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":" * Represents the entire task list. Contains the data of the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"public class TaskList {","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"     * Creates an empty task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"     * Removes a task from the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"    public void removeTask(Task task) {","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"        tasks.remove(task);","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"     * Clears all the tasks from the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"    public void clearList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"        tasks.clear();","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"        return tasks;","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the specified task by the given index.","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"     * @param index the index representing the task in the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the size of the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jyxhazcake"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the index of the given task.","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"jyxhazcake"},"content":"    public int getIndex(Task task) {","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jyxhazcake"},"content":"        return tasks.indexOf(task);","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":72}},{"path":"src/main/java/duke/data/exception/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.data.exception;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":" * Signals an error caused by user inputting an empty task description.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"public class EmptyTaskException extends Exception{","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"jyxhazcake":7}},{"path":"src/main/java/duke/data/exception/InvalidException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.data.exception;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":" * Signals an error caused by the user inputting a command that does not exist.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"public class InvalidException extends Exception{","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"jyxhazcake":7}},{"path":"src/main/java/duke/data/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":" * A deadline task in the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"    protected String by;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"     * Constructor that sets the description and deadline.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"     * @param description a string that contains the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"     * @param by a string that contains the deadline for the task","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     * Constructor that sets the description and deadline in LocalDate class.","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"     * @param description a string that contains the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"     * @param byDate a LocalDate that contains the deadline for the task","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"    public Deadline(String description, LocalDate byDate) {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"        super(description);","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"        this.by \u003d byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     * Returns a String of value by, representing the task deadline","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"     * @return the deadline of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"    public String getBy() {","lastModifiedDate":"2021-09-16"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"        return by;","lastModifiedDate":"2021-09-16"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"     * Returns byDate, which represents the task deadline","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"     * @return the deadline of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"    public LocalDate getByDate() {","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"        return byDate;","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the String representation of the Deadline task","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"     * @return a String message that contains the status icon, task description and deadline","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jyxhazcake":63}},{"path":"src/main/java/duke/data/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":" * An event task in the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"    protected String at;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"     * Constructor that sets the description and at.","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"     * @param description a string that contains the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"     * @param at a string that contains the date/time for the task","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"     * Returns a String of value at, representing the date/time of the event","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     * @return the date/time of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"    public String getAt() {","lastModifiedDate":"2021-09-16"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"        return at;","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the String representation of the Event task","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"     * @return a String message that contains the status icon, task description and event date/time","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jyxhazcake":38}},{"path":"src/main/java/duke/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":" * Represents a Task in the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"public class Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"    protected String description;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"     * Constructor which sets the description and isDone value as the default false.","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"     * @param description a string that contains the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"     * Returns a String representing the task description.","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     * @return the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"        return description;","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"     * Returns a boolean representing whether a task is marked done or not.","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"     * @return the isDone value of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"        return isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"     * Sets the task description.","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"     * @param description the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"     * Sets the isDone value of the task as true to mark it as done.","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"     * Returns a String representation of the task\u0027s isDone status.","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"     * @return the status icon of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the String representation of the task.","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"jyxhazcake"},"content":"     * @return the status icon of the task and its description","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jyxhazcake"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jyxhazcake"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jyxhazcake":72}},{"path":"src/main/java/duke/data/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.data.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":" * A Todo task in the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"     * Constructor that sets the task description with raw values","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"     * @param description the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the String representation of the Todo task","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"     * @return the status icon and the task\u0027s description","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jyxhazcake":25}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.commands.*;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.exception.EmptyTaskException;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.exception.InvalidException;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":" * Parses user input.","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"public class Parser {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    public static final int TASK_DATA_COUNT \u003d 2;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    public static final int TASK_DATA_INDEX_DESCRIPTION \u003d 0;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"    public static final int TASK_DATA_INDEX_ADDITIONAL_INFO \u003d 1;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"     * Parses user input into a proper command for execution.","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"     * @param userCommand a String that includes command and additional info","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"     * @return a Command that is executable by the program","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"     * @throws InvalidException          if the user command does not exist","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"     * @throws IndexOutOfBoundsException if the provided index for some commands are out of the task list range","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"     * @throws EmptyTaskException        if the user did not provide additional information for some commands","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"    public static Command parseCommand(String userCommand) throws InvalidException, IndexOutOfBoundsException, EmptyTaskException {","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"        final String[] commandTypeAndParams \u003d splitUserCommand(userCommand.toLowerCase());","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"        final String commandType \u003d commandTypeAndParams[TASK_DATA_INDEX_DESCRIPTION].trim();","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"        final String commandArgs \u003d commandTypeAndParams[TASK_DATA_INDEX_ADDITIONAL_INFO].trim();","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"        switch (commandType) {","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"            return new ListCommand();","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"            checkValidArguments(commandArgs);","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"            return new DeleteCommand(commandArgs);","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"        case MarkCompleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"            checkValidArguments(commandArgs);","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"            return new MarkCompleteCommand(commandArgs);","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"            checkValidArguments(commandArgs);","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"            return new TodoCommand(commandArgs);","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"            return prepareDeadlineCommand(commandArgs);","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"            return prepareEventCommand(commandArgs);","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"            return new ClearCommand();","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"            checkValidArguments(commandArgs);","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"            return new FindCommand(commandArgs);","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"        default:","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"            throw new InvalidException();","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"     * Splits user input into the command type and its arguments.","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"jyxhazcake"},"content":"     * @param userCommand the raw user input","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"jyxhazcake"},"content":"     * @return an array where the first index is the command type, and the second index is the command arguments.","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"jyxhazcake"},"content":"     * If no arguments found, an empty string will be in the second index instead.","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"jyxhazcake"},"content":"    private static String[] splitUserCommand(String userCommand) {","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"jyxhazcake"},"content":"        final String[] split \u003d userCommand.trim().split(\" \", 2);","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"jyxhazcake"},"content":"        if (split.length \u003e\u003d TASK_DATA_COUNT) {","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jyxhazcake"},"content":"            return split;","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"jyxhazcake"},"content":"        } else {","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"jyxhazcake"},"content":"            return new String[]{split[TASK_DATA_INDEX_DESCRIPTION], \"\"};","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"jyxhazcake"},"content":"     * Checks whether command arguments exist.","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"jyxhazcake"},"content":"     * This method will only be used for commands that require command arguments.","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"jyxhazcake"},"content":"     * @param commandArgs represents the task description or additional info such as deadline/date","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"jyxhazcake"},"content":"     * @throws EmptyTaskException if no task description is found","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"jyxhazcake"},"content":"    private static void checkValidArguments(String commandArgs) throws EmptyTaskException {","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"jyxhazcake"},"content":"        if (commandArgs.equals(\"\")) {","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"jyxhazcake"},"content":"            throw new EmptyTaskException();","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"jyxhazcake"},"content":"     * Returns a Deadline command with arguments in the correct format.","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"jyxhazcake"},"content":"     * @param commandArgs raw input for command arguments","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"jyxhazcake"},"content":"     * @return a deadline command with the task\u0027s description and deadline as parameters","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"jyxhazcake"},"content":"     * @throws EmptyTaskException if the task description or deadline is empty","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"jyxhazcake"},"content":"    private static Command prepareDeadlineCommand(String commandArgs) throws EmptyTaskException {","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"jyxhazcake"},"content":"        String[] decodedInput \u003d Parser.decodeInput(commandArgs, DeadlineCommand.COMMAND_WORD);","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"jyxhazcake"},"content":"        String description \u003d getDescription(decodedInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"jyxhazcake"},"content":"        String by \u003d getAdditionalInfo(decodedInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"jyxhazcake"},"content":"        if (description.equals(\"\") || (by.equals(\"\"))) {","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"jyxhazcake"},"content":"            throw new EmptyTaskException();","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"jyxhazcake"},"content":"        return new DeadlineCommand(description, by);","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"jyxhazcake"},"content":"     * Returns an Event command with arguments in the correct format.","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"jyxhazcake"},"content":"     * @param commandArgs raw input for command arguments","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"jyxhazcake"},"content":"     * @return an event command with the task\u0027s description and event date/time as parameters","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"jyxhazcake"},"content":"     * @throws EmptyTaskException if the task description or event date/time is empty","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":114,"author":{"gitId":"jyxhazcake"},"content":"    private static Command prepareEventCommand(String commandArgs) throws EmptyTaskException {","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"jyxhazcake"},"content":"        String[] decodedInput \u003d Parser.decodeInput(commandArgs, EventCommand.COMMAND_WORD);","lastModifiedDate":"2021-09-30"},{"lineNumber":116,"author":{"gitId":"jyxhazcake"},"content":"        String description \u003d getDescription(decodedInput);","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"jyxhazcake"},"content":"        String at \u003d getAdditionalInfo(decodedInput);","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"jyxhazcake"},"content":"        if (description.equals(\"\") || at.equals(\"\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"jyxhazcake"},"content":"            throw new EmptyTaskException();","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"jyxhazcake"},"content":"        return new EventCommand(description, at);","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"jyxhazcake"},"content":"     * Splits the provided command arguments returns it in a proper format.","lastModifiedDate":"2021-09-30"},{"lineNumber":128,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":129,"author":{"gitId":"jyxhazcake"},"content":"     * @param rawInput the command arguments for a deadline/event task","lastModifiedDate":"2021-09-30"},{"lineNumber":130,"author":{"gitId":"jyxhazcake"},"content":"     * @return an array where the first index is the task description and second index is additional info (deadline/ event datetime)","lastModifiedDate":"2021-09-30"},{"lineNumber":131,"author":{"gitId":"jyxhazcake"},"content":"     * If either of them does not exist, return an empty array instead.","lastModifiedDate":"2021-09-30"},{"lineNumber":132,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":133,"author":{"gitId":"jyxhazcake"},"content":"    public static String[] decodeInput(String rawInput, String taskType) {","lastModifiedDate":"2021-09-30"},{"lineNumber":134,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":135,"author":{"gitId":"jyxhazcake"},"content":"            String[] decoded \u003d new String[TASK_DATA_COUNT];","lastModifiedDate":"2021-09-30"},{"lineNumber":136,"author":{"gitId":"jyxhazcake"},"content":"            String[] splitBySlash \u003d splitByTaskType(rawInput, taskType);","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"jyxhazcake"},"content":"            decoded[TASK_DATA_INDEX_DESCRIPTION] \u003d splitBySlash[0];","lastModifiedDate":"2021-09-30"},{"lineNumber":138,"author":{"gitId":"jyxhazcake"},"content":"            String[] splitBySpace \u003d splitBySlash[TASK_DATA_INDEX_ADDITIONAL_INFO].split(\" \", 2);","lastModifiedDate":"2021-09-30"},{"lineNumber":139,"author":{"gitId":"jyxhazcake"},"content":"            decoded[TASK_DATA_INDEX_ADDITIONAL_INFO] \u003d splitBySpace[1];","lastModifiedDate":"2021-09-30"},{"lineNumber":140,"author":{"gitId":"jyxhazcake"},"content":"            return decoded;","lastModifiedDate":"2021-09-30"},{"lineNumber":141,"author":{"gitId":"jyxhazcake"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":142,"author":{"gitId":"jyxhazcake"},"content":"            return new String[]{\"\", \"\"};","lastModifiedDate":"2021-09-30"},{"lineNumber":143,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":144,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":145,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":146,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"jyxhazcake"},"content":"     * Splits the command arguments based on its command type.","lastModifiedDate":"2021-09-30"},{"lineNumber":148,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":149,"author":{"gitId":"jyxhazcake"},"content":"     * @param rawInput the command arguments","lastModifiedDate":"2021-09-30"},{"lineNumber":150,"author":{"gitId":"jyxhazcake"},"content":"     * @param taskType a string that represents the type of task involved","lastModifiedDate":"2021-09-30"},{"lineNumber":151,"author":{"gitId":"jyxhazcake"},"content":"     * @return an array that contains the split elements (description and deadline/event date) of the input","lastModifiedDate":"2021-09-30"},{"lineNumber":152,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":153,"author":{"gitId":"jyxhazcake"},"content":"    private static String[] splitByTaskType(String rawInput, String taskType) {","lastModifiedDate":"2021-09-30"},{"lineNumber":154,"author":{"gitId":"jyxhazcake"},"content":"        String[] splitByForwardSlash;","lastModifiedDate":"2021-09-30"},{"lineNumber":155,"author":{"gitId":"jyxhazcake"},"content":"        switch(taskType) {","lastModifiedDate":"2021-09-30"},{"lineNumber":156,"author":{"gitId":"jyxhazcake"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-30"},{"lineNumber":157,"author":{"gitId":"jyxhazcake"},"content":"            splitByForwardSlash \u003d rawInput.split(DeadlineCommand.COMMAND_SPLITTER, 2);","lastModifiedDate":"2021-09-30"},{"lineNumber":158,"author":{"gitId":"jyxhazcake"},"content":"            break;","lastModifiedDate":"2021-09-30"},{"lineNumber":159,"author":{"gitId":"jyxhazcake"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-30"},{"lineNumber":160,"author":{"gitId":"jyxhazcake"},"content":"            splitByForwardSlash \u003d rawInput.split(EventCommand.COMMAND_SPLITTER, 2);","lastModifiedDate":"2021-09-30"},{"lineNumber":161,"author":{"gitId":"jyxhazcake"},"content":"            break;","lastModifiedDate":"2021-09-30"},{"lineNumber":162,"author":{"gitId":"jyxhazcake"},"content":"        default:","lastModifiedDate":"2021-09-30"},{"lineNumber":163,"author":{"gitId":"jyxhazcake"},"content":"            splitByForwardSlash \u003d new String[]{\"\",\"\"};","lastModifiedDate":"2021-09-30"},{"lineNumber":164,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":165,"author":{"gitId":"jyxhazcake"},"content":"        return splitByForwardSlash;","lastModifiedDate":"2021-09-30"},{"lineNumber":166,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":167,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":168,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":169,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the deadline/ event datetime of the task.","lastModifiedDate":"2021-09-30"},{"lineNumber":170,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":171,"author":{"gitId":"jyxhazcake"},"content":"     * @param decodedInput array that includes task description and additional info","lastModifiedDate":"2021-09-30"},{"lineNumber":172,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":173,"author":{"gitId":"jyxhazcake"},"content":"    public static String getAdditionalInfo(String[] decodedInput) {","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"jyxhazcake"},"content":"        return decodedInput[1].trim();","lastModifiedDate":"2021-09-30"},{"lineNumber":175,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":176,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":177,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":178,"author":{"gitId":"jyxhazcake"},"content":"     * Returns the task description.","lastModifiedDate":"2021-09-30"},{"lineNumber":179,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":180,"author":{"gitId":"jyxhazcake"},"content":"     * @param decodedInput array that includes task description and additional info","lastModifiedDate":"2021-09-30"},{"lineNumber":181,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":182,"author":{"gitId":"jyxhazcake"},"content":"    public static String getDescription(String[] decodedInput) {","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"jyxhazcake"},"content":"        return decodedInput[0].trim();","lastModifiedDate":"2021-09-30"},{"lineNumber":184,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"jyxhazcake":185}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.common.Messages;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Event;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"import duke.ui.TextUi;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":"import java.io.File;","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":" * Represents the file used to store the task list data.","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"public class Storage {","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"    public static final String INITIAL_TODO \u003d \"T\";","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"    public static final String INITIAL_DEADLINE \u003d \"D\";","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"    public static final String INITIAL_EVENT \u003d \"E\";","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"    public static final String NUMBER_DONE \u003d \"1\";","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"    public static final boolean IS_DONE_INITIAL \u003d false;","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"    private TextUi ui;","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"    private static final String FOLDER_PATH \u003d \"./data/\";","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"    private static final String FILE_PATH \u003d \"data/tasks.txt\";","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"    public Storage(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"        ui \u003d new TextUi();","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"     * Loads the {@code TaskList} data from the storage file and appends it to the TaskList.","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"     * If storage file does not exist, the program will attempt to make a new folder/file directory.","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"    public void initTaskList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"            appendFileContentsToArrayList();","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"            File f \u003d new File(FOLDER_PATH);","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"            if (f.mkdir()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"                ui.showToUser(Messages.MESSAGE_INIT_NEW_STORAGE_FILE);","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"            } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"                ui.showToUser(Messages.MESSAGE_INIT_FAILED);","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"     * Decodes and appends the data from storage file to the TaskList.","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"     * @throws FileNotFoundException if the data file does not exist","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"    public void appendFileContentsToArrayList() throws FileNotFoundException {","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jyxhazcake"},"content":"        File f \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jyxhazcake"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"jyxhazcake"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"jyxhazcake"},"content":"            String[] commandInput \u003d s.nextLine().split(\" \\\\| \", 4);","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"jyxhazcake"},"content":"            String commandWord \u003d commandInput[0];","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"jyxhazcake"},"content":"            String isCompleteString \u003d commandInput[1];","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"jyxhazcake"},"content":"            String taskDescription \u003d commandInput[2];","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"jyxhazcake"},"content":"            String additionalDescription;","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"jyxhazcake"},"content":"            if (commandWord.equals(INITIAL_TODO)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jyxhazcake"},"content":"                additionalDescription \u003d \"\";","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"jyxhazcake"},"content":"            } else {","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"jyxhazcake"},"content":"                additionalDescription \u003d commandInput[3];","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"jyxhazcake"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"jyxhazcake"},"content":"            switch (commandWord) {","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"jyxhazcake"},"content":"            case (INITIAL_TODO):","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jyxhazcake"},"content":"                tasks.addTask(new Todo(taskDescription));","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jyxhazcake"},"content":"                setTaskAsDone(isCompleteString);","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jyxhazcake"},"content":"                break;","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"jyxhazcake"},"content":"            case (INITIAL_DEADLINE):","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jyxhazcake"},"content":"                tasks.addTask(new Deadline(taskDescription, additionalDescription));","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jyxhazcake"},"content":"                setTaskAsDone(isCompleteString);","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jyxhazcake"},"content":"                break;","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"jyxhazcake"},"content":"            case (INITIAL_EVENT):","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jyxhazcake"},"content":"                tasks.addTask(new Event(taskDescription, additionalDescription));","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jyxhazcake"},"content":"                setTaskAsDone(isCompleteString);","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jyxhazcake"},"content":"                break;","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"jyxhazcake"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"jyxhazcake"},"content":"     * Retrieves the latest task and sets its isDone value as true.","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"jyxhazcake"},"content":"     * @param isCompleteString a String that represents \"1\" if the task is done and \"0\" if not","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"jyxhazcake"},"content":"    public void setTaskAsDone(String isCompleteString) {","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"jyxhazcake"},"content":"        if (isCompleteString.equals(NUMBER_DONE)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"jyxhazcake"},"content":"            tasks.getTask(tasks.getSize() - 1).setDone();","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"jyxhazcake"},"content":"     * Saves an Event task to the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"jyxhazcake"},"content":"     * @param description the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"jyxhazcake"},"content":"     * @param at          the event date/time","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"jyxhazcake"},"content":"    public void appendEventToFile(String description, String at) {","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"jyxhazcake"},"content":"            writeToFile(INITIAL_EVENT, description, at, IS_DONE_INITIAL);","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"jyxhazcake"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"jyxhazcake"},"content":"            System.out.println(\"IO error!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":119,"author":{"gitId":"jyxhazcake"},"content":"     * Saves a Deadline task to the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":121,"author":{"gitId":"jyxhazcake"},"content":"     * @param description the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"jyxhazcake"},"content":"     * @param by          the deadline","lastModifiedDate":"2021-09-30"},{"lineNumber":123,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":124,"author":{"gitId":"jyxhazcake"},"content":"    public void appendDeadlineToFile(String description, String by) {","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"jyxhazcake"},"content":"            writeToFile(INITIAL_DEADLINE, description, by, IS_DONE_INITIAL);","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"jyxhazcake"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"jyxhazcake"},"content":"            System.out.println(\"IO error!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":133,"author":{"gitId":"jyxhazcake"},"content":"     * Saves a Todo task to the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":134,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":135,"author":{"gitId":"jyxhazcake"},"content":"     * @param todoInput the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":136,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"jyxhazcake"},"content":"    public void appendTodoToFile(String todoInput) {","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"jyxhazcake"},"content":"            writeToFile(INITIAL_TODO, todoInput, \"\", IS_DONE_INITIAL);","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"jyxhazcake"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"jyxhazcake"},"content":"            System.out.println(\"IO error!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":146,"author":{"gitId":"jyxhazcake"},"content":"     * Writes the provided data to the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":148,"author":{"gitId":"jyxhazcake"},"content":"     * @param taskInstance   the initial of the task provided","lastModifiedDate":"2021-09-30"},{"lineNumber":149,"author":{"gitId":"jyxhazcake"},"content":"     * @param rawText        the task description","lastModifiedDate":"2021-09-30"},{"lineNumber":150,"author":{"gitId":"jyxhazcake"},"content":"     * @param additionalText the deadline/ event datetime of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":151,"author":{"gitId":"jyxhazcake"},"content":"     * @param isDone         the complete status of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":152,"author":{"gitId":"jyxhazcake"},"content":"     * @throws IOException if an IO error is detected","lastModifiedDate":"2021-09-30"},{"lineNumber":153,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":154,"author":{"gitId":"jyxhazcake"},"content":"    public void writeToFile(String taskInstance, String rawText, String additionalText, boolean isDone) throws IOException {","lastModifiedDate":"2021-09-30"},{"lineNumber":155,"author":{"gitId":"jyxhazcake"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH, true);","lastModifiedDate":"2021-09-30"},{"lineNumber":156,"author":{"gitId":"jyxhazcake"},"content":"        String additionalTextWithBorders \u003d (additionalText.equals(\"\") ? \"\" : \" | \" + additionalText);","lastModifiedDate":"2021-09-30"},{"lineNumber":157,"author":{"gitId":"jyxhazcake"},"content":"        String taskAsText \u003d taskInstance + \" | \" + isDoneString(isDone) + \" | \" + rawText + additionalTextWithBorders + System.lineSeparator();","lastModifiedDate":"2021-09-30"},{"lineNumber":158,"author":{"gitId":"jyxhazcake"},"content":"        fw.write(taskAsText);","lastModifiedDate":"2021-09-30"},{"lineNumber":159,"author":{"gitId":"jyxhazcake"},"content":"        fw.close();","lastModifiedDate":"2021-09-30"},{"lineNumber":160,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":161,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":162,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":163,"author":{"gitId":"jyxhazcake"},"content":"     * Utility method for converting the isDone boolean into a String format.","lastModifiedDate":"2021-09-30"},{"lineNumber":164,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":165,"author":{"gitId":"jyxhazcake"},"content":"     * @param isDone the completed status of the task","lastModifiedDate":"2021-09-30"},{"lineNumber":166,"author":{"gitId":"jyxhazcake"},"content":"     * @return \"1\" if isDone is true and \"0\" if isDone is false","lastModifiedDate":"2021-09-30"},{"lineNumber":167,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":168,"author":{"gitId":"jyxhazcake"},"content":"    public static String isDoneString(boolean isDone) {","lastModifiedDate":"2021-09-30"},{"lineNumber":169,"author":{"gitId":"jyxhazcake"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-30"},{"lineNumber":170,"author":{"gitId":"jyxhazcake"},"content":"            return \"1\";","lastModifiedDate":"2021-09-30"},{"lineNumber":171,"author":{"gitId":"jyxhazcake"},"content":"        } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":172,"author":{"gitId":"jyxhazcake"},"content":"            return \"0\";","lastModifiedDate":"2021-09-30"},{"lineNumber":173,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":174,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":175,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":176,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":177,"author":{"gitId":"jyxhazcake"},"content":"     * Clears the storage file.","lastModifiedDate":"2021-09-30"},{"lineNumber":178,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":179,"author":{"gitId":"jyxhazcake"},"content":"     * @throws IOException if IO error is detected","lastModifiedDate":"2021-09-30"},{"lineNumber":180,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":181,"author":{"gitId":"jyxhazcake"},"content":"    public void clearFile() throws IOException {","lastModifiedDate":"2021-09-29"},{"lineNumber":182,"author":{"gitId":"jyxhazcake"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-29"},{"lineNumber":183,"author":{"gitId":"jyxhazcake"},"content":"        fw.write(\"\");","lastModifiedDate":"2021-09-27"},{"lineNumber":184,"author":{"gitId":"jyxhazcake"},"content":"        fw.close();","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":186,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":187,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":188,"author":{"gitId":"jyxhazcake"},"content":"     * Overwrites the entire storage file with new data from {@code TaskList}","lastModifiedDate":"2021-09-30"},{"lineNumber":189,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":190,"author":{"gitId":"jyxhazcake"},"content":"    public void OverwriteListToFile() {","lastModifiedDate":"2021-09-29"},{"lineNumber":191,"author":{"gitId":"jyxhazcake"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":192,"author":{"gitId":"jyxhazcake"},"content":"            clearFile();","lastModifiedDate":"2021-09-29"},{"lineNumber":193,"author":{"gitId":"jyxhazcake"},"content":"            for (Task task : tasks.getList()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":194,"author":{"gitId":"jyxhazcake"},"content":"                if (task instanceof Todo) {","lastModifiedDate":"2021-09-29"},{"lineNumber":195,"author":{"gitId":"jyxhazcake"},"content":"                    writeToFile(INITIAL_TODO, task.getDescription(), \"\", task.isDone());","lastModifiedDate":"2021-09-29"},{"lineNumber":196,"author":{"gitId":"jyxhazcake"},"content":"                } else if (task instanceof Deadline) {","lastModifiedDate":"2021-09-29"},{"lineNumber":197,"author":{"gitId":"jyxhazcake"},"content":"                    Deadline deadlineTask \u003d (Deadline) task;","lastModifiedDate":"2021-09-29"},{"lineNumber":198,"author":{"gitId":"jyxhazcake"},"content":"                    writeToFile(INITIAL_DEADLINE, deadlineTask.getDescription(), deadlineTask.getBy(), deadlineTask.isDone());","lastModifiedDate":"2021-09-29"},{"lineNumber":199,"author":{"gitId":"jyxhazcake"},"content":"                } else if (task instanceof Event) {","lastModifiedDate":"2021-09-29"},{"lineNumber":200,"author":{"gitId":"jyxhazcake"},"content":"                    Event eventTask \u003d (Event) task;","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"jyxhazcake"},"content":"                    writeToFile(INITIAL_EVENT, eventTask.getDescription(), eventTask.getAt(), eventTask.isDone());","lastModifiedDate":"2021-09-29"},{"lineNumber":202,"author":{"gitId":"jyxhazcake"},"content":"                }","lastModifiedDate":"2021-09-29"},{"lineNumber":203,"author":{"gitId":"jyxhazcake"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":204,"author":{"gitId":"jyxhazcake"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":205,"author":{"gitId":"jyxhazcake"},"content":"            System.out.println(\"IO Error!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":206,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":207,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":208,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"jyxhazcake":208}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"package duke.ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"import duke.common.Messages;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"import duke.data.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"jyxhazcake"},"content":" * Text UI of the application.","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"jyxhazcake"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"jyxhazcake"},"content":"public class TextUi {","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"jyxhazcake"},"content":"    /** Decorative prefix at the beginning of lines. */","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"jyxhazcake"},"content":"    public final String LINE_PREFIX \u003d \"|| \";","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jyxhazcake"},"content":"    public final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jyxhazcake"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_SUCCESSFUL_ADD \u003d \"Got it! I\u0027ve added this task: \";","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_TASK_MARK_DONE \u003d \"Nice! You did the following task:\";","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jyxhazcake"},"content":"    public static final String MESSAGE_SUCCESSFUL_DELETE \u003d \"Got it. I\u0027ve removed this task for you: \";","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jyxhazcake"},"content":"    public final String DASHES \u003d \"_____________________________________________________________________\";","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jyxhazcake"},"content":"    private final String LOGO \u003d","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"jyxhazcake"},"content":"            \"  ____        _        \\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"jyxhazcake"},"content":"            + \"||  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jyxhazcake"},"content":"            + \"|| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jyxhazcake"},"content":"            + \"|| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jyxhazcake"},"content":"            + \"||____/ \\\\__,_|_|\\\\_\\\\___|\";","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jyxhazcake"},"content":"    protected Scanner in;","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jyxhazcake"},"content":"    public TextUi() {","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"jyxhazcake"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"jyxhazcake"},"content":"     * Generates and prints the welcome message at the start of the application.","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"jyxhazcake"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jyxhazcake"},"content":"        showToUser(DASHES, LOGO, DASHES, Messages.MESSAGE_WELCOME, DASHES);","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"jyxhazcake"},"content":"     * Format to show messages to the user.","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"jyxhazcake"},"content":"     * @param message strings of messages","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"jyxhazcake"},"content":"    public void showToUser(String... message) {","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jyxhazcake"},"content":"        for (String m : message) {","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"jyxhazcake"},"content":"            System.out.println(LINE_PREFIX + m.replace(\"\\n\",LINE_SEPARATOR + LINE_PREFIX));","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"jyxhazcake"},"content":"     * Prints a success message to the user after adding a task to the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"jyxhazcake"},"content":"    public void showSuccessfulAdd(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jyxhazcake"},"content":"        showToUser(MESSAGE_SUCCESSFUL_ADD,","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jyxhazcake"},"content":"                tasks.getTask(tasks.getSize() - 1).toString(),","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jyxhazcake"},"content":"                getSizeString(tasks));","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"jyxhazcake"},"content":"     * Returns a message that includes the size of the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"jyxhazcake"},"content":"    private String getSizeString(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jyxhazcake"},"content":"        return \"Now you have \" + tasks.getSize() + \" tasks in the list.\";","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"jyxhazcake"},"content":"     * Prints a success message to the user after marking a task as done.","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"jyxhazcake"},"content":"     * @param currentTask the specified task","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"jyxhazcake"},"content":"    public void showSuccessfulComplete(Task currentTask) {","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jyxhazcake"},"content":"        showToUser(MESSAGE_TASK_MARK_DONE,","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jyxhazcake"},"content":"                \"[\" + currentTask.getStatusIcon() + \"] \" + currentTask.getDescription());","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"jyxhazcake"},"content":"     * Prints a success message to the user after deleting a task from the task list.","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":86,"author":{"gitId":"jyxhazcake"},"content":"     * @param currentTask the specified task","lastModifiedDate":"2021-09-30"},{"lineNumber":87,"author":{"gitId":"jyxhazcake"},"content":"     * @param tasks the task list","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"jyxhazcake"},"content":"    public void showSuccessfulDelete(Task currentTask, TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"jyxhazcake"},"content":"        showToUser(MESSAGE_SUCCESSFUL_DELETE,","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jyxhazcake"},"content":"                currentTask.toString(),","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jyxhazcake"},"content":"                getSizeString(tasks));","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"jyxhazcake"},"content":"     * Prompts the user to enter a command reads the input.","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"jyxhazcake"},"content":"     * Ignores empty pure whitespace inputs.","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"jyxhazcake"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"jyxhazcake"},"content":"     * @return command entered by the user","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"jyxhazcake"},"content":"    public String getInput() {","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jyxhazcake"},"content":"        showToUser(Messages.MESSAGE_ENTER_COMMAND);","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jyxhazcake"},"content":"        System.out.print(\"|| \");","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"jyxhazcake"},"content":"        String userInput \u003d in.nextLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"jyxhazcake"},"content":"        while (userInput.trim().isEmpty()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"jyxhazcake"},"content":"            userInput \u003d in.nextLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"jyxhazcake"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"jyxhazcake"},"content":"        return userInput;","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"jyxhazcake"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jyxhazcake"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"jyxhazcake"},"content":"     * Decorative method that prints a line of dashes to the user.","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"jyxhazcake"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":114,"author":{"gitId":"jyxhazcake"},"content":"    public void showLine() {","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"jyxhazcake"},"content":"        showToUser(DASHES);","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"jyxhazcake"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"jyxhazcake"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"jyxhazcake":117}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jyxhazcake"},"content":"todo feed dog","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jyxhazcake"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jyxhazcake"},"content":"deadline do physics assignment /by this Sunday","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jyxhazcake"},"content":"event cca workshop /at Thursday 6-8pm","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jyxhazcake"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jyxhazcake"},"content":"done 3","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jyxhazcake"},"content":"done 1","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jyxhazcake"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jyxhazcake"},"content":"bye","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jyxhazcake":9}}]
