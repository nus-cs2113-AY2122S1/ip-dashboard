[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"## References and Acknowledgement","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"- Converting text for Alfred: \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"  https://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dGraffiti\u0026t\u003dType%20Something%20","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"- Inspiration for OOP structure: AddressBook (Level 2) \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"  https://github.com/se-edu/addressbook-level2","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"- Inspiration for User Guide crafting: AddressBook (Level 3) \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"  https://se-education.org/addressbook-level3/UserGuide.html","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"- GitHub Markdown Emoji Syntax for User Guide: \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"  https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"marcusbory":10,"-":24}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":":older_man: Alfred is a Command Line Application for task management, modelled after Alfred the Butler from Batman.","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"- Features and Usage","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"  - [:scroll: Listing current tasks: `list`](#list)","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"  - Adding tasks:","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"    - [:bookmark: Todo: `todo`](#todo)","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"    - [:calendar: Event: `event`](#event)","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    - [:pushpin: Deadline: `deadline`](#deadline)","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"  - [:white_check_mark: Marking task as complete: `done`](#done)","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"  - [:x: Delete a task: `delete`](#delete)","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"  - [:mag_right: Searching for tasks: `find`](#find)","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"  - [:door: Exiting the app: `bye`](#exit)","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"- [:floppy_disk: Saving the data](#save)","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"- [Command summary](#summary)","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"## Features and Usage","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"list\"\u003e\u003c/a\u003e:scroll: `list` - Listing current tasks","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"Lists all current tasks stored in local storage task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"Usage: `list`","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage:","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"- If there exists tasks, Alfred will enumerate the tasks and print them:","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"list","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":" Your tasks, sir:","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":" 1.[T][ ] Meet Catwoman","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":" 2.[E][ ] Save Gotham (at: Sep 24 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"- If task list is empty, Alfred will respond with the following message:","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"list","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":" Your schedule is clear, Master Wayne.","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"todo\"\u003e\u003c/a\u003e:bookmark: `todo` - Adding a Todo","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"Adds a Todo to the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":47,"author":{"gitId":"marcusbory"},"content":"Usage: `todo TODO_DESCRIPTION`","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"marcusbory"},"content":"- :warning: `TODO_DESCRIPTION` cannot be empty.","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":50,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage:","lastModifiedDate":"2021-09-24"},{"lineNumber":51,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"marcusbory"},"content":"Alfred will add the Todo to the current task list, and ","lastModifiedDate":"2021-09-24"},{"lineNumber":53,"author":{"gitId":"marcusbory"},"content":"display the current number of tasks in the task list:","lastModifiedDate":"2021-09-24"},{"lineNumber":54,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":55,"author":{"gitId":"marcusbory"},"content":"todo Meet Catwoman","lastModifiedDate":"2021-09-24"},{"lineNumber":56,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"marcusbory"},"content":" I shall put this in your schedule, Master Wayne: ","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"marcusbory"},"content":"    [T][ ] Meet Catwoman","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"marcusbory"},"content":" Sir, the number of Tasks you have scheduled currently amounts to 1.","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"event\"\u003e\u003c/a\u003e:calendar: `event` - Adding an Event","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"marcusbory"},"content":"Adds an Event to the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":67,"author":{"gitId":"marcusbory"},"content":"Usage: `event EVENT_DESCRIPTION /at EVENT_DATE`","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"marcusbory"},"content":"- :warning: `EVENT_DESCRIPTION` cannot be empty.","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"marcusbory"},"content":"- :warning: `EVENT_DATE` cannot be empty.","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"marcusbory"},"content":"- :warning: `EVENT_DATE` must be formatted as `DDMMYYYY`, `DD/MM/YYYY`, or `DD-MM-YYYY`.","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage: ","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"marcusbory"},"content":"Alfred will add the Event to the current task list, and","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"marcusbory"},"content":"display the current number of tasks in the task list:","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"marcusbory"},"content":"event OP1 /at 10092021","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"marcusbory"},"content":" I shall put this in your schedule, Master Wayne:","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"marcusbory"},"content":"    [E][ ] OP1 (at: Sep 10 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"marcusbory"},"content":" Sir, the number of Tasks you have scheduled currently amounts to 2.","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"deadline\"\u003e\u003c/a\u003e:pushpin: `deadline` - Adding a Deadline","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"marcusbory"},"content":"Adds a Deadline to the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"marcusbory"},"content":"Usage: `deadline DEADLINE_DESCRIPTION /by DEADLINE_DATE`","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"marcusbory"},"content":"- :warning: `DEADLINE_DESCRIPTION` cannot be empty.","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"marcusbory"},"content":"- :warning: `DEADLINE_DATE` cannot be empty.","lastModifiedDate":"2021-09-24"},{"lineNumber":92,"author":{"gitId":"marcusbory"},"content":"- :warning: `DEADLINE_DATE` must be formatted as `DDMMYYYY`, `DD/MM/YYYY`, or `DD-MM-YYYY`.","lastModifiedDate":"2021-09-24"},{"lineNumber":93,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":94,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage:","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":96,"author":{"gitId":"marcusbory"},"content":"Alfred will add the Deadline to the current task list, and","lastModifiedDate":"2021-09-24"},{"lineNumber":97,"author":{"gitId":"marcusbory"},"content":"display the current number of tasks in the task list:","lastModifiedDate":"2021-09-24"},{"lineNumber":98,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":99,"author":{"gitId":"marcusbory"},"content":"deadline Submit IP Final Version /by 01/10/2021","lastModifiedDate":"2021-09-24"},{"lineNumber":100,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":101,"author":{"gitId":"marcusbory"},"content":" I shall put this in your schedule, Master Wayne: ","lastModifiedDate":"2021-09-24"},{"lineNumber":102,"author":{"gitId":"marcusbory"},"content":"    [D][ ] Submit IP Final Version (by: Oct 01 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":103,"author":{"gitId":"marcusbory"},"content":" Sir, the number of Tasks you have scheduled currently amounts to 3.","lastModifiedDate":"2021-09-24"},{"lineNumber":104,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":105,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":106,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":107,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":108,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"done\"\u003e\u003c/a\u003e:white_check_mark: `done` - Marking task as complete","lastModifiedDate":"2021-09-24"},{"lineNumber":109,"author":{"gitId":"marcusbory"},"content":"Marks a task as done/complete in the task list based on index specified.","lastModifiedDate":"2021-09-24"},{"lineNumber":110,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":111,"author":{"gitId":"marcusbory"},"content":"Usage: `done TASK_INDEX`","lastModifiedDate":"2021-09-24"},{"lineNumber":112,"author":{"gitId":"marcusbory"},"content":"- :warning: `TASK_INDEX` must be specified, and as an integer.","lastModifiedDate":"2021-09-24"},{"lineNumber":113,"author":{"gitId":"marcusbory"},"content":"- :warning: `TASK_INDEX` must be within range of 1 - N, where N is the number of tasks in the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":114,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":115,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage:","lastModifiedDate":"2021-09-24"},{"lineNumber":116,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":117,"author":{"gitId":"marcusbory"},"content":"Alfred will place a check on the Task to mark it as done:","lastModifiedDate":"2021-09-24"},{"lineNumber":118,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":119,"author":{"gitId":"marcusbory"},"content":"done 1","lastModifiedDate":"2021-09-24"},{"lineNumber":120,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":121,"author":{"gitId":"marcusbory"},"content":"Duly noted on completion of task, sir.","lastModifiedDate":"2021-09-24"},{"lineNumber":122,"author":{"gitId":"marcusbory"},"content":"    1.[T][X] Meet Catwoman","lastModifiedDate":"2021-09-24"},{"lineNumber":123,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":124,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":125,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":126,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":127,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"delete\"\u003e\u003c/a\u003e:x: `delete` - Delete a task","lastModifiedDate":"2021-09-24"},{"lineNumber":128,"author":{"gitId":"marcusbory"},"content":"Deletes a task in the task list based on index specified.","lastModifiedDate":"2021-09-24"},{"lineNumber":129,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":130,"author":{"gitId":"marcusbory"},"content":"Usage: `delete TASK_INDEX`","lastModifiedDate":"2021-09-24"},{"lineNumber":131,"author":{"gitId":"marcusbory"},"content":"- :warning: `TASK_INDEX` must be specified, and as an integer.","lastModifiedDate":"2021-09-24"},{"lineNumber":132,"author":{"gitId":"marcusbory"},"content":"- :warning: `TASK_INDEX` must be within range of 1 - N, where N is the number of tasks in the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":133,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":134,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage:","lastModifiedDate":"2021-09-24"},{"lineNumber":135,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":136,"author":{"gitId":"marcusbory"},"content":"Alfred will delete the index of the task specified from the task list,","lastModifiedDate":"2021-09-24"},{"lineNumber":137,"author":{"gitId":"marcusbory"},"content":"and display the current number of tasks in the task list:","lastModifiedDate":"2021-09-24"},{"lineNumber":138,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":139,"author":{"gitId":"marcusbory"},"content":"delete 1","lastModifiedDate":"2021-09-24"},{"lineNumber":140,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"marcusbory"},"content":" Very well, Master Wayne, I shall remove this: ","lastModifiedDate":"2021-09-24"},{"lineNumber":142,"author":{"gitId":"marcusbory"},"content":"    1.[T][ ] Meet Catwoman","lastModifiedDate":"2021-09-24"},{"lineNumber":143,"author":{"gitId":"marcusbory"},"content":" Sir, the number of Tasks you have scheduled currently amounts to 2.","lastModifiedDate":"2021-09-24"},{"lineNumber":144,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":145,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":146,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":147,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":148,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"find\"\u003e\u003c/a\u003e:mag_right: `find` - Searching for tasks","lastModifiedDate":"2021-09-24"},{"lineNumber":149,"author":{"gitId":"marcusbory"},"content":"Searches for tasks in the task list based on the query term specified.","lastModifiedDate":"2021-09-24"},{"lineNumber":150,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":151,"author":{"gitId":"marcusbory"},"content":"Usage: `find QUERY`","lastModifiedDate":"2021-09-24"},{"lineNumber":152,"author":{"gitId":"marcusbory"},"content":"- :warning: `QUERY` must be specified.","lastModifiedDate":"2021-09-24"},{"lineNumber":153,"author":{"gitId":"marcusbory"},"content":"- :bulb: `QUERY` is not case-sensitive.","lastModifiedDate":"2021-09-24"},{"lineNumber":154,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":155,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage:","lastModifiedDate":"2021-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":157,"author":{"gitId":"marcusbory"},"content":"Alfred will search the task list using the query specified, enumerate the tasks found,","lastModifiedDate":"2021-09-24"},{"lineNumber":158,"author":{"gitId":"marcusbory"},"content":"and print them out as a list:","lastModifiedDate":"2021-09-24"},{"lineNumber":159,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":160,"author":{"gitId":"marcusbory"},"content":"find cs2113","lastModifiedDate":"2021-09-24"},{"lineNumber":161,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":162,"author":{"gitId":"marcusbory"},"content":" I\u0027ve procured the following tasks based on that query, sir:","lastModifiedDate":"2021-09-24"},{"lineNumber":163,"author":{"gitId":"marcusbory"},"content":" 1.[T][ ] CS2113 IP","lastModifiedDate":"2021-09-24"},{"lineNumber":164,"author":{"gitId":"marcusbory"},"content":" 2.[D][ ] CS2113 IP (by: Oct 01 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":165,"author":{"gitId":"marcusbory"},"content":" 3.[T][ ] CS2113 TP","lastModifiedDate":"2021-09-24"},{"lineNumber":166,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":167,"author":{"gitId":"marcusbory"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":168,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":170,"author":{"gitId":"marcusbory"},"content":"### \u003ca name\u003d\"exit\"\u003e\u003c/a\u003e:door: Exiting the app: `bye`","lastModifiedDate":"2021-09-24"},{"lineNumber":171,"author":{"gitId":"marcusbory"},"content":"Terminates the app session and exits programme.","lastModifiedDate":"2021-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":173,"author":{"gitId":"marcusbory"},"content":"Usage: `bye`","lastModifiedDate":"2021-09-24"},{"lineNumber":174,"author":{"gitId":"marcusbory"},"content":"- :bulb: `bye` is not case-sensitive.","lastModifiedDate":"2021-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":176,"author":{"gitId":"marcusbory"},"content":"Expected outcome and examples of usage:","lastModifiedDate":"2021-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":178,"author":{"gitId":"marcusbory"},"content":"Alfred will print out the exit message and the app session will be terminated:","lastModifiedDate":"2021-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":180,"author":{"gitId":"marcusbory"},"content":"bye","lastModifiedDate":"2021-09-24"},{"lineNumber":181,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":182,"author":{"gitId":"marcusbory"},"content":" Very well sir, I shall leave you to your own devices.","lastModifiedDate":"2021-09-24"},{"lineNumber":183,"author":{"gitId":"marcusbory"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":185,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":186,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":187,"author":{"gitId":"marcusbory"},"content":"## \u003ca name\u003d\"save\"\u003e\u003c/a\u003e:floppy_disk: Saving the data","lastModifiedDate":"2021-09-24"},{"lineNumber":188,"author":{"gitId":"marcusbory"},"content":":bulb: Alfred\u0027s task list is saved into the user\u0027s local storage automatically after every command","lastModifiedDate":"2021-09-24"},{"lineNumber":189,"author":{"gitId":"marcusbory"},"content":"execution, and thus there is no explicit `save` command implemented.","lastModifiedDate":"2021-09-24"},{"lineNumber":190,"author":{"gitId":"marcusbory"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":191,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":192,"author":{"gitId":"marcusbory"},"content":"## \u003ca name\u003d\"summary\"\u003e\u003c/a\u003eCommand Summary","lastModifiedDate":"2021-09-24"},{"lineNumber":193,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":194,"author":{"gitId":"marcusbory"},"content":"Command | Format, Examples","lastModifiedDate":"2021-09-24"},{"lineNumber":195,"author":{"gitId":"marcusbory"},"content":"--------|--------------","lastModifiedDate":"2021-09-24"},{"lineNumber":196,"author":{"gitId":"marcusbory"},"content":"List Tasks | `list`","lastModifiedDate":"2021-09-24"},{"lineNumber":197,"author":{"gitId":"marcusbory"},"content":"Add Todo | `todo TODO_DESCRIPTION` \u003cbr /\u003e eg.`todo CS2113T IP`","lastModifiedDate":"2021-09-24"},{"lineNumber":198,"author":{"gitId":"marcusbory"},"content":"Add Event | `event EVENT_DESCRIPTION /at EVENT_DATE` \u003cbr /\u003e eg.`event CS2101 OP1 /at 10092021`","lastModifiedDate":"2021-09-24"},{"lineNumber":199,"author":{"gitId":"marcusbory"},"content":"Add Deadline | `deadline DEADLINE_DESCRIPTION /at DEADLINE_DATE` \u003cbr /\u003e eg.`deadline CS2113T IP /by 01-10-2021`","lastModifiedDate":"2021-09-24"},{"lineNumber":200,"author":{"gitId":"marcusbory"},"content":"Done Task | `done TASK_INDEX` \u003cbr /\u003e eg.`done 1`","lastModifiedDate":"2021-09-24"},{"lineNumber":201,"author":{"gitId":"marcusbory"},"content":"Delete Task | `delete TASK_INDEX` \u003cbr /\u003e eg.`delete 2`","lastModifiedDate":"2021-09-24"},{"lineNumber":202,"author":{"gitId":"marcusbory"},"content":"Find Task(s) | `find QUERY` \u003cbr /\u003e eg.`find CS`","lastModifiedDate":"2021-09-24"},{"lineNumber":203,"author":{"gitId":"marcusbory"},"content":"Exit App | `bye`","lastModifiedDate":"2021-09-24"},{"lineNumber":204,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":205,"author":{"gitId":"marcusbory"},"content":"## References and Acknowledgement","lastModifiedDate":"2021-09-26"},{"lineNumber":206,"author":{"gitId":"marcusbory"},"content":"- Converting text for Alfred: \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":207,"author":{"gitId":"marcusbory"},"content":"  https://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dGraffiti\u0026t\u003dType%20Something%20","lastModifiedDate":"2021-09-26"},{"lineNumber":208,"author":{"gitId":"marcusbory"},"content":"- Inspiration for OOP structure: AddressBook (Level 2) \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":209,"author":{"gitId":"marcusbory"},"content":"  https://github.com/se-edu/addressbook-level2","lastModifiedDate":"2021-09-26"},{"lineNumber":210,"author":{"gitId":"marcusbory"},"content":"- Inspiration for User Guide crafting: AddressBook (Level 3) \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":211,"author":{"gitId":"marcusbory"},"content":"  https://se-education.org/addressbook-level3/UserGuide.html","lastModifiedDate":"2021-09-26"},{"lineNumber":212,"author":{"gitId":"marcusbory"},"content":"- GitHub Markdown Emoji Syntax for User Guide: \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":213,"author":{"gitId":"marcusbory"},"content":"  https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"marcusbory":194,"-":19}},{"path":"src/main/java/Alfred.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"import alfred.command.Command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"import alfred.exception.FileErrorException;","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.parser.Parser;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.storage.Storage;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"import alfred.storage.TaskEncoder;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"public class Alfred {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"    private TextUi textUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    private Parser parser;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"    private String filePath;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     * This constructor is used to set up the Alfred chat-bot by instantiating a new","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"     * TextUi, Storage (with the specified filePath), and Parser. It will attempt to","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"     * either load an existing storage file, or create a new one.","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"     * @param filePath This is the filePath specified for Storage creation","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"    public Alfred(String filePath) {","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"            taskList \u003d storage.load();","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"        } catch (FileErrorException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"            TextUi.fileErrorMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"     * This method retrieves user input via the TextUi class, parses it, and executes","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"     * the deciphered command. This method can be exited using the \"bye\" exit command.","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"    private void run() {","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"        Command command;","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"        do {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"            String userInput \u003d textUi.getUserInput();","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"            command \u003d parser.parseCommand(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"            runCommandProcedure(command);","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"        } while (!command.isExit());","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"marcusbory"},"content":"     * This method sets the TaskList context for commands to execute in before executing","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"marcusbory"},"content":"     * them. It will also save the TaskList locally using the initial filePath after","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"marcusbory"},"content":"     * every command execution.","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"marcusbory"},"content":"     * @param command The parsed command to be executed","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"marcusbory"},"content":"    private void runCommandProcedure(Command command) {","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"marcusbory"},"content":"            command.setTaskList(taskList);","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"marcusbory"},"content":"            command.execute();","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"marcusbory"},"content":"            TaskEncoder.saveAllTasks(filePath, taskList);","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"marcusbory"},"content":"        } catch (FileErrorException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"marcusbory"},"content":"            TextUi.fileErrorMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"marcusbory"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"marcusbory"},"content":"        new Alfred(\"data/alfred.txt\").run();","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"marcusbory":66}},{"path":"src/main/java/alfred/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Deadline;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Event;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Todo;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    private final String taskType;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"    private final String taskDescription;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    private final LocalDate taskDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"    public AddTaskCommand(String taskType, String taskDescription, LocalDate taskDate) {","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"        this.taskDate \u003d taskDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"     * This method adds a Task to the TaskList based on the given command.","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"    public void execute() {","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"        Task addedTask;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"        case \"T\":","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"            addedTask \u003d new Todo(taskDescription);","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"            taskList.addTask(addedTask);","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"        case \"E\":","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"            addedTask \u003d new Event(taskDescription, taskDate);","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"            taskList.addTask(addedTask);","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"        case \"D\":","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"            addedTask \u003d new Deadline(taskDescription, taskDate);","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"            taskList.addTask(addedTask);","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"        default:","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"            return;","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"        TextUi.addTaskMessage(addedTask, taskList.getSize());","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":45}},{"path":"src/main/java/alfred/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"    protected TaskList taskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"     * This method sets the context for Commands to take place","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"     * @param taskList TaskList to be passed in from main execution","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    public void setTaskList(TaskList taskList) {","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     * This method is the execution command for subclasses of Command","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"    public abstract void execute();","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"     * This method checks if the parsed Command is an ExitAppCommand for program termination.","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"     * @return boolean This returns true if parsed Command is an ExitAppCommand","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"        return this instanceof ExitAppCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":28}},{"path":"src/main/java/alfred/command/CompleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"public class CompleteTaskCommand extends Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"    private final int taskIndex;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public CompleteTaskCommand(int index) {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"        taskIndex \u003d index;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"     * This method sets a Task as done based on its given index.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"    public void execute() {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"            taskList.setTaskDoneInList(taskIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"            Task completedTask \u003d taskList.getTask(taskIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"            TextUi.completeTaskMessage(taskIndex, completedTask);","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"            TextUi.uninitialisedTaskIndexMessage(taskList.getSize());","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":25}},{"path":"src/main/java/alfred/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"    private final int taskIndex;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public DeleteTaskCommand(int index) {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"        taskIndex \u003d index;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"     * This method deletes a Task from TaskList given an index.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"    public void execute() {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"            Task removedTask \u003d taskList.removeTask(taskIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"            int numberOfTasks \u003d taskList.getSize();","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"            TextUi.deleteTaskMessage(removedTask, numberOfTasks, taskIndex);","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"            TextUi.uninitialisedTaskIndexMessage(taskList.getSize());","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":25}},{"path":"src/main/java/alfred/command/ExitAppCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"public class ExitAppCommand extends Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"     * This method prints out the app exit message. The app is exited when the loop in Alfred.run() is terminated.","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public void execute() {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"        TextUi.shutdownMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":12}},{"path":"src/main/java/alfred/command/FailedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.parser.FailedCommandType;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"public class FailedCommand extends Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"    private FailedCommandType type;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public FailedCommand(FailedCommandType type) {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"     * This method responds with the appropriate error message for any FailedCommands.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"    public void execute() {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"        switch (type) {","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"        case GENERAL:","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"            TextUi.invalidCommandMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"        case NUMBER_FORMAT:","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"            TextUi.invalidIndexMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"        case MISSING_DATE:","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"            TextUi.missingDateMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"        case EMPTY_DESCRIPTION:","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"            TextUi.emptyDescriptionMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"        case NO_INDEX_SPECIFIED:","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"            TextUi.missingIndexMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"        case NO_QUERY_SPECIFIED:","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"            TextUi.missingQueryMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"        case INVALID_DATE:","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"            TextUi.invalidDateMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"        default:","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"            return;","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":43}},{"path":"src/main/java/alfred/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"    private String query;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"    public FindCommand(String query) {","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"        this.query \u003d query;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"        TaskList filteredList \u003d filterList(query);","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"        TextUi.printFoundTasks(filteredList);","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"    private TaskList filterList(String query) {","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"        TaskList filteredList \u003d new TaskList();","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"            Task checkedTask \u003d taskList.getTask(i);","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"            if (checkedTask.isQueriedTask(query)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"                filteredList.addTask(checkedTask);","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"        return filteredList;","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"marcusbory":29}},{"path":"src/main/java/alfred/command/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"public class ListTasksCommand extends Command {","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"     * This method lists out the Tasks in the TaskList.","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public void execute() {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"        TextUi.listTasks(taskList);","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":12}},{"path":"src/main/java/alfred/exception/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.exception;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"public class EmptyDescriptionException extends Exception {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"marcusbory":4}},{"path":"src/main/java/alfred/exception/FileErrorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.exception;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"public class FileErrorException extends Exception {","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"marcusbory":4}},{"path":"src/main/java/alfred/exception/MissingDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.exception;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"public class MissingDateException extends Exception {","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":4}},{"path":"src/main/java/alfred/parser/FailedCommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.parser;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"public enum FailedCommandType {","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"    GENERAL, NUMBER_FORMAT, EMPTY_DESCRIPTION, INVALID_DATE,","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"    NO_INDEX_SPECIFIED, NO_QUERY_SPECIFIED, MISSING_DATE","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"marcusbory":6}},{"path":"src/main/java/alfred/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.command.AddTaskCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.command.Command;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"import alfred.command.CompleteTaskCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"import alfred.command.DeleteTaskCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"import alfred.command.ExitAppCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"import alfred.command.FailedCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"import alfred.command.FindCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"import alfred.command.ListTasksCommand;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"import alfred.exception.EmptyDescriptionException;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"import alfred.exception.MissingDateException;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"public class Parser {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"    private final String EXIT_COMMAND \u003d \"bye\";","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"    private final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"    private final String COMPLETE_COMMAND \u003d \"done\";","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"    private final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"    private final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"    private final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"    private final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"    private final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"    private final String TODO_TYPE \u003d \"T\";","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"    private final String EVENT_TYPE \u003d \"E\";","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"    private final String DEADLINE_TYPE \u003d \"D\";","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"    private final LocalDate EMPTY_DATE \u003d null;","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"    public static final DateTimeFormatter SG_DATE_FORMAT \u003d","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"            DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][dd-MM-yyyy][ddMMyyyy]\");","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"    private final String AT_IDENTIFIER \u003d \" /at \";","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"    private final String BY_IDENTIFIER \u003d \" /by \";","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"    private final int COMMAND_TYPE_INDEX \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"    private final int TASK_COMMAND_INDEX  \u003d 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"    private final int TASK_FULL_DESCRIPTION_INDEX \u003d 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"    private final int SPLIT_TASK_DESCRIPTION_INDEX \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"    private final int SPLIT_TASK_DATE_INDEX \u003d 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"     * This method parses the user\u0027s input and deciphers which command should be executed.","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"marcusbory"},"content":"     * @param userInput User\u0027s input to be parsed","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"marcusbory"},"content":"     * @return Command This returns a command to be executed by Alfred","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"marcusbory"},"content":"    public Command parseCommand(String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"marcusbory"},"content":"        String commandType \u003d getCommandType(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"marcusbory"},"content":"        Command command;","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"marcusbory"},"content":"        switch (commandType) {","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"marcusbory"},"content":"        case EXIT_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"marcusbory"},"content":"            command \u003d new ExitAppCommand();","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"marcusbory"},"content":"        case LIST_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"marcusbory"},"content":"            command \u003d new ListTasksCommand();","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"marcusbory"},"content":"        case COMPLETE_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"marcusbory"},"content":"            command \u003d parseCompleteCommand(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"marcusbory"},"content":"        case TODO_COMMAND: // Fallthrough","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"marcusbory"},"content":"        case EVENT_COMMAND: // Fallthrough","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"marcusbory"},"content":"        case DEADLINE_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"marcusbory"},"content":"            command \u003d parseAddTaskCommand(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"marcusbory"},"content":"        case DELETE_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"marcusbory"},"content":"            command \u003d parseDeleteCommand(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"marcusbory"},"content":"        case FIND_COMMAND:","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"marcusbory"},"content":"            command \u003d parseFindCommand(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"marcusbory"},"content":"        default:","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"marcusbory"},"content":"            command \u003d new FailedCommand(FailedCommandType.GENERAL);","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"marcusbory"},"content":"        return command;","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"marcusbory"},"content":"     * This method converts user\u0027s index input into the actual TaskList index.","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"marcusbory"},"content":"     * @param inputIndex User\u0027s index input","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"marcusbory"},"content":"     * @return int The actual Task index in TaskList","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"marcusbory"},"content":"    private int parseInputIndex(int inputIndex) {","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"marcusbory"},"content":"        return inputIndex - 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"marcusbory"},"content":"     * This method destructures the user\u0027s input to obtain command type for parsing.","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"marcusbory"},"content":"     * @param userInput User\u0027s complete input","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"marcusbory"},"content":"     * @return String Type of command to be parsed","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"marcusbory"},"content":"    private String getCommandType(String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"marcusbory"},"content":"        String[] destructuredInputs \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"marcusbory"},"content":"        return destructuredInputs[COMMAND_TYPE_INDEX];","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"marcusbory"},"content":"     * This method destructures the user\u0027s input to obtain the Task\u0027s index to mark as complete. It will return a","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"marcusbory"},"content":"     * CompleteTaskCommand if the given userInput is not erroneous, and will return a FailedCommand if it is.","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"marcusbory"},"content":"     * @param userInput User\u0027s complete input","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"marcusbory"},"content":"     * @return Command Type of command to be executed","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"marcusbory"},"content":"    private Command parseCompleteCommand(String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"marcusbory"},"content":"        String[] destructuredInputs \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"marcusbory"},"content":"        int taskIndex;","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"marcusbory"},"content":"            String stringIndex \u003d destructuredInputs[TASK_COMMAND_INDEX];","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"marcusbory"},"content":"            taskIndex \u003d parseInputIndex(Integer.parseInt(stringIndex));","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"marcusbory"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.NUMBER_FORMAT);","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"marcusbory"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":113,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.NO_INDEX_SPECIFIED);","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"marcusbory"},"content":"        return new CompleteTaskCommand(taskIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":118,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"marcusbory"},"content":"     * This method destructures the user\u0027s input to decipher what Task to add to the TaskList. It will further parse","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"marcusbory"},"content":"     * the input based on the Task type, and if input is erroneous, it will return a FailedCommand.","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"marcusbory"},"content":"     * @param userInput User\u0027s complete input","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"marcusbory"},"content":"     * @return Command Type of command to execute for adding Task","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"marcusbory"},"content":"    private Command parseAddTaskCommand(String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":125,"author":{"gitId":"marcusbory"},"content":"        String commandType \u003d getCommandType(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":126,"author":{"gitId":"marcusbory"},"content":"        String[] destructuredInputs \u003d userInput.split(\" \", 2);","lastModifiedDate":"2021-09-22"},{"lineNumber":127,"author":{"gitId":"marcusbory"},"content":"        Command command;","lastModifiedDate":"2021-09-22"},{"lineNumber":128,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":129,"author":{"gitId":"marcusbory"},"content":"            switch (commandType) {","lastModifiedDate":"2021-09-22"},{"lineNumber":130,"author":{"gitId":"marcusbory"},"content":"            case TODO_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"marcusbory"},"content":"                command \u003d parseTodo(destructuredInputs);","lastModifiedDate":"2021-09-22"},{"lineNumber":132,"author":{"gitId":"marcusbory"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":133,"author":{"gitId":"marcusbory"},"content":"            case EVENT_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"marcusbory"},"content":"                command \u003d parseEvent(destructuredInputs);","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"marcusbory"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"marcusbory"},"content":"            case DEADLINE_COMMAND:","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"marcusbory"},"content":"                command \u003d parseDeadline(destructuredInputs);","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"marcusbory"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"marcusbory"},"content":"            default:","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"marcusbory"},"content":"                return new FailedCommand(FailedCommandType.GENERAL);","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"marcusbory"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"marcusbory"},"content":"            return command;","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"marcusbory"},"content":"        } catch (EmptyDescriptionException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.EMPTY_DESCRIPTION);","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"marcusbory"},"content":"        } catch (MissingDateException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.MISSING_DATE);","lastModifiedDate":"2021-09-22"},{"lineNumber":147,"author":{"gitId":"marcusbory"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.INVALID_DATE);","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":150,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":151,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"marcusbory"},"content":"     * This method parses the User\u0027s input into a Todo Task to be used as arguments for the AddTaskCommand.","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"marcusbory"},"content":"     * @param inputs Destructured user\u0027s inputs","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"marcusbory"},"content":"     * @return Command This returns AddTaskCommand","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"marcusbory"},"content":"     * @throws EmptyDescriptionException If task description is empty","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"marcusbory"},"content":"    private Command parseTodo(String[] inputs) throws EmptyDescriptionException {","lastModifiedDate":"2021-09-22"},{"lineNumber":159,"author":{"gitId":"marcusbory"},"content":"        if (inputs.length \u003c 2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":160,"author":{"gitId":"marcusbory"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2021-09-22"},{"lineNumber":161,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":162,"author":{"gitId":"marcusbory"},"content":"        String todoDescription \u003d inputs[TASK_FULL_DESCRIPTION_INDEX];","lastModifiedDate":"2021-09-22"},{"lineNumber":163,"author":{"gitId":"marcusbory"},"content":"        return new AddTaskCommand(TODO_TYPE, todoDescription, EMPTY_DATE);","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":165,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":166,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"marcusbory"},"content":"     * This method parses the User\u0027s input into an Event Task to be used as arguments for the AddTaskCommand.","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"marcusbory"},"content":"     * @param inputs Destructured user\u0027s inputs","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"marcusbory"},"content":"     * @return Command This returns AddTaskCommand","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"marcusbory"},"content":"     * @throws EmptyDescriptionException If task description is empty","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"marcusbory"},"content":"     * @throws MissingDateException If date provided is provided","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"marcusbory"},"content":"     * @throws DateTimeParseException If date provided is not formatted correctly","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"marcusbory"},"content":"    private Command parseEvent(String[] inputs) throws EmptyDescriptionException, MissingDateException,","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"marcusbory"},"content":"            DateTimeParseException {","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"marcusbory"},"content":"        if (inputs.length \u003c 2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":178,"author":{"gitId":"marcusbory"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2021-09-22"},{"lineNumber":179,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":180,"author":{"gitId":"marcusbory"},"content":"        String[] splitTaskDescription \u003d inputs[TASK_FULL_DESCRIPTION_INDEX].split(AT_IDENTIFIER, 2);","lastModifiedDate":"2021-09-22"},{"lineNumber":181,"author":{"gitId":"marcusbory"},"content":"        if (splitTaskDescription.length \u003c 2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":182,"author":{"gitId":"marcusbory"},"content":"            throw new MissingDateException();","lastModifiedDate":"2021-09-22"},{"lineNumber":183,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":184,"author":{"gitId":"marcusbory"},"content":"        String eventDescription \u003d splitTaskDescription[SPLIT_TASK_DESCRIPTION_INDEX];","lastModifiedDate":"2021-09-22"},{"lineNumber":185,"author":{"gitId":"marcusbory"},"content":"        String eventDateString \u003d splitTaskDescription[SPLIT_TASK_DATE_INDEX];","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"marcusbory"},"content":"        LocalDate eventDate \u003d LocalDate.parse(eventDateString, SG_DATE_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"marcusbory"},"content":"        return new AddTaskCommand(EVENT_TYPE, eventDescription, eventDate);","lastModifiedDate":"2021-09-22"},{"lineNumber":188,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":189,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":190,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"marcusbory"},"content":"     * This method parses the User\u0027s input into a Deadline Task to be used as arguments for the AddTaskCommand.","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"marcusbory"},"content":"     * @param inputs Destructured user\u0027s inputs","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"marcusbory"},"content":"     * @return Command This returns AddTaskCommand","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"marcusbory"},"content":"     * @throws EmptyDescriptionException If task description is empty","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"marcusbory"},"content":"     * @throws MissingDateException If date provided is not formatted correctly","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"marcusbory"},"content":"     * @throws DateTimeParseException If date provided is not formatted correctly","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"marcusbory"},"content":"    private Command parseDeadline(String[] inputs) throws EmptyDescriptionException, MissingDateException,","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"marcusbory"},"content":"            DateTimeParseException {","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"marcusbory"},"content":"        if (inputs.length \u003c 2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":202,"author":{"gitId":"marcusbory"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2021-09-22"},{"lineNumber":203,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":204,"author":{"gitId":"marcusbory"},"content":"        String[] splitTaskDescription \u003d inputs[TASK_FULL_DESCRIPTION_INDEX].split(BY_IDENTIFIER, 2);","lastModifiedDate":"2021-09-22"},{"lineNumber":205,"author":{"gitId":"marcusbory"},"content":"        if (splitTaskDescription.length \u003c 2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":206,"author":{"gitId":"marcusbory"},"content":"            throw new MissingDateException();","lastModifiedDate":"2021-09-22"},{"lineNumber":207,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":208,"author":{"gitId":"marcusbory"},"content":"        String deadlineDescription \u003d splitTaskDescription[SPLIT_TASK_DESCRIPTION_INDEX];","lastModifiedDate":"2021-09-22"},{"lineNumber":209,"author":{"gitId":"marcusbory"},"content":"        String deadlineDateString \u003d splitTaskDescription[SPLIT_TASK_DATE_INDEX];","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"marcusbory"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(deadlineDateString, SG_DATE_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"marcusbory"},"content":"        return new AddTaskCommand(DEADLINE_TYPE, deadlineDescription, deadlineDate);","lastModifiedDate":"2021-09-22"},{"lineNumber":212,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":213,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":214,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"marcusbory"},"content":"     * This method parses the User\u0027s input to obtain the Task index for DeleteTaskCommand","lastModifiedDate":"2021-09-23"},{"lineNumber":216,"author":{"gitId":"marcusbory"},"content":"     * @param userInput User\u0027s complete input","lastModifiedDate":"2021-09-23"},{"lineNumber":217,"author":{"gitId":"marcusbory"},"content":"     * @return Command Type of command to be executed","lastModifiedDate":"2021-09-23"},{"lineNumber":218,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":219,"author":{"gitId":"marcusbory"},"content":"    private Command parseDeleteCommand(String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":220,"author":{"gitId":"marcusbory"},"content":"        String[] destructuredInputs \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":221,"author":{"gitId":"marcusbory"},"content":"        int taskIndex;","lastModifiedDate":"2021-09-22"},{"lineNumber":222,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":223,"author":{"gitId":"marcusbory"},"content":"            String stringIndex \u003d destructuredInputs[TASK_COMMAND_INDEX];","lastModifiedDate":"2021-09-22"},{"lineNumber":224,"author":{"gitId":"marcusbory"},"content":"            taskIndex \u003d parseInputIndex(Integer.parseInt(stringIndex));","lastModifiedDate":"2021-09-22"},{"lineNumber":225,"author":{"gitId":"marcusbory"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":226,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.NUMBER_FORMAT);","lastModifiedDate":"2021-09-22"},{"lineNumber":227,"author":{"gitId":"marcusbory"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":228,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.NO_INDEX_SPECIFIED);","lastModifiedDate":"2021-09-22"},{"lineNumber":229,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":230,"author":{"gitId":"marcusbory"},"content":"        return new DeleteTaskCommand(taskIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":231,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":232,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"marcusbory"},"content":"     * This method destructures user\u0027s input to perform a find query based on the query term.","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"marcusbory"},"content":"     * @param userInput User\u0027s complete input","lastModifiedDate":"2021-09-23"},{"lineNumber":236,"author":{"gitId":"marcusbory"},"content":"     * @return Command Type of command to be executed","lastModifiedDate":"2021-09-23"},{"lineNumber":237,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":238,"author":{"gitId":"marcusbory"},"content":"    private Command parseFindCommand(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":239,"author":{"gitId":"marcusbory"},"content":"        String[] destructuredInputs \u003d userInput.split(\" \", 2);","lastModifiedDate":"2021-09-23"},{"lineNumber":240,"author":{"gitId":"marcusbory"},"content":"        String query;","lastModifiedDate":"2021-09-23"},{"lineNumber":241,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":242,"author":{"gitId":"marcusbory"},"content":"            query \u003d destructuredInputs[TASK_FULL_DESCRIPTION_INDEX];","lastModifiedDate":"2021-09-23"},{"lineNumber":243,"author":{"gitId":"marcusbory"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":244,"author":{"gitId":"marcusbory"},"content":"            return new FailedCommand(FailedCommandType.NO_QUERY_SPECIFIED);","lastModifiedDate":"2021-09-23"},{"lineNumber":245,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":246,"author":{"gitId":"marcusbory"},"content":"        return new FindCommand(query);","lastModifiedDate":"2021-09-23"},{"lineNumber":247,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":248,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"marcusbory":248}},{"path":"src/main/java/alfred/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.storage;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.exception.FileErrorException;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"import alfred.ui.TextUi;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"import java.io.File;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"public class Storage {","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"    private String filePath;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    private File taskFile;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"    public static final String SEPARATOR \u003d \",\";","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"     * This constructor instantiates a new File object to track local data persistence","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     * with the specified filePath.","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"     * @param filePath Specified filePath to track local data","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"        this.taskFile \u003d new File(this.filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"     * This method checks if there is already an existing local storage file, and attempts to create a new local","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"     * storage file for data persistence if one does not exist.","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"     * @return boolean State of existing local storage file","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"     * @throws FileErrorException If there are errors writing or checking for local files","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"    private boolean hasExistingFile() throws FileErrorException {","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"            if (!taskFile.exists()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"                taskFile.getParentFile().mkdirs();","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"            if (taskFile.createNewFile()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"                TextUi.createNewFileMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"                return false;","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"            throw new FileErrorException();","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"        return true;","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"marcusbory"},"content":"     * This method attempts to decode and retrieve the list of Tasks from the instantiated taskFile, and returns a","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"marcusbory"},"content":"     * new TaskList if the taskFile is not found.","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"marcusbory"},"content":"     * @return TaskList This returns the loaded TaskList from save file","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"marcusbory"},"content":"     * @throws FileErrorException If there are errors reading from local file","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"marcusbory"},"content":"    public TaskList load() throws FileErrorException {","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"marcusbory"},"content":"        if (!hasExistingFile()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"marcusbory"},"content":"            return new TaskList();","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"marcusbory"},"content":"        return TaskDecoder.scanTasks(taskFile);","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"marcusbory":58}},{"path":"src/main/java/alfred/storage/TaskDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.storage;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.exception.FileErrorException;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Deadline;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Event;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Todo;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"import java.io.File;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"import static alfred.storage.Storage.SEPARATOR;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"public class TaskDecoder {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"     * This method scans the entire given taskFile and compiles the found Tasks in a format which is compatible with","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"     * the chat-bot.","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"     * @param taskFile The File to be scanned","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"     * @return TaskList This returns a TaskList with all the pre-existing Tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"     * @throws FileErrorException If there are errors reading from local file","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"    public static TaskList scanTasks(File taskFile) throws FileErrorException {","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"        TaskList scannedTaskList \u003d new TaskList();","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"        int taskIndex \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"            Scanner fileScanner \u003d new Scanner(taskFile);","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"            while (fileScanner.hasNext()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"                String inputLine \u003d fileScanner.nextLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"                decodeAndLoadTask(scannedTaskList, inputLine, taskIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"                taskIndex++;","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"            throw new FileErrorException();","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"        return scannedTaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"     * This method constructs the chat-bot compatible TaskList from lines of input provided saved.","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"     * @param taskList TaskList object to construct upon","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"     * @param input Saved input line to be deciphered","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"     * @param taskIndex Index of Task in TaskList for marking Task as done","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"marcusbory"},"content":"    private static void decodeAndLoadTask(TaskList taskList, String input, int taskIndex) {","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"marcusbory"},"content":"        String[] destructuredInputs \u003d input.split(SEPARATOR);","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"marcusbory"},"content":"        String taskType \u003d destructuredInputs[0];","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"marcusbory"},"content":"        String taskStatus \u003d destructuredInputs[1];","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"marcusbory"},"content":"        String taskDescription \u003d destructuredInputs[2];","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"marcusbory"},"content":"        String taskDateString;","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"marcusbory"},"content":"        LocalDate taskDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"marcusbory"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"marcusbory"},"content":"        case \"T\":","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"marcusbory"},"content":"            taskList.addTask(new Todo(taskDescription));","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"marcusbory"},"content":"        case \"E\":","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"marcusbory"},"content":"            taskDateString \u003d destructuredInputs[3];","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"marcusbory"},"content":"            taskDate \u003d LocalDate.parse(taskDateString);","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"marcusbory"},"content":"            taskList.addTask(new Event(taskDescription, taskDate));","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"marcusbory"},"content":"        case \"D\":","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"marcusbory"},"content":"            taskDateString \u003d destructuredInputs[3];","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"marcusbory"},"content":"            taskDate \u003d LocalDate.parse(taskDateString);","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"marcusbory"},"content":"            taskList.addTask(new Deadline(taskDescription, taskDate));","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"marcusbory"},"content":"        default:","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"marcusbory"},"content":"            return;","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"marcusbory"},"content":"        if (taskStatus.equals(\"true\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"marcusbory"},"content":"            taskList.setTaskDoneInList(taskIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"marcusbory":74}},{"path":"src/main/java/alfred/storage/TaskEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.storage;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.exception.FileErrorException;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"import static alfred.storage.Storage.SEPARATOR;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"public class TaskEncoder {","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"     * This method writes/saves all Tasks in the TaskList to a local storage file via the given filePath.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"     * @param filePath Given filePath to write TaskList to","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"     * @param taskList TaskList to be written to local storage","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     * @throws FileErrorException If there are errors writing to local storage","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"    public static void saveAllTasks(String filePath, TaskList taskList) throws FileErrorException {","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"                String encodedTask \u003d encodeTask(taskList.getTask(i));","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"                fileWriter.write(encodedTask);","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"            fileWriter.close();","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"            throw new FileErrorException();","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"     * This method encodes a Task to a decode-able comma-separated format to be saved in local storage.","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"     * @param t Task to be encoded","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"     * @return String This returns encoded Task in String form","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"    private static String encodeTask(Task t) {","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"        String baseTask \u003d t.getType() + SEPARATOR + t.isDone()","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"                + SEPARATOR + t.getDescription() + SEPARATOR + t.getDate() + \"\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"        return baseTask;","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"marcusbory":42}},{"path":"src/main/java/alfred/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"     * This method retrieves the date specified for Deadline.","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"     * @return LocalDate This returns LocalDate deadline date","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"        return by;","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"    public String getType() {","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"        return \"D\";","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusbory":30}},{"path":"src/main/java/alfred/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"    protected LocalDate at;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"     * This method retrieves the date specified for Event.","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"     * @return This returns LocalDate event date","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"        return at;","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"    public String getType() {","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"        return \"E\";","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusbory":30}},{"path":"src/main/java/alfred/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"     * This constructor instantiates a new Task with a description provided, and a","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"     * default false for its isDone status.","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"     * @param description The Task description","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"        return isDone;","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"        return description;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"    public abstract String getType();","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"    public abstract LocalDate getDate();","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"        return \"[\" + getStatusIcon() +\"] \" + description;","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"     * This method sets the Task as done/completed.","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"    public void setTaskDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"marcusbory"},"content":"    public boolean isQueriedTask(String query) {","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"marcusbory"},"content":"        return description.toLowerCase().contains(query.toLowerCase());","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"marcusbory":50}},{"path":"src/main/java/alfred/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.task;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"public class TaskList {","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     * This method removes a Task from the TaskList given an index.","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"     * @param index The index of the Task to be removed","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"     * @return Task The Task removed is returned","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"    public Task removeTask(int index) {","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"        Task removedTask \u003d tasks.get(index);","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"        tasks.remove(index);","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"        return removedTask;","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"     * This method allows the user to set a Task as done via the TaskList","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"     * by specifying the index.","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"     * @param index The index of Task to be marked as done","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"    public void setTaskDoneInList(int index) {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"        tasks.get(index).setTaskDone();","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"marcusbory":43}},{"path":"src/main/java/alfred/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"    public String getType() {","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"        return \"T\";","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"     * This method retrieves the date specified for Todo.","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"     * However, as Todos have no date, it only returns a null LocalDate object.","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"     * @return LocalDate Returns null LocalDate object","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"        return null;","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusbory":27}},{"path":"src/main/java/alfred/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"package alfred.ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"import alfred.task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"import alfred.task.TaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"public class TextUi {","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"    public static final String LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"    private static final String LOGO \u003d","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"marcusbory"},"content":"            \" **********************************\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"marcusbory"},"content":"            \" *     _    _  __              _  *\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"marcusbory"},"content":"            \" *    / \\\\  | |/ _|_ __ ___  __| | *\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"marcusbory"},"content":"            \" *   / _ \\\\ | | |_| \u0027__/ _ \\\\/ _` | *\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"marcusbory"},"content":"            \" *  / ___ \\\\| |  _| | |  __/ (_| | *\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"marcusbory"},"content":"            \" * /_/   \\\\_\\\\_|_| |_|  \\\\___|\\\\__,_| *\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"marcusbory"},"content":"            \" **********************************\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"marcusbory"},"content":"    private final Scanner scanner;","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"marcusbory"},"content":"     * This constructor creates a command line TextUi for interaction with the user on the front","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"marcusbory"},"content":"     * end. It instantiates a new System.in Scanner to read user input, and prints the initialisation","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"marcusbory"},"content":"     * message.","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"marcusbory"},"content":"    public TextUi() {","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"marcusbory"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"marcusbory"},"content":"        initMessage();","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"marcusbory"},"content":"     * This method formats text block outputs by the chat-bot by prepending and appending lines on the","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"marcusbory"},"content":"     * text to be printed.","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"marcusbory"},"content":"     * @param s Text to be printed","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"marcusbory"},"content":"    private static void printMessageTemplate(String s) {","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"marcusbory"},"content":"        System.out.println(LINE + s + LINE);","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"marcusbory"},"content":"     * This method obtains the user input using the initialised scanner.","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"marcusbory"},"content":"     * @return String This returns the user input to be processed","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"marcusbory"},"content":"    public String getUserInput() {","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"marcusbory"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"marcusbory"},"content":"     * This method prints the initialisation message.","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"marcusbory"},"content":"    public static void initMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"marcusbory"},"content":"        String messageString \u003d \" Welcome back, Master Wayne.\\n\" + \" How may I be of service to you?\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"marcusbory"},"content":"        System.out.println(LOGO + \"\\n\");","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(messageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"marcusbory"},"content":"     * This method prints the exit message.","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"marcusbory"},"content":"    public static void shutdownMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(\" Very well sir, I shall leave you to your own devices.\\n\");","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"marcusbory"},"content":"     * This method prints the Task completion message along with its index in the list and description.","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"marcusbory"},"content":"     * @param index Index in the TaskList (not displayed list)","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"marcusbory"},"content":"     * @param task Completed Task","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"marcusbory"},"content":"    public static void completeTaskMessage(int index, Task task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"marcusbory"},"content":"        int listIndex \u003d index + 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"marcusbory"},"content":"        String messageString \u003d","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"marcusbory"},"content":"                \"Duly noted on completion of task, sir.\\n\" + \"    \" + listIndex + \".\" + task.toString() + \"\\n\";","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(messageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"marcusbory"},"content":"     * This method prints out all tasks, with enumeration, if there are tasks. If not, it will inform","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"marcusbory"},"content":"     * the user that the TaskList is empty.","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"marcusbory"},"content":"     * @param taskList The current TaskList to be printed","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"marcusbory"},"content":"    public static void listTasks(TaskList taskList) {","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"marcusbory"},"content":"        int numberOfTasks \u003d taskList.getSize();","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"marcusbory"},"content":"        System.out.print(LINE);","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"marcusbory"},"content":"        if (numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"marcusbory"},"content":"            System.out.println(\" Your schedule is clear, Master Wayne.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"marcusbory"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"marcusbory"},"content":"            System.out.println(\" Your tasks, sir:\");","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"marcusbory"},"content":"            printEnumeratedTasks(taskList, numberOfTasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"marcusbory"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"marcusbory"},"content":"     * This method prints out all tasks that match the find query, with enumeration. If not, it will inform user","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"marcusbory"},"content":"     * about the failed query.","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"marcusbory"},"content":"     * @param filteredList The filtered TaskList to be printed","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"marcusbory"},"content":"    public static void printFoundTasks(TaskList filteredList) {","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"marcusbory"},"content":"        int numberOfTasks \u003d filteredList.getSize();","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"marcusbory"},"content":"        System.out.print(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"marcusbory"},"content":"        if (numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"marcusbory"},"content":"            System.out.println(\" There appears to be no task by that query sir.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"marcusbory"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"marcusbory"},"content":"            System.out.println(\" I\u0027ve procured the following tasks based on that query, sir:\");","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"marcusbory"},"content":"            printEnumeratedTasks(filteredList, numberOfTasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"marcusbory"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"marcusbory"},"content":"     * This method iterates through the TaskList, enumerates the Tasks and prints them out.","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"marcusbory"},"content":"     * @param taskList TaskList to be enumerated and printed","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"marcusbory"},"content":"     * @param numberOfTasks Number of Tasks in the TaskList for iteration","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"marcusbory"},"content":"    private static void printEnumeratedTasks(TaskList taskList, int numberOfTasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"marcusbory"},"content":"        for (int i \u003d 0; i \u003c numberOfTasks; i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"marcusbory"},"content":"            System.out.println(\" \" + (i + 1) + \".\" + taskList.getTask(i).toString());","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"marcusbory"},"content":"     * This method prints out the success message for adding a Task to the TaskList, and contains the","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"marcusbory"},"content":"     * Task Description and number of Tasks currently in the TaskList.","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"marcusbory"},"content":"     * @param t The Task added","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"marcusbory"},"content":"     * @param numberOfTasks The current number of Tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"marcusbory"},"content":"    public static void addTaskMessage(Task t, int numberOfTasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"marcusbory"},"content":"        String messageString \u003d \" I shall put this in your schedule, Master Wayne: \\n    \" + t.toString() + \"\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"marcusbory"},"content":"                \" Sir, the number of Tasks you have scheduled currently amounts to \" + numberOfTasks + \".\" + \"\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(messageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"marcusbory"},"content":"     * This method prints out the success message for deleting a Task from the TaskList, and contains the","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"marcusbory"},"content":"     * Task Description and number of Tasks currently in the TaskList.","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"marcusbory"},"content":"     * @param t The Task deleted","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"marcusbory"},"content":"     * @param numberOfTasks The current number of Tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"marcusbory"},"content":"    public static void deleteTaskMessage(Task t, int numberOfTasks, int taskIndex) {","lastModifiedDate":"2021-09-24"},{"lineNumber":140,"author":{"gitId":"marcusbory"},"content":"        String messageString \u003d","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"marcusbory"},"content":"                \" Very well, Master Wayne, I shall remove this: \\n    \" + (taskIndex + 1) + \".\" + t.toString() + \"\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":142,"author":{"gitId":"marcusbory"},"content":"                \" Sir, the number of Tasks you have scheduled currently amounts to \" + numberOfTasks + \".\" + \"\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(messageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"marcusbory"},"content":"    // Error Messages","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message to show current command cannot be identified and is invalid.","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"marcusbory"},"content":"    public static void invalidCommandMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(\" Perhaps you could rephrase that in a way us civilians could comprehend.\\n\");","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message denoting errors with the storage save file.","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"marcusbory"},"content":"    public static void fileErrorMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(\" There appears to be a problem with the save file, sir.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message denoting that an Event/Deadline does not have a specified description.","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"marcusbory"},"content":"    public static void emptyDescriptionMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(\" Master Wayne, if you do not specify your task, I\u0027m afraid I cannot note it down.\\n\");","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message denoting that Add/Delete commands do not specify any Task index.","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"marcusbory"},"content":"    public static void missingIndexMessage() {","lastModifiedDate":"2021-09-22"},{"lineNumber":173,"author":{"gitId":"marcusbory"},"content":"        String messageString \u003d \" And what task number are you specifying, Master Wayne?\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":174,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(messageString);","lastModifiedDate":"2021-09-22"},{"lineNumber":175,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":176,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":177,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message denoting that a Task index specified is not a number.","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"marcusbory"},"content":"    public static void invalidIndexMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":181,"author":{"gitId":"marcusbory"},"content":"        String messageString \u003d \" Sir, the bats must\u0027ve gone to your head.\\n\" + \" Do try again with a number that \" +","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"marcusbory"},"content":"                \"identifies your task.\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(messageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message denoting that a Task index specified does not exist, and informs the user","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"marcusbory"},"content":"     * to try again with an index within the given range.","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"marcusbory"},"content":"     * @param numberOfTasks The current number/range of Tasks for which the user can input","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"marcusbory"},"content":"    public static void uninitialisedTaskIndexMessage(int numberOfTasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":192,"author":{"gitId":"marcusbory"},"content":"        String noTaskMessageString \u003d \" Sir, you have nothing scheduled.\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":193,"author":{"gitId":"marcusbory"},"content":"        String singularMessageString \u003d \" Sir, might I remind you that you only have 1 task.\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":194,"author":{"gitId":"marcusbory"},"content":"                \" Try again with a number in that range.\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":195,"author":{"gitId":"marcusbory"},"content":"        String pluralMessageString \u003d \" Sir, might I remind you that you only have \" + numberOfTasks + \" tasks.\\n\" +","lastModifiedDate":"2021-09-21"},{"lineNumber":196,"author":{"gitId":"marcusbory"},"content":"                \" Try again with a number in that range.\\n\";","lastModifiedDate":"2021-09-21"},{"lineNumber":197,"author":{"gitId":"marcusbory"},"content":"        switch (numberOfTasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":198,"author":{"gitId":"marcusbory"},"content":"        case 0:","lastModifiedDate":"2021-09-21"},{"lineNumber":199,"author":{"gitId":"marcusbory"},"content":"            printMessageTemplate(noTaskMessageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":200,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-21"},{"lineNumber":201,"author":{"gitId":"marcusbory"},"content":"        case 1:","lastModifiedDate":"2021-09-21"},{"lineNumber":202,"author":{"gitId":"marcusbory"},"content":"            printMessageTemplate(singularMessageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":203,"author":{"gitId":"marcusbory"},"content":"            break;","lastModifiedDate":"2021-09-21"},{"lineNumber":204,"author":{"gitId":"marcusbory"},"content":"        default:","lastModifiedDate":"2021-09-21"},{"lineNumber":205,"author":{"gitId":"marcusbory"},"content":"            printMessageTemplate(pluralMessageString);","lastModifiedDate":"2021-09-21"},{"lineNumber":206,"author":{"gitId":"marcusbory"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":207,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":208,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":209,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message denoting that a date is missing for Event/Deadline.","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"marcusbory"},"content":"    public static void missingDateMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(\" Is there not a date for your so-called deadline or event, sir?\\n\");","lastModifiedDate":"2021-09-21"},{"lineNumber":214,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":215,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":216,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":217,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message when user does not specify a query term.","lastModifiedDate":"2021-09-23"},{"lineNumber":218,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":219,"author":{"gitId":"marcusbory"},"content":"    public static void missingQueryMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":220,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(\" Master Wayne, if you don\u0027t specify a task to find, \\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":221,"author":{"gitId":"marcusbory"},"content":"                \" I\u0027m afraid I cannot help you.\\n\");","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":223,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":224,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":225,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message to inform user to format date properly.","lastModifiedDate":"2021-09-23"},{"lineNumber":226,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":227,"author":{"gitId":"marcusbory"},"content":"    public static void invalidDateMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":228,"author":{"gitId":"marcusbory"},"content":"        String messageString \u003d \" Master Wayne, to which planet does this date belong to?\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":229,"author":{"gitId":"marcusbory"},"content":"                \" Please let me know soonest in the following forms:\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"marcusbory"},"content":"                \" [DD-MM-YYYY] or [DD/MM/YYYY] or [DDMMYYYY]\\n\";","lastModifiedDate":"2021-09-23"},{"lineNumber":231,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(messageString);","lastModifiedDate":"2021-09-23"},{"lineNumber":232,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"marcusbory"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"marcusbory"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"marcusbory"},"content":"     * This method prints a message informing the user that a save file has been created by the chat-bot.","lastModifiedDate":"2021-09-23"},{"lineNumber":236,"author":{"gitId":"marcusbory"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":237,"author":{"gitId":"marcusbory"},"content":"    public static void createNewFileMessage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":238,"author":{"gitId":"marcusbory"},"content":"        printMessageTemplate(\" A new file has been created for Alfred, by Alfred.\\n\");","lastModifiedDate":"2021-09-21"},{"lineNumber":239,"author":{"gitId":"marcusbory"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":240,"author":{"gitId":"marcusbory"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"marcusbory":240}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marcusbory"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"marcusbory"},"content":"todo Fix spine and get stronger","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"marcusbory"},"content":"event Meet Catwoman at Parliament House /at next Friday","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"marcusbory"},"content":"deadline Save Gotham City with The Bat /by before it\u0027s too late","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"marcusbory"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"marcusbory"},"content":"done 1","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"marcusbory"},"content":"done 2","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"marcusbory"},"content":"done 3","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"marcusbory"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"marcusbory"},"content":"bye","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"marcusbory":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"marcusbory"},"content":"java -classpath ..\\bin Alfred \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"marcusbory":1,"-":20}}]
