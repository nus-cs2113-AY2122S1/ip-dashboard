[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"[T] | 1 | read book","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"[T] | 1 | return book","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"[D] | 0 | good job | 2001-09-11 10:00","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"[E] | 1 | bad job | 2001-09-11 12:12","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"Woolicious98":4}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"import duke.command.CommandException;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"import duke.storage.FileHandler;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"import duke.parser.ParserException;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":" * Duke main class, the program should start running from here as the main.","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"public class Duke {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"    private FileHandler fileHandler;","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"    private String fileName;","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    private String fileDirectory;","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"     * Constructor that initialise components the duke need to use as well as load data from given file into task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"     * @param fileDirectory File directory that contains the text file of saved task list if any","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"     * @param fileName      Supplied filename of the text file of saved task list","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"    public Duke(String fileDirectory, String fileName) {","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"        this.fileDirectory \u003d fileDirectory;","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"        taskManager \u003d new TaskManager();","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"        //Load data from file into task list","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"        fileHandler \u003d new FileHandler(fileDirectory);","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"        ui.printFileLoadingMessage(fileName);","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"            taskManager.processContentsFromFile(fileHandler.load(fileName));","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"            //File name not found","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"            ui.printDukeExceptionMessage(e);","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"        ui.printFileLoadingDoneMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"     * Main function to run the Duke bot. Provided with hardcoded data file\u0027s directory and its name. This data file","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"     * stores saved task list from previous runs.","lastModifiedDate":"2021-09-24"},{"lineNumber":51,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"Woolicious98"},"content":"     * @param args Arguments from console input (not used)","lastModifiedDate":"2021-09-24"},{"lineNumber":53,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":55,"author":{"gitId":"Woolicious98"},"content":"        new Duke(\"data\", \"duke.txt\").run();","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":57,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"Woolicious98"},"content":"     * Perform the execution of a command object that is validated and given by the parser. The parser is a command","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"Woolicious98"},"content":"     * handler that ensures the user input are valid existing commands of duke. Upon changes detected to the task list,","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"Woolicious98"},"content":"     * the current task list will be overwritten on to the provided filename text file in order to save its contents.","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"Woolicious98"},"content":"     * @param command Command object that was translated from user input","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"Woolicious98"},"content":"    private void executeCommand(Command command) {","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"Woolicious98"},"content":"            command.setTaskManager(taskManager);","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"Woolicious98"},"content":"            command.execute();","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"Woolicious98"},"content":"            ui.printLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"Woolicious98"},"content":"            if (command.hasDataChange()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"Woolicious98"},"content":"                fileHandler.writeToFile(fileName, taskManager.toString());","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"Woolicious98"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"Woolicious98"},"content":"            //Fatal error, Task Manager does not exist","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"Woolicious98"},"content":"            ui.printCommandExceptionMessage(e);","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"Woolicious98"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"Woolicious98"},"content":"            //File IOException error","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"Woolicious98"},"content":"            ui.printDukeExceptionMessage(e);","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"Woolicious98"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"Woolicious98"},"content":"            //Fatal error, command input is null","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"Woolicious98"},"content":"            ui.printMessage(e.getMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":83,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":84,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":85,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"Woolicious98"},"content":"     * Main function to get user inputs and parse in through a parser to determine the correctness of the command. Upon","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"Woolicious98"},"content":"     * receiving invalid commands, format of command will be printed unless command does not even exist in which it will","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"Woolicious98"},"content":"     * print an invalid command error.","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"Woolicious98"},"content":"    private void run() {","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"Woolicious98"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"Woolicious98"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"Woolicious98"},"content":"        Command command \u003d null;","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"Woolicious98"},"content":"        do {","lastModifiedDate":"2021-09-12"},{"lineNumber":95,"author":{"gitId":"Woolicious98"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"Woolicious98"},"content":"                command \u003d parser.parseCommand(ui.getUserInput());","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"Woolicious98"},"content":"                executeCommand(command);","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"Woolicious98"},"content":"            } catch (ParserException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"Woolicious98"},"content":"                ui.printParserExceptionMessage(e);","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"Woolicious98"},"content":"        } while (!ByeCommand.isExit(command));","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"Woolicious98"},"content":"        ui.printExitMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Woolicious98":103,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Duke Exception class that handles custom exception that occurs during the execution of Duke","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    private String errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        return errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":18}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Bye command that will exit the program.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD + TAG_NO_FORMAT;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"     * Method to check if any given command is of type ByeCommand as ByeCommand will trigger a program termination.","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"     * @param command Given command object to be tested.","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"     * @return Whether the given command object is of type ByeCommand.","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"        return command instanceof ByeCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":25}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":" * Parent command class that will handle any valid command operations.","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"public class Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    // Common command error messages","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    final public static String TAG_NO_FORMAT \u003d \" \u003cno additional input required\u003e\";","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    final public static String TAG_TASK_NUMBER \u003d \" \u003ctask number(can be seen using the list command, eg. 1)\u003e\";","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    final public static String TAG_TASK_DESCRIPTION \u003d \" \u003ctask description\u003e\";","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    protected TaskManager taskManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"    private int taskIndex \u003d -1;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    protected boolean hasDataChange \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    public Command() {","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"    public Command(int targetIndex) {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"        this.taskIndex \u003d targetIndex;","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"     * Method to set the task manager for the command object to be performed on. Fatal error if the TaskManager object","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"     * is non-existent.","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"     * @param taskManager A Task Manager object that is created during the setup phase of duke.","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"     * @throws CommandException Exception triggered if taskManager do not exist.","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"    public void setTaskManager(TaskManager taskManager) throws CommandException {","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"        if (taskManager \u003d\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"            throw new CommandException(\"Error: task manager not found.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"        this.taskManager \u003d taskManager;","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"     * Method to be handles by its children classes.","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"     * @throws CommandException Exception to a command is a generic one and tries to execute.","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"    public void execute() throws CommandException {","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"        throw new CommandException(\"Error: Command not found.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"    public int getTaskIndex() {","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"Woolicious98"},"content":"        return taskIndex;","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"Woolicious98"},"content":"    public boolean hasDataChange() {","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"Woolicious98"},"content":"        return hasDataChange;","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":58}},{"path":"src/main/java/duke/command/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Command Exception that handles exception from command related errors.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    private String errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    public CommandException(String errorMessage) {","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        return errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":18}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.common.CommonFormat;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":" * Date command that will find any task that happen on the specified date.","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"date\";","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD + \" \" + CommonFormat.FORMAT_DATE;","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    private LocalDate date;","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    public DateCommand(LocalDate date) {","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"     * Method to execute the command by calling the TaskManager to perform its specified operation.","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"        taskManager.printTaskOnDate(date.format(CommonFormat.formatterDateOnly));","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"Woolicious98":28}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Deadline command that will create a deadline task object.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String TAG_DUE_DATE_DEADLINE \u003d \"/by\";","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    final public static String TAG_DUE_DATE_DEADLINE_FORMAT \u003d \"\u003cdue date\u003e\";","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"            + TAG_TASK_DESCRIPTION + \" \"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"            + TAG_DUE_DATE_DEADLINE + \" \"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"            + TAG_DUE_DATE_DEADLINE_FORMAT;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    private String[] arguments;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    public DeadlineCommand(String[] arguments) {","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"        super();","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"        this.hasDataChange \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"     * Method that calls the task manager that will create the deadline command. The variables arguments[0] is the task","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"     * description and arguments[1] is the due date.","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"        taskManager.createDeadlineTask(arguments[0], arguments[1].trim());","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":34}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Delete command that handles deleting a specified task by its task number from list command.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD + TAG_TASK_NUMBER;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    public DeleteCommand(int targetIndex) {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"        super(targetIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"        this.hasDataChange \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"     * Method to execute the command by calling the TaskManager to perform its specified operation.","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"        taskManager.deleteTask(this.getTaskIndex());","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":23}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Done command to set a specified task to done by its task number from list command.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD + TAG_TASK_NUMBER;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    public DoneCommand(int targetIndex) {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"        super(targetIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"        this.hasDataChange \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"     * Method to execute the command by calling the TaskManager to perform its specified operation.","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"        taskManager.setTaskToDone(this.getTaskIndex());","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":23}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Event command that will create a event task object.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String TAG_START_DATE_DEADLINE \u003d \"/at\";","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    final public static String TAG_START_DATE_DEADLINE_FORMAT \u003d \"\u003cstart date\u003e\";","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"            + TAG_TASK_DESCRIPTION + \" \"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"            + TAG_START_DATE_DEADLINE + \" \"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"            + TAG_START_DATE_DEADLINE_FORMAT;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    private String[] arguments;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    public EventCommand(String[] arguments) {","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"        super();","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"        this.hasDataChange \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"     * Method that calls the task manager that will create the event command. The variables arguments[0] is the task","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"     * description and arguments[1] is the start date.","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"        taskManager.createEventTask(arguments[0], arguments[1].trim());","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":33}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Find command that will filter out task that its description contains the specified keyword.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD + \" \u003ckeyword\u003e\";","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    private String keyword;","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"        super();","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"     * Method to execute the command by calling the TaskManager to perform its specified operation.","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"        taskManager.findTask(keyword);","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"Woolicious98":25}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * List command to print all task in the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD + TAG_NO_FORMAT;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"     * Method to execute the command by calling the TaskManager to perform its specified operation.","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        taskManager.printAllTasks();","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":19}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Todo command that will create a Todo task.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final public static String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"    final public static String MESSAGE_FORMAT \u003d COMMAND_WORD + TAG_TASK_DESCRIPTION;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    private String arguments;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    public TodoCommand(String arguments) {","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"        super();","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        this.hasDataChange \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"     * Method to execute the command by calling the TaskManager to perform its specified operation.","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"    public void execute() {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"        taskManager.createToDoTask(this.arguments);","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":26}},{"path":"src/main/java/duke/common/CommonFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.common;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":" * Common formats related items to be shared across all classes in duke.","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"public class CommonFormat {","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    final public static String FORMAT_DATE \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    final public static String FORMAT_TIME \u003d \"HH:mm\";","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    final public static String FORMAT_DATETIME \u003d FORMAT_DATE + \" \" + FORMAT_TIME;","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    final public static String FORMAT_DATETIME_PRINT \u003d \"MMM dd yyyy, HH:mm\";","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"    final public static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(FORMAT_DATETIME);","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    final public static DateTimeFormatter formatterDateOnly \u003d DateTimeFormatter.ofPattern(FORMAT_DATE);","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"    final public static DateTimeFormatter formatterPrint \u003d DateTimeFormatter.ofPattern(FORMAT_DATETIME_PRINT);","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"Woolicious98":19}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.command.DateCommand;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import duke.common.CommonFormat;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":" * Parser class that handles and filter the user input and translate validated ones into valid command objects.","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"public class Parser {","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    final static String MESSAGE_INVALID_FORMAT \u003d \"Error: Incorrect format detected.\\n%s\";","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    final static String MESSAGE_INVALID_TASK_NUMBER \u003d \"Error: Invalid Task Number.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"    final static String MESSAGE_INVALID_COMMAND \u003d \"Error: Command not found.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"    final static String MESSAGE_INVALID_DATE \u003d \"Error: Incorrect date time format. Format: \"","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"            + CommonFormat.FORMAT_DATETIME;","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"    public Parser() {","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"     * Function that maps user command to its respective functionality. Upon a successful valid command, a command","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"     * object will be return. As for an invalid command, an exception will be thrown containing an error message","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"     * regarding the issues of the given command.","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"     * @return Command object.","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"     * @throws ParserException Error regarding the validness of existing commands.","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"    public Command parseCommand(String userInput) throws ParserException {","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"        Command command \u003d null;","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"        switch (getCommonCommand(userInput)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"            command \u003d new ListCommand();","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"        case ByeCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"Woolicious98"},"content":"            command \u003d new ByeCommand();","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"Woolicious98"},"content":"        case DoneCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"Woolicious98"},"content":"            command \u003d new DoneCommand(getTaskIndex(userInput));","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"Woolicious98"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"Woolicious98"},"content":"            command \u003d new DeleteCommand(getTaskIndex(userInput));","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"Woolicious98"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"Woolicious98"},"content":"            command \u003d executeTodoCommand(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"Woolicious98"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"Woolicious98"},"content":"            command \u003d executeDeadlineCommand(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"Woolicious98"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"Woolicious98"},"content":"            command \u003d executeEventCommand(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"Woolicious98"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"Woolicious98"},"content":"            command \u003d new FindCommand(getCommandData(userInput));","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"Woolicious98"},"content":"        case DateCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"Woolicious98"},"content":"            command \u003d executeDateCommand(userInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"Woolicious98"},"content":"        default:","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(MESSAGE_INVALID_COMMAND);","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"Woolicious98"},"content":"        return command;","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"Woolicious98"},"content":"     * Method to get the base command from the user inputs. Base command are the first word of the user inputs.","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"Woolicious98"},"content":"     * @return The first word of userInput separated by a space.","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"Woolicious98"},"content":"    private String getCommonCommand(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"Woolicious98"},"content":"        return userInput.split(\" \")[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"Woolicious98"},"content":"     * Get arguments for the base command.","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":94,"author":{"gitId":"Woolicious98"},"content":"     * @return An edited userInput excluding the first word in it.","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"Woolicious98"},"content":"    private String getCommandData(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"Woolicious98"},"content":"        String[] payload \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"Woolicious98"},"content":"        payload[0] \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"Woolicious98"},"content":"        return String.join(\" \", payload).trim();","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"Woolicious98"},"content":"     * Get a number from user inputs after the base command. This number represents the task number in which some","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"Woolicious98"},"content":"     * commands need to reference from.","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":107,"author":{"gitId":"Woolicious98"},"content":"     * @return An integer number that represents the task number in the list.","lastModifiedDate":"2021-09-24"},{"lineNumber":108,"author":{"gitId":"Woolicious98"},"content":"     * @throws ParserException Error regarding invalid non-numeric inputs.","lastModifiedDate":"2021-09-24"},{"lineNumber":109,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"Woolicious98"},"content":"    private int getTaskIndex(String userInput) throws ParserException {","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"Woolicious98"},"content":"        int result \u003d -1;","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"Woolicious98"},"content":"            result \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"Woolicious98"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(MESSAGE_INVALID_TASK_NUMBER);","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"Woolicious98"},"content":"        return result;","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"Woolicious98"},"content":"    private static boolean isStringEmpty(String s) {","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"Woolicious98"},"content":"        return (s \u003d\u003d null || s.isEmpty());","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"Woolicious98"},"content":"    private static boolean isAnyStringEmpty(String[] strings) {","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"Woolicious98"},"content":"        boolean isEmpty \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"Woolicious98"},"content":"        for (String s : strings) {","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"Woolicious98"},"content":"            if (isStringEmpty(s.trim())) {","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"Woolicious98"},"content":"                isEmpty \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"Woolicious98"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"Woolicious98"},"content":"        return isEmpty;","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"Woolicious98"},"content":"     * Method to check the validation and perform the todo command.","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":139,"author":{"gitId":"Woolicious98"},"content":"     * @return Valid todo command.","lastModifiedDate":"2021-09-24"},{"lineNumber":140,"author":{"gitId":"Woolicious98"},"content":"     * @throws ParserException Error regarding the validness of the todo command format.","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"Woolicious98"},"content":"    private Command executeTodoCommand(String userInput) throws ParserException {","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"Woolicious98"},"content":"        String errorMessage \u003d String.format(MESSAGE_INVALID_FORMAT, TodoCommand.MESSAGE_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"Woolicious98"},"content":"        String arguments \u003d getCommandData(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"Woolicious98"},"content":"        if (isStringEmpty(arguments)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"Woolicious98"},"content":"        return new TodoCommand(arguments);","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"Woolicious98"},"content":"     * Method to check the validation and perform the deadline command.","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":155,"author":{"gitId":"Woolicious98"},"content":"     * @return Valid deadline command.","lastModifiedDate":"2021-09-24"},{"lineNumber":156,"author":{"gitId":"Woolicious98"},"content":"     * @throws ParserException Error regarding the validness of the deadline command format.","lastModifiedDate":"2021-09-24"},{"lineNumber":157,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"Woolicious98"},"content":"    private Command executeDeadlineCommand(String userInput) throws ParserException {","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"Woolicious98"},"content":"        String errorMessage \u003d String.format(MESSAGE_INVALID_FORMAT, DeadlineCommand.MESSAGE_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"Woolicious98"},"content":"        String arguments \u003d getCommandData(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"Woolicious98"},"content":"        if (isStringEmpty(arguments)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"Woolicious98"},"content":"        String[] argumentArray \u003d arguments.split(DeadlineCommand.TAG_DUE_DATE_DEADLINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"Woolicious98"},"content":"        if (argumentArray.length \u003c 2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"Woolicious98"},"content":"        } else if (isAnyStringEmpty(argumentArray)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"Woolicious98"},"content":"        } else if (!isValidDateTimeFormat(argumentArray[1])) {","lastModifiedDate":"2021-09-24"},{"lineNumber":170,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-09-24"},{"lineNumber":171,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"Woolicious98"},"content":"        return new DeadlineCommand(argumentArray);","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"Woolicious98"},"content":"     * Method to check the validation and perform the event command.","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":179,"author":{"gitId":"Woolicious98"},"content":"     * @return Valid event command.","lastModifiedDate":"2021-09-24"},{"lineNumber":180,"author":{"gitId":"Woolicious98"},"content":"     * @throws ParserException Error regarding the validness of the event command format.","lastModifiedDate":"2021-09-24"},{"lineNumber":181,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"Woolicious98"},"content":"    private Command executeEventCommand(String userInput) throws ParserException {","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"Woolicious98"},"content":"        String errorMessage \u003d String.format(MESSAGE_INVALID_FORMAT, EventCommand.MESSAGE_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"Woolicious98"},"content":"        String arguments \u003d getCommandData(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"Woolicious98"},"content":"        if (isStringEmpty(arguments)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"Woolicious98"},"content":"        String[] argumentArray \u003d arguments.split(EventCommand.TAG_START_DATE_DEADLINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"Woolicious98"},"content":"        if (argumentArray.length \u003c 2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"Woolicious98"},"content":"        } else if (isAnyStringEmpty(argumentArray)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"Woolicious98"},"content":"        } else if (!isValidDateTimeFormat(argumentArray[1])) {","lastModifiedDate":"2021-09-24"},{"lineNumber":194,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-09-24"},{"lineNumber":195,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"Woolicious98"},"content":"        return new EventCommand(argumentArray);","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":199,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":200,"author":{"gitId":"Woolicious98"},"content":"     * Method that handles the validation and creation of a Date Command. It will check if all arguments are provided","lastModifiedDate":"2021-09-24"},{"lineNumber":201,"author":{"gitId":"Woolicious98"},"content":"     * and the date given is in a specific format.","lastModifiedDate":"2021-09-24"},{"lineNumber":202,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":203,"author":{"gitId":"Woolicious98"},"content":"     * @param userInput Raw user inputs from scanner.","lastModifiedDate":"2021-09-24"},{"lineNumber":204,"author":{"gitId":"Woolicious98"},"content":"     * @return Valid date command.","lastModifiedDate":"2021-09-24"},{"lineNumber":205,"author":{"gitId":"Woolicious98"},"content":"     * @throws ParserException Exception to when arguments are not provided correctly.","lastModifiedDate":"2021-09-24"},{"lineNumber":206,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":207,"author":{"gitId":"Woolicious98"},"content":"    private Command executeDateCommand(String userInput) throws ParserException {","lastModifiedDate":"2021-09-24"},{"lineNumber":208,"author":{"gitId":"Woolicious98"},"content":"        String errorMessage \u003d String.format(MESSAGE_INVALID_FORMAT, DateCommand.MESSAGE_FORMAT);","lastModifiedDate":"2021-09-24"},{"lineNumber":209,"author":{"gitId":"Woolicious98"},"content":"        String arguments \u003d getCommandData(userInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":210,"author":{"gitId":"Woolicious98"},"content":"        if (isStringEmpty(arguments)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":211,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-24"},{"lineNumber":212,"author":{"gitId":"Woolicious98"},"content":"        } else if (!isValidDateFormat(arguments)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":213,"author":{"gitId":"Woolicious98"},"content":"            throw new ParserException(errorMessage);","lastModifiedDate":"2021-09-24"},{"lineNumber":214,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":215,"author":{"gitId":"Woolicious98"},"content":"        return new DateCommand(LocalDate.parse(arguments, CommonFormat.formatterDateOnly));","lastModifiedDate":"2021-09-24"},{"lineNumber":216,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":217,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":218,"author":{"gitId":"Woolicious98"},"content":"    private boolean isValidDateTimeFormat(String s) {","lastModifiedDate":"2021-09-24"},{"lineNumber":219,"author":{"gitId":"Woolicious98"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2021-09-24"},{"lineNumber":220,"author":{"gitId":"Woolicious98"},"content":"        s \u003d s.trim();","lastModifiedDate":"2021-09-24"},{"lineNumber":221,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-24"},{"lineNumber":222,"author":{"gitId":"Woolicious98"},"content":"            LocalDateTime.parse(s, CommonFormat.formatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":223,"author":{"gitId":"Woolicious98"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-24"},{"lineNumber":224,"author":{"gitId":"Woolicious98"},"content":"            isValid \u003d false;","lastModifiedDate":"2021-09-24"},{"lineNumber":225,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":226,"author":{"gitId":"Woolicious98"},"content":"        return isValid;","lastModifiedDate":"2021-09-24"},{"lineNumber":227,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":228,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":229,"author":{"gitId":"Woolicious98"},"content":"    private boolean isValidDateFormat(String s) {","lastModifiedDate":"2021-09-24"},{"lineNumber":230,"author":{"gitId":"Woolicious98"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2021-09-24"},{"lineNumber":231,"author":{"gitId":"Woolicious98"},"content":"        s \u003d s.trim();","lastModifiedDate":"2021-09-24"},{"lineNumber":232,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-24"},{"lineNumber":233,"author":{"gitId":"Woolicious98"},"content":"            LocalDate.parse(s, CommonFormat.formatterDateOnly);","lastModifiedDate":"2021-09-24"},{"lineNumber":234,"author":{"gitId":"Woolicious98"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-24"},{"lineNumber":235,"author":{"gitId":"Woolicious98"},"content":"            isValid \u003d false;","lastModifiedDate":"2021-09-24"},{"lineNumber":236,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":237,"author":{"gitId":"Woolicious98"},"content":"        return isValid;","lastModifiedDate":"2021-09-24"},{"lineNumber":238,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":239,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":239}},{"path":"src/main/java/duke/parser/ParserException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Parser Exception class that handles exception such as invalid commands from user inputs.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class ParserException extends Exception {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    private String errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    public ParserException(String errorMessage) {","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        return errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":18}},{"path":"src/main/java/duke/storage/FileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import java.io.File;","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-12"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":" * File class that handles any reading/writing to file operations.","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"public class FileHandler {","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"    private String fileDirectory;","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"    public FileHandler(String fileDirectory) {","lastModifiedDate":"2021-09-12"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"        this.fileDirectory \u003d fileDirectory;","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"     * Method to place the given contents back into the specified file, it will overwrite all data in that specified","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"     * file.","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"     * @param fileName File to be processed.","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"     * @param contents All contents from current task list during the execution of duke.","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"     * @throws DukeException Error regarding writing to file issues.","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"    public void writeToFile(String fileName, String contents) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"        File directory \u003d new File(fileDirectory);","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"        directory.mkdir();","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"            FileWriter fw \u003d new FileWriter(new File(fileDirectory, fileName));","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"            fw.write(contents);","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"            fw.close();","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"            String message \u003d String.format(\"Error: An error has occurred when writing to file %s.\", fileName);","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"            throw new DukeException(message);","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"     * Method to load all contents from the specified file.","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"     * @param fileName File to be processed.","lastModifiedDate":"2021-09-24"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"     * @return All contents from the given filename.","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"     * @throws DukeException Error regarding file not found.","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"    public ArrayList\u003cString\u003e load(String fileName) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"Woolicious98"},"content":"        ArrayList\u003cString\u003e contents \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"Woolicious98"},"content":"        File f \u003d new File(fileDirectory, fileName);","lastModifiedDate":"2021-09-12"},{"lineNumber":53,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-12"},{"lineNumber":54,"author":{"gitId":"Woolicious98"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-12"},{"lineNumber":55,"author":{"gitId":"Woolicious98"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-09-12"},{"lineNumber":56,"author":{"gitId":"Woolicious98"},"content":"                contents.add(s.nextLine());","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":58,"author":{"gitId":"Woolicious98"},"content":"            return contents;","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"Woolicious98"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":60,"author":{"gitId":"Woolicious98"},"content":"            String message \u003d String.format(\"Notice: File %s not found.\", fileName);","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"Woolicious98"},"content":"            throw new DukeException(message);","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":63,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":64,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":65,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"Woolicious98":65}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.common.CommonFormat;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":" * Class that represents a Deadline Task.","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    final private static String FLAG_TYPE \u003d \"[D]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    private LocalDateTime dueDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    public Deadline(String description, String dueDate) {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"        this.dueDate \u003d convertToLocalDateTime(dueDate);","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"     * Method used to get the localdate only from the localdatetime dueDate.","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"     * @return A String representing the date of dueDate.","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"        return dueDate.format(CommonFormat.formatterDateOnly);","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"        return FLAG_TYPE + super.getStatusIcon();","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"     * Get all information of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"     * @return String containing all information of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"        return getDescription() + \" (by: \" + dueDate.format(CommonFormat.formatterPrint) + \")\";","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"        return FLAG_TYPE + \" | \" + getDoneStatus() + \" | \" + this.getDescription() + \" | \" + dueDate.format(","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"                CommonFormat.formatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Woolicious98":50}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.common.CommonFormat;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":" * Class that represents an Event Task.","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"    final private static String FLAG_TYPE \u003d \"[E]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    private LocalDateTime startDate;","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    public Event(String description, String startDate) {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"        this.startDate \u003d convertToLocalDateTime(startDate);","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"     * Method used to get the localdate only from the localdatetime startDate.","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"     * @return A String representing the date of startDate.","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"        return startDate.format(CommonFormat.formatterDateOnly);","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"        return FLAG_TYPE + super.getStatusIcon();","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"     * Get all information of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"     * @return String containing all information of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"        return getDescription() + \" (at: \" + startDate.format(CommonFormat.formatterPrint) + \")\";","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"        return FLAG_TYPE + \" | \" + getDoneStatus() + \" | \" + this.getDescription() + \" | \" + startDate.format(","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"                CommonFormat.formatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Woolicious98":50}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.common.CommonFormat;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":" * Parent Task class. Provides an abstraction to most function of a task object.","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"public class Task {","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    // Status of whether the task is completed.","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    private String description;","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"        this.description \u003d description.trim();","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"     * Get the done status of Task object in the format of 0 or 1.","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"     * @return A binary status determining if the task is done.","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"    public String getDoneStatus() {","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"            return \"1\";","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"        return \"0\";","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"        return description;","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"     * Get all information of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"     * @return String containing all information of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Woolicious98"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"Woolicious98"},"content":"        return description;","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"Woolicious98"},"content":"     * Returns a string depending on the isDone status. If the task isDone is true, \"X\" is return. Else \" \" is return.","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"Woolicious98"},"content":"     * @return isDone status icon.","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"Woolicious98"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"Woolicious98"},"content":"        String isDoneFlag \u003d \"[ ]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"Woolicious98"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"Woolicious98"},"content":"            isDoneFlag \u003d \"[X]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"Woolicious98"},"content":"        return isDoneFlag;","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":69,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":70,"author":{"gitId":"Woolicious98"},"content":"        return \" \" + \" | \" + getDoneStatus() + \" | \" + description;","lastModifiedDate":"2021-09-12"},{"lineNumber":71,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":72,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":73,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"Woolicious98"},"content":"     * Method to translate a string into a valid localdatetime variable. This is used for Task that have a date argument","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"Woolicious98"},"content":"     * such as Event or Deadline task.","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"Woolicious98"},"content":"     * @param s Given a date string from user input.","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"Woolicious98"},"content":"     * @return A converted localdatetime variable in regard to the format specified in CommonFormat.","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"Woolicious98"},"content":"     * @throws DateTimeParseException Exception dealing with wrong formatted string derives from parsing.","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"Woolicious98"},"content":"    public LocalDateTime convertToLocalDateTime(String s) throws DateTimeParseException {","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"Woolicious98"},"content":"        try {","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"Woolicious98"},"content":"            return LocalDateTime.parse(s, CommonFormat.formatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"Woolicious98"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"Woolicious98"},"content":"            throw e;","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"Woolicious98"},"content":"     * Generic function to getDate, child classes should be the one overriding it.","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":92,"author":{"gitId":"Woolicious98"},"content":"     * @return Null as there is no date in a generic Task object.","lastModifiedDate":"2021-09-24"},{"lineNumber":93,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":94,"author":{"gitId":"Woolicious98"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"Woolicious98"},"content":"        return null;","lastModifiedDate":"2021-09-24"},{"lineNumber":96,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":97,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":98,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Woolicious98":98}},{"path":"src/main/java/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import java.io.OutputStream;","lastModifiedDate":"2021-09-12"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":" * Class that handles any Task related objects and maintain a task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    private int totalNumberOfTasks \u003d 0;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    public TaskManager() {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"     * Create a ToDo task and add into tasks list.","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"    public void createToDoTask(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"        Task newTask \u003d new ToDo(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"        addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"     * Create an Event task and add into tasks list.","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"     * @param date        Start date for the event.","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"    public void createEventTask(String description, String date) {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"        Task newTask \u003d new Event(description, date);","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"        addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"     * Create a deadline task and add into tasks list.","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"     * @param date        Due date for the deadline task.","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"    public void createDeadlineTask(String description, String date) {","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"        Task newTask \u003d new Deadline(description, date);","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"        addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Woolicious98"},"content":"     * Add the given task into the tasks list.","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Woolicious98"},"content":"     * @param task Task to be added into tasks list.","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Woolicious98"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"Woolicious98"},"content":"        taskList.add(task);","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"Woolicious98"},"content":"        totalNumberOfTasks++;","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"Woolicious98"},"content":"        printTask(totalNumberOfTasks - 1);","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"Woolicious98"},"content":"        System.out.printf(\"Now you have %d tasks in the list\" + System.lineSeparator(), totalNumberOfTasks);","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Woolicious98"},"content":"     * Print all task information in the tasks list.","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Woolicious98"},"content":"    public void printAllTasks() {","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"Woolicious98"},"content":"        for (int i \u003d 0; i \u003c totalNumberOfTasks; i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"Woolicious98"},"content":"            System.out.printf(\"%s.\", i + 1);","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"Woolicious98"},"content":"            printTask(i);","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"Woolicious98"},"content":"        System.out.printf(\"There are currently %d tasks in your list.\\n\", totalNumberOfTasks);","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Woolicious98"},"content":"     * Print an individual task information in the tasks list, with reference to its index number.","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Woolicious98"},"content":"     * @param taskIndex The task index number in the tasks list to be printed out","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Woolicious98"},"content":"    public void printTask(int taskIndex) {","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"Woolicious98"},"content":"        System.out.printf(\"%s %s\" + System.lineSeparator(),","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"Woolicious98"},"content":"                taskList.get(taskIndex).getStatusIcon(),","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"Woolicious98"},"content":"                taskList.get(taskIndex).getTaskInfo()","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"Woolicious98"},"content":"        );","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"Woolicious98"},"content":"     * Set a given task to be marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"Woolicious98"},"content":"     * @param taskNumber The task index number in the tasks list to be set as done","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"Woolicious98"},"content":"    public void setTaskToDone(int taskNumber) {","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"Woolicious98"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e totalNumberOfTasks) {","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"Woolicious98"},"content":"            System.out.println(\"Error: task not found.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"Woolicious98"},"content":"            return;","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"Woolicious98"},"content":"        int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"Woolicious98"},"content":"        taskList.get(taskIndex).setDone(true);","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"Woolicious98"},"content":"        printTask(taskIndex);","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-12"},{"lineNumber":108,"author":{"gitId":"Woolicious98"},"content":"     * Delete the task given by its index in the taskList.","lastModifiedDate":"2021-09-12"},{"lineNumber":109,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-12"},{"lineNumber":110,"author":{"gitId":"Woolicious98"},"content":"     * @param taskNumber Specified task number by list command. Its taskIndex will be taskNumber - 1.","lastModifiedDate":"2021-09-12"},{"lineNumber":111,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-12"},{"lineNumber":112,"author":{"gitId":"Woolicious98"},"content":"    public void deleteTask(int taskNumber) {","lastModifiedDate":"2021-09-12"},{"lineNumber":113,"author":{"gitId":"Woolicious98"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e totalNumberOfTasks) {","lastModifiedDate":"2021-09-12"},{"lineNumber":114,"author":{"gitId":"Woolicious98"},"content":"            System.out.println(\"Error: task not found.\");","lastModifiedDate":"2021-09-12"},{"lineNumber":115,"author":{"gitId":"Woolicious98"},"content":"            return;","lastModifiedDate":"2021-09-12"},{"lineNumber":116,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":117,"author":{"gitId":"Woolicious98"},"content":"        int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-09-12"},{"lineNumber":118,"author":{"gitId":"Woolicious98"},"content":"        String taskDescription \u003d","lastModifiedDate":"2021-09-12"},{"lineNumber":119,"author":{"gitId":"Woolicious98"},"content":"                taskList.get(taskIndex).getStatusIcon() + \" \" + taskList.get(taskIndex).getTaskInfo();","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"Woolicious98"},"content":"        taskList.remove(taskIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"Woolicious98"},"content":"        totalNumberOfTasks -\u003d 1;","lastModifiedDate":"2021-09-12"},{"lineNumber":122,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-09-12"},{"lineNumber":123,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(taskDescription);","lastModifiedDate":"2021-09-12"},{"lineNumber":124,"author":{"gitId":"Woolicious98"},"content":"        System.out.printf(\"Now you have %d tasks in the list\" + System.lineSeparator(), totalNumberOfTasks);","lastModifiedDate":"2021-09-12"},{"lineNumber":125,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":126,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":127,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":128,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":129,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":130,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":131,"author":{"gitId":"Woolicious98"},"content":"        String data \u003d \"\";","lastModifiedDate":"2021-09-12"},{"lineNumber":132,"author":{"gitId":"Woolicious98"},"content":"        String separator \u003d \" | \";","lastModifiedDate":"2021-09-12"},{"lineNumber":133,"author":{"gitId":"Woolicious98"},"content":"        for (int i \u003d 0; i \u003c totalNumberOfTasks; i++) {","lastModifiedDate":"2021-09-12"},{"lineNumber":134,"author":{"gitId":"Woolicious98"},"content":"            data +\u003d taskList.get(i) + System.lineSeparator();","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":136,"author":{"gitId":"Woolicious98"},"content":"        return data;","lastModifiedDate":"2021-09-12"},{"lineNumber":137,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":138,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":139,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":140,"author":{"gitId":"Woolicious98"},"content":"     * Method to gather contents from input file that is handled by a file handler and save into the task list. This","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"Woolicious98"},"content":"     * method is usually run at the setup phase of duke. Any task information that do not comply with the existing","lastModifiedDate":"2021-09-24"},{"lineNumber":142,"author":{"gitId":"Woolicious98"},"content":"     * format guidelines will be discarded and ignored.","lastModifiedDate":"2021-09-24"},{"lineNumber":143,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":144,"author":{"gitId":"Woolicious98"},"content":"     * @param contents Contents from a text file that contains a previous saved task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":145,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":146,"author":{"gitId":"Woolicious98"},"content":"    public void processContentsFromFile(ArrayList\u003cString\u003e contents) {","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"Woolicious98"},"content":"        PrintStream originalStream \u003d System.out;","lastModifiedDate":"2021-09-24"},{"lineNumber":148,"author":{"gitId":"Woolicious98"},"content":"        PrintStream noOutputStream \u003d new PrintStream(new OutputStream() {","lastModifiedDate":"2021-09-24"},{"lineNumber":149,"author":{"gitId":"Woolicious98"},"content":"            public void write(int b) {","lastModifiedDate":"2021-09-24"},{"lineNumber":150,"author":{"gitId":"Woolicious98"},"content":"                // NO-OP","lastModifiedDate":"2021-09-24"},{"lineNumber":151,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-24"},{"lineNumber":152,"author":{"gitId":"Woolicious98"},"content":"        });","lastModifiedDate":"2021-09-24"},{"lineNumber":153,"author":{"gitId":"Woolicious98"},"content":"        System.setOut(noOutputStream);","lastModifiedDate":"2021-09-24"},{"lineNumber":154,"author":{"gitId":"Woolicious98"},"content":"        for (String s : contents) {","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"Woolicious98"},"content":"            System.out.println(s);","lastModifiedDate":"2021-09-24"},{"lineNumber":156,"author":{"gitId":"Woolicious98"},"content":"            try {","lastModifiedDate":"2021-09-24"},{"lineNumber":157,"author":{"gitId":"Woolicious98"},"content":"                addTaskFromContent(s);","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"Woolicious98"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-24"},{"lineNumber":159,"author":{"gitId":"Woolicious98"},"content":"                System.setOut(originalStream);","lastModifiedDate":"2021-09-24"},{"lineNumber":160,"author":{"gitId":"Woolicious98"},"content":"                System.out.printf(\"Error: Invalid date detected.\\n%s\\n\", s);","lastModifiedDate":"2021-09-24"},{"lineNumber":161,"author":{"gitId":"Woolicious98"},"content":"                System.setOut(noOutputStream);","lastModifiedDate":"2021-09-24"},{"lineNumber":162,"author":{"gitId":"Woolicious98"},"content":"            } catch (TaskManagerException e) {","lastModifiedDate":"2021-09-24"},{"lineNumber":163,"author":{"gitId":"Woolicious98"},"content":"                System.setOut(originalStream);","lastModifiedDate":"2021-09-24"},{"lineNumber":164,"author":{"gitId":"Woolicious98"},"content":"                System.out.println(e);","lastModifiedDate":"2021-09-24"},{"lineNumber":165,"author":{"gitId":"Woolicious98"},"content":"                System.setOut(noOutputStream);","lastModifiedDate":"2021-09-24"},{"lineNumber":166,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"Woolicious98"},"content":"        System.setOut(originalStream);","lastModifiedDate":"2021-09-24"},{"lineNumber":169,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-12"},{"lineNumber":172,"author":{"gitId":"Woolicious98"},"content":"     * Add given string content from file input into the tasks list.","lastModifiedDate":"2021-09-12"},{"lineNumber":173,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-12"},{"lineNumber":174,"author":{"gitId":"Woolicious98"},"content":"     * @param contents A task information given by a file input.","lastModifiedDate":"2021-09-12"},{"lineNumber":175,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-12"},{"lineNumber":176,"author":{"gitId":"Woolicious98"},"content":"    private void addTaskFromContent(String contents) throws DateTimeParseException, TaskManagerException {","lastModifiedDate":"2021-09-24"},{"lineNumber":177,"author":{"gitId":"Woolicious98"},"content":"        String[] contentArray \u003d contents.split(\"\\\\|\");","lastModifiedDate":"2021-09-12"},{"lineNumber":178,"author":{"gitId":"Woolicious98"},"content":"        switch (contentArray[0].trim()) {","lastModifiedDate":"2021-09-12"},{"lineNumber":179,"author":{"gitId":"Woolicious98"},"content":"        case \"[T]\":","lastModifiedDate":"2021-09-12"},{"lineNumber":180,"author":{"gitId":"Woolicious98"},"content":"            if (contentArray.length \u003c 3) {","lastModifiedDate":"2021-09-12"},{"lineNumber":181,"author":{"gitId":"Woolicious98"},"content":"                throw new TaskManagerException(getInvalidFileInputMessage(contents));","lastModifiedDate":"2021-09-24"},{"lineNumber":182,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":183,"author":{"gitId":"Woolicious98"},"content":"            createToDoTask(contentArray[2].trim());","lastModifiedDate":"2021-09-12"},{"lineNumber":184,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-12"},{"lineNumber":185,"author":{"gitId":"Woolicious98"},"content":"        case \"[D]\":","lastModifiedDate":"2021-09-12"},{"lineNumber":186,"author":{"gitId":"Woolicious98"},"content":"            if (contentArray.length \u003c 4) {","lastModifiedDate":"2021-09-12"},{"lineNumber":187,"author":{"gitId":"Woolicious98"},"content":"                throw new TaskManagerException(getInvalidFileInputMessage(contents));","lastModifiedDate":"2021-09-24"},{"lineNumber":188,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":189,"author":{"gitId":"Woolicious98"},"content":"            createDeadlineTask(contentArray[2].trim(), contentArray[3].trim());","lastModifiedDate":"2021-09-12"},{"lineNumber":190,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-12"},{"lineNumber":191,"author":{"gitId":"Woolicious98"},"content":"        case \"[E]\":","lastModifiedDate":"2021-09-12"},{"lineNumber":192,"author":{"gitId":"Woolicious98"},"content":"            if (contentArray.length \u003c 4) {","lastModifiedDate":"2021-09-12"},{"lineNumber":193,"author":{"gitId":"Woolicious98"},"content":"                throw new TaskManagerException(getInvalidFileInputMessage(contents));","lastModifiedDate":"2021-09-24"},{"lineNumber":194,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":195,"author":{"gitId":"Woolicious98"},"content":"            createEventTask(contentArray[2].trim(), contentArray[3].trim());","lastModifiedDate":"2021-09-12"},{"lineNumber":196,"author":{"gitId":"Woolicious98"},"content":"            break;","lastModifiedDate":"2021-09-12"},{"lineNumber":197,"author":{"gitId":"Woolicious98"},"content":"        default:","lastModifiedDate":"2021-09-12"},{"lineNumber":198,"author":{"gitId":"Woolicious98"},"content":"            throw new TaskManagerException(getInvalidFileInputMessage(contents));","lastModifiedDate":"2021-09-24"},{"lineNumber":199,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":200,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":201,"author":{"gitId":"Woolicious98"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2021-09-12"},{"lineNumber":202,"author":{"gitId":"Woolicious98"},"content":"        if (contentArray[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-09-12"},{"lineNumber":203,"author":{"gitId":"Woolicious98"},"content":"            isDone \u003d true;","lastModifiedDate":"2021-09-12"},{"lineNumber":204,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":205,"author":{"gitId":"Woolicious98"},"content":"        taskList.get(totalNumberOfTasks - 1).setDone(isDone);","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":207,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":208,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":209,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-12"},{"lineNumber":210,"author":{"gitId":"Woolicious98"},"content":"     * Method to get the content in which causes the invalid error when placing data from text file.","lastModifiedDate":"2021-09-24"},{"lineNumber":211,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-12"},{"lineNumber":212,"author":{"gitId":"Woolicious98"},"content":"     * @param s The input that trigger the error.","lastModifiedDate":"2021-09-12"},{"lineNumber":213,"author":{"gitId":"Woolicious98"},"content":"     * @return The full error message of invalid format.","lastModifiedDate":"2021-09-24"},{"lineNumber":214,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-12"},{"lineNumber":215,"author":{"gitId":"Woolicious98"},"content":"    private String getInvalidFileInputMessage(String s) {","lastModifiedDate":"2021-09-24"},{"lineNumber":216,"author":{"gitId":"Woolicious98"},"content":"        return String.format(\"Error: Invalid input format. \\\"%s\\\"\\n\", s);","lastModifiedDate":"2021-09-24"},{"lineNumber":217,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":218,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":219,"author":{"gitId":"Woolicious98"},"content":"    public void printTaskOnDate(String date) {","lastModifiedDate":"2021-09-24"},{"lineNumber":220,"author":{"gitId":"Woolicious98"},"content":"        for (int i \u003d 0; i \u003c totalNumberOfTasks; i++) {","lastModifiedDate":"2021-09-24"},{"lineNumber":221,"author":{"gitId":"Woolicious98"},"content":"            if (doesTaskHasDate(taskList.get(i))) {","lastModifiedDate":"2021-09-24"},{"lineNumber":222,"author":{"gitId":"Woolicious98"},"content":"                if (taskList.get(i).getDate().equals(date)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":223,"author":{"gitId":"Woolicious98"},"content":"                    printTask(i);","lastModifiedDate":"2021-09-24"},{"lineNumber":224,"author":{"gitId":"Woolicious98"},"content":"                }","lastModifiedDate":"2021-09-24"},{"lineNumber":225,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-24"},{"lineNumber":226,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":227,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":228,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":229,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":230,"author":{"gitId":"Woolicious98"},"content":"     * Method that ensure the Task has a date argument tag in it. For example Deadline and Event are the current only","lastModifiedDate":"2021-09-24"},{"lineNumber":231,"author":{"gitId":"Woolicious98"},"content":"     * ones.","lastModifiedDate":"2021-09-24"},{"lineNumber":232,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":233,"author":{"gitId":"Woolicious98"},"content":"     * @param t Given a task object to be tested on.","lastModifiedDate":"2021-09-24"},{"lineNumber":234,"author":{"gitId":"Woolicious98"},"content":"     * @return Whether the Task has the date attribute argument.","lastModifiedDate":"2021-09-24"},{"lineNumber":235,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":236,"author":{"gitId":"Woolicious98"},"content":"    private boolean doesTaskHasDate(Task t) {","lastModifiedDate":"2021-09-24"},{"lineNumber":237,"author":{"gitId":"Woolicious98"},"content":"        return t instanceof Event || t instanceof Deadline;","lastModifiedDate":"2021-09-24"},{"lineNumber":238,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":239,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":240,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":241,"author":{"gitId":"Woolicious98"},"content":"     * Method to find all task that contains the given keyword.","lastModifiedDate":"2021-09-24"},{"lineNumber":242,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":243,"author":{"gitId":"Woolicious98"},"content":"     * @param keyword User given keyword to filter out Tasks in task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":244,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":245,"author":{"gitId":"Woolicious98"},"content":"    public void findTask(String keyword) {","lastModifiedDate":"2021-09-24"},{"lineNumber":246,"author":{"gitId":"Woolicious98"},"content":"        if (keyword \u003d\u003d null || keyword.isBlank()) {","lastModifiedDate":"2021-09-24"},{"lineNumber":247,"author":{"gitId":"Woolicious98"},"content":"            System.out.println(\"Error: keyword is non existent.\");","lastModifiedDate":"2021-09-24"},{"lineNumber":248,"author":{"gitId":"Woolicious98"},"content":"            return;","lastModifiedDate":"2021-09-24"},{"lineNumber":249,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":250,"author":{"gitId":"Woolicious98"},"content":"        for (int i \u003d 0; i \u003c totalNumberOfTasks; i++) {","lastModifiedDate":"2021-09-24"},{"lineNumber":251,"author":{"gitId":"Woolicious98"},"content":"            if (isKeywordInside(taskList.get(i).getDescription(), keyword)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":252,"author":{"gitId":"Woolicious98"},"content":"                printTask(i);","lastModifiedDate":"2021-09-24"},{"lineNumber":253,"author":{"gitId":"Woolicious98"},"content":"            }","lastModifiedDate":"2021-09-24"},{"lineNumber":254,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":255,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":256,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":257,"author":{"gitId":"Woolicious98"},"content":"    private boolean isKeywordInside(String description, String keyword) {","lastModifiedDate":"2021-09-24"},{"lineNumber":258,"author":{"gitId":"Woolicious98"},"content":"        return description.contains(keyword);","lastModifiedDate":"2021-09-24"},{"lineNumber":259,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":260,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":261,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":262,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"Woolicious98":262}},{"path":"src/main/java/duke/task/TaskManagerException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Exception class that handles all TaskManager custom exception during any Task related execution.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class TaskManagerException extends Exception {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    private String errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    public TaskManagerException(String errorMessage) {","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"        return errorMessage;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":18}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":" * Class that represents a Todo Task.","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"    final private static String FLAG_TYPE \u003d \"[T]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"     * Return the status icon of todo task which is a \"[T]\".","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"     * @return Status icon of todo task","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"        return FLAG_TYPE + super.getStatusIcon();","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"        return FLAG_TYPE + \" | \" + getDoneStatus() + \" | \" + this.getDescription();","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Woolicious98":29}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"package duke.ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"import duke.command.CommandException;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"import duke.parser.ParserException;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":" * User interface class that handles any I/O with user.","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"public class Ui {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"    final static String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"    private Scanner in;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"    public Ui() {","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Woolicious98"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Woolicious98"},"content":"    public void printExitMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"Woolicious98"},"content":"    public void printWelcomeMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"Woolicious98"},"content":"        System.out.printf(\"%s\\n\", getLogoMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"Woolicious98"},"content":"    private static String getLogoMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"Woolicious98"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"Woolicious98"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"Woolicious98"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"Woolicious98"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"Woolicious98"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"Woolicious98"},"content":"        return logo;","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"Woolicious98"},"content":"    public String getUserInput() {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"Woolicious98"},"content":"        System.out.printf(\"\u003e\u003e\u003e \");","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"Woolicious98"},"content":"        return in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"Woolicious98"},"content":"    public void printMessage(String... data) {","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"Woolicious98"},"content":"        for (String s : data) {","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"Woolicious98"},"content":"            System.out.println(s);","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"Woolicious98"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"Woolicious98"},"content":"    public void printDukeExceptionMessage(DukeException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(e.toString());","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"Woolicious98"},"content":"    public void printParserExceptionMessage(ParserException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(e.toString());","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"Woolicious98"},"content":"    public void printCommandExceptionMessage(CommandException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(e.toString());","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"Woolicious98"},"content":"    public void printFileLoadingMessage(String filename) {","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"Woolicious98"},"content":"        System.out.printf(\"Loading data from %s...\\n\", filename);","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"Woolicious98"},"content":"    public void printFileLoadingDoneMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(\"Finish Loading.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"Woolicious98"},"content":"    public void printLine() {","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"Woolicious98"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"Woolicious98"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"Woolicious98"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"Woolicious98"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Woolicious98":83}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Woolicious98"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"Woolicious98"},"content":"todo borrow book","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Woolicious98"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Woolicious98"},"content":"deadline return book","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Woolicious98"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Woolicious98"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Woolicious98"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Woolicious98"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Woolicious98"},"content":"done 0","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Woolicious98"},"content":"done 2","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Woolicious98"},"content":"done 1","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Woolicious98"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Woolicious98"},"content":"done X","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Woolicious98"},"content":"add book","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Woolicious98"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Woolicious98"},"content":"exit","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Woolicious98"},"content":"bye","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Woolicious98":17}}]
