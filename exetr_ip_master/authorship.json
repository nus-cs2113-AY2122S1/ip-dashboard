[{"path":"data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"D | 1 | assignment 1 | 26/09/2021 2359","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"E | 0 | lecture | 27/09/2021 1400 | 27/09/2021 1600 | ","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"E | 1 | tutorial | 26/09/2021 1500 | 26/09/2021 1630 | ","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"D | 0 | assignment 2 | 01/11/2021 2359","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"exetr":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"# Esteban User Guide","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"### Track Tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"Estaban helps users to track their tasks in the form of todos, deadlines and events","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"### Specify Dates","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"Dates can be added to easily track when something is occurring or when it is due","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"### Mark as Done","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"Tasks can be marked as completed","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"### Filerting of Tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"Tasks can be easily filtered based on a search string. Tasks occuring today can also be easily listed!","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"### Persistent Storage","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"Program data is continuously updated and persists beyond exiting the program so no data is lost!","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"### `/todo \u003cdescription\u003e` - Create a new ToDo","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"Add a todo task with a description.","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"`/todo complete readings`","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"Overview of newly added task and current number of tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"\u003e /todo complete readings","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"  (+) Added: [t] [ ] complete readings","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"  (i) You have 1 tasks in the list","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"### `/deadline \u003cdescription\u003e -by \u003cdd/mm/yyyy hhmm\u003e` - Create a new Deadline","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"Add a deadline task with a description and due date.","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"Example of usage:","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"`/deadline assignment 1 -by 26/09/2021 2359`","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"Overview of newly added task and current number of tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"\u003e /deadline assignment 1 -by 26/09/2021 2359","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"  (+) Added: [d] [ ] assignment 1 (By: 26/09/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"  (i) You have 2 tasks in the list","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"### `/event \u003cdescription\u003e -from \u003cdd/mm/yyyy hhmm\u003e -to \u003cdd/mm/yyyy hhmm\u003e` - Create a new Event","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"Add an event task with a description and starting and ending times.","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"exetr"},"content":"Example of usage:","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"exetr"},"content":"`/event lecture -from 27/09/2021 1400 -to 27/09/2021 1600`","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"exetr"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"exetr"},"content":"Overview of newly added task and current number of tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"exetr"},"content":"\u003e /event lecture -from 27/09/2021 1400 -to 27/09/2021 1600","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"exetr"},"content":"  (+) Added: [e] [ ] lecture (27/09/2021 1400 to 27/09/2021 1600)","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"exetr"},"content":"  (i) You have 3 tasks in the list","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"exetr"},"content":"### `/list\u003e` - Show all tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"exetr"},"content":"Show all tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"exetr"},"content":"Example of usage:","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"exetr"},"content":"`/list`","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"exetr"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"exetr"},"content":"Overview of all tasks which include their types, status, description, due date and time (if applicatble), starting and","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"exetr"},"content":"ending time (if applicable).","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"exetr"},"content":"\u003e /list","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"exetr"},"content":"1. [t] [ ] complete readings","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"exetr"},"content":"2. [d] [ ] assignment 1 (By: 26/09/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"exetr"},"content":"3. [e] [ ] lecture (27/09/2021 1400 to 27/09/2021 1600)","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"exetr"},"content":"### `/today` - Show all tasks occurring today","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"exetr"},"content":"Shows a list of deadlines that are due today and events that are starting today","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"exetr"},"content":"Example of usage:","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"exetr"},"content":"`/today`","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"exetr"},"content":"Overview of tasks that are occuring today","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"exetr"},"content":"\u003e /today","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"exetr"},"content":"[d] [X] assignment 1 (By: 26/09/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"exetr"},"content":"[e] [ ] tutorial (26/09/2021 1500 to 26/09/2021 1630)","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":123,"author":{"gitId":"exetr"},"content":"### `/find \u003csearchTerm\u003e` - Show all tasks with descriptions containing the search term","lastModifiedDate":"2021-09-26"},{"lineNumber":124,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"exetr"},"content":"Shows a list of tasks with descriptions containing the search term","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":127,"author":{"gitId":"exetr"},"content":"Example of usage:","lastModifiedDate":"2021-09-26"},{"lineNumber":128,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":129,"author":{"gitId":"exetr"},"content":"`/find asignment`","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"exetr"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":132,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":133,"author":{"gitId":"exetr"},"content":"Overview of tasks that match the search term","lastModifiedDate":"2021-09-26"},{"lineNumber":134,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":135,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"exetr"},"content":"\u003e /find assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"exetr"},"content":"[d] [X] assignment 1 (By: 26/09/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"exetr"},"content":"[d] [ ] assignment 2 (By: 01/11/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"exetr"},"content":"### `/done \u003ctaskID\u003e` - Mark as Done","lastModifiedDate":"2021-09-26"},{"lineNumber":144,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":145,"author":{"gitId":"exetr"},"content":"Mark a task as complete based on their identifier (obtained from `/list`)","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":147,"author":{"gitId":"exetr"},"content":"Example of usage:","lastModifiedDate":"2021-09-26"},{"lineNumber":148,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":149,"author":{"gitId":"exetr"},"content":"`/done 3`","lastModifiedDate":"2021-09-26"},{"lineNumber":150,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":151,"author":{"gitId":"exetr"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":152,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":153,"author":{"gitId":"exetr"},"content":"Overview of task that has been marked as done.","lastModifiedDate":"2021-09-26"},{"lineNumber":154,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":155,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":156,"author":{"gitId":"exetr"},"content":"\u003e /list","lastModifiedDate":"2021-09-26"},{"lineNumber":157,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":158,"author":{"gitId":"exetr"},"content":"1. [d] [X] assignment 1 (By: 26/09/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":159,"author":{"gitId":"exetr"},"content":"2. [e] [ ] lecture (27/09/2021 1400 to 27/09/2021 1600)","lastModifiedDate":"2021-09-26"},{"lineNumber":160,"author":{"gitId":"exetr"},"content":"3. [e] [ ] tutorial (26/09/2021 1500 to 26/09/2021 1630)","lastModifiedDate":"2021-09-26"},{"lineNumber":161,"author":{"gitId":"exetr"},"content":"4. [d] [ ] assignment 2 (By: 01/11/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":162,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":163,"author":{"gitId":"exetr"},"content":"\u003e /done 3","lastModifiedDate":"2021-09-26"},{"lineNumber":164,"author":{"gitId":"exetr"},"content":"  (+) Marked as Done: [e] [X] tutorial (26/09/2021 1500 to 26/09/2021 1630)","lastModifiedDate":"2021-09-26"},{"lineNumber":165,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":167,"author":{"gitId":"exetr"},"content":"### `/delete \u003ctaskID\u003e` - Mark as Done","lastModifiedDate":"2021-09-26"},{"lineNumber":168,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":169,"author":{"gitId":"exetr"},"content":"Delete a task based on their identifier (obtained from `/list`)","lastModifiedDate":"2021-09-26"},{"lineNumber":170,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":171,"author":{"gitId":"exetr"},"content":"Example of usage:","lastModifiedDate":"2021-09-26"},{"lineNumber":172,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":173,"author":{"gitId":"exetr"},"content":"`/delete 1`","lastModifiedDate":"2021-09-26"},{"lineNumber":174,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":175,"author":{"gitId":"exetr"},"content":"Expected outcome:","lastModifiedDate":"2021-09-26"},{"lineNumber":176,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":177,"author":{"gitId":"exetr"},"content":"Overview of task that has beendeleted.","lastModifiedDate":"2021-09-26"},{"lineNumber":178,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":179,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":180,"author":{"gitId":"exetr"},"content":"\u003e /list","lastModifiedDate":"2021-09-26"},{"lineNumber":181,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":182,"author":{"gitId":"exetr"},"content":"1. [t] [ ] complete readings","lastModifiedDate":"2021-09-26"},{"lineNumber":183,"author":{"gitId":"exetr"},"content":"2. [d] [X] assignment 1 (By: 26/09/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":184,"author":{"gitId":"exetr"},"content":"3. [e] [ ] lecture (27/09/2021 1400 to 27/09/2021 1600)","lastModifiedDate":"2021-09-26"},{"lineNumber":185,"author":{"gitId":"exetr"},"content":"4. [e] [ ] tutorial (26/09/2021 1500 to 26/09/2021 1630)","lastModifiedDate":"2021-09-26"},{"lineNumber":186,"author":{"gitId":"exetr"},"content":"5. [d] [ ] assignment 2 (By: 01/11/2021 2359)","lastModifiedDate":"2021-09-26"},{"lineNumber":187,"author":{"gitId":"exetr"},"content":"------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":188,"author":{"gitId":"exetr"},"content":"\u003e /delete 1","lastModifiedDate":"2021-09-26"},{"lineNumber":189,"author":{"gitId":"exetr"},"content":"  (-) Removed: [t] [ ] complete readings","lastModifiedDate":"2021-09-26"},{"lineNumber":190,"author":{"gitId":"exetr"},"content":"  (i) You have 4 tasks in the list","lastModifiedDate":"2021-09-26"},{"lineNumber":191,"author":{"gitId":"exetr"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":192,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":193,"author":{"gitId":"exetr"},"content":"### `/bye` - Exits the program","lastModifiedDate":"2021-09-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":195,"author":{"gitId":"exetr"},"content":"Quit the program","lastModifiedDate":"2021-09-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":199,"author":{"gitId":"exetr"},"content":"`/bye`","lastModifiedDate":"2021-09-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":203,"author":{"gitId":"exetr"},"content":"Goodbye message","lastModifiedDate":"2021-09-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":205,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":206,"author":{"gitId":"exetr"},"content":"\u003e /bye","lastModifiedDate":"2021-09-26"},{"lineNumber":207,"author":{"gitId":"exetr"},"content":"Gracias! Hope to see you again soon!","lastModifiedDate":"2021-09-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"exetr":182,"-":26}},{"path":"src/main/java/Esteban.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"import commands.Command;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"import commands.Parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":" * Esteban is a command-line based program that acts as a task tracker,","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * helping users manage their todos, events and deadlines","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" *","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" * @author exetr","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" * @version 0.2","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"public class Esteban {","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"     * Main method and entrypoint for the program","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"     * @param args This is the list of arguments specified on runtime","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"        TextUI ui \u003d new TextUI();","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"        Storage dataStore \u003d new Storage();","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"        TaskList tasks \u003d new TaskList(dataStore.read());","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"        // Continue to read, parse and execute user commands until exit command is issued","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"        while(true) {","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"            // Gets complete line of user input","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"            String userInput \u003d ui.getCommand();","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"            // Parses line of input and creates relevant command object","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"            Command userCommand \u003d Parser.parseCommand(userInput);","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"            // Executes logic of specific command object","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"            userCommand.execute(ui, tasks, dataStore);","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"            // Exit condition: check if","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"            if(userCommand.isStop()) {","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"exetr":35,"-":2}},{"path":"src/main/java/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"import static common.Message.MESSAGE_EXIT;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" * Represents the /bye command","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" * This command terminates the program","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"public class ByeCommand extends Command{","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/bye\";","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"     * Sole constructor, no arguments","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    public ByeCommand() {}","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * Prints exit message","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"        ui.showMessage(MESSAGE_EXIT);","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":33}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":" * The Command class is an abstract class representing teh underlying command object","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * It is inherited by all other command objects","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"     * Executes the command, performs required operations and updates data.txt.","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"     * This method is only meant to be called by child classes","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"        throw new UnsupportedOperationException();","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     * Returns whether stop command has been issued by user","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     * @return Boolean true if stop command has been issued, false if other commands issued","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"    public Boolean isStop() {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"        return this instanceof ByeCommand;","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":30}},{"path":"src/main/java/commands/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":" * This class contains all types of commands supported by the program","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"public enum CommandType {","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"    BYE, LIST, TODO, DEADLINE, EVENT, DONE, UNKNOWN, DELETE, TODAY, FIND","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"exetr":8}},{"path":"src/main/java/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import task.Deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"import static common.Error.INVALID_DATETIME_FORMAT;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"import static common.Message.ADDED_TASK;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_FORMAT_DEADLINE;","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":" * Represents the /deadline command","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":" * This command creates a new Deadline task","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"public class DeadlineCommand extends Command{","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/deadline\";","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    protected String args;","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"    protected String description;","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    protected String by;","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     * Sole constructor","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"     * @param args Additional arguments supplied by user after COMMAND_WORD","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    public DeadlineCommand(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * Splits arguments supplied by user after COMMAND_WORD into description","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     * and when deadline is due","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * Creates new Deadline object and adds it to tasks object and writes changes","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * into data.txt, displaying success messages when complete. Error messages are","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * also output if command is malformed or invalid date format had been input","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"            description \u003d args.substring(10, args.indexOf(\"-by\")).strip();","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"            by \u003d args.substring(args.indexOf(\"-by\") + 4).strip();","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"            Deadline newDeadline \u003d new Deadline(description, by, false);","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"            tasks.addTask(newDeadline);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"            String userOutput \u003d String.format(ADDED_TASK, newDeadline, tasks.getSize());","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"            ui.showMessage(userOutput);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"            data.write(tasks.getTaskList());","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_FORMAT_DEADLINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"            ui.showMessage(INVALID_DATETIME_FORMAT);","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":62}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import task.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_INVALID_TASK;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"import static common.Message.DELETE_TASK;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_FORMAT_DELETE;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"import static common.Message.DONE_TASK;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":" * Represents the /delete command","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":" * This command removes an existing task","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/delete\";","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    protected String args;","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    protected int taskID;","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     * Sole constructor","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     * @param args Additional arguments supplied by user after COMMAND_WORD","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"    public DeleteCommand(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"     * Splits arguments supplied user after COMMAND_WORD into taskID.","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * Calls method from tasks container to remove specified task,","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * write changes into data.txt, displaying success messages when complete.","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     * Error messages also output if command is malformed or invalid taskID had","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * been specified by user","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"            String[] argList \u003d args.split(\" \");","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"            if (argList.length \u003d\u003d 2) {","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"                taskID \u003d Integer.parseInt(argList[1]);","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"                Task deletedTask \u003d tasks.deleteTask(taskID);","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"                ui.showMessage(String.format(DELETE_TASK, deletedTask, tasks.getSize()));","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"                data.write(tasks.getTaskList());","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"            } else {","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"                ui.showMessage(ERROR_INVALID_TASK);","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_FORMAT_DELETE);","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_INVALID_TASK);","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_INVALID_TASK);","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":63}},{"path":"src/main/java/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_FORMAT_DONE;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_INVALID_TASK;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"import static common.Message.DONE_TASK;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" * Represents the /done command","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":" * This command marks a specified task as complete","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/done\";","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    protected String args;","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    protected int taskID;","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     * Sole constructor","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * @param args Additional arguments supplied by user after COMMAND_WORD","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    public DoneCommand(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"     * Splits arguments supplied user after COMMAND_WORD into taskID.","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"     * Calls method from tasks container to mark specified task as done,","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"     * writes changes into data.txt, displaying success messages when complete.","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * Error messages also output if command is malformed or invalid taskID had","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * been specified by user.","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class.","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"            String[] argList \u003d args.split(\" \");","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"            if (argList.length \u003d\u003d 2) {","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"                taskID \u003d Integer.parseInt(argList[1]);","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"                tasks.doneTask(taskID);","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"                ui.showMessage(String.format(DONE_TASK, tasks.getTaskInfo(taskID - 1)));","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"                data.write(tasks.getTaskList());","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"            } else {","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"                ui.showMessage(ERROR_INVALID_TASK);","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_FORMAT_DONE);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_INVALID_TASK);","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_INVALID_TASK);","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":61}},{"path":"src/main/java/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import task.Event;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"import static common.Error.INVALID_DATETIME_FORMAT;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"import static common.Message.ADDED_TASK;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_FORMAT_EVENT;","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":" * Represents the /event command","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":" * This command creates a new Event task","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/event\";","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    protected String args;","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"    protected String description;","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    protected String start;","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"    protected String end;","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"     * Sole constructor","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"     * @param args Additional arguments supplied by user after COMMAND_WORD","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"    public EventCommand(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     * Splits arguments supplied by user after COMMAND_WORD into description,","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * starting and ending times of the event.","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * Creates new Event object and adds it to the tasks container, write changes","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * into data.txt, displaying success messages when complete. Error messages are","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     * also output if command is malformed or invalid date format had been supplied","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"     * by user.","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"            description \u003d args.substring(7, args.indexOf(\"-from\")).strip();","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"            start \u003d args.substring(args.indexOf(\"-from\") + 6, args.indexOf(\"-to\")).strip();","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"            end \u003d args.substring(args.indexOf(\"-to\") + 4).strip();","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"            Event newEvent \u003d new Event(description, start, end, false);","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"            tasks.addTask(newEvent);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"            String userOutput \u003d String.format(ADDED_TASK, newEvent, tasks.getSize());","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"            ui.showMessage(userOutput);","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"            data.write(tasks.getTaskList());","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_FORMAT_EVENT);","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"            ui.showMessage(INVALID_DATETIME_FORMAT);","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":65}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"import static common.Message.MESSAGE_SEPARATOR;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_FORMAT_FIND;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" * Represents the /find command","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" * This command lists all tasks that contain a specified search term within their","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":" * descriptions.","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/find\";","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    protected String args;","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    protected String searchTerm;","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     * Sole constructor","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * @param args Additional arguments supplied by user after COMMAND_WORD","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    public FindCommand(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"     * Splits arguments supplied user after COMMAND_WORD into search term.","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"     * Iterates through task container, print string representation of task","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"     * if their descriptions contain the search term.","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * Error messages also output if command is malformed.","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"            searchTerm \u003d args.substring(6);","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"            ui.showMessage(MESSAGE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"                String description \u003d tasks.getTask(i).getDescription();","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"                if (description.contains(searchTerm)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"                    ui.showMessage(tasks.getTaskInfo(i));","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"                }","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"            ui.showMessage(MESSAGE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_FORMAT_FIND);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":54}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import static common.Message.MESSAGE_SEPARATOR;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * Represents the /list command","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" * This command lists all currently existing tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/list\";","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"     * Sole constructor, no args","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    public ListCommand() {}","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     * Upon execution, iterate through all tasks present within tasks container","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * and prints the string representation of all tasks which includes","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     * type of task, status of task, description, when it is due (if applicable),","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     * starting and ending times (if applicable)","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"        ui.showMessage(MESSAGE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"            ui.showMessage(i + 1 + \". \" + tasks.getTaskInfo(i));","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"        ui.showMessage(MESSAGE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":39}},{"path":"src/main/java/commands/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":" * Contains methods to process a complete line of user-input commands","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"public class Parser {","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"     * Based on category of command, create corresponding command object","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"     * @param input Complete line of user-input command, including both","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"     *              command keywords and additional arguments (if applicable)","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"     * @return Command object of the relevant type","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"    public static Command parseCommand(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"        Command preparedCmd;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"        switch(categoriseCommand(input)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"        case BYE:","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createBye();","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"        case LIST:","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createList();","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"        case TODO:","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createToDo(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"        case DEADLINE:","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createDeadline(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"        case EVENT:","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createEvent(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"        case DONE:","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createDone(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"        case DELETE:","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createDelete(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"        case FIND:","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createFind(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"        case TODAY:","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createToday();","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"        default:","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"            preparedCmd \u003d createUnknown();","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"        return preparedCmd;","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"    private static Command createBye() {","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"        return new ByeCommand();","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"    private static Command createList() {","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"        return new ListCommand();","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"    private static Command createUnknown() {","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"        return new UnknownCommand();","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"    private static Command createToDo(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"        return new ToDoCommand(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"    private static Command createDeadline(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"exetr"},"content":"        return new DeadlineCommand(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"exetr"},"content":"    private static Command createEvent(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"exetr"},"content":"        return new EventCommand(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"exetr"},"content":"    private static Command createDone(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"exetr"},"content":"        return new DoneCommand(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"exetr"},"content":"    private static Command createDelete(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"exetr"},"content":"        return new DeleteCommand(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"exetr"},"content":"    private static Command createFind(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"exetr"},"content":"        return new FindCommand(input);","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"exetr"},"content":"    private static Command createToday() {","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"exetr"},"content":"        return new TodayCommand();","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"exetr"},"content":"     * Compares the input entered by users and checks for the","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"exetr"},"content":"     * valid presence of command keywords of each supported command,","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"exetr"},"content":"     * returning the type of command detected","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"exetr"},"content":"     * @param input Complete line of user input","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"exetr"},"content":"     * @return CommandType Detected type of command","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"exetr"},"content":"    private static CommandType categoriseCommand(String input) {","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"exetr"},"content":"        CommandType type;","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"exetr"},"content":"        if (input.equals(ByeCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.BYE;","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"exetr"},"content":"        } else if (input.equals(ListCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.LIST;","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"exetr"},"content":"        } else if (input.startsWith(ToDoCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.TODO;","lastModifiedDate":"2021-09-25"},{"lineNumber":104,"author":{"gitId":"exetr"},"content":"        } else if (input.startsWith(DeadlineCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.DEADLINE;","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"exetr"},"content":"        } else if (input.startsWith(EventCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.EVENT;","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"exetr"},"content":"        } else if (input.startsWith(DoneCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.DONE;","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"exetr"},"content":"        } else if (input.startsWith(DeleteCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":111,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.DELETE;","lastModifiedDate":"2021-09-25"},{"lineNumber":112,"author":{"gitId":"exetr"},"content":"        } else if (input.startsWith(FindCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":113,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.FIND;","lastModifiedDate":"2021-09-25"},{"lineNumber":114,"author":{"gitId":"exetr"},"content":"        } else if (input.equals(TodayCommand.COMMAND_WORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":115,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.TODAY;","lastModifiedDate":"2021-09-25"},{"lineNumber":116,"author":{"gitId":"exetr"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":117,"author":{"gitId":"exetr"},"content":"            type \u003d CommandType.UNKNOWN;","lastModifiedDate":"2021-09-25"},{"lineNumber":118,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":119,"author":{"gitId":"exetr"},"content":"        return type;","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":121}},{"path":"src/main/java/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import task.ToDo;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import static common.Message.ADDED_TASK;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_FORMAT_TODO;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" * Represents the /todo command","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":" * This command creates a new ToDo task","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/todo\";","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    protected String args;","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    public String description;","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     * Sole constructor","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * @param args Additional arguments supplied by user after COMMAND_WORD","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    public ToDoCommand(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"     * Splits arguments supplied by user after COMMAND_WORD into description.","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"     * Creates new ToDo object and adds it to tasks container, writes changes","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"     * into data.txt, displaying success messages when complete. Error messages","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * are also output if command is malformed.","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"            description \u003d args.substring(6);","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"            ToDo newTodo \u003d new ToDo(description, false);","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"            tasks.addTask(newTodo);","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"            String userOutput \u003d String.format(ADDED_TASK, newTodo, tasks.getSize());","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"            ui.showMessage(userOutput);","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"            data.write(tasks.getTaskList());","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"            ui.showMessage(ERROR_FORMAT_TODO);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":54}},{"path":"src/main/java/commands/TodayCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import task.Deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import task.Event;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"import task.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"import static common.Message.MESSAGE_SEPARATOR;","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":" * Represents the /today command","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":" * This command lists all Event and Deadline tasks that are occurring today","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":" * COMMAND_WORD represents exact string user should provide to invoke this command","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"public class TodayCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    public static final String COMMAND_WORD \u003d \"/today\";","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    protected static LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     * Sole constructor, no args","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"    public TodayCommand() {}","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"     * Upon execution, iterate through all tasks present within tasks container,","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"     * checking for Events and Deadlines. For each event if starting date is","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"     * today, print string representation of the event which includes type, status,","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"     * description and starting and ending time of Event. For each deadline if due","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * date is today, print string representation of the event which includes type,","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * status, description and due date of the task.","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class.","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"        ui.showMessage(MESSAGE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"            Task currentTask \u003d tasks.getTask(i);","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"            if (currentTask instanceof Deadline \u0026\u0026 ((Deadline) currentTask).compareDate(today)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"                ui.showMessage(currentTask.toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"            if (currentTask instanceof Event \u0026\u0026 ((Event) currentTask).compareDate(today)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"                ui.showMessage(currentTask.toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"        ui.showMessage(MESSAGE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":54}},{"path":"src/main/java/commands/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import data.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import data.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import ui.TextUI;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import static common.Error.ERROR_INVALID_COMMAND;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * Represents a command that does not fall under commands","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" * supported by the program","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"     * Sole constructor, no arguments","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"    public UnknownCommand() {}","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"     * Outputs unrecognised command error","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"     * Overrides method from parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"     * @param ui Object that handles user IO","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     * @param tasks Object that stores current and updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * @param data Object that handles storage, read and writes to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"    public void execute(TextUI ui, TaskList tasks, Storage data) {","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"        ui.showMessage(ERROR_INVALID_COMMAND);","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"exetr":29}},{"path":"src/main/java/common/Error.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package common;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":" * This class contains all error messages that are meant to be displayed","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":" * when handling errors encountered on runtime","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"public class Error {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"    public static final String READ_IOEXCEPTION \u003d \"  (!) FATAL: Could not process data file, starting with empty data\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"    public static final String WRITE_IOEXCEPTION \u003d \"  (!) FATAL: IO Error\";","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"    public static final String FILE_NOT_EXIST \u003d \"  (!) Data file not found\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"            \"  (+) Empty data file created: %s\";","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_FORMAT_TODO \u003d \"  (!) Todo description cannot be empty!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"            \"  (!) Format: /todo \u003cdescription\u003e\";","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_FORMAT_DEADLINE \u003d \"  (!) Invalid/missing values\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"            \"  (!) Format: /deadline \u003cdescription\u003e -by \u003cdate: dd/mm/yyyy hhmm\u003e\";","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_FORMAT_EVENT \u003d \"  (!) Invalid/missing values\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"            \"  (!) Format: /event \u003cdescription\u003e -from \u003cdate: dd/mm/yyyy hhmm\u003e -to \u003cdate: dd/mm/yyyy hhmm\u003e\";","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_FORMAT_DONE \u003d \"  (!) Task ID cannot be empty!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"            \"  (!) Format: /done \u003cid\u003e\";","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_FORMAT_DELETE \u003d \"  (!) Task ID cannot be empty!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"            \"  (!) Format: /delete \u003cid\u003e\";","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_FORMAT_FIND \u003d \"  (!) Search term cannot be empty!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"            \"  (!) Format: /find \u003csearch_term\u003e\";","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_INVALID_TASK \u003d \"  (!) Task ID does not exist \u003e:(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"    public static final String ERROR_INVALID_COMMAND \u003d \"  (!) Unrecognised Command! \";","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"    public static final String INVALID_DATETIME_FORMAT \u003d \"  (!) Invalid datetime format!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"            \"  (!) Format: dd/mm/yyyy hhmm\";","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"exetr":30}},{"path":"src/main/java/common/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package common;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":" * This class contains informative messages that are output after users enter commands","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"public class Message {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"    public static final String MESSAGE_LOGO \u003d \" _____    _       _                 \\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"            + \"|  ___|  | |     | |                \\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"            + \"| |__ ___| |_ ___| |__   __ _ _ __  \\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"            + \"|  __/ __| __/ _ \\\\ \u0027_ \\\\ / _` | \u0027_ \\\\ \\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"            + \"| |__\\\\__ \\\\ ||  __/ |_) | (_| | | | |\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"            + \"\\\\____/___/\\\\__\\\\___|_.__/ \\\\__,_|_| |_|\";","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hola! Soy Esteban, what can I do for you?\";","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"    public static final String MESSAGE_EXIT \u003d \"Gracias! Hope to see you again soon!\";","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"    public static final String MESSAGE_SEPARATOR \u003d \"------------------------------------------------------------\";","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"    public static final String SUCCESS_FILE_FOUND \u003d \"  (+) Data file found: %s\";","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    public static final String SUCCESS_DATA_READ \u003d \"  (+) Loaded %d entries\";","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    public static final String ADDED_TASK \u003d \"  (+) Added: %s\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"            \"  (i) You have %d tasks in the list\";","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"    public static final String DONE_TASK \u003d \"  (+) Marked as Done: %s\";","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    public static final String DELETE_TASK \u003d \"  (-) Removed: %s\" + System.lineSeparator() +","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"            \"  (i) You have %d tasks in the list\";","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"exetr":25}},{"path":"src/main/java/data/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package data;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import task.Deadline;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import task.Event;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import task.ToDo;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"import static common.Error.FILE_NOT_EXIST;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"import static common.Error.WRITE_IOEXCEPTION;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"import static common.Message.SUCCESS_FILE_FOUND;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"import static common.Message.SUCCESS_DATA_READ;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"import java.io.File;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":" * The Storage object contains all operations related","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":" * to read and write operations on the data for the application","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"public class Storage {","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    protected String dataPath;","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"    protected static final String PATH_DELIMITER \u003d \"/\";","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"    protected static final String TASK_DELIMITER \u003d \" | \";","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"    protected static final String TASK_DELIMITER_REGEX \u003d \" \\\\| \";","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    protected static final String DONE_INDICATOR \u003d \"X\";","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"    public Storage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"        this.dataPath \u003d \"data/data.txt\";","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"     * This method validates that the directories specified","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * to contain the data.txt and the text file itself exists","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * If not, it creates directories and new files to ensure","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     * that the complete path is valid","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"     * @return File A valid file object that points to data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"    private File validatePath() {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"        String[] directories \u003d this.dataPath.split(PATH_DELIMITER);","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"        /*","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"        Check for whether ./data directory exists","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"        if not, create ./data directory","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"        */","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"        File directory \u003d new File(directories[0]);","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"            directory.mkdir();","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"        /*","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"        Check for whether ./data/data.txt exists","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"        if so, process list of tasks contained within","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"        if not, create new, empty data.txt file","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"        */","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"        File data \u003d new File(dataPath);","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"        if (!data.exists()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"            try {","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"                data.createNewFile();","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"                System.out.println(WRITE_IOEXCEPTION);","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"            String absolutePath \u003d data.getAbsolutePath();","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"            System.out.println(String.format(FILE_NOT_EXIST, absolutePath));","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"exetr"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"exetr"},"content":"            System.out.println(String.format(SUCCESS_FILE_FOUND, data.getAbsolutePath()));","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"exetr"},"content":"        return data;","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"exetr"},"content":"     * Reads and the content of data.txt specified, parses each entry","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"exetr"},"content":"     * categorising it as either a ToDo, Deadline or Event,","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"exetr"},"content":"     * storing them in an arraylist","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"exetr"},"content":"     * @return ArrayList\u003cTask\u003e This stores all tasks found within data.txt in an arraylist","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"exetr"},"content":"    public ArrayList\u003cTask\u003e read() {","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"exetr"},"content":"        File data \u003d validatePath();","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"exetr"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"exetr"},"content":"            Scanner s \u003d new Scanner(data);","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"exetr"},"content":"            // Reads data.txt line by line","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"exetr"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"exetr"},"content":"                // Split line by delimited","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"exetr"},"content":"                String[] line \u003d s.nextLine().split(TASK_DELIMITER_REGEX);","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"exetr"},"content":"                // Check status of each task","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"exetr"},"content":"                Boolean status \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"exetr"},"content":"                if (line[1].equals(\"1\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"exetr"},"content":"                    status \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"exetr"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"exetr"},"content":"                // Classify tasks into todo, deadline, event, then create corresponding objects","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"exetr"},"content":"                // Lastly, add to tasklist","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"exetr"},"content":"                switch(line[0]) {","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"exetr"},"content":"                case \"T\":","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"exetr"},"content":"                    ToDo newToDo \u003d new ToDo(line[2], status);","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"exetr"},"content":"                    tasks.add(newToDo);","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"exetr"},"content":"                    break;","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"exetr"},"content":"                case \"D\":","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"exetr"},"content":"                    Deadline newDeadline \u003d new Deadline(line[2], line[3], status);","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"exetr"},"content":"                    tasks.add(newDeadline);","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"exetr"},"content":"                    break;","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"exetr"},"content":"                case \"E\":","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"exetr"},"content":"                    Event newEvent \u003d new Event(line[2], line[3], line[4], status);","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"exetr"},"content":"                    tasks.add(newEvent);","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"exetr"},"content":"                    break;","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"exetr"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"exetr"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"exetr"},"content":"            System.out.println(\"(!) File not found\");","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"exetr"},"content":"        System.out.println(String.format(SUCCESS_DATA_READ, tasks.size()));","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"exetr"},"content":"        return tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"exetr"},"content":"     * Given an arraylist of tasks, this method converts them into a text","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"exetr"},"content":"     * representation of the objects, and overwrites data.txt with the contents","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"exetr"},"content":"     * derived from the tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"exetr"},"content":"     * @param tasks This contains the list of updated tasks as specified by the user","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"exetr"},"content":"    public void write(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"exetr"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"exetr"},"content":"            FileWriter fw \u003d new FileWriter(dataPath);","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"exetr"},"content":"            for (Task currentTask : tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"exetr"},"content":"                fw.write(getTaskData(currentTask) + System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"exetr"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"exetr"},"content":"            fw.close();","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"exetr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"exetr"},"content":"            System.out.println(WRITE_IOEXCEPTION);","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":135,"author":{"gitId":"exetr"},"content":"     * This method converts tasks into a string format to be stored within data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"exetr"},"content":"     * @param current An individual task","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"exetr"},"content":"     * @return String The textual representation of the task","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"exetr"},"content":"    private static String getTaskData(Task current) {","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"exetr"},"content":"        if (current instanceof ToDo) {","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"exetr"},"content":"            return \"T\" + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":142,"author":{"gitId":"exetr"},"content":"                    convertStatus(current.getStatus()) + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":143,"author":{"gitId":"exetr"},"content":"                    current.getDescription();","lastModifiedDate":"2021-09-25"},{"lineNumber":144,"author":{"gitId":"exetr"},"content":"        } else if (current instanceof Deadline) {","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"exetr"},"content":"            return \"D\" + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":146,"author":{"gitId":"exetr"},"content":"                    convertStatus(current.getStatus()) + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":147,"author":{"gitId":"exetr"},"content":"                    current.getDescription() + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":148,"author":{"gitId":"exetr"},"content":"                    ((Deadline) current).getTime();","lastModifiedDate":"2021-09-25"},{"lineNumber":149,"author":{"gitId":"exetr"},"content":"        } else if (current instanceof Event) {","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"exetr"},"content":"            return \"E\" + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":151,"author":{"gitId":"exetr"},"content":"                    convertStatus(current.getStatus()) + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":152,"author":{"gitId":"exetr"},"content":"                    current.getDescription() + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":153,"author":{"gitId":"exetr"},"content":"                    ((Event) current).getStart() + TASK_DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":154,"author":{"gitId":"exetr"},"content":"                    ((Event) current).getEnd() + TASK_DELIMITER;","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"exetr"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":156,"author":{"gitId":"exetr"},"content":"            return \"\";","lastModifiedDate":"2021-09-25"},{"lineNumber":157,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"exetr"},"content":"    private static int convertStatus(String status) {","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"exetr"},"content":"        if (status.equals(DONE_INDICATOR)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"exetr"},"content":"            return 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"exetr"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"exetr"},"content":"            return 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"exetr":167}},{"path":"src/main/java/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package data;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":" * The TaskList object contains the arraylist storing all tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * together with operations for accessing and modifying the arraylist","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"public class TaskList {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"     * Constructor, to create new instance with an empty list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"     * Is called when no data.txt is found","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"        this(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * Constructor, to create new instance with existing list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     * Is called when existing and valid data.txt is found","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     * @param tasks List of tasks, derived from parsing data.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"        setTaskList(tasks);","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"     * Inserts a new task into the list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * @param newTask Newly specified task by user","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"    public void addTask(Task newTask) {","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"     * Removes an existing task from list of tasks based on identifier","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"     * @param taskID Positional identifier, can be referenced from output of program","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"     * @return Task Object that had been specified for removal, used for printing details about removed task","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"     * @throws IndexOutOfBoundsException If taskID is out of range of list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"    public Task deleteTask(int taskID) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"        Task targetTask \u003d tasks.get(taskID - 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"        tasks.remove(targetTask);","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"        return targetTask;","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"     * Sets the status of a task to done based on identifier","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"     * @param taskID Positional identifier, can be referenced from output of program","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"     * @throws IndexOutOfBoundsException If taskID is out of range of list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"    public void doneTask(int taskID) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"        tasks.get(taskID - 1).setStatus(true);","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"     * Assigns specified arraylist, solely used in constructor","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"     * @param tasks Arraylist of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"    public void setTaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"exetr"},"content":"     * Provides full and current arraylist of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"exetr"},"content":"     * @return ArrayList\u003cTask\u003e Updated list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"exetr"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"exetr"},"content":"        return tasks;","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"exetr"},"content":"     * Accesses specific task within list of tasks based on identifier","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"exetr"},"content":"     * @param taskID Positional identifier, can be referenced from output of program","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"exetr"},"content":"     * @return Task Object referenced by identifier","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"exetr"},"content":"    public Task getTask(int taskID) {","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"exetr"},"content":"        return tasks.get(taskID);","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"exetr"},"content":"     * Returns textual representation of particular task based on identifier.","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"exetr"},"content":"     * Used in printing details of task to users","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"exetr"},"content":"     * @param taskID Positional identifier, can be referenced from output of program","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"exetr"},"content":"     * @return String Textual representation of task specified","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"exetr"},"content":"    public String getTaskInfo(int taskID) {","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"exetr"},"content":"        Task currentTask \u003d tasks.get(taskID);","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"exetr"},"content":"        return currentTask.toString();","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":95,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":96,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"exetr"},"content":"     * Gets current number of tasks in list","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"exetr"},"content":"     * @return int Number of tasks currently","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"exetr"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"exetr"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"exetr":103}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * Represents a single Deadline task","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" * Each event contains a description of the deadline and a status indicating whether","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" * it has been marked as done, along with a LocalDateTime representing when it is due","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"    private LocalDateTime time;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"    private static final String dtFormat \u003d \"dd/MM/yyyy HHmm\";","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"    protected DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(dtFormat);","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"     * Sole constructor for Deadline object","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"     * @param desc Represents name of object","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"     * @param timeString Represents user input of when the deadline is due in format of dd/mm/yyyy hhmm","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     * @param status Represents whether deadline is marked as done","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * @throws DateTimeParseException Thrown when user input of when deadline is due is in wrong format","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    public Deadline (String description, String timeString, Boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"        // Parses time specified in String into LocalDate Time","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"        LocalDateTime time \u003d LocalDateTime.parse(timeString, dtf);","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"        setTime(time);","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * Sets when the deadline is due","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * @param time DateTime when deadline is due","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"    public void setTime(LocalDateTime time) {","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"     * Gets string representation of when deadline is due in dd/mm/yyyy format","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"     * @return String representation of DateTime","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"    public String getTime() {","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"        return time.format(dtf);","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"     * Gets the complete string representation of an individual deadline task, meant for user output","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"     * This method overrides from the parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"     * @return String Deadline represented by string including type, status, description and when it is due","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"        return \"[d] [\" + getStatus() + \"] \" + getDescription()","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"                + \" (by: \" + getTime() + \")\";","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"     * Compares the starting date of the deadline, only called from TodayCommand","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"     * @param ld Date to compare against","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"     * @return Boolean Whether starting date is same as one specified","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"    public Boolean compareDate(LocalDate ld) {","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"        return ld.equals(time.toLocalDate());","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"exetr":67}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * Represents a single Event task","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" * Each event contains a description of the event and a status indicating whether","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" * it has been marked as done, along with two LocalDateTime representing the","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" * starting and ending times of the event","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"    private LocalDateTime start;","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"    private LocalDateTime end;","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"    private static final String dtFormat \u003d \"dd/MM/yyyy HHmm\";","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    protected DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(dtFormat);","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"     * Sole constructor for Event object","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     * @param desc Represents name of object","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"     * @param startString Represents user input of starting time in format of dd/mm/yyyy hhmm","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"     * @param endString Represents user input of ending time in format of dd/mm/yyyy hhmm","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     * @param status Represents whether event is marked as done","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     * @throws DateTimeParseException Thrown when user input of starting or ending time is in a wrong format","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"    public Event(String description, String startString, String endString, Boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"        // Parses time specified in String into LocalDate Time","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(startString, dtf);","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(endString, dtf);","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"        setTime(start, end);","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * Sets the start and ending times of event","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * @param start DateTime indicating start of event","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     * @param end DateTime indicating end of event","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"    public void setTime(LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"        this.end \u003d end;","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"     * Gets string representation of starting DateTime of event in dd/mm/yyyy hhmm format","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"     * @return String representation of DateTime","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"    public String getStart() {","lastModifiedDate":"2021-09-12"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"        return start.format(dtf);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"     * Gets string representation of ending DateTime of event","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"     * @return String representation of DateTime","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"    public String getEnd() {","lastModifiedDate":"2021-09-12"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"        return end.format(dtf);","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"     * Gets the complete string representation of an individual Event task, meant for user output.","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"     * This method overrides from the parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"     * @return String Event represented by string including type, status, description, start and end times","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"exetr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"exetr"},"content":"        return \"[e] [\" + getStatus() + \"] \" + getDescription()","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"exetr"},"content":"                + \" (\" + getStart() + \" to \" + getEnd() + \")\";","lastModifiedDate":"2021-09-12"},{"lineNumber":70,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":72,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"exetr"},"content":"     * Compares the starting date of the event, only called from TodayCommand","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"exetr"},"content":"     * @param ld Date to compare against","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"exetr"},"content":"     * @return Boolean Whether starting date is same as one specified","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"exetr"},"content":"    public Boolean compareDate(LocalDate ld) {","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"exetr"},"content":"        return ld.equals(start.toLocalDate());","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"exetr":80}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":" * The Task class represents the underlying task object","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":" * It is inherited by ToDo, Deadline and Event classes","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":" * All tasks contain a description string and isDone boolean","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"public class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"    private String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"    private Boolean isDone;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"    protected static final String DONE_INDICATOR \u003d \"X\";","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"    protected static final String NOT_DONE_INDICATOR \u003d \" \";","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"     * Sole constructor for all task objects","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"     * @param desc Represents the name of the task","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"     * @param status Represents whether the task is marked as complete","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"        setDescription(description);","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"        setStatus(isDone);","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"     * Sets the description for the current instance of task","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     * @param description Represents the name of the task","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"     * Gets the description for the current instance of task","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"     * @return String Name of the task","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"        return description;","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"     * Sets whether the task is marked as done","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"     * @param isDone Status as specified by user","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"exetr"},"content":"    public void setStatus(Boolean isDone) {","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"exetr"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"exetr"},"content":"     * Gets the string representation of whether a task is marked as done","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"exetr"},"content":"     * @return String, X if task is marked as complete, blank if it is not","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"exetr"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"exetr"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"exetr"},"content":"            return DONE_INDICATOR;","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"exetr"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"exetr"},"content":"            return NOT_DONE_INDICATOR;","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"exetr"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"exetr"},"content":"     * Gets the complete string representation of an individual task.","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"exetr"},"content":"     * This method should only be called by child classes","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"exetr"},"content":"     * @return String Task represented by string including type, status and description","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"exetr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"exetr"},"content":"        return \"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"exetr":69}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":" * Represents a single ToDo task","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":" * Each ToDo contains a description of the todo and a status indicating whether","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":" * it has been marked as done","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":"     * Sole constructor for ToDo object","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":"     * @param desc Represents name of the todo","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":"     * @param status Represents whether the todo is marked as complete","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"    public ToDo(String description, Boolean isDone) {","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"     * Gets the complete string representation of an individual ToDo task, meant for user output.","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"     * This method overrides from the parent class","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"     * @return String ToDo represented by string including type, status and description","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    @Override","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"        return \"[t] [\" + getStatus() + \"] \" + getDescription();","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"exetr":27}},{"path":"src/main/java/ui/TextUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"package ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"import static common.Message.MESSAGE_LOGO;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"import static common.Message.MESSAGE_WELCOME;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"exetr"},"content":" * Object which contains IO streams and has methods","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"exetr"},"content":" * that allow reading of user input and printing of","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"exetr"},"content":" * program responses, outputs and errors","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"exetr"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"exetr"},"content":"public class TextUI {","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"exetr"},"content":"    private final Scanner in;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"exetr"},"content":"    private final PrintStream out;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"exetr"},"content":"    private final static String prefix \u003d \"\u003e \";","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"exetr"},"content":"    public TextUI() {","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"exetr"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"exetr"},"content":"        out \u003d System.out;","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"exetr"},"content":"        out.println(MESSAGE_LOGO);","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"exetr"},"content":"        out.println(MESSAGE_WELCOME);","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"exetr"},"content":"     * Reads in full line terminated by newline from","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"exetr"},"content":"     * user input","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"exetr"},"content":"     * @return string Returns full line entered by user","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"exetr"},"content":"    public String getCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"exetr"},"content":"        out.print(prefix);","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"exetr"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"exetr"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"exetr"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"exetr"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"exetr"},"content":"     * Prints message to command line output","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"exetr"},"content":"     * @param message This is the message to be printed","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"exetr"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"exetr"},"content":"    public void showMessage(String message) {","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"exetr"},"content":"        out.println(message);","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"exetr"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"exetr"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"exetr":43}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"exetr"},"content":"/todo return $$ to jack","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"exetr"},"content":"/deadline assignment -by sunday","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"exetr"},"content":"/list","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"exetr"},"content":"/done 2","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"exetr"},"content":"/list","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"exetr"},"content":"/event lecture -from monday 2pm -to monday 4pm","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"exetr"},"content":"/list","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"exetr"},"content":"/bye","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"exetr":8}}]
