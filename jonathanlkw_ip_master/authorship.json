[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"# IP (BoBo) User Guide","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"### Add Todo task","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"Adds a new task with a description.","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"### Add Deadline task","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"Adds a new task with a description and a completion deadline.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"### Add Event task","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"Adds a new task with a description and a event timeframe.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"### List all tasks","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"Shows a numbered list of all tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"### Mark a task as done","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"Marks a specified task as completed. Represented in `list` with an `[X]`.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"### Delete a task","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"Deletes the specified task.","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"### Exit","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"Shows a goodbye message and terminates the programme.","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"### `todo` - Adds Todo task","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"Enter the `todo` keyword followed by the description of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"The description of the task can contain spaces, numbers and other characters.","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"The number of spaces between the `todo` keyword and the description does not matter. ","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"`todo CS2113T Homework` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"`todoCS2113T Homework` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"`todo   CS2113T Homework`","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"Expected outcome:","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"Confirmation of the addition of the `todo` task is displayed. ","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"`[T]` represents a task of type `todo`, ","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"while the second empty brace `[ ]` represents an undone task.","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"Umm ok added:","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"  [T][ ] CS2113T Homework","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"### `deadline` - Adds Deadline task","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"Enter the `deadline` keyword followed by the description of the task. ","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jonathanlkw"},"content":"Enter the completion deadline after the `/by` keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jonathanlkw"},"content":"The description and completion deadline of the task can contain spaces, numbers and other characters.","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jonathanlkw"},"content":"The number of spaces between the `deadline`/`/by` keyword and the description/completion deadline does not matter,","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"jonathanlkw"},"content":"however the `/by` keyword must be present.","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jonathanlkw"},"content":"Example of usage:","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jonathanlkw"},"content":"`deadline Return library book /by tomorrow 2359H (30/9/2021)` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jonathanlkw"},"content":"`deadlineReturn library book/bytomorrow 2359H (30/9/2021)` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"jonathanlkw"},"content":"`deadline  Return library book  /by   tomorrow 2359H (30/9/2021)`","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jonathanlkw"},"content":"Expected outcome:","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jonathanlkw"},"content":"Confirmation of the addition of the `deadline` task is displayed.","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"jonathanlkw"},"content":"`[D]` represents a task of type `deadline`,","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jonathanlkw"},"content":"while the second empty brace `[ ]` represents an undone task.","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jonathanlkw"},"content":"Completion deadline is found in brackets `()` after the `by: ` keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jonathanlkw"},"content":"Umm ok added:","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"jonathanlkw"},"content":"  [D][ ] Return library book (by: tomorrow 2359H (30/9/2021))","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jonathanlkw"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"jonathanlkw"},"content":"### `event` - Adds Event task","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jonathanlkw"},"content":"Enter the `event` keyword followed by the description of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jonathanlkw"},"content":"Enter the event timeframe after the `/at` keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"jonathanlkw"},"content":"The description and event timeframe of the task can contain spaces, numbers and other characters.","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"jonathanlkw"},"content":"The number of spaces between the `event`/`/at` keyword and the description/event timeframe does not matter,","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"jonathanlkw"},"content":"however the `/at` keyword must be present.","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"jonathanlkw"},"content":"Example of usage:","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jonathanlkw"},"content":"`event CS2113 lecture /at Friday 4-6pm` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"jonathanlkw"},"content":"`eventCS2113 lecture/atFriday 4-6pm` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jonathanlkw"},"content":"`event  CS2113 lecture  /at   Friday 4-6pm`","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"jonathanlkw"},"content":"Confirmation of the addition of the `event` task is displayed.","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"jonathanlkw"},"content":"`[E]` represents a task of type `event`,","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"jonathanlkw"},"content":"while the second empty brace `[ ]` represents an undone task.","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"jonathanlkw"},"content":"Event timeframe is found in brackets `()` after the `at: ` keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"jonathanlkw"},"content":"Umm ok added:","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"jonathanlkw"},"content":"  [E][ ] CS2113 lecture (at: Friday 4-6pm)","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"jonathanlkw"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"jonathanlkw"},"content":"### `list` - Lists all tasks","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"jonathanlkw"},"content":"Enter the `list` keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":120,"author":{"gitId":"jonathanlkw"},"content":"Example of usage:","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"jonathanlkw"},"content":"`list`","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"jonathanlkw"},"content":"Expected outcome:","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"jonathanlkw"},"content":"Numbered list of all tasks stored in memory is displayed.","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"jonathanlkw"},"content":"`[T]`/`[D]`/`[E]` represent the type of the task, ","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"jonathanlkw"},"content":"while `[X]` represents a completed task.","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"jonathanlkw"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"jonathanlkw"},"content":"1.[T][ ] CS2113T Homework","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"jonathanlkw"},"content":"2.[D][ ] Return library book (by: tomorrow 2359H (30/9/2021))","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"jonathanlkw"},"content":"3.[E][X] CS2113 lecture (at: Friday 4-6pm)","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"jonathanlkw"},"content":"### `done` - Marks a task as done","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"jonathanlkw"},"content":"Enter the `done` keyword followed but the task number shown in `list`.","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"jonathanlkw"},"content":"Number of spaces between `done` and the number does not matter,","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"jonathanlkw"},"content":"however the number must be in numeral format.","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"jonathanlkw"},"content":"Example of usage:","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"jonathanlkw"},"content":"`done 2` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"jonathanlkw"},"content":"`done2` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"jonathanlkw"},"content":"`done   2`","lastModifiedDate":"2021-09-29"},{"lineNumber":148,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":149,"author":{"gitId":"jonathanlkw"},"content":"Expected outcome:","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"jonathanlkw"},"content":"Shows confirmation that specified task has been marked as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"jonathanlkw"},"content":"If the task was previously marked as done, a remark will be shown to notify the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"jonathanlkw"},"content":"Okie! Marked this as done:","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"jonathanlkw"},"content":"2.[D][X] Return library book (by: tomorrow 2359H (30/9/2021))","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"jonathanlkw"},"content":"This task is already done!","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":162,"author":{"gitId":"jonathanlkw"},"content":"### `delete` - Deletes a task","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"jonathanlkw"},"content":"Enter the `delete` keyword followed but the task number shown in `list`.","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"jonathanlkw"},"content":"Number of spaces between `delete` and the number does not matter,","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"jonathanlkw"},"content":"however the number must be in numeral format.","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"jonathanlkw"},"content":"Example of usage:","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"jonathanlkw"},"content":"`delete 2` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":171,"author":{"gitId":"jonathanlkw"},"content":"`delete2` \u003cbr/\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":172,"author":{"gitId":"jonathanlkw"},"content":"`delete   2`","lastModifiedDate":"2021-09-29"},{"lineNumber":173,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":174,"author":{"gitId":"jonathanlkw"},"content":"Expected outcome:","lastModifiedDate":"2021-09-29"},{"lineNumber":175,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":176,"author":{"gitId":"jonathanlkw"},"content":"Shows confirmation that specified task has been deleted.","lastModifiedDate":"2021-09-29"},{"lineNumber":177,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":178,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"jonathanlkw"},"content":"Okie! Deleted this task:","lastModifiedDate":"2021-09-29"},{"lineNumber":180,"author":{"gitId":"jonathanlkw"},"content":"  [D][X] Return library book (by: tomorrow 2359H (30/9/2021))","lastModifiedDate":"2021-09-29"},{"lineNumber":181,"author":{"gitId":"jonathanlkw"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":182,"author":{"gitId":"jonathanlkw"},"content":"```","lastModifiedDate":"2021-09-29"},{"lineNumber":183,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":184,"author":{"gitId":"jonathanlkw"},"content":"### `bye` - Exits the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":186,"author":{"gitId":"jonathanlkw"},"content":"Enter the `bye` keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":190,"author":{"gitId":"jonathanlkw"},"content":"`bye`","lastModifiedDate":"2021-09-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":194,"author":{"gitId":"jonathanlkw"},"content":"Shows a goodbye message before exiting the programme. ","lastModifiedDate":"2021-09-29"},{"lineNumber":195,"author":{"gitId":"jonathanlkw"},"content":"All previously added tasks will be stored in memory and retrieved upon next run of the programme.","lastModifiedDate":"2021-09-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":197,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":198,"author":{"gitId":"jonathanlkw"},"content":"Ok. Bye bye!","lastModifiedDate":"2021-09-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"jonathanlkw":173,"-":26}},{"path":"dukeMem.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"T~0~CS2113T Homework","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"jonathanlkw":1}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new Duke object and loads memory data from specified file path.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"     * If memory file is not found, a new file is created.","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"     * @param fileString path of file to load memory data from","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"    public Duke(String fileString) {","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"        storage \u003d new Storage(fileString);","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"     * Repeatedly executes main programme loop until isExit \u003d\u003d false.","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"     * Accepts command input from user and executes command.","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"    public void run() {","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"        ui.showHello();","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"        while (!isExit) {","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"            try {","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"                ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"            } finally {","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"                ui.showLine();","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"        new Duke(\"./dukeMem.txt\").run();","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jonathanlkw":52,"-":2}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.DeadlineCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.EventCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"import duke.commands.TodoCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":" * Class for the purpose of collecting and interpreting input from the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"public class Parser {","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"     * Reads input from user and returns the appropriate command class for execution of command.","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"     * @param fullCommand input string from user","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"     * @return Command called by user","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"     * @throws InvalidCommandException If command by user is not recognised.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"    public static Command parse(String fullCommand) throws InvalidCommandException {","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"        if (fullCommand.trim().equals(\"bye\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"        } else if (fullCommand.trim().equals(\"list\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"            return new ListCommand();","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"        } else if (fullCommand.startsWith(\"done\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"            return new DoneCommand(fullCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        } else if (fullCommand.startsWith(\"todo\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"            return new TodoCommand(fullCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"        } else if (fullCommand.startsWith(\"deadline\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"            return new DeadlineCommand(fullCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"        } else if (fullCommand.startsWith(\"event\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"            return new EventCommand(fullCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"        } else if (fullCommand.startsWith(\"delete\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"            return new DeleteCommand(fullCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"        } else if (fullCommand.startsWith(\"find\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"            return new FindCommand(fullCommand);","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"        } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":46}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"import java.io.File;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":" * Class that initializes memory file location and contains all storage methods.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"public class Storage {","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"    private String fileString;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"    private Path filePath;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"    private File file;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new Storage object.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"     * Sets file parameter to fileString and creates a new file if it does not exist.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"     * @param fileString path of memory file as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"    public Storage(String fileString) {","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"        this.fileString \u003d fileString;","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"        this.filePath \u003d Paths.get(fileString);","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"        this.file \u003d new File(fileString);","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"        if (!file.exists()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"            createFile();","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"     * Creates a new file object with given filePath.","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"    private void createFile() {","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Error: Unable to create file!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Seems like the directory does not exist!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"     * Returns the contents of the memory file as a single string.","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"     * String returned has no line separator at the end.","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"     * @return contents of memory file as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"     * @throws FileNotFoundException If the memory file cannot be found.","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"    public String load() throws FileNotFoundException {","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"        String memAsString \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"        String memAsTrimmedString;","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"        while (s.hasNextLine()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"            String nextLine \u003d s.nextLine();","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"            memAsString +\u003d nextLine + System.lineSeparator();","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"        if (memAsString.equals(\"\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"            memAsTrimmedString \u003d memAsString;","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"jonathanlkw"},"content":"        } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"jonathanlkw"},"content":"            memAsTrimmedString \u003d memAsString.substring(0, memAsString.length()-2);","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"jonathanlkw"},"content":"        rewriteMem(memAsTrimmedString);","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"jonathanlkw"},"content":"        return memAsTrimmedString;","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jonathanlkw"},"content":"     * Overwrites the memory file with given data.","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jonathanlkw"},"content":"     * @param data data to write to memory as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"jonathanlkw"},"content":"    private void rewriteMem(String data) {","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"jonathanlkw"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2021-09-28"},{"lineNumber":77,"author":{"gitId":"jonathanlkw"},"content":"            fw.write(data);","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"jonathanlkw"},"content":"            fw.close();","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"jonathanlkw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Error: Unable to write to file\");","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Seems like the directory does not exist!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":84,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"jonathanlkw"},"content":"    // Storage methods for DoneCommand","lastModifiedDate":"2021-09-28"},{"lineNumber":86,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"jonathanlkw"},"content":"     * Alters memory file to reflect completion of task of taskIndex.","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"jonathanlkw"},"content":"     * @param taskIndex Index of completed task","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jonathanlkw"},"content":"    public void writeDone(int taskIndex) {","lastModifiedDate":"2021-09-28"},{"lineNumber":92,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":93,"author":{"gitId":"jonathanlkw"},"content":"            markDoneInMem(taskIndex);","lastModifiedDate":"2021-09-28"},{"lineNumber":94,"author":{"gitId":"jonathanlkw"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Error: Unable to write to file\");","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Error: Seems like the file does not exist!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"jonathanlkw"},"content":"     * Creates a new string of data reflecting completion of task of taskIndex.","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"jonathanlkw"},"content":"     * Writes new string to the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"jonathanlkw"},"content":"     * @param taskIndex Index of completed task","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"jonathanlkw"},"content":"     * @throws FileNotFoundException If unable to write to memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"jonathanlkw"},"content":"    private void markDoneInMem(int taskIndex) throws FileNotFoundException {","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"jonathanlkw"},"content":"        Scanner s \u003d new Scanner(this.file);","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"jonathanlkw"},"content":"        int lineCount \u003d 0;","lastModifiedDate":"2021-09-28"},{"lineNumber":109,"author":{"gitId":"jonathanlkw"},"content":"        String memAsString \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":110,"author":{"gitId":"jonathanlkw"},"content":"        while (s.hasNextLine()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":111,"author":{"gitId":"jonathanlkw"},"content":"            if (lineCount \u003d\u003d taskIndex) {","lastModifiedDate":"2021-09-28"},{"lineNumber":112,"author":{"gitId":"jonathanlkw"},"content":"                String targetTask \u003d s.nextLine().replaceFirst(\"0\", \"1\");","lastModifiedDate":"2021-09-28"},{"lineNumber":113,"author":{"gitId":"jonathanlkw"},"content":"                memAsString +\u003d targetTask + System.lineSeparator();","lastModifiedDate":"2021-09-28"},{"lineNumber":114,"author":{"gitId":"jonathanlkw"},"content":"            } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":115,"author":{"gitId":"jonathanlkw"},"content":"                memAsString +\u003d s.nextLine() + System.lineSeparator();","lastModifiedDate":"2021-09-28"},{"lineNumber":116,"author":{"gitId":"jonathanlkw"},"content":"            }","lastModifiedDate":"2021-09-28"},{"lineNumber":117,"author":{"gitId":"jonathanlkw"},"content":"            lineCount++;","lastModifiedDate":"2021-09-28"},{"lineNumber":118,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":119,"author":{"gitId":"jonathanlkw"},"content":"        String memAsTrimmedString \u003d memAsString.substring(0, memAsString.length()-2);","lastModifiedDate":"2021-09-28"},{"lineNumber":120,"author":{"gitId":"jonathanlkw"},"content":"        rewriteMem(memAsTrimmedString);","lastModifiedDate":"2021-09-28"},{"lineNumber":121,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":122,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":123,"author":{"gitId":"jonathanlkw"},"content":"    //Storage methods for adding new tasks","lastModifiedDate":"2021-09-28"},{"lineNumber":124,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"jonathanlkw"},"content":"     * Appends a single line string to the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"jonathanlkw"},"content":"     * Does not overwrite the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"jonathanlkw"},"content":"     * @param data single line string to be appended to memory file","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"jonathanlkw"},"content":"    public void appendToMem(String data) {","lastModifiedDate":"2021-09-28"},{"lineNumber":131,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":132,"author":{"gitId":"jonathanlkw"},"content":"            FileWriter fw \u003d new FileWriter(file, true);","lastModifiedDate":"2021-09-28"},{"lineNumber":133,"author":{"gitId":"jonathanlkw"},"content":"            fw.write(data);","lastModifiedDate":"2021-09-28"},{"lineNumber":134,"author":{"gitId":"jonathanlkw"},"content":"            fw.close();","lastModifiedDate":"2021-09-28"},{"lineNumber":135,"author":{"gitId":"jonathanlkw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":136,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Error: Unable to write to file\");","lastModifiedDate":"2021-09-28"},{"lineNumber":137,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println(\"Error: Seems like the directory does not exist!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":138,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":139,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":140,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":141,"author":{"gitId":"jonathanlkw"},"content":"    //Storage method for deleting tasks","lastModifiedDate":"2021-09-28"},{"lineNumber":142,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"jonathanlkw"},"content":"     * Deletes task of taskIndex from the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"jonathanlkw"},"content":"     * Creates a new string of data reflecting the deletion and writes it to the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"jonathanlkw"},"content":"     * @param taskIndex Index of deleted task","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"jonathanlkw"},"content":"     * @throws FileNotFoundException If memory file cannot be found","lastModifiedDate":"2021-09-29"},{"lineNumber":148,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":149,"author":{"gitId":"jonathanlkw"},"content":"    public void deleteTaskFromMem(int taskIndex) throws FileNotFoundException {","lastModifiedDate":"2021-09-28"},{"lineNumber":150,"author":{"gitId":"jonathanlkw"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-09-28"},{"lineNumber":151,"author":{"gitId":"jonathanlkw"},"content":"        int lineCount \u003d 0;","lastModifiedDate":"2021-09-28"},{"lineNumber":152,"author":{"gitId":"jonathanlkw"},"content":"        String memAsString \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":153,"author":{"gitId":"jonathanlkw"},"content":"        String memAsTrimmedString;","lastModifiedDate":"2021-09-28"},{"lineNumber":154,"author":{"gitId":"jonathanlkw"},"content":"        while (s.hasNextLine()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":155,"author":{"gitId":"jonathanlkw"},"content":"            if (lineCount \u003d\u003d taskIndex) {","lastModifiedDate":"2021-09-28"},{"lineNumber":156,"author":{"gitId":"jonathanlkw"},"content":"                String deletedString \u003d s.nextLine();","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"jonathanlkw"},"content":"            } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":158,"author":{"gitId":"jonathanlkw"},"content":"                memAsString +\u003d s.nextLine() + System.lineSeparator();","lastModifiedDate":"2021-09-28"},{"lineNumber":159,"author":{"gitId":"jonathanlkw"},"content":"            }","lastModifiedDate":"2021-09-28"},{"lineNumber":160,"author":{"gitId":"jonathanlkw"},"content":"            lineCount++;","lastModifiedDate":"2021-09-28"},{"lineNumber":161,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":162,"author":{"gitId":"jonathanlkw"},"content":"        if (taskIndex \u003d\u003d 0 \u0026\u0026 lineCount \u003d\u003d 1) {","lastModifiedDate":"2021-09-28"},{"lineNumber":163,"author":{"gitId":"jonathanlkw"},"content":"            memAsTrimmedString \u003d memAsString;","lastModifiedDate":"2021-09-28"},{"lineNumber":164,"author":{"gitId":"jonathanlkw"},"content":"        } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":165,"author":{"gitId":"jonathanlkw"},"content":"            memAsTrimmedString \u003d memAsString.substring(0, memAsString.length()-2);","lastModifiedDate":"2021-09-28"},{"lineNumber":166,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":167,"author":{"gitId":"jonathanlkw"},"content":"        rewriteMem(memAsTrimmedString);","lastModifiedDate":"2021-09-28"},{"lineNumber":168,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":169,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":169}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":" * Class that contains the ArrayList of all tasks in the programme, and corresponding methods.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"public class TaskList {","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new TaskList with an empty ArrayList of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new TaskList.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     * Takes and processes a string of information from the memory file and adds the corresponding tasks to the TaskList.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasksString memory file containing all stored information as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"    public TaskList(String tasksString) {","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"        String[] tasksList \u003d tasksString.split(System.lineSeparator());","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"        for (String task : tasksList) {","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"            writeToList(task);","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"     * Returns all tasks as an ArrayList.","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"     * @return ArrayList of all tasks","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"        return this.tasks;","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"     * Returns the task with specified index in the ArrayList of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"     * @param taskIndex index of task (starting from 0)","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"     * @return specified task of index taskIndex","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"    public Task getTask(int taskIndex) {","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"        return this.tasks.get(taskIndex);","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"     * @param line","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"    private void writeToList(String line) {","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"        String lineData[] \u003d line.split(\"~\");","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"        if (lineData[0].equals(\"T\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"            addTodoToTasks(lineData);","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"        } else if (lineData[0].equals(\"D\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"            addDeadlineToTasks(lineData);","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"jonathanlkw"},"content":"        } else if (lineData[0].equals(\"E\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"jonathanlkw"},"content":"            addEventToTasks(lineData);","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jonathanlkw"},"content":"     * Parses the memory string input and adds it to the TaskList as an event task.","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"jonathanlkw"},"content":"     * @param lineData single-line memory string input from memory file","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"jonathanlkw"},"content":"    private void addEventToTasks(String[] lineData) {","lastModifiedDate":"2021-09-28"},{"lineNumber":73,"author":{"gitId":"jonathanlkw"},"content":"        tasks.add(new Event(lineData[2], lineData[3]));","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"jonathanlkw"},"content":"        if (lineData[1].equals(\"1\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"jonathanlkw"},"content":"            tasks.get(tasks.size() - 1).markAsDone();","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":77,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"jonathanlkw"},"content":"     * Parses the memory string input and adds it to the TaskList as a deadline task.","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"jonathanlkw"},"content":"     * @param lineData single-line memory string input from memory file","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"jonathanlkw"},"content":"    private void addDeadlineToTasks(String[] lineData) {","lastModifiedDate":"2021-09-28"},{"lineNumber":84,"author":{"gitId":"jonathanlkw"},"content":"        tasks.add(new Deadline(lineData[2], lineData[3]));","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"jonathanlkw"},"content":"        if (lineData[1].equals(\"1\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":86,"author":{"gitId":"jonathanlkw"},"content":"            tasks.get(tasks.size() - 1).markAsDone();","lastModifiedDate":"2021-09-28"},{"lineNumber":87,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":89,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jonathanlkw"},"content":"     * Parses the memory string input and adds it to the TaskList as a todo task.","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jonathanlkw"},"content":"     * @param lineData single-line memory string input from memory file","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"jonathanlkw"},"content":"    private void addTodoToTasks(String[] lineData) {","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"jonathanlkw"},"content":"        tasks.add(new Todo(lineData[2]));","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"jonathanlkw"},"content":"        if (lineData[1].equals(\"1\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"jonathanlkw"},"content":"            tasks.get(tasks.size() - 1).markAsDone();","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":100}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import java.sql.SQLOutput;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" * Ui class that contains all the methods that write to the output.","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"public class Ui {","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    public static final String LOGO \u003d \" _____         _____\\n\"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"            + \"|     \\\\ _____ |     \\\\ _____\\n\"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"            + \"|  o  /|     ||  o  /|     |\\n\"","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"            + \"|  o  \\\\|  o  ||  o  \\\\|  o  |\\n\"","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"            + \"|_____/|_____||_____/|_____|\\n\";","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"    public static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"     * Prints a horizontal line separator.","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"    public void showLine() {","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     * Prints the logo and hello message.","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"    public void showHello() {","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(LOGO);","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"        showLine();","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Hello! I\u0027m Bobo!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"I\u0027m a little blur, but I\u0027d love to help!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"        showLine();","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"     * Prints the exit message.","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"    public void showBye() {","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Ok. Bye bye!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"     * Prints the error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"     * @param errorMessage error message to be shown to user","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"     * Reads the command input by the user and returns it as a string.","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"     * @return the command input by the user","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"    public String readCommand() {","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"        return in.nextLine();","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"    //Ui for Storage","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jonathanlkw"},"content":"     * Prints the error message for when the specified file is not available.","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"jonathanlkw"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Error: Seems like directory/file does not exist\");","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Creating new file...\");","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"jonathanlkw"},"content":"    //Ui for DoneCommand","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"jonathanlkw"},"content":"     * Prints the confirmation message that a task has been marked as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"jonathanlkw"},"content":"     * @param taskIndex index of task marked as done","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all the tasks","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"jonathanlkw"},"content":"    public void showDone(int taskIndex, TaskList tasks) {","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Okie! Marked this as done:\");","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println((taskIndex + 1) + \".\" + tasks.getTask(taskIndex));","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"jonathanlkw"},"content":"     * Prints a message alerting the user that a task requested to be marked as done is already done.","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"jonathanlkw"},"content":"    public void showAlreadyDone() {","lastModifiedDate":"2021-09-28"},{"lineNumber":87,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"This task is already done!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":89,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"jonathanlkw"},"content":"     * Prints error message when user inputs an illegal task number to be marked as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"jonathanlkw"},"content":"    public void showInvalidTaskIndexError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":94,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Oh no! There isn\u0027t a task with that index\");","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Please try again!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"jonathanlkw"},"content":"     * Prints error message when user fails to input a task number with the done command.","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"jonathanlkw"},"content":"    public void showMissingDoneIndexError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Oh no! An integer must come after the done command!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":103,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Please try again!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":104,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":105,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":106,"author":{"gitId":"jonathanlkw"},"content":"    //Ui for Tasks","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"jonathanlkw"},"content":"     * Prints confirmation that a specified task has been added to the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all tasks in an ArrayList","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"jonathanlkw"},"content":"    public void showTaskConfirmation(TaskList tasks) {","lastModifiedDate":"2021-09-28"},{"lineNumber":113,"author":{"gitId":"jonathanlkw"},"content":"        int numberOfTasks \u003d tasks.getTasks().size();","lastModifiedDate":"2021-09-28"},{"lineNumber":114,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Umm ok added:\");","lastModifiedDate":"2021-09-28"},{"lineNumber":115,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"  \" + tasks.getTask(numberOfTasks - 1));","lastModifiedDate":"2021-09-28"},{"lineNumber":116,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Now you have \" + numberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2021-09-28"},{"lineNumber":117,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":118,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":119,"author":{"gitId":"jonathanlkw"},"content":"    //Ui for DeadlineCommand","lastModifiedDate":"2021-09-28"},{"lineNumber":120,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"jonathanlkw"},"content":"     * Prints error message when user fails to input \u0027/by\u0027 following a deadline command.","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"jonathanlkw"},"content":"    public void showMissingByError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":125,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Oh no! Deadline tasks must be followed by /by keyword!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":126,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Please try again!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":127,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":128,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":129,"author":{"gitId":"jonathanlkw"},"content":"    //Ui for EventCommand","lastModifiedDate":"2021-09-28"},{"lineNumber":130,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"jonathanlkw"},"content":"     * Prints error message when user fails to input \u0027/at\u0027 following a event command.","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"jonathanlkw"},"content":"    public void showMissingAtError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":135,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Oh no! Event tasks must be followed by /at keyword!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":136,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Please try again!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":137,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":138,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":139,"author":{"gitId":"jonathanlkw"},"content":"    //Ui for DeleteCommand","lastModifiedDate":"2021-09-28"},{"lineNumber":140,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"jonathanlkw"},"content":"     * Prints error message when illegal task number to be deleted is input by the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"jonathanlkw"},"content":"    public void showInvalidDeleteIndexError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":145,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Oh no! There isn\u0027t a task with that index\");","lastModifiedDate":"2021-09-28"},{"lineNumber":146,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Please try again!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":147,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":148,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":149,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"jonathanlkw"},"content":"     * Prints error message when user fails to input a task number following the delete command.","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"jonathanlkw"},"content":"    public void showMissingDeleteIndexError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":153,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Oh no! An integer must come after the delete command!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":154,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Please try again!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":155,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":156,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"jonathanlkw"},"content":"     * Prints error message when the programme is unable to delete the task due to the file not being found.","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"jonathanlkw"},"content":"    public void showDeleteError() {","lastModifiedDate":"2021-09-28"},{"lineNumber":161,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Error: Unable to delete!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":162,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Seems like the file does not exist!\");","lastModifiedDate":"2021-09-28"},{"lineNumber":163,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":164,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":165,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"jonathanlkw"},"content":"     * Prints confirmation that a specified task has been deleted.","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"jonathanlkw"},"content":"     * @param deletedTask task that has been deleted","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all tasks as a ArrayList","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"jonathanlkw"},"content":"    public void showDeleteConfirmation(Task deletedTask, TaskList tasks) {","lastModifiedDate":"2021-09-28"},{"lineNumber":171,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Okie! Deleted this task:\");","lastModifiedDate":"2021-09-28"},{"lineNumber":172,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"  \" + deletedTask);","lastModifiedDate":"2021-09-28"},{"lineNumber":173,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Now you have \" + tasks.getTasks().size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-28"},{"lineNumber":174,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":175,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":175}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":" * Class representing all possible commands from user.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"abstract public class Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"    protected boolean isExit;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    protected String fullCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"     * Method for execution of command.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     * Overwritten by child classes.","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"        return;","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"    };","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     * Returns exit status of a command.","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     * False for all commands except ExitCommand.","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     * @return exit status as a boolean","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"        return this.isExit;","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":34}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" * Command Class that executes the creation of a new Deadline task.","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    public static final int END_OF_DEADLINE_INDEX \u003d 8;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"    public static final int BY_LENGTH \u003d 3;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new DeadlineCommand object.","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"     * @param fullCommand full user input as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"    public DeadlineCommand (String fullCommand) {","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     * Executes creation of new Event task with description and completion deadline as inputted by user.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"            handleDeadlineTask(tasks, ui, storage);","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"            ui.showTaskConfirmation(tasks);","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"            ui.showMissingByError();","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"     * Parses command input by user and adds new Deadline Task to {@code tasks}.","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all tasks as an ArrayList","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling of ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"    private void handleDeadlineTask(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"        int endOfDescriptionIndex \u003d fullCommand.indexOf(\"/by\");","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"        int startOfByIndex \u003d fullCommand.indexOf(\"/by\") + BY_LENGTH;","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"        String description \u003d fullCommand.substring(END_OF_DEADLINE_INDEX, endOfDescriptionIndex).trim();","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"        String byText \u003d fullCommand.substring(startOfByIndex).trim();","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"        String memWritableText \u003d formatForMemory(description, byText, tasks.getTasks().size());","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"        tasks.getTasks().add(new Deadline(description, byText));","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"        storage.appendToMem(memWritableText);","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"     * Writes user input into format for storage in the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"     * If size \u003d\u003d 0, line separator is not included at the front of the string.","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"     * @param description description of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"     * @param byText completion deadline of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"     * @param size size of ArrayList of tasks","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"     * @return formatted string for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jonathanlkw"},"content":"    private static String formatForMemory(String description, String byText, int size) {","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"jonathanlkw"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"jonathanlkw"},"content":"            return \"D~0~\" + description + \"~\" + byText;","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"jonathanlkw"},"content":"        } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"jonathanlkw"},"content":"            return System.lineSeparator() + \"D~0~\" + description + \"~\" + byText;","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":71}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":" * Command Class for deleting tasks both from TaskList and memory.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"    public static final int END_OF_DELETE_INDEX \u003d 6;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new DeleteCommand object.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"     * @param fullCommand full user input as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"    public DeleteCommand(String fullCommand) {","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     * Deletes the specified task and shows confirmation to user.","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     * If task is not found or invalid command is given, shows error message to user.","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"            Task deletedTask \u003d handleDeleteTask(tasks, ui, storage);","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"            ui.showDeleteConfirmation(deletedTask, tasks);","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"            ui.showInvalidDeleteIndexError();","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"            ui.showMissingDeleteIndexError();","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"     * Deletes and returns task of specified index from {@code tasks} and memory if task is found.","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"     * Else shows a delete error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all tasks as an ArrayList","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling of ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"     * @return deleted task","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"    private Task handleDeleteTask(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"        int taskNumber \u003d Integer.parseInt(fullCommand.substring(END_OF_DELETE_INDEX).trim());","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"        int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"        Task deletedTask \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"        tasks.getTasks().remove(taskIndex);","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"            storage.deleteTaskFromMem(taskIndex);","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"            ui.showDeleteError();","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"        return deletedTask;","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":65}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":" * Command Class for marking tasks as completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"    public static final int END_OF_DONE_INDEX \u003d 4;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new DoneCommand object.","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"     * @param fullCommand full user input as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"    public DoneCommand(String fullCommand) {","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"     * Executes the marking of specified task as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     * If task is not found or invalid command is given, shows error message to user.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"            handleDone(tasks, ui, storage);","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"            ui.showMissingDoneIndexError();","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"            ui.showInvalidTaskIndexError();","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"     * Marks the specified task as done if currently uncompleted, and outputs confirmation to user.","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"     * Else outputs notification to user that task is already completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all tasks as an ArrayList","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling of ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"    private void handleDone(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"        int taskNumber \u003d Integer.parseInt(fullCommand.substring(END_OF_DONE_INDEX).trim());","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"        int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"        if (tasks.getTask(taskIndex).isDone()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"            ui.showAlreadyDone();","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"        } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"            tasks.getTask(taskIndex).markAsDone();","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"            ui.showDone(taskIndex, tasks);","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"            storage.writeDone(taskIndex);","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":58}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" * Command Class that executes the creation of a new Event task.","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    public static final int END_OF_EVENT_INDEX \u003d 5;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"    public static final int AT_LENGTH \u003d 3;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new EventCommand object.","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"     * @param fullCommand full user input as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"    public EventCommand(String fullCommand) {","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     * Executes creation of new Event task with description and time as inputted by user.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"            handleEventTask(tasks, ui, storage);","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"            ui.showTaskConfirmation(tasks);","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"            ui.showMissingAtError();","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"     * Parses command input by user and adds new Event Task to {@code tasks}.","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all tasks as an ArrayList","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling of ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"    private void handleEventTask(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"        int endOfDescriptionIndex \u003d fullCommand.indexOf(\"/at\");","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"        int startOfAtIndex \u003d fullCommand.indexOf(\"/at\") + AT_LENGTH;","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"        String description \u003d fullCommand.substring(END_OF_EVENT_INDEX, endOfDescriptionIndex).trim();","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"        String atText \u003d fullCommand.substring(startOfAtIndex).trim();","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"        String memWritableText \u003d formatForMemory(description, atText, tasks.getTasks().size());","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"        tasks.getTasks().add(new Event(description, atText));","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"        storage.appendToMem(memWritableText);","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"     * Writes user input into format for storage in the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"     * If size \u003d\u003d 0, line separator is not included at the front of the string.","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"     * @param description description of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"     * @param atText time of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"     * @param size size of ArrayList of tasks","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"     * @return formatted string for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"jonathanlkw"},"content":"    private String formatForMemory(String description, String atText, int size) {","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"jonathanlkw"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"jonathanlkw"},"content":"            return \"T~0~\" + description + \"~\" + atText;","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"jonathanlkw"},"content":"        } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"jonathanlkw"},"content":"            return System.lineSeparator() + \"T~0~\" + description + \"~\" + atText;","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":71}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":" * Command Class for exiting the programme.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new ExitCommand object.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"     * Sets isExit \u003d true.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"     * Outputs exit message to the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"        ui.showBye();","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":31}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"import duke.exceptions.MissingSearchTermException;","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"    public static final int END_OF_FIND_INDEX \u003d 4;","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"    public FindCommand(String fullCommand) {","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"        try {","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"            find(tasks, ui, storage);","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"        } catch(DukeException e) {","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"    public void find(TaskList tasks, Ui ui, Storage storage) throws MissingSearchTermException {","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"        String searchKey \u003d fullCommand.substring(END_OF_FIND_INDEX).trim();","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"        if (searchKey.equals(\"\")) {","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"            throw new MissingSearchTermException();","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        int taskNumber \u003d 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"        for(Task task : tasks.getTasks()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"            if(task.getDescription().contains(searchKey)) {","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"                System.out.println((taskNumber) + \".\" + task);","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"            }","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"            taskNumber++;","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":41}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" * Command Class for displaying of all tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new ListCommand object.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"    public ListCommand() {","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"     * Outputs list of all tasks to the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"     * Completed tasks are marked with an \u0027X\u0027.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"    public void execute (TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"        int taskNumber \u003d 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"        for (Task task : tasks.getTasks()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"            System.out.println((taskNumber) + \".\" + task);","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"            taskNumber++;","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":37}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.commands;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":" * Command Class that executes the creation of a new Todo task.","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    public static final int END_OF_TODO_INDEX \u003d 4;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new TodoCommand object.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     * @param fullCommand full user input as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"    public TodoCommand(String fullCommand) {","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     * Executes creation of new Todo task with description as inputted by user.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object of all tasks in the programme","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling Ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"        handleTodoTask(tasks, ui, storage);","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        ui.showTaskConfirmation(tasks);","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"     * Parses command input by user and adds new Todo Task to {@code tasks}.","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"     * @param tasks TaskList object containing all tasks as an ArrayList","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"     * @param ui Ui object for calling of ui methods","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"     * @param storage Storage object for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"    private void handleTodoTask(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"        String description \u003d fullCommand.substring(END_OF_TODO_INDEX).trim();","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"        String memWritableText \u003d formatForMemory(description, tasks.getTasks().size());","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"        tasks.getTasks().add(new Todo(description));","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"        storage.appendToMem(memWritableText);","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"     * Writes user input into format for storage in the memory file.","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"     * If size \u003d\u003d 0, line separator is not included at the front of the string.","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"     * @param description description of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"     * @param size size of ArrayList of tasks","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"     * @return formatted string for writing to memory","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"    private String formatForMemory(String description, int size) {","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"            return \"T~0~\" + description;","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"        } else {","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"            return System.lineSeparator() + \"T~0~\" + description;","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"        }","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":62}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":" * Exception class containing all created exceptions for Duke project.","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":8}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":" * Exception class for when user inputs a command that the programme does not recognise.","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":" * Extended from DukeException.","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"     * Returns error message as a string, prompting user to enter another input.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"     * @return error message as a string","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"        return \"Sorry I don\u0027t understand that! Can you rephrase?\";","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"jonathanlkw":17}},{"path":"src/main/java/duke/exceptions/MissingSearchTermException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"public class MissingSearchTermException extends DukeException {","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"        return \"A search term must come after the find command!\";","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":9}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":" * Class representing deadline tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":" * Extended from Task.","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":" * These tasks require additional {@code by} parameter signifying completion deadline of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"    protected String by;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new deadline task with description and completion deadline.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"     * @param description description of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"     * @param by completion deadline of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"     * Returns deadline task in its string format.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     * @return string format of deadline task","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jonathanlkw":30}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":" * Class representing event tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":" * Extended from Task.","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":" * These tasks require additional {@code at} parameter signifying time of event.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"public class Event extends Task{","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"    protected String at;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes new event task with description and time.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"     * @param description description of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"     * @param at time of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"     * Returns event task in its string format.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"     * @return string format of event task","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jonathanlkw":30}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":" * Class representing all tasks inputted by the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"public class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"    protected String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes Task with given description and isDone \u003d false.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"     * @param description description of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"     * Returns \"X\" if isDone \u003d\u003d true, else returns \" \".","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"     * @return String of symbol representing task completion","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"     * Returns description of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"jonathanlkw"},"content":"     * @return String of description of the task","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"jonathanlkw"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jonathanlkw"},"content":"        return description;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"jonathanlkw"},"content":"     * Marks task as completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"jonathanlkw"},"content":"     * Sets isDone \u003d true.","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"jonathanlkw"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jonathanlkw"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"jonathanlkw"},"content":"     * Returns the completion status of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"jonathanlkw"},"content":"     * @return boolean isDone representing completion status","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"jonathanlkw"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"jonathanlkw"},"content":"        return isDone;","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"jonathanlkw"},"content":"     * Returns task as a formatted string with brackets and description.","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"jonathanlkw"},"content":"     * @return string of task","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"jonathanlkw"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"jonathanlkw"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jonathanlkw":60}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":" * Class representing Todo tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":" * Extended from Task.","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":" * These are tasks that do not require additional fields beyond description.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"     * Initializes Todo object with given description.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"     * @param description description of task from user input","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"        super(description);","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"     * Returns the Todo task in its string format.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"     * @return string format of Todo task","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"    public String toString() {","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jonathanlkw":27}},{"path":"text-ui-test/dukeMem.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"T~0~read book","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"jonathanlkw":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jonathanlkw"},"content":"todo read book","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jonathanlkw"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jonathanlkw"},"content":"done 1","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jonathanlkw"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jonathanlkw"},"content":"to join sports club","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jonathanlkw"},"content":"todo join sports club","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jonathanlkw"},"content":"done  4","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jonathanlkw"},"content":"todo borrow book","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jonathanlkw"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"deadlineread book/bySunday","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"jonathanlkw"},"content":"eventlive lecture/atMon 2-4pm","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"jonathanlkw"},"content":"done5","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jonathanlkw"},"content":"done 5","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"jonathanlkw"},"content":"done three","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"jonathanlkw"},"content":"done","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"jonathanlkw"},"content":"event   live performance    /at  6pm","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"jonathanlkw"},"content":"event CS2113T lecture /by tomorrow","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"deadline    submit assignment  /by   8/9/2021","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"jonathanlkw"},"content":"deadline hand up homework / by friday","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"jonathanlkw"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"jonathanlkw"},"content":"done 15","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"jonathanlkw"},"content":"delete 2","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"jonathanlkw"},"content":"delete  3","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"jonathanlkw"},"content":"dellete 3","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"jonathanlkw"},"content":"delete4","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"jonathanlkw"},"content":"delete two","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"jonathanlkw"},"content":"delete 20","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"jonathanlkw"},"content":"bye","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jonathanlkw":28}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"jonathanlkw"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"jonathanlkw"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jonathanlkw":2,"-":19}}]
