[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"# Duke User Guide","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"Duke is an application designed to help users **manage their tasks via a Command Line Interface (CLI)**.","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"## Quick Start","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"1. Ensure you have Java 11 installed in your computer.","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"2. Download the latest `Duke.jar` from [here](https://github.com/powzx/ip/releases).","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"3. Copy `Duke.jar` to an empty folder.","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"4. On command prompt, navigate to the folder `Duke.jar` is stored.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"5. Launch `Duke.jar` using `java -jar Duke.jar`","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"6. Enter commands to interact with Duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"java -jar Duke.jar","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"Welcome to","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":" ______        _","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"(______)      | |","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":" _     _ _   _| |  _ _____","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"| |   | | | | | |_/ ) ___ |","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"| |__/ /| |_| |  _ (| ____|","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"|_____/ |____/|_| \\_)_____)","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"Hello there! I\u0027m Duke, your very helpful personal assistant chat bot.","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"Enter \"help\" to see what I can do for you!","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"## Commands List","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"Action | Command Format","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"-------- | ---------","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"Add a task without a date | `todo TASK_DESCRIPTION`","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"Add a task with a deadline | `deadline TASK_DESCRIPTION /by TASK_DEADLINE`","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"Add an event with date and time | `event TASK_DESCRIPTION /at DATE_AND_TIME`","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"List all tasks | `list`","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"Mark a task as done | `done INDEX`","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"Delete a task | `delete INDEX`","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"Clear all tasks | `clear`","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"Find tasks with a specific date | `date DATE`","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"Find tasks with a specific keyword | `find KEYWORD`","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"Echo the user input | `echo INPUT`","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"View the help menu | `help`","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"Exit Duke | `bye`","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"### Notes about Command and Display Format","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"1. Words in uppercase are parameters that need to be entered by the user for the ","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"command to execute.","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"2. If a command expects parameters, then the user must supply them only once and in the correct order.","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"3. If a command does not expect parameters, supplying unnecessary parameters will not ","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"result in the execution of the command.","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"4. Tasks are displayed in the following format:","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"    * `[TASK_TYPE][DONE_STATUS] TASK_DESCRIPTION (TASK_DATE)` where:","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"       * `TASK_TYPE` is `T`, `D`, or `E` representing ToDo, Deadline, and Event respectively.","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"       * `DONE_STATUS` is `X` if the task is marked as done, or is empty otherwise.","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"       * `TASK_DESCRIPTION` is the description of the task when it was added.","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"       * `TASK_DATE` is either the deadline or the event date and time (Not applicable to ToDo).","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"## Features and Usage of Commands","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"### Add a task without a date: `todo`","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"Adds a task to the list that does not require any specific date to be attached.","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"powzx"},"content":"Format of command: `todo TASK_DESCRIPTION`","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"powzx"},"content":"* `TASK_DESCRIPTION` must not be empty, otherwise the task will not be added.","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"powzx"},"content":"Examples:","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"powzx"},"content":"* `todo go for a run`","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"powzx"},"content":"* `todo buy gift for mom`","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"powzx"},"content":"todo go for a run","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"powzx"},"content":"Yay! I have added the following task for you:","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"powzx"},"content":"[T][ ] go for a run","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"powzx"},"content":"You have 1 tasks in your list now!","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"powzx"},"content":"### Add a task with a deadline: `deadline`","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"powzx"},"content":"Adds a task to the list that has a specific deadline attached.","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"powzx"},"content":"Format of command: `deadline TASK_DESCRIPTION /by TASK_DEADLINE`","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"powzx"},"content":"* `TASK_DESCRIPTION` and `TASK_DEADLINE` must not be empty, otherwise the task will not be added.","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"powzx"},"content":"* `/by` is required in the user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"powzx"},"content":"* `TASK_DEADLINE` needs to have the format `yyyy-mm-ddThh:MM`, otherwise the task will not be added where:","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"powzx"},"content":"    * `yyyy` represents the four-digit year","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"powzx"},"content":"    * `mm` represents the two-digit month","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"powzx"},"content":"    * `dd` represents the two-digit day","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"powzx"},"content":"    * `hh` represents the two-digit hour","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"powzx"},"content":"    * `MM` represents the two-digit minute","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"powzx"},"content":"    * `T` is required between the date and time","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"powzx"},"content":"Examples:","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"powzx"},"content":"* `deadline project submission /by 2021-09-20T23:59`","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"powzx"},"content":"* `deadline final report submission /by 2021-10-10T17:00`","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"powzx"},"content":"deadline project submission /by 2021-09-20T23:59","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"powzx"},"content":"Yay! I have added the following task for you:","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"powzx"},"content":"[D][ ] project submission (by: Sep 20 2021, 23:59)","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"powzx"},"content":"You have 2 tasks in your list now!","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"powzx"},"content":"### Add an event with date and time: `event`","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"powzx"},"content":"Adds a task to the list as an event with its associated date and time.","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"powzx"},"content":"Format of command: `event TASK_DESCRIPTION /at DATE_AND_TIME`","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"powzx"},"content":"* `TASK_DESCRIPTION` and `DATE_AND_TIME` must not be empty, otherwise the task will not be added.","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"powzx"},"content":"* `/at` is required in the user input","lastModifiedDate":"2021-09-20"},{"lineNumber":123,"author":{"gitId":"powzx"},"content":"* `DATE_AND_TIME` needs to have the format `yyyy-mm-ddThh:MM`, otherwise the task will not be added where:","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"powzx"},"content":"    * `yyyy` represents the four-digit year","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"powzx"},"content":"    * `mm` represents the two-digit month","lastModifiedDate":"2021-09-20"},{"lineNumber":126,"author":{"gitId":"powzx"},"content":"    * `dd` represents the two-digit day","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"powzx"},"content":"    * `hh` represents the two-digit hour","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"powzx"},"content":"    * `MM` represents the two-digit minute","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"powzx"},"content":"    * `T` is required between the date and time","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"powzx"},"content":"Examples:","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"powzx"},"content":"* `event Bob\u0027s wedding /at 2021-10-10T19:00`","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"powzx"},"content":"* `event countdown party /at 2021-12-31T20:00`","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":135,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"powzx"},"content":"event Bob\u0027s wedding /at 2021-10-10T19:00","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"powzx"},"content":"Yay! I have added the following task for you:","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"powzx"},"content":"[E][ ] Bob\u0027s wedding (at: Oct 10 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":142,"author":{"gitId":"powzx"},"content":"You have 3 tasks in your list now!","lastModifiedDate":"2021-09-20"},{"lineNumber":143,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"powzx"},"content":"### List all tasks: `list`","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":148,"author":{"gitId":"powzx"},"content":"Lists all the tasks that are stored in the list.","lastModifiedDate":"2021-09-20"},{"lineNumber":149,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"powzx"},"content":"Format of command: `list`","lastModifiedDate":"2021-09-20"},{"lineNumber":151,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":152,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":154,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":155,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-09-20"},{"lineNumber":156,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"powzx"},"content":"Wow! I found these tasks in your list:","lastModifiedDate":"2021-09-20"},{"lineNumber":158,"author":{"gitId":"powzx"},"content":"1. [T][ ] go for a run","lastModifiedDate":"2021-09-20"},{"lineNumber":159,"author":{"gitId":"powzx"},"content":"2. [D][ ] project submission (by: Sep 20 2021, 23:59)","lastModifiedDate":"2021-09-20"},{"lineNumber":160,"author":{"gitId":"powzx"},"content":"3. [E][ ] Bob\u0027s wedding (at: Oct 10 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":161,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":162,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":164,"author":{"gitId":"powzx"},"content":"### Mark a task as done: `done`","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"powzx"},"content":"Marks a task in the list as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":168,"author":{"gitId":"powzx"},"content":"Format of command: `done INDEX`","lastModifiedDate":"2021-09-20"},{"lineNumber":169,"author":{"gitId":"powzx"},"content":"* `INDEX` corresponding to the task can be found using `list`.","lastModifiedDate":"2021-09-20"},{"lineNumber":170,"author":{"gitId":"powzx"},"content":"* `INDEX` must not be empty and must be an integer corresponding to a task, otherwise the ","lastModifiedDate":"2021-09-20"},{"lineNumber":171,"author":{"gitId":"powzx"},"content":"operation will not be executed.","lastModifiedDate":"2021-09-20"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":173,"author":{"gitId":"powzx"},"content":"Example:","lastModifiedDate":"2021-09-20"},{"lineNumber":174,"author":{"gitId":"powzx"},"content":"* `done 3`","lastModifiedDate":"2021-09-20"},{"lineNumber":175,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":176,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":177,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":178,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":179,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-09-20"},{"lineNumber":180,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":181,"author":{"gitId":"powzx"},"content":"Wow! I found these tasks in your list:","lastModifiedDate":"2021-09-20"},{"lineNumber":182,"author":{"gitId":"powzx"},"content":"1. [T][ ] go for a run","lastModifiedDate":"2021-09-20"},{"lineNumber":183,"author":{"gitId":"powzx"},"content":"2. [D][ ] project submission (by: Sep 20 2021, 23:59)","lastModifiedDate":"2021-09-20"},{"lineNumber":184,"author":{"gitId":"powzx"},"content":"3. [E][ ] Bob\u0027s wedding (at: Oct 10 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":185,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":186,"author":{"gitId":"powzx"},"content":"done 3","lastModifiedDate":"2021-09-20"},{"lineNumber":187,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":188,"author":{"gitId":"powzx"},"content":"Good job! You have finished the following:","lastModifiedDate":"2021-09-20"},{"lineNumber":189,"author":{"gitId":"powzx"},"content":"[E][X] Bob\u0027s wedding (at: Oct 10 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":190,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":191,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":192,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":193,"author":{"gitId":"powzx"},"content":"### Delete a task: `delete`","lastModifiedDate":"2021-09-20"},{"lineNumber":194,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":195,"author":{"gitId":"powzx"},"content":"Deletes a task from the list.","lastModifiedDate":"2021-09-20"},{"lineNumber":196,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":197,"author":{"gitId":"powzx"},"content":"Format of command: `delete INDEX`","lastModifiedDate":"2021-09-20"},{"lineNumber":198,"author":{"gitId":"powzx"},"content":"* `INDEX` corresponding to the task can be found using `list`.","lastModifiedDate":"2021-09-20"},{"lineNumber":199,"author":{"gitId":"powzx"},"content":"* `INDEX` must not be empty and must be an integer corresponding to a task, otherwise the ","lastModifiedDate":"2021-09-20"},{"lineNumber":200,"author":{"gitId":"powzx"},"content":"operation will not be executed.","lastModifiedDate":"2021-09-20"},{"lineNumber":201,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":202,"author":{"gitId":"powzx"},"content":"Example:","lastModifiedDate":"2021-09-20"},{"lineNumber":203,"author":{"gitId":"powzx"},"content":"* `delete 1`","lastModifiedDate":"2021-09-20"},{"lineNumber":204,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":205,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":207,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":208,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-09-20"},{"lineNumber":209,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":210,"author":{"gitId":"powzx"},"content":"Wow! I found these tasks in your list:","lastModifiedDate":"2021-09-20"},{"lineNumber":211,"author":{"gitId":"powzx"},"content":"1. [T][ ] go for a run","lastModifiedDate":"2021-09-20"},{"lineNumber":212,"author":{"gitId":"powzx"},"content":"2. [D][ ] project submission (by: Sep 20 2021, 23:59)","lastModifiedDate":"2021-09-20"},{"lineNumber":213,"author":{"gitId":"powzx"},"content":"3. [E][X] Bob\u0027s wedding (at: Oct 10 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":214,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":215,"author":{"gitId":"powzx"},"content":"delete 1","lastModifiedDate":"2021-09-20"},{"lineNumber":216,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":217,"author":{"gitId":"powzx"},"content":"Alright, I have deleted the following task for you:","lastModifiedDate":"2021-09-20"},{"lineNumber":218,"author":{"gitId":"powzx"},"content":"[T][ ] go for a run","lastModifiedDate":"2021-09-20"},{"lineNumber":219,"author":{"gitId":"powzx"},"content":"You have 2 tasks in your list now!","lastModifiedDate":"2021-09-20"},{"lineNumber":220,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":221,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":222,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":223,"author":{"gitId":"powzx"},"content":"### Clear all tasks: `clear`","lastModifiedDate":"2021-09-20"},{"lineNumber":224,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":225,"author":{"gitId":"powzx"},"content":"Clears all the tasks from the list.","lastModifiedDate":"2021-09-20"},{"lineNumber":226,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":227,"author":{"gitId":"powzx"},"content":"Format of command: `clear`","lastModifiedDate":"2021-09-20"},{"lineNumber":228,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":229,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":230,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":231,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":232,"author":{"gitId":"powzx"},"content":"clear","lastModifiedDate":"2021-09-20"},{"lineNumber":233,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":234,"author":{"gitId":"powzx"},"content":"Okay! Now your list is empty, you\u0027re FREE!","lastModifiedDate":"2021-09-20"},{"lineNumber":235,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":236,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":237,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":238,"author":{"gitId":"powzx"},"content":"### Find tasks with a specific date: `date`","lastModifiedDate":"2021-09-20"},{"lineNumber":239,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":240,"author":{"gitId":"powzx"},"content":"Finds all the tasks from the list that has a specific date attached.","lastModifiedDate":"2021-09-20"},{"lineNumber":241,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":242,"author":{"gitId":"powzx"},"content":"Format of command: `date DATE`","lastModifiedDate":"2021-09-20"},{"lineNumber":243,"author":{"gitId":"powzx"},"content":"* `DATE` must not be empty, otherwise the operation will not be executed.","lastModifiedDate":"2021-09-20"},{"lineNumber":244,"author":{"gitId":"powzx"},"content":"* `DATE` must have the following format `yyyy-mm-dd` where:","lastModifiedDate":"2021-09-20"},{"lineNumber":245,"author":{"gitId":"powzx"},"content":"    * `yyyy` represents the four-digit year","lastModifiedDate":"2021-09-20"},{"lineNumber":246,"author":{"gitId":"powzx"},"content":"    * `mm` represents the two-digit month","lastModifiedDate":"2021-09-20"},{"lineNumber":247,"author":{"gitId":"powzx"},"content":"    * `dd` represents the two-digit day","lastModifiedDate":"2021-09-20"},{"lineNumber":248,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":249,"author":{"gitId":"powzx"},"content":"Example:","lastModifiedDate":"2021-09-20"},{"lineNumber":250,"author":{"gitId":"powzx"},"content":"* `date 2021-09-18`","lastModifiedDate":"2021-09-20"},{"lineNumber":251,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":252,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":253,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":254,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":255,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-09-20"},{"lineNumber":256,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":257,"author":{"gitId":"powzx"},"content":"Wow! I found these tasks in your list:","lastModifiedDate":"2021-09-20"},{"lineNumber":258,"author":{"gitId":"powzx"},"content":"1. [T][X] buy gift","lastModifiedDate":"2021-09-20"},{"lineNumber":259,"author":{"gitId":"powzx"},"content":"2. [D][X] final essay submission (by: Aug 22 2021, 23:59)","lastModifiedDate":"2021-09-20"},{"lineNumber":260,"author":{"gitId":"powzx"},"content":"3. [E][ ] Julia\u0027s wedding (at: Sep 18 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":261,"author":{"gitId":"powzx"},"content":"4. [E][ ] team meeting (at: Sep 18 2021, 09:30)","lastModifiedDate":"2021-09-20"},{"lineNumber":262,"author":{"gitId":"powzx"},"content":"5. [D][X] project report submission (by: Oct 10 2021, 14:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":263,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":264,"author":{"gitId":"powzx"},"content":"date 2021-09-18","lastModifiedDate":"2021-09-20"},{"lineNumber":265,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":266,"author":{"gitId":"powzx"},"content":"Here are your tasks that are occurring on the date specified:","lastModifiedDate":"2021-09-20"},{"lineNumber":267,"author":{"gitId":"powzx"},"content":"1. [E][ ] Julia\u0027s wedding (at: Sep 18 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":268,"author":{"gitId":"powzx"},"content":"2. [E][ ] team meeting (at: Sep 18 2021, 09:30)","lastModifiedDate":"2021-09-20"},{"lineNumber":269,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":270,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":271,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":272,"author":{"gitId":"powzx"},"content":"### Find tasks with a specific keyword: `find`","lastModifiedDate":"2021-09-20"},{"lineNumber":273,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":274,"author":{"gitId":"powzx"},"content":"Finds all the tasks from the list that has a specific keyword in its description.","lastModifiedDate":"2021-09-20"},{"lineNumber":275,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":276,"author":{"gitId":"powzx"},"content":"Format of command: `find KEYWORD`","lastModifiedDate":"2021-09-20"},{"lineNumber":277,"author":{"gitId":"powzx"},"content":"* `KEYWORD`must not be empty, otherwise the operation will not be executed.","lastModifiedDate":"2021-09-20"},{"lineNumber":278,"author":{"gitId":"powzx"},"content":"* `KEYWORD` is not case-sensitive, hence `find something` and `find SomEthinG` will yield the ","lastModifiedDate":"2021-09-20"},{"lineNumber":279,"author":{"gitId":"powzx"},"content":"same results.","lastModifiedDate":"2021-09-20"},{"lineNumber":280,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":281,"author":{"gitId":"powzx"},"content":"Example:","lastModifiedDate":"2021-09-20"},{"lineNumber":282,"author":{"gitId":"powzx"},"content":"* `find submission`","lastModifiedDate":"2021-09-20"},{"lineNumber":283,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":284,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":285,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":286,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":287,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-09-20"},{"lineNumber":288,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":289,"author":{"gitId":"powzx"},"content":"Wow! I found these tasks in your list:","lastModifiedDate":"2021-09-20"},{"lineNumber":290,"author":{"gitId":"powzx"},"content":"1. [T][X] buy gift","lastModifiedDate":"2021-09-20"},{"lineNumber":291,"author":{"gitId":"powzx"},"content":"2. [D][X] final essay submission (by: Aug 22 2021, 23:59)","lastModifiedDate":"2021-09-20"},{"lineNumber":292,"author":{"gitId":"powzx"},"content":"3. [E][ ] Julia\u0027s wedding (at: Sep 18 2021, 19:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":293,"author":{"gitId":"powzx"},"content":"4. [E][ ] team meeting (at: Sep 18 2021, 09:30)","lastModifiedDate":"2021-09-20"},{"lineNumber":294,"author":{"gitId":"powzx"},"content":"5. [D][X] project report submission (by: Oct 10 2021, 14:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":295,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":296,"author":{"gitId":"powzx"},"content":"find submission","lastModifiedDate":"2021-09-20"},{"lineNumber":297,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":298,"author":{"gitId":"powzx"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-09-20"},{"lineNumber":299,"author":{"gitId":"powzx"},"content":"1. [D][X] final essay submission (by: Aug 22 2021, 23:59)","lastModifiedDate":"2021-09-20"},{"lineNumber":300,"author":{"gitId":"powzx"},"content":"2. [D][X] project report submission (by: Oct 10 2021, 14:00)","lastModifiedDate":"2021-09-20"},{"lineNumber":301,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":302,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":303,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":304,"author":{"gitId":"powzx"},"content":"### Echo the user input: `echo`","lastModifiedDate":"2021-09-20"},{"lineNumber":305,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":306,"author":{"gitId":"powzx"},"content":"Prints the input of the user onto the terminal.","lastModifiedDate":"2021-09-20"},{"lineNumber":307,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":308,"author":{"gitId":"powzx"},"content":"Format of command: `echo INPUT`","lastModifiedDate":"2021-09-20"},{"lineNumber":309,"author":{"gitId":"powzx"},"content":"* `INPUT` must not be empty, otherwise the operation will not be executed.","lastModifiedDate":"2021-09-20"},{"lineNumber":310,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":311,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":312,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":313,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":314,"author":{"gitId":"powzx"},"content":"echo Hello World!","lastModifiedDate":"2021-09-20"},{"lineNumber":315,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":316,"author":{"gitId":"powzx"},"content":"Hello World!","lastModifiedDate":"2021-09-20"},{"lineNumber":317,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":318,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":319,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":320,"author":{"gitId":"powzx"},"content":"### View the help menu: `help`","lastModifiedDate":"2021-09-20"},{"lineNumber":321,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":322,"author":{"gitId":"powzx"},"content":"Prints the help menu onto the terminal.","lastModifiedDate":"2021-09-20"},{"lineNumber":323,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":324,"author":{"gitId":"powzx"},"content":"Format of command: `help`","lastModifiedDate":"2021-09-20"},{"lineNumber":325,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":326,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":327,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":328,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":329,"author":{"gitId":"powzx"},"content":"help","lastModifiedDate":"2021-09-20"},{"lineNumber":330,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":331,"author":{"gitId":"powzx"},"content":"Below is the list of commands and input formats I am currently able to understand:","lastModifiedDate":"2021-09-20"},{"lineNumber":332,"author":{"gitId":"powzx"},"content":"1. list - Lists all your current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":333,"author":{"gitId":"powzx"},"content":"2. clear - Clears all your existing tasks in your list.","lastModifiedDate":"2021-09-20"},{"lineNumber":334,"author":{"gitId":"powzx"},"content":"3. todo [task description] - Adds a task to your list.","lastModifiedDate":"2021-09-20"},{"lineNumber":335,"author":{"gitId":"powzx"},"content":"4. deadline [task description] /by [due date] - Adds a task with a due date to your list.","lastModifiedDate":"2021-09-20"},{"lineNumber":336,"author":{"gitId":"powzx"},"content":"5. event [event description] /at [date and time] - Adds an upcoming event to your list.","lastModifiedDate":"2021-09-20"},{"lineNumber":337,"author":{"gitId":"powzx"},"content":"6. done [task number] - Marks the task as done. Use the list to check the task number!","lastModifiedDate":"2021-09-20"},{"lineNumber":338,"author":{"gitId":"powzx"},"content":"7. delete [task number] - Deletes the task. Use the list to check the task number!","lastModifiedDate":"2021-09-20"},{"lineNumber":339,"author":{"gitId":"powzx"},"content":"8. date [yyyy-mm-dd] - Finds tasks with the date specified attached to it.","lastModifiedDate":"2021-09-20"},{"lineNumber":340,"author":{"gitId":"powzx"},"content":"9. find [keyword] - Finds tasks with the keyword specified in its description.","lastModifiedDate":"2021-09-20"},{"lineNumber":341,"author":{"gitId":"powzx"},"content":"10. echo [input] - Echoes whatever your input is.","lastModifiedDate":"2021-09-20"},{"lineNumber":342,"author":{"gitId":"powzx"},"content":"11. help - View this menu again.","lastModifiedDate":"2021-09-20"},{"lineNumber":343,"author":{"gitId":"powzx"},"content":"12. bye - Stop talking to me and exit the program.","lastModifiedDate":"2021-09-20"},{"lineNumber":344,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":345,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":346,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":347,"author":{"gitId":"powzx"},"content":"### Exit Duke: `bye`","lastModifiedDate":"2021-09-20"},{"lineNumber":348,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":349,"author":{"gitId":"powzx"},"content":"Exits the program.","lastModifiedDate":"2021-09-20"},{"lineNumber":350,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":351,"author":{"gitId":"powzx"},"content":"Format of command: `bye`","lastModifiedDate":"2021-09-20"},{"lineNumber":352,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":353,"author":{"gitId":"powzx"},"content":"Demo:","lastModifiedDate":"2021-09-20"},{"lineNumber":354,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":355,"author":{"gitId":"powzx"},"content":"```","lastModifiedDate":"2021-09-20"},{"lineNumber":356,"author":{"gitId":"powzx"},"content":"bye","lastModifiedDate":"2021-09-20"},{"lineNumber":357,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":358,"author":{"gitId":"powzx"},"content":"Bye! Have a great day ahead and see you again soon.","lastModifiedDate":"2021-09-20"},{"lineNumber":359,"author":{"gitId":"powzx"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-20"},{"lineNumber":360,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":361,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":362,"author":{"gitId":"powzx"},"content":"## Data Storage","lastModifiedDate":"2021-09-20"},{"lineNumber":363,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":364,"author":{"gitId":"powzx"},"content":"Duke automatically saves the list of tasks to a text file after every command. This means that","lastModifiedDate":"2021-09-20"},{"lineNumber":365,"author":{"gitId":"powzx"},"content":"users can recover their task list even after restarting Duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":366,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":367,"author":{"gitId":"powzx"},"content":"### Editing the data file","lastModifiedDate":"2021-09-20"},{"lineNumber":368,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":369,"author":{"gitId":"powzx"},"content":"Advanced users can edit the data file `duke.txt` that is stored in the same folder as `Duke.jar`.","lastModifiedDate":"2021-09-20"},{"lineNumber":370,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":371,"author":{"gitId":"powzx"},"content":"**CAUTION: Edits that make the data format invalid will cause a data corruption and","lastModifiedDate":"2021-09-20"},{"lineNumber":372,"author":{"gitId":"powzx"},"content":"all data will be wiped and reset upon restarting `Duke.jar`.**","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"powzx":356,"-":16}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"public class Main {","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"        new Duke().run();","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"powzx":8}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.commands.CommandResult;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    private Storage storage \u003d new Storage();","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    private Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    private void loadStorage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"            storage.loadStorageToTaskList();","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"            ui.showErrorMessage(exception);","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"    private void updateStorage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"            storage.loadTaskListToStorage();","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"            ui.showErrorMessage(exception);","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"    private String readUserInput() {","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"    /** Reads user input and executes commands in a loop until a command to exit is invoked. */","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    private void executeUserInputs() {","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"        while (true) {","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"            try {","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"                String userInputString \u003d readUserInput();","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"                Command command \u003d Parser.parseCommand(userInputString);","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"                CommandResult result \u003d command.executeCommand();","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"                ui.showFeedbackToUser(result);","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"                if (command instanceof ExitCommand) {","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"                    break;","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"                }","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"            } catch (DukeException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"                ui.showErrorMessage(exception);","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"            } finally {","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"                updateStorage();","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"    /** Greets the user and loads previous tasks, then executes user inputs in a loop. */","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"    public void run() {","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"        ui.showGreetMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"        loadStorage();","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"        executeUserInputs();","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"powzx":62,"-":2}},{"path":"src/main/java/duke/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to add a {@code Deadline} to the task list. */","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    private static final String ADD_TASK_MESSAGE \u003d \"Yay! I have added the following task for you:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    private static final String DEADLINE_DESCRIPTION_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"            \"OH NO! You need to provide a description for your deadline task...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    private static final String DEADLINE_DATE_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"            \"OH NO! You need to specify a due date for your deadline task...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    private static final String DATE_WRONG_FORMAT_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"            \"OH NO! Please key in your date in the format [yyyy-mm-dd]T[hh:mm]...\";","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    private static final String ILLEGAL_CHAR \u003d \"|\";","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    private static final String ILLEGAL_CHAR_ERROR \u003d \"Please do not use \\\"|\\\" in your input...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"    private Deadline deadline;","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word of the user input is \"deadline\".","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument contains illegal characters that will potentially corrupt the data","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"     * stored in the storage.","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    public AddDeadlineCommand(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"        if (argument.contains(ILLEGAL_CHAR)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"            throw new DukeException(ILLEGAL_CHAR_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eChecks if the date and time string is of a valid format.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eValid form: [yyyy-mm-dd]T[HH:MM]\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"     * @param date date and time string to check for validity","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code true} - if the specified date is valid\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code false} - otherwise\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"    private boolean isValidDateTime(String date) {","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"            LocalDateTime.parse(date);","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"            return false;","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"        return true;","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"     * Gets the description and deadline from the argument provided by the user.","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"     * @return array of size 2 where first entry is the description and the second entry is","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"     * the deadline","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If either entry of the return array is empty or the date and time is of invalid format","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"    private String[] retrieveDeadlineParameters(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"        String[] parameters \u003d Parser.separateDeadline(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"powzx"},"content":"        String description \u003d parameters[0];","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"powzx"},"content":"        String taskDue \u003d parameters[1];","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":71,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(description)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"powzx"},"content":"            throw new DukeException(DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":73,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":74,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(taskDue)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":75,"author":{"gitId":"powzx"},"content":"            throw new DukeException(DEADLINE_DATE_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":76,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":77,"author":{"gitId":"powzx"},"content":"        if (!isValidDateTime(taskDue)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"powzx"},"content":"            throw new DukeException(DATE_WRONG_FORMAT_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"powzx"},"content":"        return parameters;","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":87,"author":{"gitId":"powzx"},"content":"        String[] parameters \u003d retrieveDeadlineParameters(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":88,"author":{"gitId":"powzx"},"content":"        deadline \u003d new Deadline(parameters[0], LocalDateTime.parse(parameters[1]));","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"powzx"},"content":"        TaskManager.addTask(deadline);","lastModifiedDate":"2021-09-18"},{"lineNumber":90,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(","lastModifiedDate":"2021-09-18"},{"lineNumber":91,"author":{"gitId":"powzx"},"content":"                ADD_TASK_MESSAGE + \"\\n\" + deadline.toString() + \"\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":92,"author":{"gitId":"powzx"},"content":"                        + \"You have \" + TaskManager.getCurrentTasksCount() + \" tasks in your list now!\");","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":94,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":95,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":95}},{"path":"src/main/java/duke/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to add an {@code Event} to the task list. */","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    private static final String ADD_TASK_MESSAGE \u003d \"Yay! I have added the following task for you:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    private static final String EVENT_DESCRIPTION_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"            \"OH NO! You need to provide a description for your event...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    private static final String EVENT_DATE_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"            \"OH NO! You need to specify a date and time for your event...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    private static final String DATE_WRONG_FORMAT_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"            \"OH NO! Please key in your date in the format [yyyy-mm-dd]T[hh:mm]...\";","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    private static final String ILLEGAL_CHAR \u003d \"|\";","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    private static final String ILLEGAL_CHAR_ERROR \u003d \"Please do not use \\\"|\\\" in your input...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"    private Event event;","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word of the user input is \"event\".","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument contains illegal characters that will potentially corrupt the data","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"     * stored in the storage.","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    public AddEventCommand(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"        if (argument.contains(ILLEGAL_CHAR)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"            throw new DukeException(ILLEGAL_CHAR_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eChecks if the date and time string is of a valid format.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eValid form: [yyyy-mm-dd]T[HH:MM]\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"     * @param date date and time string to check for validity","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code true} - if the specified date is valid\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code false} - otherwise\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"    private boolean isValidDateTime(String date) {","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"            LocalDateTime.parse(date);","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"            return false;","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"        return true;","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"     * Gets the description and date and time from the argument provided by the user.","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"     * @return array of size 2 where first entry is the description and the second entry is the date and time","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If either entry of the return array is empty or the date and time is of invalid format","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"    private String[] retrieveEventParameters(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"        String[] parameters \u003d Parser.separateEvent(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"        String description \u003d parameters[0];","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"powzx"},"content":"        String dateAndTime \u003d parameters[1];","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(description)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":71,"author":{"gitId":"powzx"},"content":"            throw new DukeException(EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":73,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(dateAndTime)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":74,"author":{"gitId":"powzx"},"content":"            throw new DukeException(EVENT_DATE_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":75,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":76,"author":{"gitId":"powzx"},"content":"        if (!isValidDateTime(dateAndTime)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"powzx"},"content":"            throw new DukeException(DATE_WRONG_FORMAT_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":78,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"powzx"},"content":"        return parameters;","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"powzx"},"content":"        String[] parameters \u003d retrieveEventParameters(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":87,"author":{"gitId":"powzx"},"content":"        event \u003d new Event(parameters[0], LocalDateTime.parse(parameters[1]));","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"powzx"},"content":"        TaskManager.addTask(event);","lastModifiedDate":"2021-09-18"},{"lineNumber":89,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(","lastModifiedDate":"2021-09-18"},{"lineNumber":90,"author":{"gitId":"powzx"},"content":"                ADD_TASK_MESSAGE + \"\\n\" + event.toString() + \"\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":91,"author":{"gitId":"powzx"},"content":"                        + \"You have \" + TaskManager.getCurrentTasksCount() + \" tasks in your list now!\");","lastModifiedDate":"2021-09-18"},{"lineNumber":92,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":94,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":94}},{"path":"src/main/java/duke/commands/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to add a {@code ToDo} to the task list. */","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    private static final String ADD_TASK_MESSAGE \u003d \"Yay! I have added the following task for you:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    private static final String TODO_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"            \"OH NO! You need to provide a description for your todo...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    private static final String ILLEGAL_CHAR \u003d \"|\";","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    private static final String ILLEGAL_CHAR_ERROR \u003d \"Please do not use \\\"|\\\" in your input...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    private ToDo toDo;","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word of the user input is \"todo\".","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument contains illegal characters that will potentially corrupt the data","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"     * stored in the storage.","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    public AddToDoCommand(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"        if (argument.contains(ILLEGAL_CHAR)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"            throw new DukeException(ILLEGAL_CHAR_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"     * Checks if the argument provided by the user is empty.","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"     * @return Description of the {@code ToDo}.","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument specified is empty","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    private String retrieveTodoParameter(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(argument)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"            throw new DukeException(TODO_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"        return argument;","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"        String parameter \u003d retrieveTodoParameter(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"        toDo \u003d new ToDo(parameter);","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"        TaskManager.addTask(toDo);","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"                ADD_TASK_MESSAGE + \"\\n\" + toDo.toString() + \"\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"                        + \"You have \" + TaskManager.getCurrentTasksCount() + \" tasks in your list now!\");","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":56}},{"path":"src/main/java/duke/commands/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to clear the current task list */","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"    private static final String CLEAR_TASKS_MESSAGE \u003d \"Okay! Now your list is empty, you\u0027re FREE!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    /** Constructed when the command word of the user input is \"clear\". */","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    public ClearCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"        super();","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"        TaskManager.clearAllTasks();","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(CLEAR_TASKS_MESSAGE);","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":21}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":" * The abstract parent class of all available commands on {@code Duke} which represents all the","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":" * information about a command, such as the execution of the command.","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    protected String argument;","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"     * Constructs a {@code Command} object that do not require arguments, such as {@code ClearCommand, ExitCommand,","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"     * HelpCommand, InvalidCommand, and ListCommand.}","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"    protected Command() {","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"     * Constructs a {@code Command} object that requires an argument, such as {@code AddDeadlineCommand,","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     * AddEventCommand, AddToDoCommand, DeleteTaskCommand, EchoCommand, MarkTaskDoneCommand, FindCommand, and","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"     * DateCommand.}","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"     * @param argument Argument from the user input for the command to execute properly","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"    protected Command(String argument) {","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"        this.argument \u003d argument;","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    protected boolean isEmptyArgument(String argument) {","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"        return argument.isEmpty();","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"     * Retrieves the arguments (if any) and executes the command to return a {@code CommandResult} for","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"     * display on the user interface.","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"     * @return {@code CommandResult} that shows feedback to the user","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the arguments are required but not found","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"    public abstract CommandResult executeCommand() throws DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":42}},{"path":"src/main/java/duke/commands/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":" * Objects of this class are returned from the execution of a {@code Command}, and it contains the","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":" * feedback from the execution that can be displayed to the user via the user interface.","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"public class CommandResult {","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"     * Constructs a {@code CommandResult} upon finish executing the {@code Command}.","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"     * @param feedbackToUser string display to the user on the user interface.","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"        this.feedbackToUser \u003d feedbackToUser;","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"        return feedbackToUser;","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":23}},{"path":"src/main/java/duke/commands/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to find a task with a specific date attached. */","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    private static final String DATE_MESSAGE \u003d","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"            \"Here are your tasks that are occurring on the date specified:\";","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    private static final String DATE_WRONG_FORMAT_ERROR \u003d","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"            \"OH NO! Please key in your date in the format yyyy-mm-dd...\";","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eChecks if the date and time string is of a valid format.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eValid form: [yyyy-mm-dd]T[HH:MM]\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     * @param date date and time to check for validity","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code true} - if the specified date is valid\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code false} - otherwise\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    private boolean isValidDate(String date) {","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"            LocalDate.parse(date);","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"            return false;","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"        return true;","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word of the user input is \"date\".","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"    public DateCommand(String argument) {","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"     * Checks if the argument is a date that is of the valid form.","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"     * @return Valid date in string format","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument provided is not of the valid format","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"    private String retrieveDateParameter(String argument) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"        if (!isValidDate(argument)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"            throw new DukeException(DATE_WRONG_FORMAT_ERROR);","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"        return argument;","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"        String parameter \u003d retrieveDateParameter(argument);","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d TaskManager.filterListByDate(parameter);","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"        String listOfTasks \u003d TaskManager.listTasks(filteredList);","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(DATE_MESSAGE + listOfTasks);","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"powzx":67}},{"path":"src/main/java/duke/commands/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to delete a task from the current task list. */","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    private static final String DELETE_TASK_MESSAGE \u003d \"Alright, I have deleted the following task for you:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    private static final String MISSING_NUMBER_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"            \"OH NO! You need to specify the task number...\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"                    + \"Enter \\\"list\\\" to check the task number!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    private static final String NUMBER_FORMAT_ERROR \u003d \"OH NO! That wasn\u0027t a number...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    private static final String NUMBER_NOT_FOUND_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"            \"OH NO! The task number is invalid, I can\u0027t find any tasks matching that number...\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"                    + \"Enter \\\"list\\\" to check the task number!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    private int taskNumber;","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word of the user input is \"delete\".","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    public DeleteTaskCommand(String argument) {","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"     * Gets the task number from the argument provided by the user.","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"     * @return Task number corresponding to the {@code Task} that needs to be deleted","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument provided is empty, not an integer, or an integer that does not","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"     * correspond to any task in the task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    private int retrieveNumberParameter(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(argument)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"            throw new DukeException(MISSING_NUMBER_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"            taskNumber \u003d Integer.parseInt(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"            throw new DukeException(NUMBER_FORMAT_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"        if (!TaskManager.isValidTaskNumber(taskNumber)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"            throw new DukeException(NUMBER_NOT_FOUND_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"        return taskNumber;","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"        taskNumber \u003d retrieveNumberParameter(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"        Task deletedTask \u003d TaskManager.deleteTask(taskNumber);","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"                DELETE_TASK_MESSAGE + \"\\n\" + deletedTask.toString() + \"\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"                        + \"You have \" + TaskManager.getCurrentTasksCount() + \" tasks in your list now!\");","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":65}},{"path":"src/main/java/duke/commands/EchoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to echo a user input to the user interface. */","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"    private static final String ECHO_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"            \"OH NO! I can\u0027t echo if you don\u0027t say anything...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word of the user input is \"echo\".","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    public EchoCommand(String argument) {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"     * Checks if the argument provided by the user is empty.","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"     * @return string to echo on the user interface","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument specified is empty","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    private String retrieveEchoParameter(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(argument)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"            throw new DukeException(ECHO_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"        return argument;","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"        String parameter \u003d retrieveEchoParameter(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(parameter);","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":40}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to exit from \u003ccode\u003eDuke\u003c/code\u003e */","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye! Have a great day ahead and see you again soon.\";","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"    /** Constructed when the command word of the user input is \"bye\". */","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"        super();","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(EXIT_MESSAGE);","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":18}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to find a task with a specific keyword in its description */","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    private static final String FIND_MESSAGE \u003d","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"            \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    private static final String FIND_ERROR \u003d","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"            \"OH NO! Please provide a keyword to find your tasks...\";","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word in the user input is \"find\".","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    public FindCommand(String argument) {","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"     * Gets the keyword from the argument provided by the user in the user input.","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"     * @return Keyword to search for","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the given argument by the user is empty","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    private String retrieveFindParameter(String argument) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(argument)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"            throw new DukeException(FIND_ERROR);","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"        return argument;","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"        String parameter \u003d retrieveFindParameter(argument);","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d TaskManager.filterListByKeyword(parameter);","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"        String listOfTasks \u003d TaskManager.listTasks(filteredList);","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(FIND_MESSAGE + listOfTasks);","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"powzx":47}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to print the help menu to the user interface. */","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"    private static final String HELP_MESSAGE \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"            \"Below is the list of commands and input formats I am currently able to understand:\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"                    + \"1. list - Lists all your current tasks.\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"                    + \"2. clear - Clears all your existing tasks in your list.\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"                    + \"3. todo [task description] - Adds a task to your list.\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"                    + \"4. deadline [task description] /by [due date] - Adds a task with a due date to your list.\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"                    + \"5. event [event description] /at [date and time] - Adds an upcoming event to your list.\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"                    + \"6. done [task number] - Marks the task as done. Use the list to check the task number!\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"                    + \"7. delete [task number] - Deletes the task. Use the list to check the task number!\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"                    + \"8. date [yyyy-mm-dd] - Finds tasks with the date specified attached to it.\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"                    + \"9. find [keyword] - Finds tasks with the keyword specified in its description.\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"                    + \"10. echo [input] - Echoes whatever your input is.\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"                    + \"11. help - View this menu again.\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"                    + \"12. bye - Stop talking to me and exit the program.\";","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    /** Constructed when the command word of the user input is \"help\". */","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"    public HelpCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"        super();","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(HELP_MESSAGE);","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":31}},{"path":"src/main/java/duke/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to resolve an invalid command from the user. */","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"            \"Sorry... I did not understand that, can you try again?\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"                    + \"Or you can enter \\\"help\\\" to see what I can do for you!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    /** Constructed when the command word of the user input does not match any existing commands in","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"     * {@code Duke}. */","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"    public InvalidCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"        super();","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":21}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed the list the tasks from the current task list. */","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    private static final String LIST_TASKS_MESSAGE \u003d \"Wow! I found these tasks in your list:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"    /** Constructed when the command word of the user input is \"list\". */","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    public ListCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"        super();","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() {","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cTask\u003e tasks \u003d TaskManager.getTaskList();","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"        String listOfTasks \u003d TaskManager.listTasks(tasks);","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(LIST_TASKS_MESSAGE + listOfTasks);","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":24}},{"path":"src/main/java/duke/commands/MarkTaskDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.commands;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"/** Includes the operations needed to mark a task in the current task list as done. */","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"public class MarkTaskDoneCommand extends Command {","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    private static final String MARK_TASK_DONE_MESSAGE \u003d \"Good job! You have finished the following:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    private static final String MISSING_NUMBER_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"            \"OH NO! You need to specify the task number...\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"                    + \"Enter \\\"list\\\" to check the task number!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    private static final String NUMBER_FORMAT_ERROR \u003d \"OH NO! That wasn\u0027t a number...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    private static final String NUMBER_NOT_FOUND_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"            \"OH NO! The task number is invalid, I can\u0027t find any tasks matching that number...\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"                    + \"Enter \\\"list\\\" to check the task number!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    private int taskNumber;","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"     * Constructed when the command word of the user input is \"done\".","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    public MarkTaskDoneCommand(String argument) {","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"        super(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"     * Gets the task number from the argument provided by the user.","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"     * @param argument Argument provided by the user after separating the command word from the user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"     * @return Task number corresponding to the {@code Task} that needs to be marked done","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the argument provided is empty, not an integer, or an integer that does not","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"     * correspond to any task in the task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    private int retrieveNumberParameter(String argument) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"        if (isEmptyArgument(argument)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"            throw new DukeException(MISSING_NUMBER_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"            taskNumber \u003d Integer.parseInt(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"            throw new DukeException(NUMBER_FORMAT_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"        if (!TaskManager.isValidTaskNumber(taskNumber)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"            throw new DukeException(NUMBER_NOT_FOUND_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"        return taskNumber;","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"    public CommandResult executeCommand() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"        taskNumber \u003d retrieveNumberParameter(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"        Task doneTask \u003d TaskManager.markTaskDone(taskNumber);","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"        CommandResult result \u003d new CommandResult(MARK_TASK_DONE_MESSAGE + \"\\n\" + doneTask);","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"        return result;","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":63}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"/** Represents the exception thrown associated with the operations of Duke. */","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"     * Constructs an exception associated with Duke with an exception message.","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"     * @param message Message intended for the user which can be the exception description or the","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"     *                reason that it is thrown.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"        super(message);","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"powzx":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.parser;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.commands.AddDeadlineCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.commands.AddEventCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.commands.AddToDoCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import duke.commands.ClearCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"import duke.commands.DeleteTaskCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"import duke.commands.EchoCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"import duke.commands.HelpCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"import duke.commands.InvalidCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"import duke.commands.MarkTaskDoneCommand;","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"import duke.commands.DateCommand;","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"import duke.storage.Data;","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":" * Represents a utility class that includes operations that can be performed on a command string input by","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":" * the user to analyse, find arguments, or create other objects.","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"public class Parser {","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_EXIT \u003d \"bye\";","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_LIST_TASKS \u003d \"list\";","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_CLEAR_TASKS \u003d \"clear\";","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_MARK_TASK_DONE \u003d \"done\";","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_ADD_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_ADD_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_ADD_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_ECHO \u003d \"echo\";","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_HELP \u003d \"help\";","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    private static final String COMMAND_DATE \u003d \"date\";","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    private static final String DEADLINE_PREFIX \u003d \"/by\";","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"    private static final String EVENT_PREFIX \u003d \"/at\";","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"    private static final String DATA_SEPARATOR \u003d \"\\\\|\";","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"    private static String[] trimArrayElements(String[] inputArray) {","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"        for (int i \u003d 0; i \u003c inputArray.length; i++) {","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"            inputArray[i] \u003d inputArray[i].trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"        return inputArray;","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"     * Separates the command word from the string input by the user.","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"     * @param input input by the user through the user interface","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003earray of size 2 with the command word in the first entry and the arguments in the second entry.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eIf there are no arguments, then the second entry will be an empty string\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eIf the user input is empty, then both entries will be an empty string\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"    private static String[] separateCommand(String input) {","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"        String[] commandArgArray \u003d new String[2];","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"        String[] separatedInput \u003d input.split(\" \", 2);","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"        commandArgArray[0] \u003d separatedInput[0].trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"        commandArgArray[1] \u003d input.replaceFirst(commandArgArray[0], \"\").trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"        return commandArgArray;","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"powzx"},"content":"     * Separates the date and time from the arguments to add a {@code Deadline}","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"powzx"},"content":"     * @param input argument of the user input after command is separated.","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003earray of size 2 with the description of the {@code Deadline} in the first entry and the date and time","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"powzx"},"content":"     * in the second entry.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eIf no date and time is provided, then the second entry will be an empty string\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"powzx"},"content":"    public static String[] separateDeadline(String input) {","lastModifiedDate":"2021-09-18"},{"lineNumber":77,"author":{"gitId":"powzx"},"content":"        String[] descriptionDateArray \u003d new String[2];","lastModifiedDate":"2021-09-18"},{"lineNumber":78,"author":{"gitId":"powzx"},"content":"        String[] separatedInput \u003d input.split(DEADLINE_PREFIX, 2);","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"powzx"},"content":"        descriptionDateArray[0] \u003d separatedInput[0].trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"powzx"},"content":"        descriptionDateArray[1] \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"powzx"},"content":"                input.replaceFirst(descriptionDateArray[0], \"\")","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"powzx"},"content":"                        .replaceFirst(DEADLINE_PREFIX, \"\")","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"powzx"},"content":"                        .trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"powzx"},"content":"        return descriptionDateArray;","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":87,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"powzx"},"content":"     * Separates the date and time from the arguments to add an {@code Event}","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"powzx"},"content":"     * @param input argument of the user input after command is separated.","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003earray of size 2 with the description of the {@code Event} in the first entry and the date and time","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"powzx"},"content":"     * in the second entry.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eIf no date and time is provided, then the second entry will be an empty string\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":96,"author":{"gitId":"powzx"},"content":"    public static String[] separateEvent(String input) {","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"powzx"},"content":"        String[] descriptionDateArray \u003d new String[2];","lastModifiedDate":"2021-09-18"},{"lineNumber":98,"author":{"gitId":"powzx"},"content":"        String[] separatedInput \u003d input.split(EVENT_PREFIX, 2);","lastModifiedDate":"2021-09-18"},{"lineNumber":99,"author":{"gitId":"powzx"},"content":"        descriptionDateArray[0] \u003d separatedInput[0].trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":100,"author":{"gitId":"powzx"},"content":"        descriptionDateArray[1] \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"powzx"},"content":"                input.replaceFirst(descriptionDateArray[0], \"\")","lastModifiedDate":"2021-09-18"},{"lineNumber":102,"author":{"gitId":"powzx"},"content":"                        .replaceFirst(EVENT_PREFIX, \"\")","lastModifiedDate":"2021-09-18"},{"lineNumber":103,"author":{"gitId":"powzx"},"content":"                        .trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"powzx"},"content":"        return descriptionDateArray;","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":106,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":107,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"powzx"},"content":"     * Analyses the {@code userInputString} for its command word and arguments, and tries to match the","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"powzx"},"content":"     * command word with the commands, and constructs a {@code Command} object for further execution.","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":111,"author":{"gitId":"powzx"},"content":"     * @param userInputString input from the user through the user interface","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"powzx"},"content":"     * @return {@code Command}that corresponds to the command word","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the respective {@code Command} object cannot be instantiated","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"powzx"},"content":"    private static Command parseCommandWithArguments(String userInputString) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":116,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"powzx"},"content":"        String[] commandArgArray \u003d separateCommand(userInputString);","lastModifiedDate":"2021-09-18"},{"lineNumber":118,"author":{"gitId":"powzx"},"content":"        String command \u003d commandArgArray[0].toLowerCase();","lastModifiedDate":"2021-09-18"},{"lineNumber":119,"author":{"gitId":"powzx"},"content":"        String argument \u003d commandArgArray[1];","lastModifiedDate":"2021-09-18"},{"lineNumber":120,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":121,"author":{"gitId":"powzx"},"content":"        switch (command) {","lastModifiedDate":"2021-09-18"},{"lineNumber":122,"author":{"gitId":"powzx"},"content":"        case COMMAND_ECHO:","lastModifiedDate":"2021-09-18"},{"lineNumber":123,"author":{"gitId":"powzx"},"content":"            return new EchoCommand(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"powzx"},"content":"        case COMMAND_MARK_TASK_DONE:","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"powzx"},"content":"            return new MarkTaskDoneCommand(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":126,"author":{"gitId":"powzx"},"content":"        case COMMAND_ADD_TODO:","lastModifiedDate":"2021-09-18"},{"lineNumber":127,"author":{"gitId":"powzx"},"content":"            return new AddToDoCommand(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":128,"author":{"gitId":"powzx"},"content":"        case COMMAND_ADD_DEADLINE:","lastModifiedDate":"2021-09-18"},{"lineNumber":129,"author":{"gitId":"powzx"},"content":"            return new AddDeadlineCommand(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":130,"author":{"gitId":"powzx"},"content":"        case COMMAND_ADD_EVENT:","lastModifiedDate":"2021-09-18"},{"lineNumber":131,"author":{"gitId":"powzx"},"content":"            return new AddEventCommand(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":132,"author":{"gitId":"powzx"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-09-18"},{"lineNumber":133,"author":{"gitId":"powzx"},"content":"            return new DeleteTaskCommand(argument);","lastModifiedDate":"2021-09-18"},{"lineNumber":134,"author":{"gitId":"powzx"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2021-09-19"},{"lineNumber":135,"author":{"gitId":"powzx"},"content":"            return new FindCommand(argument);","lastModifiedDate":"2021-09-19"},{"lineNumber":136,"author":{"gitId":"powzx"},"content":"        case COMMAND_DATE:","lastModifiedDate":"2021-09-19"},{"lineNumber":137,"author":{"gitId":"powzx"},"content":"            return new DateCommand(argument);","lastModifiedDate":"2021-09-19"},{"lineNumber":138,"author":{"gitId":"powzx"},"content":"        default:","lastModifiedDate":"2021-09-18"},{"lineNumber":139,"author":{"gitId":"powzx"},"content":"            return new InvalidCommand();","lastModifiedDate":"2021-09-18"},{"lineNumber":140,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":141,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":142,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":143,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":144,"author":{"gitId":"powzx"},"content":"     * Treats the entire user input string as a command, and to determine which command it matches with, then","lastModifiedDate":"2021-09-19"},{"lineNumber":145,"author":{"gitId":"powzx"},"content":"     * constructs the respective {@code Command} object for further execution. If the user input string does","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"powzx"},"content":"     * not match with any command, then it will be further parsed for its command word and arguments.","lastModifiedDate":"2021-09-19"},{"lineNumber":147,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":148,"author":{"gitId":"powzx"},"content":"     * @param userInputString input from the user through the user interface","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"powzx"},"content":"     * @return {@code Command} that corresponds to the command word","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the respective {@code Command} object cannot be instantiated","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":152,"author":{"gitId":"powzx"},"content":"    public static Command parseCommand(String userInputString) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":153,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":154,"author":{"gitId":"powzx"},"content":"        switch (userInputString.toLowerCase()) {","lastModifiedDate":"2021-09-18"},{"lineNumber":155,"author":{"gitId":"powzx"},"content":"        case COMMAND_LIST_TASKS:","lastModifiedDate":"2021-09-18"},{"lineNumber":156,"author":{"gitId":"powzx"},"content":"            return new ListCommand();","lastModifiedDate":"2021-09-18"},{"lineNumber":157,"author":{"gitId":"powzx"},"content":"        case COMMAND_CLEAR_TASKS:","lastModifiedDate":"2021-09-18"},{"lineNumber":158,"author":{"gitId":"powzx"},"content":"            return new ClearCommand();","lastModifiedDate":"2021-09-18"},{"lineNumber":159,"author":{"gitId":"powzx"},"content":"        case COMMAND_HELP:","lastModifiedDate":"2021-09-18"},{"lineNumber":160,"author":{"gitId":"powzx"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-09-18"},{"lineNumber":161,"author":{"gitId":"powzx"},"content":"        case COMMAND_EXIT:","lastModifiedDate":"2021-09-18"},{"lineNumber":162,"author":{"gitId":"powzx"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-09-18"},{"lineNumber":163,"author":{"gitId":"powzx"},"content":"        default:","lastModifiedDate":"2021-09-18"},{"lineNumber":164,"author":{"gitId":"powzx"},"content":"            return parseCommandWithArguments(userInputString);","lastModifiedDate":"2021-09-18"},{"lineNumber":165,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":166,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":167,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":168,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":169,"author":{"gitId":"powzx"},"content":"     * Separates the data string into its important parameters of a {@code Task}, which includes the","lastModifiedDate":"2021-09-21"},{"lineNumber":170,"author":{"gitId":"powzx"},"content":"     * task type, done status, description, and date and time (if any).","lastModifiedDate":"2021-09-21"},{"lineNumber":171,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":172,"author":{"gitId":"powzx"},"content":"     * @param fileLine data string from storage representing a {@code Task} previously stored","lastModifiedDate":"2021-09-21"},{"lineNumber":173,"author":{"gitId":"powzx"},"content":"     * @return {@code Data} that represents the {@code Task}","lastModifiedDate":"2021-09-21"},{"lineNumber":174,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If information from storage is found to be corrupted","lastModifiedDate":"2021-09-21"},{"lineNumber":175,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":176,"author":{"gitId":"powzx"},"content":"    public static Data parseData(String fileLine) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":177,"author":{"gitId":"powzx"},"content":"        String[] parameters \u003d trimArrayElements(fileLine.split(DATA_SEPARATOR));","lastModifiedDate":"2021-09-18"},{"lineNumber":178,"author":{"gitId":"powzx"},"content":"        return new Data(parameters);","lastModifiedDate":"2021-09-18"},{"lineNumber":179,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":180,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":180}},{"path":"src/main/java/duke/storage/Data.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.storage;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":" * Represents the individual information of a {@code Task} retrieved from storage, before adding","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":" * them to the {@code Task} list.","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"public class Data {","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"    private String[] parameters;","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    private static final String CORRUPTED_DATA_ERROR \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"            \"OH NO! Your data is corrupted, starting a new file for you...\";","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eChecks if the date and time string is of a valid format.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eValid form: [yyyy-mm-dd]T[HH:MM]\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"     * @param date date string to check for validity","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code true} - if the specified date is valid\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code false} - otherwise\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    private boolean isValidDateTime(String date) {","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"            LocalDateTime.parse(date);","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"            return false;","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"        return true;","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eChecks if the data that is returned after parsing is corrupted.\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eFor example, the array [D, 0, description, date] will return {@code false} while the array","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"     * [D, 0, description] will return {@code true} since {@code Deadline} is expected to have a","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"     * date.\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eDates stored in the storage need to have a valid format, otherwise it is treated as corrupted.\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"     * @param parameters array that is returned after the information of a {@code Task} in storage is parsed","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code true} - if data is corrupted\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code false} - otherwise\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"    private boolean hasCorruptedData(String[] parameters) {","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"        switch (parameters[0]) {","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"        case \"T\":","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"            return (parameters.length \u003c 3);","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"        case \"D\":","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"        case \"E\":","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"            if (parameters.length \u003c 4) {","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"                return true;","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"            return !isValidDateTime(parameters[3]);","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"        default:","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"            return true;","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"powzx"},"content":"     * Constructs a {@code Data} object from the information read from the storage.","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"powzx"},"content":"     * @param parameters \u003cp\u003eVariable argument that contains the information of a {@code Task}\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"powzx"},"content":"     *                   \u003cp\u003eFor {@code ToDo} - Entries of the array represent the task type,","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"powzx"},"content":"     *                   done status, and description.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"powzx"},"content":"     *                   \u003cp\u003eFor {@code Deadline, Event} - Entries of the array represent the task","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"powzx"},"content":"     *                   type, done status, description, and the date and time.\u003c/p\u003e","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If information read from the storage is corrupted","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"powzx"},"content":"    public Data(String ... parameters) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":78,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"powzx"},"content":"        if (hasCorruptedData(parameters)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"powzx"},"content":"            throw new DukeException(CORRUPTED_DATA_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"powzx"},"content":"        this.parameters \u003d parameters;","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eConverts a {@code Data} to a {@code Task}, based on {@code parameters}\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eOne example of {@code parameters} can be [E, 1, attend wedding, 2021-09-01T19:00], where the entries","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"powzx"},"content":"     * represent the task type, done status, description, and date and time (if any). These parameters are used","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"powzx"},"content":"     * to construct the corresponding {@code Task}\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"powzx"},"content":"     * @return {@code Task} corresponding to the {@code Data}","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"powzx"},"content":"     * @throws DukeException if data is found to be corrupted","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":95,"author":{"gitId":"powzx"},"content":"    public Task toTask() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":96,"author":{"gitId":"powzx"},"content":"        Task task;","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"powzx"},"content":"        switch (parameters[0]) {","lastModifiedDate":"2021-09-18"},{"lineNumber":98,"author":{"gitId":"powzx"},"content":"        case \"T\":","lastModifiedDate":"2021-09-18"},{"lineNumber":99,"author":{"gitId":"powzx"},"content":"            task \u003d new ToDo(parameters[2]);","lastModifiedDate":"2021-09-18"},{"lineNumber":100,"author":{"gitId":"powzx"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"powzx"},"content":"        case \"D\":","lastModifiedDate":"2021-09-18"},{"lineNumber":102,"author":{"gitId":"powzx"},"content":"            task \u003d new Deadline(parameters[2], LocalDateTime.parse(parameters[3]));","lastModifiedDate":"2021-09-19"},{"lineNumber":103,"author":{"gitId":"powzx"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"powzx"},"content":"        case \"E\":","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"powzx"},"content":"            task \u003d new Event(parameters[2], LocalDateTime.parse(parameters[3]));","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"powzx"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":107,"author":{"gitId":"powzx"},"content":"        default:","lastModifiedDate":"2021-09-18"},{"lineNumber":108,"author":{"gitId":"powzx"},"content":"            throw new DukeException(CORRUPTED_DATA_ERROR);","lastModifiedDate":"2021-09-18"},{"lineNumber":109,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":110,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":111,"author":{"gitId":"powzx"},"content":"        if (parameters[1].equals(\"1\")) {","lastModifiedDate":"2021-09-18"},{"lineNumber":112,"author":{"gitId":"powzx"},"content":"            task.setDone();","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":114,"author":{"gitId":"powzx"},"content":"        return task;","lastModifiedDate":"2021-09-18"},{"lineNumber":115,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":116,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":116}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.storage;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"import java.io.File;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":" * Includes the operations that can be performed on the file with fixed path /duke.txt, such as reading the","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":" * file when {@code Duke} is first started, and updating the file after every command cycle.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"public class Storage {","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    private static final String STORAGE_PATH \u003d \"duke.txt\";","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    private static final String STORAGE_CREATED_MESSAGE \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"            \"I can\u0027t seem to find any file containing your past tasks, I\u0027ll create a new file for you!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"    private File storage \u003d new File(STORAGE_PATH);","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    private void createStorage() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"            storage.createNewFile();","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"            throw new DukeException(\"IO Exception encountered: \" + exception.getMessage());","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"     * Reads data strings from the storage and stores it in an {@code ArrayList}.","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"     * @return list that represents the individual lines of data string in the storage","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"     * @throws DukeException if the storage with path /duke.txt does not exist and is first created, or if the","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"     * storage cannot be created due to IO problems.","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"    private ArrayList\u003cString\u003e readFromStorage() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cString\u003e fileLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"            Scanner scanner \u003d new Scanner(storage);","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"                fileLines.add(scanner.nextLine());","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"        } catch (FileNotFoundException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"            createStorage();","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"            throw new DukeException(STORAGE_CREATED_MESSAGE);","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"        return fileLines;","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"     * Converts the list data string read from storage to list of {@code Data}.","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"     * @param fileLines list of data strings read from the storage","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"     * @return list of {@code Data}","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the data string cannot be converted due to corrupted data","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"    private ArrayList\u003cData\u003e processStorageToData(ArrayList\u003cString\u003e fileLines) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cData\u003e dataObjects \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"        Data dataObject;","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"        for (String fileLine : fileLines) {","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"            dataObject \u003d Parser.parseData(fileLine);","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"            dataObjects.add(dataObject);","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"powzx"},"content":"        return dataObjects;","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":71,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"powzx"},"content":"     * Converts the individual {@code Data} in the list to {@code Task}, and then adds it to the {@code Task} list.","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"powzx"},"content":"     * @param dataObjects list of {@code Data}","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If the {@code Data} cannot be converted due to corrupted data","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"powzx"},"content":"    private void writeToTaskList(ArrayList\u003cData\u003e dataObjects) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"powzx"},"content":"        for (Data data : dataObjects) {","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"powzx"},"content":"            Task task \u003d data.toTask();","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"powzx"},"content":"            TaskManager.addTask(task);","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"powzx"},"content":"     * Includes the entire process of bringing the information of previously stored {@code Task} as data strings","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"powzx"},"content":"     * from the storage to the current list of {@code Task} when {@code Duke} is first run.","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"powzx"},"content":"     * @throws DukeException Thrown if the data found in storage is corrupted, wiping the data in the file or","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"powzx"},"content":"     * creating a new one in the process.","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"powzx"},"content":"    public void loadStorageToTaskList() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":94,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cString\u003e fileLines \u003d readFromStorage();","lastModifiedDate":"2021-09-18"},{"lineNumber":95,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cData\u003e dataObjects \u003d processStorageToData(fileLines);","lastModifiedDate":"2021-09-18"},{"lineNumber":96,"author":{"gitId":"powzx"},"content":"        writeToTaskList(dataObjects);","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":98,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":99,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":100,"author":{"gitId":"powzx"},"content":"     * Writes the list of data strings of the {@code Task} stored in the current list to the storage.","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":102,"author":{"gitId":"powzx"},"content":"     * @param fileLines list of data strings","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If there is an IO exception encountered","lastModifiedDate":"2021-09-19"},{"lineNumber":104,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":105,"author":{"gitId":"powzx"},"content":"    private void writeToStorage(ArrayList\u003cString\u003e fileLines) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":106,"author":{"gitId":"powzx"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":107,"author":{"gitId":"powzx"},"content":"            FileWriter writer \u003d new FileWriter(STORAGE_PATH);","lastModifiedDate":"2021-09-18"},{"lineNumber":108,"author":{"gitId":"powzx"},"content":"            for (String line : fileLines) {","lastModifiedDate":"2021-09-18"},{"lineNumber":109,"author":{"gitId":"powzx"},"content":"                writer.append(line);","lastModifiedDate":"2021-09-18"},{"lineNumber":110,"author":{"gitId":"powzx"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":111,"author":{"gitId":"powzx"},"content":"            writer.close();","lastModifiedDate":"2021-09-18"},{"lineNumber":112,"author":{"gitId":"powzx"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"powzx"},"content":"            throw new DukeException(\"IO Exception encountered: \" + exception.getMessage());","lastModifiedDate":"2021-09-18"},{"lineNumber":114,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":115,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":116,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":118,"author":{"gitId":"powzx"},"content":"     * Includes the entire process of bringing the {@code Task} objects in the current list to the storage","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"powzx"},"content":"     * at the end of every command execution.","lastModifiedDate":"2021-09-19"},{"lineNumber":120,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":121,"author":{"gitId":"powzx"},"content":"     * @throws DukeException If there is an IO exception encountered in writing to the storage","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"powzx"},"content":"    public void loadTaskListToStorage() throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cString\u003e fileLines \u003d TaskManager.convertTasksToDataStringFormat();","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"powzx"},"content":"        writeToStorage(fileLines);","lastModifiedDate":"2021-09-18"},{"lineNumber":126,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":127,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":127}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"/** Represents a {@code Task} that has a specific deadline. */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"    private static final String SYMBOL \u003d \"D\";","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    private static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    private LocalDateTime taskDue;","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"     * Constructs a {@code Deadline} with all its information such as its description and deadline.","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"     * @param description description of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"     * @param taskDue deadline of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"    public Deadline(String description, LocalDateTime taskDue) {","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"        this.taskDue \u003d taskDue;","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"        return \"[\" + SYMBOL + \"]\" + super.toString() + \" (by: \"","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"                + taskDue.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, HH:mm\")) + \")\";","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"        return taskDue.toString().substring(0, 10);","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"    public String toDataStringFormat() {","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"        return SYMBOL + SEPARATOR + (isDone ? 1 : 0) + SEPARATOR + description + SEPARATOR + taskDue + \"\\n\";","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"powzx":39}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"/** Represents a {@code Task} that has a specific date and time of occurrence. */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"    private static final String SYMBOL \u003d \"E\";","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    private static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"    private LocalDateTime eventDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"     * Constructs an {@code Event} with all its information such as its description and date and time.","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"     * @param description description of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"     * @param eventDateTime date and time of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"    public Event(String description, LocalDateTime eventDateTime) {","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"        this.eventDateTime \u003d eventDateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"        return \"[\" + SYMBOL + \"]\" + super.toString() + \" (at: \"","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"                + eventDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, HH:mm\")) + \")\";","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"        return eventDateTime.toString().substring(0, 10);","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"    public String toDataStringFormat() {","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"        return SYMBOL + SEPARATOR + (isDone ? 1 : 0) + SEPARATOR + description + SEPARATOR + eventDateTime + \"\\n\";","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"powzx":39}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"/** Represents a task which is an abstract parent class of ToDo, Deadline, and Event. */","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"    protected String description;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"    protected String doneStatus;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"     * Constructs a {@code Task} with basic information such as description and done status.","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"     * @param description description of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"        this.doneStatus \u003d \" \";","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    /** Sets the {@code Task} as done, which will be denoted by an \u0027X\u0027 in its string format. */","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"        this.doneStatus \u003d \"X\";","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"        return description;","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"     * Converts the {@code Task} to its string format for display on the user interface.","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"     * @return {@code Task} in string format","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"        return \"[\" + doneStatus + \"] \" + description;","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"     * Retrieves the string format of the date from the date and time attached to the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"     * @return Date attached to the {@code Deadline} or {@code Event}, empty string if task is","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"     * {@code ToDo}","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"    public abstract String getDate();","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eConverts {@code Task} to the data string format that is used to store in the storage.\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003eFormat: {@code TASK_TYPE | DONE_STATUS | TASK_DESCRIPTION | TASK_DATE}\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"     * @return {@code Task} in data string format.","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"    public abstract String toDataStringFormat();","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"powzx":55}},{"path":"src/main/java/duke/tasks/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":" * Represents a utility class that contains methods to perform operations on a list","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":" * of {@code Task}.","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"public class TaskManager {","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"    private static int currentTasksCount \u003d 0;","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"     * To check if as specified number represents a {@code Task} in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"     * @param taskNumber number to check for validity.","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"     * @return","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code true} - if the number has a corresponding {@code Task} in the list\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"     * \u003cp\u003e{@code false} - otherwise\u003c/p\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"    public static boolean isValidTaskNumber(int taskNumber) {","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"        return (taskNumber \u003c\u003d currentTasksCount \u0026\u0026 taskNumber \u003e 0);","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"     * Getter method for the number of {@code Task} stored in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"     * @return Total number of {@code Task}","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"    public static int getCurrentTasksCount() {","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"        return currentTasksCount;","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"     * Converts all the existing {@code Task} in the list to data string format for storage.","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"     * @return list that contains all the {@code Task} in data string format","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"    public static ArrayList\u003cString\u003e convertTasksToDataStringFormat() {","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cString\u003e taskDataStrings \u003d","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"                (ArrayList\u003cString\u003e) tasks.stream()","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"                        .map(Task::toDataStringFormat)","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"        return taskDataStrings;","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"     * Gets the current task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"     * @return list of all {@code Task}","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"    public static ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"        return tasks;","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"     * Filters the current task list for tasks that have descriptions that contain a certain string.","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"     * @param filterWord String to filter the tasks","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"     * @return list of {@code Task} that contains {@code filterWord}","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"    public static ArrayList\u003cTask\u003e filterListByKeyword(String filterWord) {","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"powzx"},"content":"                (ArrayList\u003cTask\u003e) tasks.stream()","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"powzx"},"content":"                        .filter((task) -\u003e task.getDescription().toLowerCase().contains(filterWord.toLowerCase()))","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"powzx"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2021-09-19"},{"lineNumber":69,"author":{"gitId":"powzx"},"content":"        return filteredList;","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":71,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"powzx"},"content":"     * Filters the current task list for tasks that have a specific date attached.","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"powzx"},"content":"     * @param date Date to filter the tasks","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"powzx"},"content":"     * @return list of {@code Task} that has the specific {@code date} attached","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"powzx"},"content":"    public static ArrayList\u003cTask\u003e filterListByDate(String date) {","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"powzx"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"powzx"},"content":"                (ArrayList\u003cTask\u003e) tasks.stream()","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"powzx"},"content":"                        .filter((task) -\u003e date.equals(task.getDate()))","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"powzx"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"powzx"},"content":"        return filteredList;","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"powzx"},"content":"     * Converts all the {@code Task} given to string format, then concatenated as one string, for","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"powzx"},"content":"     * display on the user interface.","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"powzx"},"content":"     * @param tasks list of {@code Task} to convert to string format","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"powzx"},"content":"     * @return concatenated string of all {@code Task} in the list in string format","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":93,"author":{"gitId":"powzx"},"content":"    public static String listTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"powzx"},"content":"        String listOfTasks \u003d \"\";","lastModifiedDate":"2021-09-18"},{"lineNumber":95,"author":{"gitId":"powzx"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-19"},{"lineNumber":96,"author":{"gitId":"powzx"},"content":"            listOfTasks \u003d listOfTasks.concat(\"\\n\" + (i + 1) + \". \" + tasks.get(i).toString());","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"powzx"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":98,"author":{"gitId":"powzx"},"content":"        return listOfTasks;","lastModifiedDate":"2021-09-18"},{"lineNumber":99,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":100,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"powzx"},"content":"    /** Clears all the tasks stored in task list. */","lastModifiedDate":"2021-09-19"},{"lineNumber":102,"author":{"gitId":"powzx"},"content":"    public static void clearAllTasks() {","lastModifiedDate":"2021-09-19"},{"lineNumber":103,"author":{"gitId":"powzx"},"content":"        tasks.clear();","lastModifiedDate":"2021-09-19"},{"lineNumber":104,"author":{"gitId":"powzx"},"content":"        currentTasksCount \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":105,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"powzx"},"content":"     * Adds a {@code Task} to the current task list.","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":110,"author":{"gitId":"powzx"},"content":"     * @param task {@code Task} to be added","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":112,"author":{"gitId":"powzx"},"content":"    public static void addTask(Task task) {","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"powzx"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-19"},{"lineNumber":114,"author":{"gitId":"powzx"},"content":"        currentTasksCount++;","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":116,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":117,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":118,"author":{"gitId":"powzx"},"content":"     * Deletes a {@code Task} from the current task list.","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":120,"author":{"gitId":"powzx"},"content":"     * @param taskIndex Number corresponding to the {@code Task} in the list","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"powzx"},"content":"     * @return {@code Task} that is deleted","lastModifiedDate":"2021-09-21"},{"lineNumber":122,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"powzx"},"content":"    public static Task deleteTask(int taskIndex) {","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"powzx"},"content":"        Task deletedTask \u003d tasks.get(taskIndex - 1);","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"powzx"},"content":"        tasks.remove(taskIndex - 1);","lastModifiedDate":"2021-09-18"},{"lineNumber":126,"author":{"gitId":"powzx"},"content":"        currentTasksCount--;","lastModifiedDate":"2021-09-18"},{"lineNumber":127,"author":{"gitId":"powzx"},"content":"        return deletedTask;","lastModifiedDate":"2021-09-18"},{"lineNumber":128,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":129,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":130,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":131,"author":{"gitId":"powzx"},"content":"     * Marks a {@code Task} done in the current task list.","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":133,"author":{"gitId":"powzx"},"content":"     * @param taskIndex Number corresponding to the {@code Task} in the list","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"powzx"},"content":"     * @return {@code Task} that is marked as done","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":136,"author":{"gitId":"powzx"},"content":"    public static Task markTaskDone(int taskIndex) {","lastModifiedDate":"2021-09-18"},{"lineNumber":137,"author":{"gitId":"powzx"},"content":"        Task doneTask \u003d tasks.get(taskIndex - 1);","lastModifiedDate":"2021-09-18"},{"lineNumber":138,"author":{"gitId":"powzx"},"content":"        doneTask.setDone();","lastModifiedDate":"2021-09-18"},{"lineNumber":139,"author":{"gitId":"powzx"},"content":"        return doneTask;","lastModifiedDate":"2021-09-18"},{"lineNumber":140,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":141,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":141}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"/** Represents a {@code Task} that does not have any specific deadlines or date of occurrence. */","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"    private static final String SYMBOL \u003d \"T\";","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"    private static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"     * Constructs a {@code ToDo} with all its relevant information such as description.","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"     * @param description description of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"        return \"[\" + SYMBOL + \"]\" + super.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"        return \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"    public String toDataStringFormat() {","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"        return SYMBOL + SEPARATOR + (isDone ? 1 : 0) + SEPARATOR + description + \"\\n\";","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"powzx":32}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"package duke.ui;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"import duke.commands.CommandResult;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"/** Includes the methods that display messages from {@code Duke} to the user on the terminal. */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"public class Ui {","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"    private static final String LOGO \u003d \" ______        _\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"            + \"(______)      | |\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"            + \" _     _ _   _| |  _ _____\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"            + \"| |   | | | | | |_/ ) ___ |\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"            + \"| |__/ /| |_| |  _ (| ____|\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"            + \"|_____/ |____/|_| \\\\_)_____)\\n\";","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"    private static final String GREET_MESSAGE \u003d \"Welcome to\\n\" + LOGO","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"                    + \"Hello there! I\u0027m Duke, your very helpful personal assistant chat bot.\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"                    + \"Enter \\\"help\\\" to see what I can do for you!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"    private void showDivider() {","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"    /** Prints greet message when {@code Duke} is first run. */","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"    public void showGreetMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"        System.out.println(GREET_MESSAGE);","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"        showDivider();","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"    /** Prints feedback from the command execution.","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"     * @param result Object that is returned from the execution of {@code Command}","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"    public void showFeedbackToUser(CommandResult result) {","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"        System.out.println(result.getFeedbackToUser());","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"        showDivider();","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"    /** Prints error message from the exception if encountered.","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"     * @param exception Object thrown","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"    public void showErrorMessage(DukeException exception) {","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"        System.out.println(exception.getMessage());","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"        showDivider();","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"powzx":47}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"powzx"},"content":"clear","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"powzx"},"content":"echo Hello World!","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"powzx"},"content":"todo Buy flowers for girlfriend","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"powzx"},"content":"deadline Finish iP project /by 2021-08-22T23:59","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"powzx"},"content":"done 1","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"powzx"},"content":"done 2","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"powzx"},"content":"event Attend Bob\u0027s wedding /at 2021-09-18T19:00","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"powzx"},"content":"event Team Meeting /at 2021-09-16T09:30","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"powzx"},"content":"todo Finish CG2027 videos /by Monday 8pm","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"powzx"},"content":"done 4","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"powzx"},"content":"   done   5","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"powzx"},"content":"echo This has been a great test so far!","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"powzx"},"content":"help","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"powzx"},"content":"random cmd","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"powzx"},"content":"more dummy","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"powzx"},"content":"echo           If you can see this, then it\u0027s all good.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"powzx"},"content":"todo                 Make more space","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"powzx"},"content":"deadline         Do project report/by2021-10-10T14:00","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"powzx"},"content":"event                  Cry         /at          2021-11-11T03:00","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"powzx"},"content":"event Cry again/at     2021-08-22T04:30","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"powzx"},"content":"done            9","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"powzx"},"content":"done 7","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"powzx"},"content":" delete    5","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"powzx"},"content":"delete 9","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"powzx"},"content":"delete    1","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"powzx"},"content":"find cry","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"powzx"},"content":"date   2021-08-22","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"powzx"},"content":"echo Start exception handling test","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"powzx"},"content":"find","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"powzx"},"content":"date  abc","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"powzx"},"content":"delete","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"powzx"},"content":"delete ok","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"powzx"},"content":"delete  12","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"powzx"},"content":"delete 0","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"powzx"},"content":"     clear","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"powzx"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"powzx"},"content":"echo","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"powzx"},"content":"todo","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"powzx"},"content":"deadline","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"powzx"},"content":"deadline  something","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"powzx"},"content":"deadline     something/by","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"powzx"},"content":"deadline /by","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"powzx"},"content":"deadline /bysometime","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"powzx"},"content":"event","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"powzx"},"content":"event   something","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"powzx"},"content":"event something/at","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"powzx"},"content":"event /at","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"powzx"},"content":"event /at    sometime","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"powzx"},"content":"done","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"powzx"},"content":"done    abc","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"powzx"},"content":"done 10","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"powzx"},"content":"deadline something | very urgent","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"powzx"},"content":"deadline something /by sometime","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"powzx"},"content":"event something /at 20200109","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"powzx"},"content":"deadline something/by   2021-10-03T27:71","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"powzx"},"content":"bye","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"powzx":65}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"powzx"},"content":"java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"powzx":1,"-":20}}]
