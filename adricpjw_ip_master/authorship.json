[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"# Duke.Duke project template","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"1. Click `Open`.","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"3. After that, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"adricpjw":9,"-":15}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"T|0|read book","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"D|0|return book (by: May 29 1998 18:00)","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"D|1|eat food (by: Sep 18 2021 23:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"T|0|read book 2","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"T|0|eat dinner","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"E|0|family dinner (at: Sep 20 2021 19:30)","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"adricpjw":6}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"![](https://i.imgur.com/nWV4Y9h.png)","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"# DUKE : Task Scheduler","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"**Duke Task Scheduler** (DTS) is a desktop app for **managing tasks and todos**,","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"optimized for use via a **Command Line Interface (CLI)**. DTS is the simple, fast, and elegant solution","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"for all your task scheduling needs.","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"[![Build Status](http://img.shields.io/travis/badges/badgerbadgerbadger.svg?style\u003dflat-square)](https://travis-ci.org/badges/badgerbadgerbadger)","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"\u003e Tested and ran on Windows 10, Java 11","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"## Table of Contents","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"- [Features](#features)","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"    * [Viewing help](#viewing-help--help)","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"    * [Listing tasks](#listing-tasks-list)","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"    * [Querying tasks](#querying-tasks-find-regex-type-tasktype-limit-querylimit)","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"    * [Adding a Todo](#adding-a-todo-todo-description)","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"    * [Adding a Deadline](#adding-a-deadline-deadline-description-by-datetime)","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"    * [Adding an Event](#adding-an-event-event-description-at-datetime)","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"    * [List valid DateTime Formats](#list-valid-datetime-formats-dates)","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"    * [Removing a task](#removing-a-task-delete-idx)","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"    * [Marking a task as done](#marking-a-task-as-done-done-idx)","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"    * [Exit](#exit-the-application--bye)","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"    * [Local Save](#local-save)","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"- [FAQ](#faq)","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"- [Command Summary]()","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"## Quick Start","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"1. Ensure that you have Java `11` or above installed in your computer","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"2. Download the latest `duke.jar` from [here]()","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"3. Copy the file to the folder you want to use as the home folder for your `Task Scheduler`.","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"4. Double-click the file to start the app.","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"You should see the following output :","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"```bash","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"Hello from","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":" ____        _        ","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"|  _ \\ _   _| | _____ ","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"_________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"Hello! I\u0027m Duke.Duke","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"Standby while I load up your schedule","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"Loading...","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"Here are your scheduled tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"1.[T][ ] read book 2","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"2.[T][ ] read book","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"3.[D][ ] return book (by: May 29 1998 18:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"4.[D][ ] eat food (by: Sep 18 2021 23:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"adricpjw"},"content":"You now have (4) tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"adricpjw"},"content":"What can I do for you?","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"adricpjw"},"content":"5. Note the sample tasks already present! Type a command and press `Enter` to execute it.","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"adricpjw"},"content":"   e.g. typing `help` will display all possible commands that **DUKE** accepts.","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"adricpjw"},"content":"Some example commands you can try:","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"adricpjw"},"content":"- `list` : lists all tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"adricpjw"},"content":"- `todo \u003cdescription\u003e` : adds a TODO task into the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"adricpjw"},"content":"- `deadline \u003cdescription\u003e /by \u003cdatetime\u003e` : adds a DEADLINE task to be completed by `\u003cdatetime\u003e` into task list","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"adricpjw"},"content":"- `event \u003cdescription\u003e /at \u003cdatetime\u003e` : adds a EVENT task that will take place at `\u003cdatetime\u003e` into task list","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"adricpjw"},"content":"- `delete \u003cidx\u003e` : deletes a task by its index","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"adricpjw"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":79,"author":{"gitId":"adricpjw"},"content":"\u003e:information_source: **Notes about the command formats**","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"adricpjw"},"content":"\u003e - Words in `\u003cUPPER_CASE\u003e` are the parameters to be given by the user. \u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"adricpjw"},"content":"\u003e e.g. in `todo \u003cDESCRIPTION\u003e`, \u003cDESCRIPTION\u003e is a parameter and be called like so : `todo eat breakfast`","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"adricpjw"},"content":"\u003e \u003cbr /\u003e\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"adricpjw"},"content":"\u003e - Items in square brackets are optional \u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"adricpjw"},"content":"\u003e e.g. find `find \u003cREGEX\u003e [/type TASKTYPE]` ","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"adricpjw"},"content":"\u003e can be called as `find eat /type todo` OR `find eat`.","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"adricpjw"},"content":"\u003e \u003cbr /\u003e\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"adricpjw"},"content":"\u003e - Parameters can be in any order for optional flags \u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"adricpjw"},"content":"\u003e e.g. `find \u003cREGEX\u003e [/type TASKTYPE] [/limit QUERYLIMIT]` is equivalent to `find \u003cREGEX\u003e [/limit QUERYLIMIT] [/type TASKTYPE] `","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"adricpjw"},"content":"\u003e \u003cbr /\u003e\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"adricpjw"},"content":"\u003e - Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `bye`) will be ignored.\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"adricpjw"},"content":"\u003e e.g. `help abc` will be interpreted as  `help`","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"adricpjw"},"content":"### Viewing help : `help`","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"adricpjw"},"content":"This will list all the valid commands that DUKE accepts.","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"adricpjw"},"content":"~$ help","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"adricpjw"},"content":"These are the valid commands: ","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"adricpjw"},"content":" \u003e bye","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"adricpjw"},"content":" \u003e help","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"adricpjw"},"content":" \u003e dates","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"adricpjw"},"content":" \u003e list","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"adricpjw"},"content":" \u003e find","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"adricpjw"},"content":" \u003e todo","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"adricpjw"},"content":" \u003e deadline","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"adricpjw"},"content":" \u003e event","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"adricpjw"},"content":" \u003e delete","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"adricpjw"},"content":" \u003e done","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"adricpjw"},"content":"### Listing tasks: `list`","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"adricpjw"},"content":"This command lists all the tasks current registered in the the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"adricpjw"},"content":"list","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"adricpjw"},"content":"Here are your scheduled tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"adricpjw"},"content":"1.[T][ ] read book 2","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"adricpjw"},"content":"2.[T][ ] read book","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"adricpjw"},"content":"3.[D][ ] return book (by: May 29 1998 18:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":122,"author":{"gitId":"adricpjw"},"content":"4.[D][ ] eat food (by: Sep 18 2021 23:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":123,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":124,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"adricpjw"},"content":"The format for each Task printed is:","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"adricpjw"},"content":"`[TaskType][isDone] Description`","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"adricpjw"},"content":"**TaskType:**","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"adricpjw"},"content":"* T -\u003e TODO task","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"adricpjw"},"content":"* D -\u003e DEADLINE Task","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"adricpjw"},"content":"* E -\u003e EVENT Task","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"adricpjw"},"content":"**isDone:**","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"adricpjw"},"content":"* \\[ ]  -\u003e not done","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"adricpjw"},"content":"* \\[X] -\u003e done","lastModifiedDate":"2021-09-21"},{"lineNumber":136,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":137,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":138,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":139,"author":{"gitId":"adricpjw"},"content":"### Querying tasks: `find \u003cREGEX\u003e [/type TASKTYPE] [/limit QUERYLIMIT]`","lastModifiedDate":"2021-09-21"},{"lineNumber":140,"author":{"gitId":"adricpjw"},"content":"Queries the task list by a word or phrase.","lastModifiedDate":"2021-09-21"},{"lineNumber":141,"author":{"gitId":"adricpjw"},"content":"- The **task type** can be specified for query by using the optional flag `/type`","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"adricpjw"},"content":"    * e.g. `/type todo` will filter the query to only return TODO tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"adricpjw"},"content":"- The **number of tasks** returned can be limited by the optional flag `/limit`","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"adricpjw"},"content":"    * e.g `/limit 5` will filter the query to only return the top 5 tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"adricpjw"},"content":"- Any remaining tasks that contains the `REGEXx` will be displayed","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"adricpjw"},"content":"Example 1:","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"adricpjw"},"content":"~$ find book","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"adricpjw"},"content":"Your query returned the following results: ","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"adricpjw"},"content":"1.[T][ ] read book","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"adricpjw"},"content":"2.[D][ ] return book (by: May 29 1998 18:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"adricpjw"},"content":"3.[T][ ] read book 2","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"adricpjw"},"content":"Example 2:","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":164,"author":{"gitId":"adricpjw"},"content":"~$ find book /type todo","lastModifiedDate":"2021-09-21"},{"lineNumber":165,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"adricpjw"},"content":"Your query returned the following results: ","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"adricpjw"},"content":"1.[T][ ] read book","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"adricpjw"},"content":"2.[T][ ] read book 2","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":170,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":171,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":172,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":174,"author":{"gitId":"adricpjw"},"content":"### Adding a TODO: `todo \u003cDESCRIPTION\u003e`","lastModifiedDate":"2021-09-21"},{"lineNumber":175,"author":{"gitId":"adricpjw"},"content":"Adds a *TODO* task to the task list. It is set to **not done** by default","lastModifiedDate":"2021-09-21"},{"lineNumber":176,"author":{"gitId":"adricpjw"},"content":"- **DESCRIPTION** : the Task description","lastModifiedDate":"2021-09-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":178,"author":{"gitId":"adricpjw"},"content":"Example: `todo eat dinner`","lastModifiedDate":"2021-09-21"},{"lineNumber":179,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":180,"author":{"gitId":"adricpjw"},"content":"~$ todo eat dinner","lastModifiedDate":"2021-09-21"},{"lineNumber":181,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"adricpjw"},"content":"Got it. I\u0027ve added this task: ","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"adricpjw"},"content":"[T][ ] eat dinner","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"adricpjw"},"content":"You now have (5) tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":187,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":189,"author":{"gitId":"adricpjw"},"content":"### Adding a DEADLINE: `deadline \u003cDESCRIPTION\u003e /by \u003cDATETIME\u003e`","lastModifiedDate":"2021-09-21"},{"lineNumber":190,"author":{"gitId":"adricpjw"},"content":"Adds a *DEADLINE* task to the task list. It is set to **not done** by default","lastModifiedDate":"2021-09-21"},{"lineNumber":191,"author":{"gitId":"adricpjw"},"content":"- **DESCRIPTION** : the Task description","lastModifiedDate":"2021-09-21"},{"lineNumber":192,"author":{"gitId":"adricpjw"},"content":"- **/by** : is a *REQUIRED* clause when adding a deadline","lastModifiedDate":"2021-09-21"},{"lineNumber":193,"author":{"gitId":"adricpjw"},"content":"- **DATETIME** : the *date* and *time* that the task is due by. This **CANNOT BE NULL/EMPTY**.","lastModifiedDate":"2021-09-21"},{"lineNumber":194,"author":{"gitId":"adricpjw"},"content":"\u003e :warning: Note: datetime needs to be given in a valid format.","lastModifiedDate":"2021-09-21"},{"lineNumber":195,"author":{"gitId":"adricpjw"},"content":"\u003e See [Dates](#list-valid-datetime-formats-dates) for more details","lastModifiedDate":"2021-09-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":197,"author":{"gitId":"adricpjw"},"content":"Example: `deadline eat lunch /by today 1200`","lastModifiedDate":"2021-09-21"},{"lineNumber":198,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":199,"author":{"gitId":"adricpjw"},"content":"~$ deadline eat lunch /by today 1200","lastModifiedDate":"2021-09-21"},{"lineNumber":200,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":201,"author":{"gitId":"adricpjw"},"content":"Got it. I\u0027ve added this task: ","lastModifiedDate":"2021-09-21"},{"lineNumber":202,"author":{"gitId":"adricpjw"},"content":"[D][ ] eat lunch (by: Sep 20 2021 12:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":203,"author":{"gitId":"adricpjw"},"content":"You now have (6) tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":204,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":206,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":207,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":209,"author":{"gitId":"adricpjw"},"content":"### Adding an EVENT: `event \u003cDESCRIPTION\u003e /at \u003cDATETIME\u003e`","lastModifiedDate":"2021-09-21"},{"lineNumber":210,"author":{"gitId":"adricpjw"},"content":"Adds a *EVENT* task to the task list. It is set to **not done** by default","lastModifiedDate":"2021-09-21"},{"lineNumber":211,"author":{"gitId":"adricpjw"},"content":"- **DESCRIPTION** : the Task description","lastModifiedDate":"2021-09-21"},{"lineNumber":212,"author":{"gitId":"adricpjw"},"content":"- **/at** : is a *REQUIRED* clause when adding a deadline","lastModifiedDate":"2021-09-21"},{"lineNumber":213,"author":{"gitId":"adricpjw"},"content":"- **DATETIME** : the *date* and *time* that the task takes place. This **CANNOT BE NULL/EMPTY**.","lastModifiedDate":"2021-09-21"},{"lineNumber":214,"author":{"gitId":"adricpjw"},"content":"\u003e :warning: Note: datetime needs to be given in a valid format.","lastModifiedDate":"2021-09-21"},{"lineNumber":215,"author":{"gitId":"adricpjw"},"content":"\u003e See [Dates](#list-valid-datetime-formats-dates) for more details","lastModifiedDate":"2021-09-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":217,"author":{"gitId":"adricpjw"},"content":"Example: `event family dinner /at today 1930`","lastModifiedDate":"2021-09-21"},{"lineNumber":218,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":219,"author":{"gitId":"adricpjw"},"content":"~$ event family dinner /at today 1930","lastModifiedDate":"2021-09-21"},{"lineNumber":220,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":221,"author":{"gitId":"adricpjw"},"content":"Got it. I\u0027ve added this task: ","lastModifiedDate":"2021-09-21"},{"lineNumber":222,"author":{"gitId":"adricpjw"},"content":"[E][ ] family dinner (at: Sep 20 2021 19:30)","lastModifiedDate":"2021-09-21"},{"lineNumber":223,"author":{"gitId":"adricpjw"},"content":"You now have (7) tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":224,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":225,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":227,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":229,"author":{"gitId":"adricpjw"},"content":"### List valid DateTime Formats: `dates`","lastModifiedDate":"2021-09-21"},{"lineNumber":230,"author":{"gitId":"adricpjw"},"content":"Lists all the valid datetime formats to be used when","lastModifiedDate":"2021-09-21"},{"lineNumber":231,"author":{"gitId":"adricpjw"},"content":"adding a [Deadline](#adding-a-deadline-deadline-description-by-datetime)","lastModifiedDate":"2021-09-21"},{"lineNumber":232,"author":{"gitId":"adricpjw"},"content":"or [Event](#adding-an-event-event-description-at-datetime).","lastModifiedDate":"2021-09-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":234,"author":{"gitId":"adricpjw"},"content":"Example: `help`","lastModifiedDate":"2021-09-21"},{"lineNumber":235,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":236,"author":{"gitId":"adricpjw"},"content":"~$ dates","lastModifiedDate":"2021-09-21"},{"lineNumber":237,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":238,"author":{"gitId":"adricpjw"},"content":"Here are the valid DateTime formats to use: ","lastModifiedDate":"2021-09-21"},{"lineNumber":239,"author":{"gitId":"adricpjw"},"content":"-\u003e MMM d yyyy HH:mm","lastModifiedDate":"2021-09-21"},{"lineNumber":240,"author":{"gitId":"adricpjw"},"content":"-\u003e MMM d yyyy HHmm","lastModifiedDate":"2021-09-21"},{"lineNumber":241,"author":{"gitId":"adricpjw"},"content":"-\u003e MMM d yy HH:mm","lastModifiedDate":"2021-09-21"},{"lineNumber":242,"author":{"gitId":"adricpjw"},"content":"-\u003e MMM d yy HHmm","lastModifiedDate":"2021-09-21"},{"lineNumber":243,"author":{"gitId":"adricpjw"},"content":"-\u003e dd/M/yyyy HH:mm","lastModifiedDate":"2021-09-21"},{"lineNumber":244,"author":{"gitId":"adricpjw"},"content":"-\u003e dd/M/yyyy HHmm","lastModifiedDate":"2021-09-21"},{"lineNumber":245,"author":{"gitId":"adricpjw"},"content":"-\u003e dd/M/yy HH:mm","lastModifiedDate":"2021-09-21"},{"lineNumber":246,"author":{"gitId":"adricpjw"},"content":"-\u003e dd/M/yy HHmm","lastModifiedDate":"2021-09-21"},{"lineNumber":247,"author":{"gitId":"adricpjw"},"content":"-\u003e today HH:mm","lastModifiedDate":"2021-09-21"},{"lineNumber":248,"author":{"gitId":"adricpjw"},"content":"-\u003e today HHmm","lastModifiedDate":"2021-09-21"},{"lineNumber":249,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":251,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":252,"author":{"gitId":"adricpjw"},"content":"\u003e :bulb: Refer to the following Table for example of valid date time formats:","lastModifiedDate":"2021-09-21"},{"lineNumber":253,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":254,"author":{"gitId":"adricpjw"},"content":"| Pattern Syntax | Example    |","lastModifiedDate":"2021-09-21"},{"lineNumber":255,"author":{"gitId":"adricpjw"},"content":"| -------------- | ---------- |","lastModifiedDate":"2021-09-21"},{"lineNumber":256,"author":{"gitId":"adricpjw"},"content":"| MMM d yyyy     | Oct 10 2015|","lastModifiedDate":"2021-09-21"},{"lineNumber":257,"author":{"gitId":"adricpjw"},"content":"| MMM d yy       | Oct 10 15  |","lastModifiedDate":"2021-09-21"},{"lineNumber":258,"author":{"gitId":"adricpjw"},"content":"| dd/M/yyyy      | 15/10/2015 |","lastModifiedDate":"2021-09-21"},{"lineNumber":259,"author":{"gitId":"adricpjw"},"content":"| dd/M/yy        | 15/10/15   |","lastModifiedDate":"2021-09-21"},{"lineNumber":260,"author":{"gitId":"adricpjw"},"content":"| today          | today      |","lastModifiedDate":"2021-09-21"},{"lineNumber":261,"author":{"gitId":"adricpjw"},"content":"| HH:mm          | 18:00      |","lastModifiedDate":"2021-09-21"},{"lineNumber":262,"author":{"gitId":"adricpjw"},"content":"| HHmm           | 1800       |","lastModifiedDate":"2021-09-21"},{"lineNumber":263,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":264,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":265,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":266,"author":{"gitId":"adricpjw"},"content":"### Removing a task: `delete \u003cIDX\u003e`","lastModifiedDate":"2021-09-21"},{"lineNumber":267,"author":{"gitId":"adricpjw"},"content":"Removes a task from the task list, by their **idx**","lastModifiedDate":"2021-09-21"},{"lineNumber":268,"author":{"gitId":"adricpjw"},"content":"- **IDX** : index as displayed in the full list (:no_entry: **NOT QUERIED LIST**)","lastModifiedDate":"2021-09-21"},{"lineNumber":269,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":270,"author":{"gitId":"adricpjw"},"content":"Example: `list` -\u003e `delete 6`","lastModifiedDate":"2021-09-21"},{"lineNumber":271,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":272,"author":{"gitId":"adricpjw"},"content":"~$ list","lastModifiedDate":"2021-09-21"},{"lineNumber":273,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":274,"author":{"gitId":"adricpjw"},"content":"Here are your scheduled tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":275,"author":{"gitId":"adricpjw"},"content":"1.[T][ ] eat dinner","lastModifiedDate":"2021-09-21"},{"lineNumber":276,"author":{"gitId":"adricpjw"},"content":"2.[T][ ] read book 2","lastModifiedDate":"2021-09-21"},{"lineNumber":277,"author":{"gitId":"adricpjw"},"content":"3.[T][ ] read book","lastModifiedDate":"2021-09-21"},{"lineNumber":278,"author":{"gitId":"adricpjw"},"content":"4.[D][ ] return book (by: May 29 1998 18:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":279,"author":{"gitId":"adricpjw"},"content":"5.[D][ ] eat food (by: Sep 18 2021 23:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":280,"author":{"gitId":"adricpjw"},"content":"6.[D][ ] eat lunch (by: Sep 20 2021 12:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":281,"author":{"gitId":"adricpjw"},"content":"7.[E][ ] family dinner (at: Sep 20 2021 19:30)","lastModifiedDate":"2021-09-21"},{"lineNumber":282,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":283,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":284,"author":{"gitId":"adricpjw"},"content":"~$ delete 6","lastModifiedDate":"2021-09-21"},{"lineNumber":285,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":286,"author":{"gitId":"adricpjw"},"content":"Noted. I\u0027ve removed this task: ","lastModifiedDate":"2021-09-21"},{"lineNumber":287,"author":{"gitId":"adricpjw"},"content":"[D][ ] eat lunch (by: Sep 20 2021 12:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":288,"author":{"gitId":"adricpjw"},"content":"You now have (6) tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":289,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":290,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":291,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":292,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":293,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":294,"author":{"gitId":"adricpjw"},"content":"### Marking a task as done: `done \u003cIDX\u003e`","lastModifiedDate":"2021-09-21"},{"lineNumber":295,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":296,"author":{"gitId":"adricpjw"},"content":"Marks a task as done, by their **IDX**.","lastModifiedDate":"2021-09-21"},{"lineNumber":297,"author":{"gitId":"adricpjw"},"content":"- **IDX** : index as displayed in the full list (:no_entry: **NOT QUERIED LIST**)","lastModifiedDate":"2021-09-21"},{"lineNumber":298,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":299,"author":{"gitId":"adricpjw"},"content":"Example: `list` -\u003e `done 5`","lastModifiedDate":"2021-09-21"},{"lineNumber":300,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":301,"author":{"gitId":"adricpjw"},"content":"~$ list","lastModifiedDate":"2021-09-21"},{"lineNumber":302,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":303,"author":{"gitId":"adricpjw"},"content":"Here are your scheduled tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":304,"author":{"gitId":"adricpjw"},"content":"1.[T][ ] eat dinner","lastModifiedDate":"2021-09-21"},{"lineNumber":305,"author":{"gitId":"adricpjw"},"content":"2.[T][ ] read book 2","lastModifiedDate":"2021-09-21"},{"lineNumber":306,"author":{"gitId":"adricpjw"},"content":"3.[T][ ] read book","lastModifiedDate":"2021-09-21"},{"lineNumber":307,"author":{"gitId":"adricpjw"},"content":"4.[D][ ] return book (by: May 29 1998 18:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":308,"author":{"gitId":"adricpjw"},"content":"5.[D][ ] eat food (by: Sep 18 2021 23:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":309,"author":{"gitId":"adricpjw"},"content":"6.[E][ ] family dinner (at: Sep 20 2021 19:30)","lastModifiedDate":"2021-09-21"},{"lineNumber":310,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":311,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":312,"author":{"gitId":"adricpjw"},"content":"~$ done 5","lastModifiedDate":"2021-09-21"},{"lineNumber":313,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":314,"author":{"gitId":"adricpjw"},"content":"Nice! I\u0027ve marked this task as done: ","lastModifiedDate":"2021-09-21"},{"lineNumber":315,"author":{"gitId":"adricpjw"},"content":"[T][X] eat dinner","lastModifiedDate":"2021-09-21"},{"lineNumber":316,"author":{"gitId":"adricpjw"},"content":"Here are your scheduled tasks!","lastModifiedDate":"2021-09-21"},{"lineNumber":317,"author":{"gitId":"adricpjw"},"content":"1.[T][ ] eat dinner","lastModifiedDate":"2021-09-21"},{"lineNumber":318,"author":{"gitId":"adricpjw"},"content":"2.[T][ ] read book 2","lastModifiedDate":"2021-09-21"},{"lineNumber":319,"author":{"gitId":"adricpjw"},"content":"3.[T][ ] read book","lastModifiedDate":"2021-09-21"},{"lineNumber":320,"author":{"gitId":"adricpjw"},"content":"4.[D][ ] return book (by: May 29 1998 18:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":321,"author":{"gitId":"adricpjw"},"content":"5.[D][X] eat food (by: Sep 18 2021 23:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":322,"author":{"gitId":"adricpjw"},"content":"6.[E][ ] family dinner (at: Sep 20 2021 19:30)","lastModifiedDate":"2021-09-21"},{"lineNumber":323,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":324,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":325,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":326,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":327,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":328,"author":{"gitId":"adricpjw"},"content":"### Exit the application : `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":329,"author":{"gitId":"adricpjw"},"content":"Exits and closes **DUKE**.","lastModifiedDate":"2021-09-21"},{"lineNumber":330,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":331,"author":{"gitId":"adricpjw"},"content":"Example: `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":332,"author":{"gitId":"adricpjw"},"content":"```shell","lastModifiedDate":"2021-09-21"},{"lineNumber":333,"author":{"gitId":"adricpjw"},"content":"~$ bye","lastModifiedDate":"2021-09-21"},{"lineNumber":334,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":335,"author":{"gitId":"adricpjw"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2021-09-21"},{"lineNumber":336,"author":{"gitId":"adricpjw"},"content":"------------------------------------------","lastModifiedDate":"2021-09-21"},{"lineNumber":337,"author":{"gitId":"adricpjw"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":338,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":339,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":340,"author":{"gitId":"adricpjw"},"content":"### Local Save","lastModifiedDate":"2021-09-21"},{"lineNumber":341,"author":{"gitId":"adricpjw"},"content":"All updates made to the task list is automatically saved to a local file","lastModifiedDate":"2021-09-21"},{"lineNumber":342,"author":{"gitId":"adricpjw"},"content":"\u003e Note: Save will be automatically loaded up on application start up, if valid","lastModifiedDate":"2021-09-21"},{"lineNumber":343,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":344,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":345,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":346,"author":{"gitId":"adricpjw"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":347,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":348,"author":{"gitId":"adricpjw"},"content":"## FAQ","lastModifiedDate":"2021-09-21"},{"lineNumber":349,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":350,"author":{"gitId":"adricpjw"},"content":"**Q:** Why am I getting DukeExceptions with my input","lastModifiedDate":"2021-09-21"},{"lineNumber":351,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":352,"author":{"gitId":"adricpjw"},"content":"**A:** The input syntax is likely invalid, check with the documentation listed in [Features](#features)","lastModifiedDate":"2021-09-21"},{"lineNumber":353,"author":{"gitId":"adricpjw"},"content":"        to make sure that your input is valid. The exception likely shows what went wrong too!","lastModifiedDate":"2021-09-21"},{"lineNumber":354,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":355,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":356,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":357,"author":{"gitId":"adricpjw"},"content":"**Q:** How do I edit a task I previously registered?","lastModifiedDate":"2021-09-21"},{"lineNumber":358,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":359,"author":{"gitId":"adricpjw"},"content":"**A:** Edit is currently unsupported, but an alternative option is to delete the task","lastModifiedDate":"2021-09-21"},{"lineNumber":360,"author":{"gitId":"adricpjw"},"content":"        and re-add the updated task back to the list","lastModifiedDate":"2021-09-21"},{"lineNumber":361,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":362,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":363,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":364,"author":{"gitId":"adricpjw"},"content":"**Q:** How do I transfer my data to another PC?","lastModifiedDate":"2021-09-21"},{"lineNumber":365,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":366,"author":{"gitId":"adricpjw"},"content":"**A:** Install the app in the other computer and overwrite the empty data file ","lastModifiedDate":"2021-09-21"},{"lineNumber":367,"author":{"gitId":"adricpjw"},"content":"it creates with the file that contains the data of your previous Duke home folder.","lastModifiedDate":"2021-09-21"},{"lineNumber":368,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":369,"author":{"gitId":"adricpjw"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":370,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":371,"author":{"gitId":"adricpjw"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":372,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":373,"author":{"gitId":"adricpjw"},"content":"## Command Summary","lastModifiedDate":"2021-09-21"},{"lineNumber":374,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":375,"author":{"gitId":"adricpjw"},"content":"| Command                                               | Meaning                                                               |","lastModifiedDate":"2021-09-21"},{"lineNumber":376,"author":{"gitId":"adricpjw"},"content":"| --------------                                        | ----------                                                            |","lastModifiedDate":"2021-09-21"},{"lineNumber":377,"author":{"gitId":"adricpjw"},"content":"| `help`                                                | Lists all accepted commands                                           |","lastModifiedDate":"2021-09-21"},{"lineNumber":378,"author":{"gitId":"adricpjw"},"content":"| `list`                                                | Lists all registered tasks in the task list                           |","lastModifiedDate":"2021-09-21"},{"lineNumber":379,"author":{"gitId":"adricpjw"},"content":"| `find \u003cREGEX\u003e [/type TASKTYPE] [/limit QUERYLIMIT]`   | Queries the task list with a keyword and *type / limit* flags         |","lastModifiedDate":"2021-09-21"},{"lineNumber":380,"author":{"gitId":"adricpjw"},"content":"| `todo \u003cDESCRIPTION\u003e`                                  | Adds a todo task with \u003cDESCRIPTION\u003e                                   |","lastModifiedDate":"2021-09-21"},{"lineNumber":381,"author":{"gitId":"adricpjw"},"content":"| `deadline \u003cDESCRIPTION\u003e /by \u003cDATETIME\u003e`               | Adds a deadline task with \u003cDESCRIPTION\u003e and deadline                  |","lastModifiedDate":"2021-09-21"},{"lineNumber":382,"author":{"gitId":"adricpjw"},"content":"| `event \u003cDESCRIPTION\u003e /at \u003cDATETIME\u003e`                  | Adds an event task with \u003cDESCRIPTION\u003e and time of event               |","lastModifiedDate":"2021-09-21"},{"lineNumber":383,"author":{"gitId":"adricpjw"},"content":"| `dates`                                               | Lists the valid datetime formats for use in adding deadline/event     |","lastModifiedDate":"2021-09-21"},{"lineNumber":384,"author":{"gitId":"adricpjw"},"content":"| `delete \u003cIDX\u003e`                                        | Removes a task from the task list by its sorted index                 |","lastModifiedDate":"2021-09-21"},{"lineNumber":385,"author":{"gitId":"adricpjw"},"content":"| `done \u003cIDX`                                           | Marks a task as done in the task list by its sorted index             |","lastModifiedDate":"2021-09-21"},{"lineNumber":386,"author":{"gitId":"adricpjw"},"content":"| `bye`                                                 | Exits the application                                                 |","lastModifiedDate":"2021-09-21"},{"lineNumber":387,"author":{"gitId":"adricpjw"},"content":"    ","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"adricpjw":363,"-":24}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package Duke;/*---------LOCAL IMPORT--------*/","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"import processing.CommandHandler;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"import processing.TaskManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"import processing.TaskSafe;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"import processing.UI;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"    private static boolean isRunning \u003d true;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"    public static final TaskManager taskManager \u003d new TaskManager();","lastModifiedDate":"2021-09-17"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"     * Main method that continues looping and accepting commands until user inputs \u0027bye\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"    public static void run() {","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"        while (isRunning) {","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"            String input \u003d UI.getCommand();","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"            UI.printDivider();","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"            processInput(input);","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"            UI.printDivider();","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"     * Takes a command, executes it, and saves the updates to a local file","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"     * @param input the command that user input on prompt","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"    public static void processInput(String input) {","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"            CommandHandler command \u003d new CommandHandler(input);","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"            command.execute(taskManager);","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"            TaskSafe.saveToFile(taskManager.getTasks());","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"            UI.showError(e);","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"            UI.greetPartTwo();","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"     * ties up loose ends and ends the application","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"    public static void exit() {","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"        UI.close();","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"        isRunning \u003d false;","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"        UI.greetPartOne();","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"        TaskSafe.loadFromFile(Duke.taskManager);","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"        UI.greetPartTwo();","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"        run();","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"adricpjw":51,"-":3}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package exceptions;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"    public static final String EXCEPTION_HEADER \u003d\"\\uD83D\\uDE43 OOPS!!! \";","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"    ","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"    public DukeException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"        super();","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"        super(message);","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"    public String toString() {","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"        return EXCEPTION_HEADER + super.getMessage() ;","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"adricpjw":19}},{"path":"src/main/java/processing/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package processing;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"/*---------LOCAL IMPORT--------*/","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"import Duke.Duke;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"import tasks.TaskType;","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":" * \u003ch1\u003eCommand Handler!\u003c/h1\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":" * Takes in a string and parses it by finding clauses","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":" * Once parsed, the command can be executed on a TaskManager","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"public class CommandHandler {","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"    /*-------- Private Variables -----*/","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"    private final String command;","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"    private final String input;","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"    /*------- Public Variables ---------*/","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"    public String descriptorBeforeClause;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"    public String descriptorAfterClause;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"    /*-------- COMMANDS ----------*/","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"    public static final String[] commands \u003d {","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"            \"bye\",","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"            \"help\",","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"            \"dates\",","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"            \"list\",","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"            \"find\",","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"            \"todo\",","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"            \"deadline\",","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"            \"event\",","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"            \"delete\",","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"            \"done\"","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"    };","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"     * Creates a parser for a string input","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"     * @param input User input that is to be parsed into a command","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException throws an exception when the input is empty","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"    public CommandHandler(String input) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"        if (input.isBlank()) {","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Invalid Task Input\");","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"        // padding extra space to circumvent indexOutOfBounds","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"        this.input \u003d input + \" \";","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"        this.command \u003d input.split(\" \")[0];","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"        descriptorBeforeClause \u003d command;","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"        descriptorAfterClause \u003d \"\";","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"     * Splits the command up by a clause into before and after the clause excluding the clause","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"     * Eg. \"ABC {clause} XYZ\" splits into","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"     * Before -\u003e ABC","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"     * After -\u003e XYZ","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"     * @param clause              Phrase and String to split up the command in two. Typically used for flag","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"adricpjw"},"content":"     *                            identification","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"adricpjw"},"content":"     * @param startIndex          The index at which the \u0027Before Clause\u0027 should begin","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"adricpjw"},"content":"     * @param isBeforeClauseEmpty If false (default), will throw DukeException if \u0027Before Clause\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"adricpjw"},"content":"     *                            is empty after splitting. Otherwise, empty before clause is allowed","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException Throws Exception when After Clause is empty, or when Before Clause","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"adricpjw"},"content":"     *                       is empty if \u003cb\u003eisBeforeClauseEmpty\u003c/b\u003e is set to false","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"adricpjw"},"content":"     * @see DukeException","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"adricpjw"},"content":"    public void splitByClause(String clause, int startIndex, boolean isBeforeClauseEmpty) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"adricpjw"},"content":"        int idxOfClause \u003d input.indexOf(clause);","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"adricpjw"},"content":"        // Throw exception if ID string missing (e.g. \"/by\" missing from deadline command)","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"adricpjw"},"content":"        if (idxOfClause \u003d\u003d -1) {","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Command is missing required clause : \" + clause);","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"adricpjw"},"content":"        String descriptorAfterClause \u003d input.substring(idxOfClause + clause.length() + 1).trim();","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"adricpjw"},"content":"        String descriptorBeforeClause \u003d input.substring(startIndex, idxOfClause).trim();","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"adricpjw"},"content":"        if (descriptorAfterClause.equals(\"\")) {","lastModifiedDate":"2021-09-04"},{"lineNumber":78,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Description cannot be empty after \" + clause);","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"adricpjw"},"content":"        } else if (!isBeforeClauseEmpty \u0026\u0026 descriptorBeforeClause.equals(\"\")) {","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Description cannot be empty before \" + clause);","lastModifiedDate":"2021-09-04"},{"lineNumber":81,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"adricpjw"},"content":"        this.descriptorBeforeClause \u003d descriptorBeforeClause;","lastModifiedDate":"2021-09-04"},{"lineNumber":83,"author":{"gitId":"adricpjw"},"content":"        this.descriptorAfterClause \u003d descriptorAfterClause;","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"adricpjw"},"content":"     * Executes the command after parsing","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"adricpjw"},"content":"     * @param taskManager the TaskManager that the command will be executing on","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException on invalid command syntax","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"adricpjw"},"content":"    public void execute(TaskManager taskManager) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"adricpjw"},"content":"        switch (command) {","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"adricpjw"},"content":"        case \"bye\":","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"adricpjw"},"content":"            Duke.exit();","lastModifiedDate":"2021-09-17"},{"lineNumber":96,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"adricpjw"},"content":"        case \"help\":","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"adricpjw"},"content":"            UI.listCommands();","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"adricpjw"},"content":"        case \"dates\":","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"adricpjw"},"content":"            UI.listDTFormats();","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"adricpjw"},"content":"        case \"list\":","lastModifiedDate":"2021-09-17"},{"lineNumber":104,"author":{"gitId":"adricpjw"},"content":"            taskManager.listTasks();","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-17"},{"lineNumber":106,"author":{"gitId":"adricpjw"},"content":"        case \"find\":","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"adricpjw"},"content":"            taskManager.queryTasks(this);","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"adricpjw"},"content":"        case \"done\":","lastModifiedDate":"2021-09-17"},{"lineNumber":110,"author":{"gitId":"adricpjw"},"content":"            taskManager.markTaskAsDone(this);","lastModifiedDate":"2021-09-18"},{"lineNumber":111,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-17"},{"lineNumber":112,"author":{"gitId":"adricpjw"},"content":"        case \"delete\":","lastModifiedDate":"2021-09-17"},{"lineNumber":113,"author":{"gitId":"adricpjw"},"content":"            taskManager.deleteTask(this);","lastModifiedDate":"2021-09-18"},{"lineNumber":114,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"adricpjw"},"content":"        case \"deadline\":","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"adricpjw"},"content":"            taskManager.addTask(this, TaskType.DEADLINE);","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"adricpjw"},"content":"        case \"event\":","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"adricpjw"},"content":"            taskManager.addTask(this, TaskType.EVENT);","lastModifiedDate":"2021-09-18"},{"lineNumber":120,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"adricpjw"},"content":"        case \"todo\":","lastModifiedDate":"2021-09-17"},{"lineNumber":122,"author":{"gitId":"adricpjw"},"content":"            taskManager.addTask(this, TaskType.TODO);","lastModifiedDate":"2021-09-18"},{"lineNumber":123,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-17"},{"lineNumber":124,"author":{"gitId":"adricpjw"},"content":"        default:","lastModifiedDate":"2021-09-17"},{"lineNumber":125,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-17"},{"lineNumber":126,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":127,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":128,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"adricpjw":128}},{"path":"src/main/java/processing/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package processing;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"import org.jetbrains.annotations.Contract;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"import org.jetbrains.annotations.NotNull;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"public class DateParser {","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"    /*-------------- ALL VALID DT FORMATS --------- */","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"    private static final String DATETIME_FORMAT1 \u003d \"MMM d yyyy HH:mm\";","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"    private static final String TIME_FORMAT1 \u003d \"HH:mm\";","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"    private static final String TIME_FORMAT2 \u003d \"HHmm\";","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"    private static final String DATE_FORMAT1 \u003d \"MMM d yyyy\";","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"    private static final String DATE_FORMAT2 \u003d \"MMM d yy\";","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"    private static final String DATE_FORMAT3 \u003d \"dd/M/yyyy\";","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"    private static final String DATE_FORMAT4 \u003d \"dd/M/yy\";","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"    private static final String DATE_FORMAT5 \u003d \"EEE\";","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"    public static final String[] DATETIME_FORMATS \u003d {","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"        DATETIME_FORMAT1,","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT1 + \" \" + TIME_FORMAT2,","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT2 + \" \" + TIME_FORMAT1,","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT2 + \" \" + TIME_FORMAT2,","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT3 + \" \" + TIME_FORMAT1,","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT3 + \" \" + TIME_FORMAT2,","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT4 + \" \" + TIME_FORMAT1,","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT4 + \" \" + TIME_FORMAT2,","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT5 + \" \" + TIME_FORMAT1,","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"        DATE_FORMAT5 + \" \" + TIME_FORMAT2,","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"    };","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"    public static final String[] DATE_FORMATS \u003d {","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"            DATE_FORMAT1,","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"            DATE_FORMAT2,","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"            DATE_FORMAT3,","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"            DATE_FORMAT4,","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"            DATE_FORMAT5","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"    };","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"    public static final String[] TIME_FORMATS \u003d {","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"        TIME_FORMAT1,","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"        TIME_FORMAT2,","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"    };","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"    private static final String END_OF_DAY \u003d \"23:59:59\";","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"     * Builds a new Formatter that is Case Insensitive for a specific Date Time Format","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"     * @param pattern Format to be built into a DateTimeFormatter","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"     * @return a DateTimeFormatter that can be used to parse and format LocalDateTime objects","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"     * @see DateTimeFormatter","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"adricpjw"},"content":"    @Contract(\"_ -\u003e new\")","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"adricpjw"},"content":"    private static @NotNull DateTimeFormatter buildFormat(String pattern) {","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"adricpjw"},"content":"        return new DateTimeFormatterBuilder()","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"adricpjw"},"content":"                .parseCaseInsensitive()","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"adricpjw"},"content":"                .parseLenient()","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"adricpjw"},"content":"                .appendPattern(pattern)","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"adricpjw"},"content":"                .toFormatter();","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"adricpjw"},"content":"     * Parses the input date as LocalTime if keyword \u0027today\u0027 was given. Combines Todays date with","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"adricpjw"},"content":"     * LocalTime","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"adricpjw"},"content":"     * @param date Input String to be parsed into a LocalTime","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"adricpjw"},"content":"     * @return LocalDateTime that is composed of Todays Date and the parsed LocalTime","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if input time is in an invalid format","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"adricpjw"},"content":"    private static @NotNull LocalDateTime parseTodayDateTime(@NotNull String date) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"adricpjw"},"content":"        if (date.trim().isBlank()) {","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"adricpjw"},"content":"            return LocalDateTime.of(LocalDate.now(), LocalTime.parse(END_OF_DAY));","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"adricpjw"},"content":"        for (String format : TIME_FORMATS) {","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"adricpjw"},"content":"            try {","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"adricpjw"},"content":"                DateTimeFormatter formatter \u003d buildFormat(format);","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"adricpjw"},"content":"                LocalTime lT \u003d LocalTime.parse(date, formatter);","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"adricpjw"},"content":"                return LocalDateTime.of(LocalDate.now(),lT);","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"adricpjw"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":87,"author":{"gitId":"adricpjw"},"content":"                continue;","lastModifiedDate":"2021-09-18"},{"lineNumber":88,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":89,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":90,"author":{"gitId":"adricpjw"},"content":"        throw new DukeException(\"Sorry! Unable to parse date!\");","lastModifiedDate":"2021-09-18"},{"lineNumber":91,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":92,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"adricpjw"},"content":"     * Parses the date input by specific Date Formats","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"adricpjw"},"content":"     * @param date Input String to be parsed into a LocalDate","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"adricpjw"},"content":"     * @return A LocalDateTime composed of the parsed LocalDate and 2359 Hours LocalTime","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if input date has an invalid format","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"adricpjw"},"content":"    private static @NotNull LocalDateTime parseDTByDateFormats(String date) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":100,"author":{"gitId":"adricpjw"},"content":"        for (String format : DATE_FORMATS) {","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"adricpjw"},"content":"            try {","lastModifiedDate":"2021-09-18"},{"lineNumber":102,"author":{"gitId":"adricpjw"},"content":"                DateTimeFormatter formatter \u003d buildFormat(format);","lastModifiedDate":"2021-09-18"},{"lineNumber":103,"author":{"gitId":"adricpjw"},"content":"                LocalDate lD \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"adricpjw"},"content":"                return LocalDateTime.of(lD,LocalTime.parse(END_OF_DAY));","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"adricpjw"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":106,"author":{"gitId":"adricpjw"},"content":"                continue;","lastModifiedDate":"2021-09-18"},{"lineNumber":107,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":108,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":109,"author":{"gitId":"adricpjw"},"content":"        throw new DukeException(\"Sorry! Unable to parse DateTime\");","lastModifiedDate":"2021-09-18"},{"lineNumber":110,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":111,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":112,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"adricpjw"},"content":"     * Parses a String Input into a LocalDateTime. Iterates through known formats and returns the","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"adricpjw"},"content":"     * first valid parsed DateTime.","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"adricpjw"},"content":"     * @param date Input to be parsed","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"adricpjw"},"content":"     * @return a LocalDateTime if input is in a valid format.","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if input has an invalid date time format","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"adricpjw"},"content":"    private static LocalDateTime parseDTByDateTimeFormats(String date) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":121,"author":{"gitId":"adricpjw"},"content":"        for (String format : DATETIME_FORMATS) {","lastModifiedDate":"2021-09-18"},{"lineNumber":122,"author":{"gitId":"adricpjw"},"content":"            try {","lastModifiedDate":"2021-09-18"},{"lineNumber":123,"author":{"gitId":"adricpjw"},"content":"                DateTimeFormatter formatter \u003d buildFormat(format);","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"adricpjw"},"content":"                return LocalDateTime.parse(date, formatter);","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"adricpjw"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":126,"author":{"gitId":"adricpjw"},"content":"                continue;","lastModifiedDate":"2021-09-18"},{"lineNumber":127,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":128,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":129,"author":{"gitId":"adricpjw"},"content":"        return parseDTByDateFormats(date);","lastModifiedDate":"2021-09-18"},{"lineNumber":130,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":131,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":132,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"adricpjw"},"content":"     * Parses an string Input into a LocalDateTime. Calls parseDTByDateTimeFormats","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"adricpjw"},"content":"     * Checks if first keyword in input is \"today\", which calls parseTodayDateTime instead","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"adricpjw"},"content":"     * @param date Input date to be parsed","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"adricpjw"},"content":"     * @return parsed date time if format was valid","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if input has an invalid date time format","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"adricpjw"},"content":"    public static LocalDateTime parseDate(@NotNull String date) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":140,"author":{"gitId":"adricpjw"},"content":"        String lDate \u003d date.trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":141,"author":{"gitId":"adricpjw"},"content":"        if (lDate.split(\" \")[0].equals(\"today\")) {","lastModifiedDate":"2021-09-18"},{"lineNumber":142,"author":{"gitId":"adricpjw"},"content":"            String time \u003d lDate.substring(\"today\".length()).trim();","lastModifiedDate":"2021-09-18"},{"lineNumber":143,"author":{"gitId":"adricpjw"},"content":"            return parseTodayDateTime(time);","lastModifiedDate":"2021-09-18"},{"lineNumber":144,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":145,"author":{"gitId":"adricpjw"},"content":"        return parseDTByDateTimeFormats(lDate);","lastModifiedDate":"2021-09-18"},{"lineNumber":146,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":147,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":148,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":149,"author":{"gitId":"adricpjw"},"content":"     * Formats the date","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"adricpjw"},"content":"     * @param date DateTime to be formatted","lastModifiedDate":"2021-09-20"},{"lineNumber":151,"author":{"gitId":"adricpjw"},"content":"     * @return the date in String format \"MMM d yyyy HH:mm\"","lastModifiedDate":"2021-09-20"},{"lineNumber":152,"author":{"gitId":"adricpjw"},"content":"     * eg. Oct 10 2015 18:00","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":154,"author":{"gitId":"adricpjw"},"content":"    public static @NotNull String formatDate(@NotNull LocalDateTime date) {","lastModifiedDate":"2021-09-18"},{"lineNumber":155,"author":{"gitId":"adricpjw"},"content":"        return date.format(DateTimeFormatter.ofPattern(DATETIME_FORMAT1));","lastModifiedDate":"2021-09-18"},{"lineNumber":156,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":157,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":158,"author":{"gitId":"adricpjw"},"content":"    public static @NotNull String formatDate(String date) throws DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":159,"author":{"gitId":"adricpjw"},"content":"        LocalDateTime localDT \u003d parseDate(date);","lastModifiedDate":"2021-09-18"},{"lineNumber":160,"author":{"gitId":"adricpjw"},"content":"        return formatDate(localDT);","lastModifiedDate":"2021-09-18"},{"lineNumber":161,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":162,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":163,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"adricpjw":163}},{"path":"src/main/java/processing/QueryHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package processing;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"import org.jetbrains.annotations.NotNull;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"import tasks.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"import tasks.TaskType;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"import java.util.List;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"import java.util.Locale;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"public class QueryHandler {","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"    /*----------- PROCESSING CONSTANTS ---------- */","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"    private static final String LIMIT_FLAG \u003d \"/limit\";","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"    private static final String TYPE_FLAG \u003d \"/type\";","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"    private static final String REGEX_HEADER \u003d \"(?i).*\";","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"    private static final String REGEX_TAIL \u003d \".*\";","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"    private static final String QUERY_TASK \u003d \"Your query returned the following results: \";","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"    private static final String EMPTY_QUERY \u003d \"     \u003e\u003eNo tasks can be found with the regex : \";","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"    /* ----------- PRIVATE VARIABLES ------------- */","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"    private boolean isRegexKW, isTypeFlag, isLimitFlag;","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"    private String regexTerm;","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"    private String regexTermWithoutExpr;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"    private TaskType taskType;","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"    private int queryLimit;","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"    /* ----------- EXCEPTION MESSAGES ---------*/","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"    private static final String LIMIT_EXCEPTION \u003d \"Sorry! Unable to recognise valid limit : \";","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"    private static final String LIMIT_EXAMPLE \u003d \"\\nLimit Flag --\u003e Single Integer eg. /limit 5\";","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"    private static final String TYPE_EXCEPTION \u003d \"Sorry! Unable to recognise valid type : \";","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"    private static final String TYPE_EXAMPLE \u003d \"\\nSorry! Type Flag --\u003e todo/deadline/event\";","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"    /*------------- FILTERS ---------------*/","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"     * Filters the tasks by the task type. If ANY, allows every task","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"    Predicate\u003cTask\u003e taskTypeFilter \u003d task -\u003e {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"        if (taskType \u003d\u003d TaskType.ANY) {","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"            return true;","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"        } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"            return task.getTaskType() \u003d\u003d taskType;","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"    };","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"     * Filters the task by the Regular Expression","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"    Predicate\u003cTask\u003e regexFilter \u003d task -\u003e task.getFullDescription().matches(regexTerm);","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"    /*------------ INTERNAL FUNCTIONS --------- */","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"     * Parses the keyword if isLimitFlag was set to true, and set the query limit","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"     * Sets isLimitFlag to false after","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"     * @param kw keyword from the command","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if keyword is unable to be parsed as an integer","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"    private void setLimitKW(String kw) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"adricpjw"},"content":"            queryLimit \u003d Integer.parseInt(kw);","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"adricpjw"},"content":"            isLimitFlag \u003d false;","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"adricpjw"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(LIMIT_EXCEPTION + kw + LIMIT_EXAMPLE);","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"adricpjw"},"content":"     * Sets the TaskType to be filtered by the query","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"adricpjw"},"content":"     * @see TaskType","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"adricpjw"},"content":"     * @param kw keyword to determine task type : todo / deadline / event","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"adricpjw"},"content":"    private void setTypeKW(@NotNull String kw) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"adricpjw"},"content":"        switch (kw.toLowerCase(Locale.ROOT)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"adricpjw"},"content":"        case \"todo\":","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"adricpjw"},"content":"            taskType \u003d TaskType.TODO;","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"adricpjw"},"content":"        case \"deadline\":","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"adricpjw"},"content":"            taskType \u003d TaskType.DEADLINE;","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"adricpjw"},"content":"        case \"event\":","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"adricpjw"},"content":"            taskType \u003d TaskType.EVENT;","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"adricpjw"},"content":"        default:","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(TYPE_EXCEPTION + kw + TYPE_EXAMPLE);","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"adricpjw"},"content":"        isTypeFlag \u003d false;","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"adricpjw"},"content":"     * Takes in the keyword, and processes it according to the flags set, OR sets a flag if","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"adricpjw"},"content":"     * keyword starts with clause. Calls \u003cb\u003esetLimitKW\u003c/b\u003e and \u003cb\u003esetTypeKW\u003c/b\u003e\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"adricpjw"},"content":"     * @param kw keyword that comes from the parsed command","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if setLimitKW or setTypeKW throws an exception","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"adricpjw"},"content":"    private void processKeyword(String kw) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"adricpjw"},"content":"        if (isLimitFlag) {","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"adricpjw"},"content":"            setLimitKW(kw);","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"adricpjw"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"adricpjw"},"content":"        if (isTypeFlag) {","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"adricpjw"},"content":"            setTypeKW(kw);","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"adricpjw"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"adricpjw"},"content":"        if (kw.startsWith(LIMIT_FLAG)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"adricpjw"},"content":"            isLimitFlag \u003d true;","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"adricpjw"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"adricpjw"},"content":"        if (kw.startsWith(TYPE_FLAG)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"adricpjw"},"content":"            isTypeFlag \u003d true;","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"adricpjw"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"adricpjw"},"content":"        // if keyword doesnt start with \u0027-\u0027 and is not part of a type/limit flag and","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"adricpjw"},"content":"        // if no regex term has been added --\u003e Treat term as regex term","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"adricpjw"},"content":"        if (!isRegexKW) {","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"adricpjw"},"content":"            isRegexKW \u003d true;","lastModifiedDate":"2021-09-20"},{"lineNumber":123,"author":{"gitId":"adricpjw"},"content":"            regexTerm +\u003d kw + REGEX_TAIL;","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"adricpjw"},"content":"            regexTermWithoutExpr +\u003d kw + \" \";","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":126,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"adricpjw"},"content":"     * Constructor that takes in vaargs of Strings from the parsed Command Handler","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"adricpjw"},"content":"     * @param keywords keywords to be processed to build the query","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"adricpjw"},"content":"    public QueryHandler(String @NotNull ... keywords) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"adricpjw"},"content":"        isRegexKW \u003d isLimitFlag \u003d isTypeFlag \u003d false;","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"adricpjw"},"content":"        regexTerm \u003d REGEX_HEADER;","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"adricpjw"},"content":"        regexTermWithoutExpr \u003d \"\";","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"adricpjw"},"content":"        queryLimit \u003d Integer.MAX_VALUE;","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"adricpjw"},"content":"        taskType \u003d TaskType.ANY;","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"adricpjw"},"content":"        for (String keyword : keywords) {","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"adricpjw"},"content":"            processKeyword(keyword.trim());","lastModifiedDate":"2021-09-20"},{"lineNumber":142,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":143,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"adricpjw"},"content":"     * Queries the task list of a Task Manager by the flags set.","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"adricpjw"},"content":"     * Filters list by -TaskType -REGEX","lastModifiedDate":"2021-09-20"},{"lineNumber":148,"author":{"gitId":"adricpjw"},"content":"     * Limits list by the queryLimit if set","lastModifiedDate":"2021-09-20"},{"lineNumber":149,"author":{"gitId":"adricpjw"},"content":"     * Displays resulting task list in iterative order","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"adricpjw"},"content":"     * @param taskManager taskManager to be queried by the query","lastModifiedDate":"2021-09-20"},{"lineNumber":151,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":152,"author":{"gitId":"adricpjw"},"content":"    public void queryOn(@NotNull TaskManager taskManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"adricpjw"},"content":"        List\u003cTask\u003e tasks \u003d taskManager.getTasks();","lastModifiedDate":"2021-09-20"},{"lineNumber":154,"author":{"gitId":"adricpjw"},"content":"        System.out.println(QUERY_TASK);","lastModifiedDate":"2021-09-20"},{"lineNumber":155,"author":{"gitId":"adricpjw"},"content":"        List\u003cTask\u003e listOfTasks \u003d tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":156,"author":{"gitId":"adricpjw"},"content":"                .stream()","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"adricpjw"},"content":"                .filter(regexFilter)","lastModifiedDate":"2021-09-20"},{"lineNumber":158,"author":{"gitId":"adricpjw"},"content":"                .filter(taskTypeFilter)","lastModifiedDate":"2021-09-20"},{"lineNumber":159,"author":{"gitId":"adricpjw"},"content":"                .limit(queryLimit)","lastModifiedDate":"2021-09-20"},{"lineNumber":160,"author":{"gitId":"adricpjw"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-20"},{"lineNumber":161,"author":{"gitId":"adricpjw"},"content":"        taskManager.listTasks(listOfTasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":162,"author":{"gitId":"adricpjw"},"content":"        if (listOfTasks.isEmpty()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"adricpjw"},"content":"            System.out.println(EMPTY_QUERY + regexTermWithoutExpr);","lastModifiedDate":"2021-09-20"},{"lineNumber":164,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"adricpjw":167}},{"path":"src/main/java/processing/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package processing;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"import java.util.ArrayList; // import the ArrayList class","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"import java.util.List;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"/*---------LOCAL IMPORT--------*/","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"import org.jetbrains.annotations.NotNull;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"import tasks.TaskType;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"import tasks.Deadline;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"import tasks.Event;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"import tasks.Todo;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"import tasks.Task;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"public class TaskManager {","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"    /*----------- PROCESSING CONSTANTS ---------- */","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"    public static final String DEADLINE_CLAUSE \u003d \"/by\";","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"    public static final String EVENT_CLAUSE \u003d \"/at\";","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"    public static final String FIND_CLAUSE \u003d \"find\";","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"    private static final int DEADLINE_DESCRIPTION_IDX \u003d 9;","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"    private static final int EVENT_DESCRIPTION_IDX \u003d 6;","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"    /*----------- CONSOLE LOGGING ----------- */","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"    private static final String DONE_TASK \u003d \"Nice! I\u0027ve marked this task as done: \";","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"    private static final String LIST_TASK \u003d \"Here are your scheduled tasks!\";","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"    /*------------- PRIVATE VARIABLES ------------ */","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"    private int taskSize;","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"    /*-------------- COMPARATOR ----------------- */","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"     * Comparator to sort the tasks in the task list :","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"     * \u003e\u003e Puts all TODOs ahead in the list","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"     * \u003e\u003e Sorts remaining deadlines/events by nearest","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"    static class TaskComparator implements Comparator\u003cTask\u003e {","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"        @Override","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"        public int compare(@NotNull Task o1, Task o2) {","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"            if (o1.getTaskType() \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"                return -1;","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"            } else if (o2.getTaskType() \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"                return 1;","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"            try {","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"                LocalDateTime t1Date \u003d DateParser.parseDate(o1.getDate());","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"                LocalDateTime t2Date \u003d DateParser.parseDate(o2.getDate());","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"                return t1Date.compareTo(t2Date);","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"                return 0;","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"adricpjw"},"content":"    /*------------- CONSTRUCTOR -------------- */","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"adricpjw"},"content":"    public TaskManager() {","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"adricpjw"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"adricpjw"},"content":"        taskSize \u003d 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"adricpjw"},"content":"    private List\u003cTask\u003e sortTasks() {","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"adricpjw"},"content":"        return tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"adricpjw"},"content":"                .stream()","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"adricpjw"},"content":"                .sorted(new TaskComparator())","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"adricpjw"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"adricpjw"},"content":"     * Adds a Task into a variable-size array of Tasks,","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"adricpjw"},"content":"     * @param command  input that has been parsed by Command Handler,","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"adricpjw"},"content":"     * @param type     the type of task to be added : Todo / Event / Deadline","lastModifiedDate":"2021-09-04"},{"lineNumber":81,"author":{"gitId":"adricpjw"},"content":"     * @param isDone   sets the task to be added as done or not done","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"adricpjw"},"content":"     * @param isLogged if set to true, logs the addition of the task and displays it via UI","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if command parsing by clause is invalid due to empty descriptors","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"adricpjw"},"content":"     * @see UI","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"adricpjw"},"content":"    public void addTask(CommandHandler command, @NotNull TaskType type, boolean isDone, boolean isLogged) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"adricpjw"},"content":"        Task t \u003d new Task(\"\");","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"adricpjw"},"content":"        switch (type) {","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"adricpjw"},"content":"        case TODO:","lastModifiedDate":"2021-09-04"},{"lineNumber":90,"author":{"gitId":"adricpjw"},"content":"            command.splitByClause(\"todo\", 0, true);","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"adricpjw"},"content":"            t \u003d new Todo(command.descriptorAfterClause, isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":92,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":93,"author":{"gitId":"adricpjw"},"content":"        case DEADLINE:","lastModifiedDate":"2021-09-04"},{"lineNumber":94,"author":{"gitId":"adricpjw"},"content":"            command.splitByClause(DEADLINE_CLAUSE, DEADLINE_DESCRIPTION_IDX, false);","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"adricpjw"},"content":"            t \u003d new Deadline(command.descriptorBeforeClause,","lastModifiedDate":"2021-09-18"},{"lineNumber":96,"author":{"gitId":"adricpjw"},"content":"                    DateParser.formatDate(command.descriptorAfterClause), isDone);","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":98,"author":{"gitId":"adricpjw"},"content":"        case EVENT:","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"adricpjw"},"content":"            command.splitByClause(EVENT_CLAUSE, EVENT_DESCRIPTION_IDX, false);","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"adricpjw"},"content":"            t \u003d new Event(command.descriptorBeforeClause,","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"adricpjw"},"content":"                    DateParser.formatDate(command.descriptorAfterClause), isDone);","lastModifiedDate":"2021-09-18"},{"lineNumber":102,"author":{"gitId":"adricpjw"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":103,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"adricpjw"},"content":"        tasks.add(t);","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"adricpjw"},"content":"        taskSize++;","lastModifiedDate":"2021-09-04"},{"lineNumber":106,"author":{"gitId":"adricpjw"},"content":"        if (isLogged) {","lastModifiedDate":"2021-09-11"},{"lineNumber":107,"author":{"gitId":"adricpjw"},"content":"            UI.showAddTask(t, taskSize);","lastModifiedDate":"2021-09-18"},{"lineNumber":108,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":110,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"adricpjw"},"content":"     * Adds a Task that is not done into a variable-size array of Tasks,","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"adricpjw"},"content":"     * Displays the added tasks and number of tasks currently in list","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"adricpjw"},"content":"     * @param command input that has been parsed by Command Handler","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"adricpjw"},"content":"     * @param type    TaskType of the task to be added","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if command parsing by clause is invalid due to empty descriptors","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"adricpjw"},"content":"    public void addTask(CommandHandler command, TaskType type) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"adricpjw"},"content":"        addTask(command, type, false, true);","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":123,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"adricpjw"},"content":"     * Removes a task from the task list by index, and displays the deleted command to user","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"adricpjw"},"content":"     * @param command input that has been parsed by Command Handler. Should be called with a","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"adricpjw"},"content":"     *                valid integer","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if After Clause of command cannot be parsed as an Integer","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"adricpjw"},"content":"    public void deleteTask(@NotNull CommandHandler command) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"adricpjw"},"content":"        command.splitByClause(\"delete\", 0, true);","lastModifiedDate":"2021-09-10"},{"lineNumber":132,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-10"},{"lineNumber":133,"author":{"gitId":"adricpjw"},"content":"            int idx \u003d Integer.parseInt(command.descriptorAfterClause) - 1;","lastModifiedDate":"2021-09-10"},{"lineNumber":134,"author":{"gitId":"adricpjw"},"content":"            Task t \u003d sortTasks().get(idx);","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"adricpjw"},"content":"            tasks.remove(t);","lastModifiedDate":"2021-09-21"},{"lineNumber":136,"author":{"gitId":"adricpjw"},"content":"            taskSize--;","lastModifiedDate":"2021-09-18"},{"lineNumber":137,"author":{"gitId":"adricpjw"},"content":"            UI.showDeleteTask(t, taskSize);","lastModifiedDate":"2021-09-18"},{"lineNumber":138,"author":{"gitId":"adricpjw"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":139,"author":{"gitId":"adricpjw"},"content":"            listTasks();","lastModifiedDate":"2021-09-10"},{"lineNumber":140,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Please enter a valid task number to delete.\");","lastModifiedDate":"2021-09-10"},{"lineNumber":141,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":142,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":143,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":144,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":145,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":146,"author":{"gitId":"adricpjw"},"content":"     * Marks a task as done by its index in the tasklist","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"adricpjw"},"content":"     * @param command the input after it\u0027s been parsed by command handler","lastModifiedDate":"2021-09-17"},{"lineNumber":149,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if the command is not called with a valid integer bounded by the","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"adricpjw"},"content":"     *                       number of the tasks in the task list","lastModifiedDate":"2021-09-20"},{"lineNumber":151,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":152,"author":{"gitId":"adricpjw"},"content":"    public void markTaskAsDone(@NotNull CommandHandler command) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"adricpjw"},"content":"        command.splitByClause(\"done\", 0, true);","lastModifiedDate":"2021-09-04"},{"lineNumber":154,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":155,"author":{"gitId":"adricpjw"},"content":"            int idx \u003d Integer.parseInt(command.descriptorAfterClause) - 1;","lastModifiedDate":"2021-09-04"},{"lineNumber":156,"author":{"gitId":"adricpjw"},"content":"            updateTask(idx, true);","lastModifiedDate":"2021-09-04"},{"lineNumber":157,"author":{"gitId":"adricpjw"},"content":"            System.out.println(DONE_TASK);","lastModifiedDate":"2021-09-04"},{"lineNumber":158,"author":{"gitId":"adricpjw"},"content":"            printTask(idx);","lastModifiedDate":"2021-09-04"},{"lineNumber":159,"author":{"gitId":"adricpjw"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":160,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Please enter a valid task number to be marked as done!\");","lastModifiedDate":"2021-09-04"},{"lineNumber":161,"author":{"gitId":"adricpjw"},"content":"        } finally {","lastModifiedDate":"2021-09-04"},{"lineNumber":162,"author":{"gitId":"adricpjw"},"content":"            listTasks();","lastModifiedDate":"2021-09-04"},{"lineNumber":163,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":164,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":165,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":166,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"adricpjw"},"content":"     * Queries the task list by a regex term and displays filtered list of tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":168,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"adricpjw"},"content":"     * @param command the query after it\u0027s been parsed by command handler","lastModifiedDate":"2021-09-20"},{"lineNumber":170,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if query is given with invalid syntax","lastModifiedDate":"2021-09-20"},{"lineNumber":171,"author":{"gitId":"adricpjw"},"content":"     * @see QueryHandler for more details on valid queries","lastModifiedDate":"2021-09-20"},{"lineNumber":172,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":173,"author":{"gitId":"adricpjw"},"content":"    public void queryTasks(@NotNull CommandHandler command) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":174,"author":{"gitId":"adricpjw"},"content":"        command.splitByClause(FIND_CLAUSE, 0, true);","lastModifiedDate":"2021-09-19"},{"lineNumber":175,"author":{"gitId":"adricpjw"},"content":"        QueryHandler query \u003d new QueryHandler(command.descriptorAfterClause.split(\" \"));","lastModifiedDate":"2021-09-20"},{"lineNumber":176,"author":{"gitId":"adricpjw"},"content":"        query.queryOn(this);","lastModifiedDate":"2021-09-20"},{"lineNumber":177,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":178,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":179,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":180,"author":{"gitId":"adricpjw"},"content":"     * Iterates through the tasklist and prints out the tasks in order","lastModifiedDate":"2021-09-20"},{"lineNumber":181,"author":{"gitId":"adricpjw"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"adricpjw"},"content":"     * @param tasks task list managed by Taskmanager","lastModifiedDate":"2021-09-20"},{"lineNumber":183,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":184,"author":{"gitId":"adricpjw"},"content":"    public void listTasks(@NotNull List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":185,"author":{"gitId":"adricpjw"},"content":"        int idx \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":186,"author":{"gitId":"adricpjw"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-09-19"},{"lineNumber":187,"author":{"gitId":"adricpjw"},"content":"            idx++;","lastModifiedDate":"2021-09-19"},{"lineNumber":188,"author":{"gitId":"adricpjw"},"content":"            System.out.printf(\"%d.\", idx);","lastModifiedDate":"2021-09-19"},{"lineNumber":189,"author":{"gitId":"adricpjw"},"content":"            System.out.println(task);","lastModifiedDate":"2021-09-19"},{"lineNumber":190,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":191,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":192,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":193,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":194,"author":{"gitId":"adricpjw"},"content":"     * Overloaded method that list the tasks sorted by \u003cb\u003eTaskComparator\u003c/b\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":195,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":196,"author":{"gitId":"adricpjw"},"content":"    public void listTasks() {","lastModifiedDate":"2021-09-20"},{"lineNumber":197,"author":{"gitId":"adricpjw"},"content":"        System.out.println(LIST_TASK);","lastModifiedDate":"2021-09-20"},{"lineNumber":198,"author":{"gitId":"adricpjw"},"content":"        listTasks(sortTasks());","lastModifiedDate":"2021-09-21"},{"lineNumber":199,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":200,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":201,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":202,"author":{"gitId":"adricpjw"},"content":"    public void updateTask(int idx, boolean isDone) {","lastModifiedDate":"2021-09-04"},{"lineNumber":203,"author":{"gitId":"adricpjw"},"content":"        Task t \u003d sortTasks().get(idx);","lastModifiedDate":"2021-09-21"},{"lineNumber":204,"author":{"gitId":"adricpjw"},"content":"        int taskIdx \u003d tasks.indexOf(t);","lastModifiedDate":"2021-09-21"},{"lineNumber":205,"author":{"gitId":"adricpjw"},"content":"        tasks.get(taskIdx).setDone(isDone);","lastModifiedDate":"2021-09-21"},{"lineNumber":206,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":207,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":208,"author":{"gitId":"adricpjw"},"content":"    public void printTask(int idx) {","lastModifiedDate":"2021-09-04"},{"lineNumber":209,"author":{"gitId":"adricpjw"},"content":"        System.out.println(sortTasks().get(idx));","lastModifiedDate":"2021-09-21"},{"lineNumber":210,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":211,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":212,"author":{"gitId":"adricpjw"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-09-11"},{"lineNumber":213,"author":{"gitId":"adricpjw"},"content":"        return tasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":214,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":215,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":216,"author":{"gitId":"adricpjw"},"content":"    public int getTaskSize() {","lastModifiedDate":"2021-09-11"},{"lineNumber":217,"author":{"gitId":"adricpjw"},"content":"        return taskSize;","lastModifiedDate":"2021-09-11"},{"lineNumber":218,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":219,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-09-04"},{"lineNumber":220,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"adricpjw":220}},{"path":"src/main/java/processing/TaskSafe.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package processing;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"import java.io.File;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"/*------- Local imports --------*/","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"import org.jetbrains.annotations.NotNull;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"import tasks.Deadline;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"import tasks.Event;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"import tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"import tasks.TaskType;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"public class TaskSafe {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"    /*------------ PUBLIC STATIC VARIABLES --------- */","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"    private static final String DATA_PATH \u003d \"/data/duke.txt\";","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"    private static final String rootPath \u003d new File(\".\").getAbsolutePath();","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"    private static final String fullPath \u003d rootPath + DATA_PATH;","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"    /*-------------- SAVE ------------ */","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"     * Appends a task to the local save","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"     * @param task Task to be appended to end of the local save","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if filepath is inaccessible / invalid","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"    private static void appendToFile(@NotNull Task task) throws DukeException{","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"            FileWriter fw \u003d new FileWriter(fullPath,true);","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"            char isDone \u003d task.isDone() ? \u00271\u0027 : \u00270\u0027;","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"            String taskToAdd \u003d","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"                    task.getTaskChar() + \"|\" + isDone + \"|\" + task.getFullDescription() + \u0027\\n\u0027;","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"            fw.write(taskToAdd);","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"            fw.close();","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Failed to save following task: \\n\" + task);","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"     * Saves a task list to a file and overwrites what is in it","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"     * @param taskList list of tasks to save to file","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"    public static void saveToFile(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"            new FileWriter(fullPath,false).close();","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"            try {","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"                appendToFile(t);","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"adricpjw"},"content":"    /*-------------- LOAD ------------ */","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"adricpjw"},"content":"     * Reads the local save and loads the saved tasks into the taskManager","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"adricpjw"},"content":"     * @param taskManager taskManager to store the locally saved tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"adricpjw"},"content":"    public static void loadFromFile( TaskManager taskManager) {","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"adricpjw"},"content":"        File file \u003d new File(fullPath);","lastModifiedDate":"2021-09-18"},{"lineNumber":73,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"adricpjw"},"content":"            Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"adricpjw"},"content":"            while (fileScanner.hasNext()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"adricpjw"},"content":"                parseTask(fileScanner.nextLine(),taskManager);","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"adricpjw"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"adricpjw"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"adricpjw"},"content":"        taskManager.listTasks();","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"adricpjw"},"content":"        System.out.println(\"You now have (\" + taskManager.getTaskSize() + \") tasks!\" );","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":86,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"adricpjw"},"content":"     * Parses a task from a line from the localsave","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"adricpjw"},"content":"     * @param task Task to be parsed into an actual Task","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"adricpjw"},"content":"     * @see Task","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"adricpjw"},"content":"     * @param taskManager TaskManager to store the parsed Task","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"adricpjw"},"content":"     * @throws DukeException if saved task has an invalid syntax or is corrupted","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"adricpjw"},"content":"    private static void parseTask(@NotNull String task, TaskManager taskManager) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"adricpjw"},"content":"        // Parse the string","lastModifiedDate":"2021-09-11"},{"lineNumber":95,"author":{"gitId":"adricpjw"},"content":"        TaskType t \u003d TaskType.TODO;","lastModifiedDate":"2021-09-11"},{"lineNumber":96,"author":{"gitId":"adricpjw"},"content":"        boolean isDone;","lastModifiedDate":"2021-09-11"},{"lineNumber":97,"author":{"gitId":"adricpjw"},"content":"        String descriptor \u003d \"\";","lastModifiedDate":"2021-09-11"},{"lineNumber":98,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":99,"author":{"gitId":"adricpjw"},"content":"            String[] split \u003d task.split(\"\\\\|\");","lastModifiedDate":"2021-09-11"},{"lineNumber":100,"author":{"gitId":"adricpjw"},"content":"            switch (split[0]) {","lastModifiedDate":"2021-09-11"},{"lineNumber":101,"author":{"gitId":"adricpjw"},"content":"            case \"T\":","lastModifiedDate":"2021-09-11"},{"lineNumber":102,"author":{"gitId":"adricpjw"},"content":"                descriptor \u003d \"todo \" + split[2];","lastModifiedDate":"2021-09-11"},{"lineNumber":103,"author":{"gitId":"adricpjw"},"content":"                break;","lastModifiedDate":"2021-09-11"},{"lineNumber":104,"author":{"gitId":"adricpjw"},"content":"            case \"D\":","lastModifiedDate":"2021-09-11"},{"lineNumber":105,"author":{"gitId":"adricpjw"},"content":"                t \u003d TaskType.DEADLINE;","lastModifiedDate":"2021-09-11"},{"lineNumber":106,"author":{"gitId":"adricpjw"},"content":"                descriptor \u003d split[2].replace(Deadline.DEADLINE_BY,TaskManager.DEADLINE_CLAUSE)","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"adricpjw"},"content":"                        .trim()","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"adricpjw"},"content":"                        .replaceAll(\".$\",\"\"); //remove last \u0027)\u0027","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"adricpjw"},"content":"                descriptor \u003d \"deadline \" + descriptor;","lastModifiedDate":"2021-09-11"},{"lineNumber":110,"author":{"gitId":"adricpjw"},"content":"                break;","lastModifiedDate":"2021-09-11"},{"lineNumber":111,"author":{"gitId":"adricpjw"},"content":"            case \"E\":","lastModifiedDate":"2021-09-11"},{"lineNumber":112,"author":{"gitId":"adricpjw"},"content":"                t \u003d TaskType.EVENT;","lastModifiedDate":"2021-09-11"},{"lineNumber":113,"author":{"gitId":"adricpjw"},"content":"                descriptor \u003d split[2].replace(Event.EVENT_AT,TaskManager.EVENT_CLAUSE)","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"adricpjw"},"content":"                        .trim()","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"adricpjw"},"content":"                        .replaceAll(\".$\",\"\"); //remove last )","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"adricpjw"},"content":"                descriptor \u003d \"event \" + descriptor;","lastModifiedDate":"2021-09-11"},{"lineNumber":117,"author":{"gitId":"adricpjw"},"content":"                break;","lastModifiedDate":"2021-09-11"},{"lineNumber":118,"author":{"gitId":"adricpjw"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":119,"author":{"gitId":"adricpjw"},"content":"            isDone \u003d !split[1].equals(\"0\");","lastModifiedDate":"2021-09-18"},{"lineNumber":120,"author":{"gitId":"adricpjw"},"content":"            CommandHandler command \u003d new CommandHandler(descriptor);","lastModifiedDate":"2021-09-11"},{"lineNumber":121,"author":{"gitId":"adricpjw"},"content":"            taskManager.addTask(command,t,isDone,false);","lastModifiedDate":"2021-09-11"},{"lineNumber":122,"author":{"gitId":"adricpjw"},"content":"        } catch (PatternSyntaxException | DukeException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":123,"author":{"gitId":"adricpjw"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-11"},{"lineNumber":124,"author":{"gitId":"adricpjw"},"content":"            throw new DukeException(\"Corrupted task syntax from file, unable to parse\");","lastModifiedDate":"2021-09-11"},{"lineNumber":125,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":126,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":127,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"adricpjw":127}},{"path":"src/main/java/processing/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package processing;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"import org.jetbrains.annotations.NotNull;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"import tasks.Task;","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"public class UI {","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"    private static final Scanner myScan \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-17"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"    /*----------- CONSOLE LOGGING ----------- */","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"    private static final String ADD_TASK \u003d \"Got it. I\u0027ve added this task: \";","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"    private static final String DELETE_TASK \u003d \"Noted. I\u0027ve removed this task: \";","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"    private static final String LIST_COMMANDS \u003d \"These are the valid commands: \";","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"    private static final String DTFORMAT_HEADER \u003d \"Here are the valid DateTime formats to use: \";","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"    public static final String FAREWELL_STR \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"    private static final String DIVIDER \u003d \"------------------------------------------\";","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"    private static final String BEGIN_STR \u003d \"What can I do for you?\";","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"                                       \"|  _ \\\\ _   _| | _____ \\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"                                       \"| | | | | | | |/ / _ \\\\\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"                                       \"| |_| | |_| |   \u003c  __/\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"                                       \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"    private static final String GREETING \u003d \"_________________________\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"                                           \"Hello! I\u0027m Duke.Duke\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"                                           \"Standby while I load up your schedule\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"                                           \"Loading...\";","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"    private static void showNumTasks(Task t, int taskSize) {","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"        System.out.println(t);","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"        System.out.println(\"You now have (\" + taskSize + \") tasks!\" );","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"    /*----------- PUBLIC FUNCTIONS --------------- */","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"    public static void greetPartOne() {","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"        System.out.println(GREETING);","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"    public static void greetPartTwo() {","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"        printDivider();","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"        System.out.println(BEGIN_STR);","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"    public static void printDivider() {","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"    public static void showError(@NotNull Exception e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"        e.printStackTrace();","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"            Thread.sleep(200);","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"        } catch (InterruptedException e2){","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"            Thread.currentThread().interrupt();","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"    public static void showAddTask (Task t, int taskSize) {","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"adricpjw"},"content":"        System.out.println(ADD_TASK);","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"adricpjw"},"content":"        showNumTasks(t, taskSize);","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"adricpjw"},"content":"    public static void showDeleteTask(Task t, int taskSize) {","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"adricpjw"},"content":"        System.out.println(DELETE_TASK);","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"adricpjw"},"content":"        showNumTasks(t, taskSize);","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"adricpjw"},"content":"    public static @NotNull String getCommand() {","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"adricpjw"},"content":"        System.out.println(\"\");","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"adricpjw"},"content":"        String input \u003d myScan.nextLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"adricpjw"},"content":"        if (input.isBlank()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"adricpjw"},"content":"            return getCommand();","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"adricpjw"},"content":"        return input;","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"adricpjw"},"content":"    public static void close() {","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"adricpjw"},"content":"        System.out.println(FAREWELL_STR);","lastModifiedDate":"2021-09-17"},{"lineNumber":81,"author":{"gitId":"adricpjw"},"content":"        myScan.close();","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":83,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"adricpjw"},"content":"    public static void listDTFormats() {","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"adricpjw"},"content":"        System.out.println(DTFORMAT_HEADER);","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"adricpjw"},"content":"        for (String format : DateParser.DATETIME_FORMATS) {","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"adricpjw"},"content":"            System.out.println(\"-\u003e \" + format);","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"adricpjw"},"content":"        for (String format : DateParser.TIME_FORMATS) {","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"adricpjw"},"content":"            System.out.println(\"-\u003e today \" + format);","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"adricpjw"},"content":"    public static void listCommands() {","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"adricpjw"},"content":"        System.out.println(LIST_COMMANDS);","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"adricpjw"},"content":"        for (String command : CommandHandler.commands) {","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"adricpjw"},"content":"            System.out.println(\" \u003e \" + command);","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"adricpjw"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"adricpjw":100}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package tasks;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"    protected String by;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"    public static final String DEADLINE_BY \u003d \"(by:\";","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"        this(name, by,false);","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"    public Deadline(String name,  String by, boolean isDone) {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"        super(name, isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"        this.taskType \u003d TaskType.DEADLINE;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"        this.taskChar \u003d \u0027D\u0027;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"        this.fullDescription \u003d this.name + \" \" + DEADLINE_BY + \" \" + this.by + \")\";","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"        return by;","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"adricpjw":23}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package tasks;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"    protected String at;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"    public static final String EVENT_AT \u003d \"(at:\";","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"    public Event(String name, String at) {","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"        this(name, at, false);","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"    public Event(String name, String at, boolean isDone) {","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"        super(name, isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"        this.taskType \u003d TaskType.EVENT;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"        this.taskChar \u003d \u0027E\u0027;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"        this.fullDescription \u003d name + \" \" + EVENT_AT + \" \" + this.at + \")\";","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"        return at;","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"adricpjw":21}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package tasks;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"public class Task {","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"    protected String name;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"    protected String fullDescription;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"    protected TaskType taskType;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"    protected char taskChar;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"    protected static int numTasks \u003d 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"    public Task(String name) {","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"        this(name,false);","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"adricpjw"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"adricpjw"},"content":"     * \u003ch1\u003eTask!\u003c/h1\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"     * Creates a task with properties type, done-ness and description","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"adricpjw"},"content":"     * @param name Description of the task","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"adricpjw"},"content":"     * @param isDone sets the done-ness of the task","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"adricpjw"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"adricpjw"},"content":"    public Task(String name, boolean isDone) {","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"adricpjw"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"adricpjw"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"adricpjw"},"content":"        numTasks++;","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"adricpjw"},"content":"        fullDescription \u003d name;","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"adricpjw"},"content":"        taskChar \u003d \u0027X\u0027;","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"adricpjw"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"adricpjw"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":34,"author":{"gitId":"adricpjw"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"adricpjw"},"content":"        return isDone;","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"adricpjw"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"adricpjw"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"adricpjw"},"content":"        char mark \u003d isDone ? \u0027X\u0027 : \u0027 \u0027;","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"adricpjw"},"content":"        return \"[\" + taskChar + \"][\" + mark + \"] \" + fullDescription;","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":43,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"adricpjw"},"content":"    public char getTaskChar() {","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"adricpjw"},"content":"        return taskChar;","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"adricpjw"},"content":"    public String getFullDescription() {","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"adricpjw"},"content":"        return fullDescription;","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"adricpjw"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"adricpjw"},"content":"        return taskType;","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"adricpjw"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"adricpjw"},"content":"        return \"\";","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":60,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"adricpjw":60}},{"path":"src/main/java/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package tasks;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"public enum TaskType {","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"    TODO, ","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"    DEADLINE, ","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"    EVENT,","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"    ANY","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"adricpjw":8}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"package tasks;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"        this(name,false);","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"adricpjw"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"adricpjw"},"content":"    public Todo(String name, boolean isDone) {","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"adricpjw"},"content":"        super(name,isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"adricpjw"},"content":"        this.taskType \u003d TaskType.TODO;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"adricpjw"},"content":"        this.taskChar \u003d \u0027T\u0027;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"adricpjw"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"adricpjw"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"adricpjw":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"adricpjw"},"content":"todo read book","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"adricpjw"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"adricpjw"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"adricpjw"},"content":"done 2","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"adricpjw"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"adricpjw"},"content":"bye","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"adricpjw":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"adricpjw"},"content":"java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"adricpjw":1,"-":20}}]
