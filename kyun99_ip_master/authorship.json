[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"# duke project template","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kyun99":2,"-":22}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"duke.tasks.Task,true,CS2113 ip","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"duke.tasks.Deadline,true,CS2113 Assignment,tomorrow 4pm","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"duke.tasks.Task,false,work","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"duke.tasks.Event,false,work,tmr","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"duke.tasks.Task,false,work","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"kyun99":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"# DUKE User Guide","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"DUKE is a task manager program that is made for use via a Command Line Interface (CLI)","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"Hello from","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":" ____        _        ","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"|  _ \\ _   _| | _____ ","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"What can I do for you?","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"* **User Guide**","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"* **Features**","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"  * Add a Todo task item: `todo`","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"  * Add an Event task item: `event`","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"  * Add a Deadline task item: `deadline`","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"  * Show all tasks: `list`","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"  * Find specific tasks: `find`","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"  * Delete a task item: `delete`","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"  * Mark a task item as completed: `done`","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"  * Exiting the program: `bye`","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"* **Command Summary**","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"## Quick Start ","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"1. Download the `.jar` file [here](https://github.com/kyun99/ip/releases).","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"2. Open a terminal and execute `java -jar ip.jar` in the directory `ip.jar` is in.","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"* Code in `UPPER_CASE` represent input fields that must be supplied by users for commands to work","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"### Add a Todo task item: `todo`","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"Add a `todo` type task into the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"Format: `todo DESCPRIPTION` ","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"`todo CS2113 ip`","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"todo CS2113 ip","lastModifiedDate":"2021-09-24"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-24"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"  [T][ ] CS2113 ip","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"Now you have 1 task in the list","lastModifiedDate":"2021-09-24"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"### Add an Event task item: `event`","lastModifiedDate":"2021-09-24"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"Add an `event` type task into the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"Format: `event DESCPRIPTION /[at:] OCCURING_AT`","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"* `at :` is used only if the user wants to store `OCCURING_AT` in a `MMM-DD-YYYY` format","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"* `event CS2113 lecture /tomorrow 4pm`","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"* `event CS2113 consultation /at: 2021-10-01`","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"kyun99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"kyun99"},"content":"event CS2113 lecture /at: tomorrow 4pm","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"kyun99"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"kyun99"},"content":"  [E][ ] CS2113 lecture (at: tomorrow 4pm)","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"kyun99"},"content":"Now you have 2 task in the list","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"kyun99"},"content":"event CS2113 consultation /at: 2021-10-01","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"kyun99"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"kyun99"},"content":"  [E][ ] CS2113 consultation (Oct 01 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"kyun99"},"content":"Now you have 3 task in the list","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":77,"author":{"gitId":"kyun99"},"content":"### Add a Deadline task item: `deadline`","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"kyun99"},"content":"Add a `deadline` type task into the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"kyun99"},"content":"Format: `deadline DESCPRIPTION /[by:] DUE_BY`","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"kyun99"},"content":"* `by: ` is used only if the user wants to store `DUE_BY` in a `MMM-DD-YYYY` format","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":83,"author":{"gitId":"kyun99"},"content":"Examples:","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"kyun99"},"content":"* `deadline CS2113 Assignment /tomorrow 4pm`","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"kyun99"},"content":"* `deadline CS2113 tp /by: 2021-10-01`","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":88,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"kyun99"},"content":"deadline CS2113 Assignment /tomorrow 4pm","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"kyun99"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"kyun99"},"content":"  [D][ ] CS2113 Assignment (tomorrow 4pm)","lastModifiedDate":"2021-09-24"},{"lineNumber":92,"author":{"gitId":"kyun99"},"content":"Now you have 4 task in the list","lastModifiedDate":"2021-09-24"},{"lineNumber":93,"author":{"gitId":"kyun99"},"content":"deadline CS2113 tp /by: 2021-10-01","lastModifiedDate":"2021-09-24"},{"lineNumber":94,"author":{"gitId":"kyun99"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"kyun99"},"content":"  [D][ ] CS2113 tp (Oct 01 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":96,"author":{"gitId":"kyun99"},"content":"Now you have 5 task in the list","lastModifiedDate":"2021-09-24"},{"lineNumber":97,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":99,"author":{"gitId":"kyun99"},"content":"### Show all tasks: `list`","lastModifiedDate":"2021-09-24"},{"lineNumber":100,"author":{"gitId":"kyun99"},"content":"Show a list of all the task recorded.","lastModifiedDate":"2021-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":102,"author":{"gitId":"kyun99"},"content":"Format: `list`","lastModifiedDate":"2021-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-09-24"},{"lineNumber":105,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":106,"author":{"gitId":"kyun99"},"content":"list","lastModifiedDate":"2021-09-24"},{"lineNumber":107,"author":{"gitId":"kyun99"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-24"},{"lineNumber":108,"author":{"gitId":"kyun99"},"content":"1. [T][ ] CS2113 ip","lastModifiedDate":"2021-09-24"},{"lineNumber":109,"author":{"gitId":"kyun99"},"content":"2. [E][ ] CS2113 lecture (at: tomorrow 4pm)","lastModifiedDate":"2021-09-24"},{"lineNumber":110,"author":{"gitId":"kyun99"},"content":"3. [E][ ] CS2113 consultation (Oct 01 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":111,"author":{"gitId":"kyun99"},"content":"4. [D][ ] CS2113 Assignment (tomorrow 4pm)","lastModifiedDate":"2021-09-24"},{"lineNumber":112,"author":{"gitId":"kyun99"},"content":"5. [D][ ] CS2113 tp (Oct 01 2021)","lastModifiedDate":"2021-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":114,"author":{"gitId":"kyun99"},"content":"### Find specific tasks: `find`","lastModifiedDate":"2021-09-24"},{"lineNumber":115,"author":{"gitId":"kyun99"},"content":"Show a list of all tasks that matches a specific keyword or phrase in the `DESCRIPTION` field.","lastModifiedDate":"2021-09-24"},{"lineNumber":116,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":117,"author":{"gitId":"kyun99"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2021-09-24"},{"lineNumber":118,"author":{"gitId":"kyun99"},"content":"* `KEYWORD` can be either a word or, a phrase","lastModifiedDate":"2021-09-24"},{"lineNumber":119,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":120,"author":{"gitId":"kyun99"},"content":"Example:","lastModifiedDate":"2021-09-24"},{"lineNumber":121,"author":{"gitId":"kyun99"},"content":"`find Assignment`","lastModifiedDate":"2021-09-24"},{"lineNumber":122,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":123,"author":{"gitId":"kyun99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-24"},{"lineNumber":124,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":125,"author":{"gitId":"kyun99"},"content":"find Assignment ","lastModifiedDate":"2021-09-24"},{"lineNumber":126,"author":{"gitId":"kyun99"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-24"},{"lineNumber":127,"author":{"gitId":"kyun99"},"content":"1. [D][ ] CS2113 Assignment (tomorrow 4pm)","lastModifiedDate":"2021-09-24"},{"lineNumber":128,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":129,"author":{"gitId":"kyun99"},"content":"### Delete a task item: `delete`","lastModifiedDate":"2021-09-24"},{"lineNumber":130,"author":{"gitId":"kyun99"},"content":"Removes a task from the list","lastModifiedDate":"2021-09-24"},{"lineNumber":131,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":132,"author":{"gitId":"kyun99"},"content":"Format: `delete TASK_INDEX`","lastModifiedDate":"2021-09-24"},{"lineNumber":133,"author":{"gitId":"kyun99"},"content":"* `TASK_INDEX` is the number corresponding to the task on the list. The number must be a positive integer.","lastModifiedDate":"2021-09-24"},{"lineNumber":134,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":135,"author":{"gitId":"kyun99"},"content":"Example:","lastModifiedDate":"2021-09-24"},{"lineNumber":136,"author":{"gitId":"kyun99"},"content":"`delete 2`","lastModifiedDate":"2021-09-24"},{"lineNumber":137,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":138,"author":{"gitId":"kyun99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-24"},{"lineNumber":139,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":140,"author":{"gitId":"kyun99"},"content":"delete 2 ","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"kyun99"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-24"},{"lineNumber":142,"author":{"gitId":"kyun99"},"content":"  [E][ ] CS2113 lecture (tomorrow 4pm)","lastModifiedDate":"2021-09-24"},{"lineNumber":143,"author":{"gitId":"kyun99"},"content":"Now you have 2 task in the list.","lastModifiedDate":"2021-09-24"},{"lineNumber":144,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":145,"author":{"gitId":"kyun99"},"content":"### Mark a task item as completed: `done`","lastModifiedDate":"2021-09-24"},{"lineNumber":146,"author":{"gitId":"kyun99"},"content":"Use for marking a task as completed.","lastModifiedDate":"2021-09-24"},{"lineNumber":147,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":148,"author":{"gitId":"kyun99"},"content":"Format: `done TASK_INDEX`","lastModifiedDate":"2021-09-24"},{"lineNumber":149,"author":{"gitId":"kyun99"},"content":"* `TASK_INDEX` is the number corresponding to the task on the list. The number must be a positive integer.","lastModifiedDate":"2021-09-24"},{"lineNumber":150,"author":{"gitId":"kyun99"},"content":"* Each task can only be marked done once. Once a task is marked `done` it cannot be undone. ","lastModifiedDate":"2021-09-24"},{"lineNumber":151,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":152,"author":{"gitId":"kyun99"},"content":"Example:","lastModifiedDate":"2021-09-24"},{"lineNumber":153,"author":{"gitId":"kyun99"},"content":"`done 1`","lastModifiedDate":"2021-09-24"},{"lineNumber":154,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":155,"author":{"gitId":"kyun99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-24"},{"lineNumber":156,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":157,"author":{"gitId":"kyun99"},"content":"done 1","lastModifiedDate":"2021-09-24"},{"lineNumber":158,"author":{"gitId":"kyun99"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-24"},{"lineNumber":159,"author":{"gitId":"kyun99"},"content":"  [T][X] CS2113 ip","lastModifiedDate":"2021-09-24"},{"lineNumber":160,"author":{"gitId":"kyun99"},"content":"list","lastModifiedDate":"2021-09-24"},{"lineNumber":161,"author":{"gitId":"kyun99"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-24"},{"lineNumber":162,"author":{"gitId":"kyun99"},"content":"1. [T][X] CS2113 ip","lastModifiedDate":"2021-09-24"},{"lineNumber":163,"author":{"gitId":"kyun99"},"content":"2. [D][ ] CS2113 Assignment (tomorrow 4pm)","lastModifiedDate":"2021-09-24"},{"lineNumber":164,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":165,"author":{"gitId":"kyun99"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2021-09-24"},{"lineNumber":166,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":167,"author":{"gitId":"kyun99"},"content":"Use for terminating the program","lastModifiedDate":"2021-09-24"},{"lineNumber":168,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":169,"author":{"gitId":"kyun99"},"content":"Format:","lastModifiedDate":"2021-09-24"},{"lineNumber":170,"author":{"gitId":"kyun99"},"content":"`bye`","lastModifiedDate":"2021-09-24"},{"lineNumber":171,"author":{"gitId":"kyun99"},"content":"* All the data in the task list will be saved in file in the same directory as the program for future access.","lastModifiedDate":"2021-09-24"},{"lineNumber":172,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":173,"author":{"gitId":"kyun99"},"content":"Expected outcome:","lastModifiedDate":"2021-09-24"},{"lineNumber":174,"author":{"gitId":"kyun99"},"content":"```text","lastModifiedDate":"2021-09-24"},{"lineNumber":175,"author":{"gitId":"kyun99"},"content":"bye","lastModifiedDate":"2021-09-24"},{"lineNumber":176,"author":{"gitId":"kyun99"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2021-09-24"},{"lineNumber":177,"author":{"gitId":"kyun99"},"content":"```","lastModifiedDate":"2021-09-24"},{"lineNumber":178,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":179,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":180,"author":{"gitId":"kyun99"},"content":"## Command Summary","lastModifiedDate":"2021-09-24"},{"lineNumber":181,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":182,"author":{"gitId":"kyun99"},"content":"Action | Format,Examples","lastModifiedDate":"2021-09-24"},{"lineNumber":183,"author":{"gitId":"kyun99"},"content":"------ | ---------------","lastModifiedDate":"2021-09-24"},{"lineNumber":184,"author":{"gitId":"kyun99"},"content":"Add todo | `todo DESCPRIPTION` ","lastModifiedDate":"2021-09-24"},{"lineNumber":185,"author":{"gitId":"kyun99"},"content":"Add event | `event DESCPRIPTION /[at:] OCCURING_AT` eg.`event CS2113 consultation /at: 2021-10-01`","lastModifiedDate":"2021-09-24"},{"lineNumber":186,"author":{"gitId":"kyun99"},"content":"Add deadline | `deadline DESCPRIPTION /[by:] DUE_BY` eg. `deadline CS2113 tp /by: 2021-10-01`","lastModifiedDate":"2021-09-24"},{"lineNumber":187,"author":{"gitId":"kyun99"},"content":"List | `list`","lastModifiedDate":"2021-09-24"},{"lineNumber":188,"author":{"gitId":"kyun99"},"content":"Find | `find KEYWORD` eg. `find Assignment`","lastModifiedDate":"2021-09-24"},{"lineNumber":189,"author":{"gitId":"kyun99"},"content":"Delete task | `delete TASK_INDEX` eg. `delete 2`","lastModifiedDate":"2021-09-24"},{"lineNumber":190,"author":{"gitId":"kyun99"},"content":"Done | `done TASK_INDEX` eg. `done 1`","lastModifiedDate":"2021-09-24"},{"lineNumber":191,"author":{"gitId":"kyun99"},"content":"Terminate | `bye`","lastModifiedDate":"2021-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"kyun99":167,"-":25}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":" * This is a application that simulates a todo list. It is able to read, write and delete items,","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":" * as well as mark items in the list as completed.","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":" *","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":" * @author Lim Kay Yun","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":" * @version v0.1","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" * @since 21-9-2021","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"     * Represent the startup of the application. The user interface and storage used to store file data","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"     * is instantiated here. If the file that is used to store data cannot be read, the program will show","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"     * an error message and will terminate with exit code -1","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"     * @param filePath relative path where the file used to store the data of the task list is located at","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     * Responsible for listening for input from user and execute commands depending on the input string","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"     * from the users. If there is any error while attempting to parse the input string or while executing","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"     * the command, a message associated with the error will be printed and another input will be prompted","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    public void run(){","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"        while (!isExit) {","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"            try {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"            } catch (Exception ex) {","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"                ui.showExceptionMessage(ex);","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"     * Create an instance of the application and run the application. The application will only terminate","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"     * if the terminate command is executed or if there is an error loading the file","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"     * @param args the variable argument field is not used in this program","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kyun99":62,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.commands.AddCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"import duke.commands.CommandType;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"import duke.exceptions.EmptyDescriptionException;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"import duke.exceptions.EmptyTimeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"import duke.exceptions.IncompleteInformationException;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"import duke.exceptions.InvalidRequestException;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"import duke.exceptions.InvalidFilterException;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":" * This class is used to parse string inputs from users and return the input commands as objects","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":" * that can be executed, according to the commands specified by the user","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"public abstract class Parser {","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"    public static final int TIME_INFO_START_INDEX \u003d 1;","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"    public static final int SPECIAL_DATE_SEQUENCE \u003d 4;","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"     * Returns an executable command object based on the input string where the command type and other additional","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"     * information is specified. If the command cannot be parsed appropriately or if the command the user has","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     * input is incorrect, an exception will be thrown","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     * @param request It is the string input users enter in the command line to interact with the application","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"     * @return The method returns a command object which contains a method to carry out the specified command on the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"     * @throws Exception it is thrown when an error occur when attempting to parse the input command","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    public static Command parse(String request) throws Exception {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"        if (CommandType.isList(request)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"            return new ListCommand(CommandType.LIST);","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isDone(request)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"            int taskIndex \u003d getTaskIndex(request);","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"            return new DoneCommand(CommandType.DONE, taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isDelete(request)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"            int taskIndex \u003d getTaskIndex(request);","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"            return new DeleteCommand(CommandType.DELETE, taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isBye(request)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"            return new ExitCommand(CommandType.BYE);","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isFind(request)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"            String filterBy \u003d getTaskFilterWord(request);","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"            return new FindCommand(CommandType.FIND, filterBy);","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"        } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"            return getTask(request);","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"    private static String getTaskFilterWord(String request) throws InvalidFilterException {","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"            return getDescription(request.trim());","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"kyun99"},"content":"            throw new InvalidFilterException();","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"kyun99"},"content":"    private static int getTaskIndex(String request) {","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"kyun99"},"content":"            int taskIndexStart \u003d request.indexOf(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"kyun99"},"content":"            String taskIndex \u003d request.substring(taskIndexStart).trim();","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"kyun99"},"content":"            return Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"kyun99"},"content":"        } catch (Exception e){","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"kyun99"},"content":"            throw new NumberFormatException(\"Sorry there\u0027s no integer I can read!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"kyun99"},"content":"    private static Command getTask(String request) throws Exception {","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"kyun99"},"content":"        if (CommandType.isTodo(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"kyun99"},"content":"            return buildTodo(request.trim());","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isSpecialTask(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"kyun99"},"content":"            return buildSpecialTask(request.trim());","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"kyun99"},"content":"        throw new InvalidRequestException();","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"kyun99"},"content":"    private static Command buildTodo(String request) throws Exception{","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"kyun99"},"content":"            String description \u003d getDescription(request);","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"kyun99"},"content":"            Task task \u003d new Task(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"kyun99"},"content":"            return new AddCommand(CommandType.TODO,task);","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"kyun99"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"kyun99"},"content":"            throw new IncompleteInformationException(CommandType.TODO);","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"kyun99"},"content":"    private static Command buildSpecialTask(String request) throws Exception {","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"kyun99"},"content":"            String commandType \u003d CommandType.isEvent(request) ? CommandType.EVENT : CommandType.DEADLINE;","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"kyun99"},"content":"            String description \u003d getDescription(request);","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"kyun99"},"content":"            String time \u003d getTime(request);","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"kyun99"},"content":"            Task task \u003d CommandType.isEvent(request) ? new Event(description, time) : new Deadline(description, time);","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"kyun99"},"content":"            return new AddCommand(commandType, task);","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"kyun99"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"kyun99"},"content":"            throw new IncompleteInformationException(CommandType.getCommand(request));","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"kyun99"},"content":"    private static String getTime(String request) throws EmptyTimeException{","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"kyun99"},"content":"            int timeIndex \u003d request.indexOf(\"/\");","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"kyun99"},"content":"            if (timeIndex \u003c 0) {","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"kyun99"},"content":"                throw new EmptyTimeException();","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"kyun99"},"content":"            try {","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"kyun99"},"content":"                String time \u003d request.substring(timeIndex + SPECIAL_DATE_SEQUENCE).trim();","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"kyun99"},"content":"                LocalDate date \u003d LocalDate.parse(time, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"kyun99"},"content":"                return date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"kyun99"},"content":"            } catch (Exception ex) {","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"kyun99"},"content":"                return request.substring(timeIndex + TIME_INFO_START_INDEX).trim();","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":122,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":123,"author":{"gitId":"kyun99"},"content":"    private static String getDescription(String request) throws EmptyDescriptionException {","lastModifiedDate":"2021-09-15"},{"lineNumber":124,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":125,"author":{"gitId":"kyun99"},"content":"            int descriptionStartIndex \u003d request.indexOf(\" \");","lastModifiedDate":"2021-09-15"},{"lineNumber":126,"author":{"gitId":"kyun99"},"content":"            int descriptionEndIndex \u003d CommandType.isSpecialTask(request) ? request.indexOf(\"/\") : request.length();","lastModifiedDate":"2021-09-15"},{"lineNumber":127,"author":{"gitId":"kyun99"},"content":"            return request.substring(descriptionStartIndex,descriptionEndIndex).trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":128,"author":{"gitId":"kyun99"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":129,"author":{"gitId":"kyun99"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2021-09-15"},{"lineNumber":130,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":131,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":132,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"kyun99":132}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"import java.io.File;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":" * This class handles reading, writing and loading of the file used to store the data of","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":" * the task list in. If the file does not exist, a directory and a file will be created","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":" * to store the contents of the task list in","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"public class Storage {","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"    private static final int TASK_DONE_INDEX \u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"    private static final int TASK_DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    public static final int TASK_TIME_INDEX \u003d 3;","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"    private File file;","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * Represents the setting up of the storage in the form of a file object that will be used during the","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     * duration which the application is running. If the file path does not contain a file, a file will","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     * be created instead.","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     * @param filePath relative file path that contains the file storing data of the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"     * @throws Exception exception is thrown if the file path does not exist or if a problem occur when","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"     *                   creating a directory or file","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"    public Storage(String filePath) throws Exception{","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"        if (!this.file.exists()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"            File dir \u003d new File(\"data\");","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"            if (dir.mkdir()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"                System.out.println(\"Creating a directory called /data\");","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"            this.file \u003d new File(\"data/duke.txt\");","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"                System.out.println(\"A file called duke.txt is created at /data/duke.txt\");","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"     * Converts the data stored in the file object into an ArrayList storing all the task in the task","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"     * list.","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"     * @return the existing task list that was stored in the file","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"     * @throws FileNotFoundException exception thrown if file cannot be found for reading","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"        while (s.hasNext()){","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"            String[] taskInfo \u003d s.nextLine().split(\",\");","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"            if (taskInfo[0].equals(\"duke.tasks.Task\")) {","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"                Task todo \u003d new Task(Boolean.parseBoolean(taskInfo[TASK_DONE_INDEX]), taskInfo[TASK_DESCRIPTION_INDEX]);","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"                tasks.add(todo);","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"kyun99"},"content":"            } else if (taskInfo[0].equals(\"duke.tasks.Event\")) {","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"kyun99"},"content":"                Task event \u003d new Event(Boolean.parseBoolean(taskInfo[TASK_DONE_INDEX]),taskInfo[TASK_DESCRIPTION_INDEX], taskInfo[TASK_TIME_INDEX]);","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"kyun99"},"content":"                tasks.add(event);","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"kyun99"},"content":"            } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"kyun99"},"content":"                Task deadline \u003d new Deadline(Boolean.parseBoolean(taskInfo[TASK_DONE_INDEX]), taskInfo[TASK_DESCRIPTION_INDEX], taskInfo[TASK_TIME_INDEX]);","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kyun99"},"content":"                tasks.add(deadline);","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"kyun99"},"content":"        return tasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"kyun99"},"content":"     * writes the contents of the task list into the file to store store the data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"kyun99"},"content":"     * @param tasks task list that stores all the task that we want to write to the file","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"kyun99"},"content":"     * @throws IOException thrown when file cannot be written to the file object in Storage","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"kyun99"},"content":"    public void store(TaskList tasks) throws IOException {","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"kyun99"},"content":"        FileWriter writer \u003d new FileWriter(this.file);","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"kyun99"},"content":"        ArrayList\u003cTask\u003e tasksToSave \u003d tasks.saveTasks();","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"kyun99"},"content":"        for(Task t : tasksToSave) {","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"kyun99"},"content":"            writer.write(t.saveFormat() + \"\\n\");","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"kyun99"},"content":"        writer.close();","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":89}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":" * This class hold all the tasks that the user has added. This class is also responsible for","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":" * handling the manipulation of the task list like adding, deleting and viewing the tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"public class TaskList {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     * Sets up the class by assigning a list of task that is gotten from the storage object","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     * @param tasks the list of task that is extracted from the file that is gotten from the storage object","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     * Returns the number of tasks in the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * @return the number of tasks that is stored in tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"    public int size() {","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"     * Returns all the task in an ArrayList to be written into the file used to store task data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     * @return tasks as an ArrayList so it can be written to the file storing file data","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"    public ArrayList\u003cTask\u003e saveTasks() {","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"        return tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"     * Check if the task list does not contain any task","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"     * @return true if the task list is empty else it returns false","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"     * Returns the task at the specified index that is in the task list. If the index is too large,","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"     * an exception will be thrown, telling the user that the task at the index does not exist","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"     * @param index Index of the task in the task list that the user wants to retrieve","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"     * @return A task if the index exist in the task list else an exception will be returned","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"            return tasks.get(index);","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"        } catch (IndexOutOfBoundsException ex) {","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"            throw new IndexOutOfBoundsException(\"☹ OOPS!!! The list does not have that many task \u003e\u003c\");","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"kyun99"},"content":"     * Adds a task into the existing list of task","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"kyun99"},"content":"     * @param task Task that we want to add to the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"kyun99"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"kyun99"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":73,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"kyun99"},"content":"     * Mark the task at the specified index in the task list as completed. If the task at the index","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"kyun99"},"content":"     * does no exist, an exception will be thrown","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"kyun99"},"content":"     * @param taskIndex the index of the task to be marked as done","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"kyun99"},"content":"     * @return the task that is marked done","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"kyun99"},"content":"    public Task doneTask(int taskIndex) {","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"kyun99"},"content":"        Task task \u003d getTask(taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"kyun99"},"content":"        task.setDone();","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"kyun99"},"content":"        return task;","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":86,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":87,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"kyun99"},"content":"     * Remove the task at the specific index from the task list. If the task at the index","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"kyun99"},"content":"     * does no exist, an exception will be thrown","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"kyun99"},"content":"     * @param taskIndex the index of the task to be removed from the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"kyun99"},"content":"     * @return the task that has been removed from the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"kyun99"},"content":"    public Task deleteTask(int taskIndex) {","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"kyun99"},"content":"        try {","lastModifiedDate":"2021-09-12"},{"lineNumber":96,"author":{"gitId":"kyun99"},"content":"            return tasks.remove(taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"kyun99"},"content":"        } catch (IndexOutOfBoundsException ex) {","lastModifiedDate":"2021-09-12"},{"lineNumber":98,"author":{"gitId":"kyun99"},"content":"            throw new IndexOutOfBoundsException(\"☹ OOPS!!! The list does not have that many task \u003e\u003c\");","lastModifiedDate":"2021-09-12"},{"lineNumber":99,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":100,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"kyun99"},"content":"     * Return a task list that contains task that only stores task that contains words in their description that","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"kyun99"},"content":"     * matches the input string. If no task description matches the string, an empty ArrayList will be returned","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"kyun99"},"content":"     * @param word Word which we want the description of the task to have","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"kyun99"},"content":"     * @return a TaskList of tasks that contains the specified word","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"kyun99"},"content":"    public TaskList getFilteredTask(String word) {","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"kyun99"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"kyun99"},"content":"        for(Task t: tasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"kyun99"},"content":"            if (t.getDescription().contains(word)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"kyun99"},"content":"                filteredTasks.add(t);","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"kyun99"},"content":"        return new TaskList(filteredTasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"kyun99":119}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":" * This class serves as the user interface of the application. This class is responsible for","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":" * taking in input from the user, as well as displaying information to the command line based on the","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":" * user\u0027s command","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"public class Ui {","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    private final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"    private Scanner in;","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"     * Sets up the user interface so that it can read inputs from users via the command line","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"    public Ui() {","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"        this.in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     * Displays the welcome message to users when the application first starts up","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"     * Display error message when the contents of the file is first loaded but is corrupted and cannot be read","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"        System.out.println(\"There is some problem with the file...\");","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"     * Returns the input text that the user enters in the command line as a string to the application","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"     * @return the input text as a string to be parsed","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"    public String readCommand() {","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"        return in.nextLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"     * Display exception message stored in the exception object when exception is caught during the operation of the application.","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"     * @param ex This is the exception object that is thrown if the parsing or execution of the command produces an error","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"    public void showExceptionMessage(Exception ex) {","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"        System.out.println(ex.getMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"     * Displays the goodbye message to users when the application terminates via \u0027bye\u0027 command","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"    public void showGoodByeMessage() {","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"kyun99"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"kyun99"},"content":"     * Displays the task that is newly added to the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"kyun99"},"content":"     * @param task task that is newly added to the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores all the task","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"kyun99"},"content":"    public void showAddMessage(Task task, TaskList tasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"kyun99"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"kyun99"},"content":"                \"  %s\\nNow you have %d task in the list\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"kyun99"},"content":"                ,task, tasks.size());","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"kyun99"},"content":"     * Displays the all the existing tasks in the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores all the task","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"kyun99"},"content":"    public void showTaskList(TaskList tasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"kyun99"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"kyun99"},"content":"            System.out.println(\"Take a chill pill! Your todo list is empty\");","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"kyun99"},"content":"        } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"kyun99"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"kyun99"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"kyun99"},"content":"                System.out.printf(\"%d. %s\\n\", i + 1, tasks.getTask(i));","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"kyun99"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"kyun99"},"content":"     * Displays the task that is removed from the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"kyun99"},"content":"     * @param deletedTask task that has been removed from the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores all the task","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"kyun99"},"content":"    public void showDeleteMessage(Task deletedTask, TaskList tasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"kyun99"},"content":"        System.out.printf(\"Noted. I\u0027ve removed this task:\\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"kyun99"},"content":"                \"  %s\\nNow you have %d task in the list.\\n\", deletedTask, tasks.size());","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"kyun99"},"content":"     * Displays a message to the user that the task that they are trying to mark as done is already marked","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"kyun99"},"content":"     * and cannot be marked again","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"kyun99"},"content":"    public void showAlreadyDoneMessage() {","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"kyun99"},"content":"        System.out.println(\"This task is already done!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"kyun99"},"content":"     * Displays the task that has been marked as done","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"kyun99"},"content":"     * @param task task that is marked as done","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"kyun99"},"content":"    public void showDoneMessage(Task task) {","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"kyun99"},"content":"        System.out.printf(\"Nice! I\u0027ve marked this task as done:\\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"kyun99"},"content":"                \"  %s\\n\", task);","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":123,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"kyun99"},"content":"     * Displays a filtered task list based on a word specified by the user that they want","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"kyun99"},"content":"     * the description of the task to have","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"kyun99"},"content":"     * @param filteredTasks task list containing only the task that contains the specified word","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"kyun99"},"content":"     *                      in the description","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"kyun99"},"content":"     * @param word the word in the task description that the user specify that the description must have","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"kyun99"},"content":"    public void showFilteredTask(TaskList filteredTasks, String word) {","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"kyun99"},"content":"        if (filteredTasks.isEmpty()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"kyun99"},"content":"            System.out.println(\"There are no task that match the input text: \" + word);","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"kyun99"},"content":"        } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"kyun99"},"content":"            showTaskList(filteredTasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":139}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" * This class is used to add task into the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    private Task task;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     * Sets up the add command to be execute by the application","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"     * @param command it is the name of the command","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"     * @param task it is the task that was parsed by Parser and will be added to the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    public AddCommand(String command, Task task) {","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"        super(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     * Executes the command and adds the task into the task list. Save the data in the task","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     * list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores task for the application which is manipulated based on the command","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"     * @param ui the user interface that interacts with users which prints messages based on the different commands","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"     * @param storage the area which data can be read from and written to, to save task list data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"     * @throws IOException is thrown if storage fails to store the updated task list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"        tasks.addTask(task);","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"        ui.showAddMessage(task,tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"        storage.store(tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":42}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":" * This class is the parent class to all the different command classes, based on the capabilities of","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" * the application.","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    private String command;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     * Specifies the type of command by storing the type of command as a string","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"     * @param command It is a string that represents that command type","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"    public Command(String command) {","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * Based on the type of command, different command classes will require the task list, ui and storage","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     * to perform different operations","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores task for the application which is manipulated based on the command","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     * @param ui the user interface that interacts with users which prints messages based on the different commands","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"     * @param storage the area which data can be read from and written to, to save task list data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"     * @throws IOException is thrown when storage fail to store task list data in the files","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     * Checks if the terminate command is activated. When the terminate command \u0027bye\u0027 is inputted, the program terminates","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"     * @return true if the command input is \u0027bye\u0027 else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"        return CommandType.isBye(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":44}},{"path":"src/main/java/duke/commands/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":" * This class is used to identify the command that users input into the command line","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"public abstract class CommandType {","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"    public static final String BYE \u003d \"bye\";","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"    public static final String LIST \u003d \"list\";","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"    public static final String DONE \u003d \"done\";","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"    public static final String DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"    public static final String TODO \u003d \"todo\";","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"    public static final String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    public static final String EVENT \u003d \"event\";","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    public static final String FIND \u003d \"find\";","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the exit command","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    public static boolean isBye(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"        return request.trim().equals(BYE);","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the delete command","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"    public static boolean isDelete(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"        return request.trim().startsWith(DELETE);","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the list command","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"    public static boolean isList(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"        return request.trim().equals(LIST);","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the done command","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"    public static boolean isDone(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"        return request.startsWith(DONE);","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the add command for a todo task type","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"    public static boolean isTodo(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"        return request.startsWith(TODO);","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the add command for a deadline task type","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"kyun99"},"content":"    public static boolean isDeadline(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"kyun99"},"content":"        return request.startsWith(DEADLINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the add command for a event task type","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"kyun99"},"content":"    public static boolean isEvent(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"kyun99"},"content":"        return request.startsWith(EVENT);","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the add command for either a deadline or event task type","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"kyun99"},"content":"    public static boolean isSpecialTask(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"kyun99"},"content":"        return isDeadline(request) || isEvent(request);","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"kyun99"},"content":"     * Checks if the input command is the find command","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"kyun99"},"content":"     * @return true if the string matches the command else return false","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"kyun99"},"content":"    public static boolean isFind(String request) {","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"kyun99"},"content":"        return request.startsWith(FIND);","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"kyun99"},"content":"     * Returns the string associated to the command type","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"kyun99"},"content":"     * @param request it is the input string from the user","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"kyun99"},"content":"     * @return the string that corresponds to the command","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"kyun99"},"content":"    public static String getCommand(String request) {","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"kyun99"},"content":"        if (CommandType.isBye(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"kyun99"},"content":"            return CommandType.BYE;","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isDone(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"kyun99"},"content":"            return CommandType.DONE;","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isList(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"kyun99"},"content":"            return CommandType.LIST;","lastModifiedDate":"2021-09-15"},{"lineNumber":118,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isTodo(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":119,"author":{"gitId":"kyun99"},"content":"            return CommandType.TODO;","lastModifiedDate":"2021-09-15"},{"lineNumber":120,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isEvent(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":121,"author":{"gitId":"kyun99"},"content":"            return CommandType.EVENT;","lastModifiedDate":"2021-09-15"},{"lineNumber":122,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isDeadline(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":123,"author":{"gitId":"kyun99"},"content":"            return CommandType.DEADLINE;","lastModifiedDate":"2021-09-15"},{"lineNumber":124,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isDelete(request)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":125,"author":{"gitId":"kyun99"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2021-09-15"},{"lineNumber":126,"author":{"gitId":"kyun99"},"content":"        } else if (CommandType.isFind(request)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"kyun99"},"content":"            return CommandType.FIND;","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":129,"author":{"gitId":"kyun99"},"content":"        return null;","lastModifiedDate":"2021-09-15"},{"lineNumber":130,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":131,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"kyun99":133}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" * This class is used to remove task from the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"public class DeleteCommand extends Command{","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    private int taskIndex;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     * Sets up the delete command to be execute by the application","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"     * @param command it is the name of the command","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"     * @param taskIndex it is the index of the task that needs to be deleted","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    public DeleteCommand(String command, int taskIndex) {","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"        super(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     * Executes the command and remove the task at the taskIndex from the task list. Save the data in the task","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     * list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores task for the application which is manipulated based on the command","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"     * @param ui the user interface that interacts with users which prints messages based on the different commands","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"     * @param storage the area which data can be read from and written to, to save task list data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"     * @throws IOException is thrown if storage fails to store the updated task list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"        Task deletedTask \u003d tasks.deleteTask(taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"        ui.showDeleteMessage(deletedTask, tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"        storage.store(tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":42}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" * This class is used to mark a task in the task list as completed","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"public class DoneCommand extends Command{","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    private int taskIndex;","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     * Sets up the done command to be execute by the application","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"     * @param command it is the name of the command","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"     * @param taskIndex it is the index of the task that needs to be marked as completed","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    public DoneCommand(String command, int taskIndex) {","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"        super(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     * Executes the command and mark the task at the taskIndex as done in the task list. Save the data in the task","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     * list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores task for the application which is manipulated based on the command","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"     * @param ui the user interface that interacts with users which prints messages based on the different commands","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"     * @param storage the area which data can be read from and written to, to save task list data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"     * @throws IOException is thrown if storage fails to store the updated task list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"        Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"        if (task.isDone()){","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"            ui.showAlreadyDoneMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"        } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"            ui.showDoneMessage(tasks.doneTask(taskIndex));","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"        storage.store(tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":46}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":" * This class is used to terminate the application","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"     * Sets up the exit command to be execute by the application","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"     * @param command it is the name of the command","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"    public ExitCommand(String command) {","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"        super(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"     * Executes the command and terminate the application. Save the data in the task","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     * list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores task for the application which is manipulated based on the command","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     * @param ui the user interface that interacts with users which prints messages based on the different commands","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     * @param storage the area which data can be read from and written to, to save task list data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     * @throws IOException is thrown if there is an error in writing data from task list into file","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"        ui.showGoodByeMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"        storage.store(tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":36}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":" * This class is used to find all task which contains a specific substring in its description field","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"    private String filterWord;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"     * Sets up the find command to be execute by the application","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"     * @param Command it is the name of the command","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     * @param filterWord it is the substring we want to filter each tasks\u0027 description by","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"    public FindCommand(String Command, String filterWord) {","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"        super(Command);","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"        this.filterWord \u003d filterWord;","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     * Executes the command and find all task which contains a specific substring in its description field and display it.","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * Save the data in the task list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores task for the application which is manipulated based on the command","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"     * @param ui the user interface that interacts with users which prints messages based on the different commands","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"     * @param storage the area which data can be read from and written to, to save task list data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage){","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"        TaskList filteredTasks \u003d tasks.getFilteredTask(filterWord);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"        ui.showFilteredTask(filteredTasks, filterWord);","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":37}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.commands;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":" * This class is displays all task in the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"     * Sets up the list command to be execute by the application","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"     * @param command it is the name of the command","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"    public ListCommand(String command) {","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"        super(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"     * Executes the command and display all the task in the task list. Save the data in the task list into the file","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     * @param tasks the task list that stores task for the application which is manipulated based on the command","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * @param ui the user interface that interacts with users which prints messages based on the different commands","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     * @param storage the area which data can be read from and written to, to save task list data permanently","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage){","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"        ui.showTaskList(tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":33}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"kyun99":4}},{"path":"src/main/java/duke/exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"public class EmptyDescriptionException extends DukeException{","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"kyun99":4}},{"path":"src/main/java/duke/exceptions/EmptyTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"public class EmptyTimeException extends DukeException{","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"kyun99":4}},{"path":"src/main/java/duke/exceptions/IncompleteInformationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"import duke.commands.CommandType;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":" * This class is thrown when the task information fields like time and description are missing. It","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":" * stores the message specific to the task type and the fields that are lacking","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"public class IncompleteInformationException extends DukeException{","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"    private String taskType;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"     * Creates a exception class that stores the task type it is related to","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     * @param taskType it is the name of the task that cause this exception","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"    public IncompleteInformationException(String taskType) {","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"     * Depending on the task type, the error message that the exception will show is different.","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"     * For todo task, the error would be an empty description field while for events and deadlines","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     * the error would be empty descriptions or timing fields","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * @return a string of the error message that corresponds to the task","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"    public String getMessage(){","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"        if (CommandType.isTodo(taskType)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"            return String.format(\"☹ OOPS!!! The check that the description of %s is not empty\", taskType);","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"        return String.format(\"☹ OOPS!!! The check that the description and time fields of %s is not empty\", taskType);","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"kyun99":35}},{"path":"src/main/java/duke/exceptions/InvalidFilterException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":" * This class is thrown when the filter word field is missing from the find command. It","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":" * stores the message that prompts users the correct way to input the code","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"public class InvalidFilterException extends DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"     * Returns a message that tells user what is missing in the command","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"     * @return a string storing the error message","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    public String getMessage(){","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"        return \"Input a filter you want to search by\";","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kyun99":17}},{"path":"src/main/java/duke/exceptions/InvalidRequestException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":" * This class is thrown when the input command does not match any available command. It","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":" * stores the message that tells the user that no command is executed.","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"public class InvalidRequestException extends DukeException{","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"     * Returns a message that tells user the command is invalid","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"     * @return a string storing the error message","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"    public String getMessage(){","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"        return String.format(\"☹ OOPS!!! I can\u0027t do that.\");","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"kyun99":17}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":" * This class stores all the information as the regular Task class, as well as an additional at timing field,","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":" * which is used to store the time and date which the deadline will be due","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"    private String by;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"     * Creates an uncompleted deadline which includes the timing field as well","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"     * @param description stores information about the deadline","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"     * @param by stores the time and date which the deadline will be due","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    public Deadline(String description, String by){","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"     * Creates a deadline task that is read from a saved file, to be stored into the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     * @param isDone it stores the boolean for whether the deadline is marked completed or not","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     * @param description stores information about the deadline","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * @param by stores the time and date which the deadline will be due","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"    public Deadline(boolean isDone,String description, String by){","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"        super(isDone, description);","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"     * Returns the timing which the deadline is due","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"     * @return the string specified by the constructor for the variable by","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"    public String getBy() {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"        return this.by;","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"     * Returns the task as a CSV string to be written to the file before saving the data. It includes the","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"     * timing information as well.","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"     * @return a CSV string of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"    public String saveFormat() {","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"        return String.format(super.saveFormat() + \",\" + by);","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"     * Returns the task in a formatted string, which is more readable when displayed to the user","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"     * @return a formatted string of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"    public String toString(){","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"        return super.toString() + String.format(\" (%s)\",this.getBy());","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"kyun99":62}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":" * This class stores all the information as the regular Task class, as well as an additional at timing field,","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":" * which is used to store the time and date which the event will be held","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"    private String at;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"     * Creates an uncompleted event which includes the timing field as well","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"     * @param description stores information about the event","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"     * @param at stores the time and date which the event will be conducted at","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"    public Event(String description, String at){","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"     * Creates an event task that is read from a saved file, to be stored into the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     * @param isDone it stores the boolean for whether the event is marked completed or not","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     * @param description stores information about the event","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * @param at stores the time and date which the event will be conducted at","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"    public Event(boolean isDone,String description, String at){","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"        super(isDone,description);","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"     * Returns the task as a CSV string to be written to the file before saving the data. It includes the","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     * timing information as well.","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     * @return a CSV string of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"    public String saveFormat() {","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"        return super.saveFormat() + \",\" + at;","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"     * Returns the timing which the event is held","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"     * @return the string specified by the constructor for the variable at","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"    public String getAt() {","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"        return this.at;","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"     * Returns the task in a formatted string, which is more readable when displayed to the user","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"     * @return a formatted string of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"    public String toString(){","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"        return super.toString() + String.format(\" (%s)\",this.getAt());","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"kyun99":61}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":" * This class is the basic task type that stores information about the task like the description of the task and","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":" * if it is completed or not","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"public class Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"    public static final int TASK_LETTER_START_INDEX \u003d 11;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"    public static final int TASK_LETTER_END_INDEX \u003d 12;","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"    private String description;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"    private boolean isDone;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kyun99"},"content":"     * Creates a uncompleted task containing information about the task","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"kyun99"},"content":"     * @param description stores information about the task","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"kyun99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"kyun99"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"kyun99"},"content":"     * Creates an existing task that is read from a saved file, to be stored into the task list","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"kyun99"},"content":"     * @param isDone it stores the boolean for whether the task is marked completed or not","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"kyun99"},"content":"     * @param description stores the information about the task","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"kyun99"},"content":"    public Task(boolean isDone, String description) {","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"kyun99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"kyun99"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"kyun99"},"content":"     * Returns the task as a CSV string to be written to the file before saving the data","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"kyun99"},"content":"     * @return a CSV string of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"kyun99"},"content":"    public String saveFormat() {","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"kyun99"},"content":"        return String.format(this.getClass().getName() + \",\" + isDone + \",\" + description);","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"kyun99"},"content":"     * Marks the task as completed","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"kyun99"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"kyun99"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"kyun99"},"content":"     * Check if the task is marked as done or not","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"kyun99"},"content":"     * @return true if the task is marked as done else false","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"kyun99"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"kyun99"},"content":"        return this.isDone;","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"kyun99"},"content":"     * Returns the description of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"kyun99"},"content":"     * @return a string storing the description of the file","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"kyun99"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"kyun99"},"content":"        return this.description;","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"kyun99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"kyun99"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kyun99"},"content":"     * Returns the task in a formatted string, which is more readable when displayed to the user","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"kyun99"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"kyun99"},"content":"     * @return a formatted string of the task","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"kyun99"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"kyun99"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"kyun99"},"content":"    public String toString(){","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"kyun99"},"content":"        String done \u003d this.isDone()? \"X\" : \" \";","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"kyun99"},"content":"        String taskType \u003d this.getClass().getName().substring(TASK_LETTER_START_INDEX, TASK_LETTER_END_INDEX).toUpperCase();","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"kyun99"},"content":"        return String.format(\"[%s][%s] %s\",taskType, done, this.getDescription());","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"kyun99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"kyun99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"kyun99":79}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kyun99"},"content":"todo work","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"kyun99"},"content":"event watch lecture /at: 12pm today","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"kyun99"},"content":"deadline submit project /by: 2359 tomorrow","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kyun99"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"kyun99"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"kyun99"},"content":"todo even more work","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kyun99"},"content":"list","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kyun99"},"content":"delete 4","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kyun99"},"content":"delete 7","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kyun99"},"content":"done 1","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kyun99"},"content":"find work","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kyun99"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"kyun99":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"kyun99"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kyun99":1,"-":20}}]
