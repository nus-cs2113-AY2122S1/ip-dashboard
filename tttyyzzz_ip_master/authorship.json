[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"miniDuke is a chatbot that can manage and track tasks via command line interface (CLI). This app is beneficial to users who can type fast. ","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"## Contents of User Guide","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"- [Quick start](#user-content-quick-start)","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"- [Features](#features)","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"  1. [`help` - View help](#help---view-help)","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"  2. [`list` - List all the tasks created](#list---list-all-the-tasks-created)","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"  3. [`todo` - Create a todo task](#todo---create-a-todo-task)","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"  4. [`deadline` - Create a deadline task](#deadline---create-a-deadline-task)","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"  5. [`event` - Create an event task](#event---create-an-event-task)","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"  6. [`done` - Check corresponding task as done](#done---check-corresponding-task-as-done)","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"  7. [`delete` - Delete corresponding task from list](#delete---delete-corresponding-task-from-list)","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"  8. [`find` - Find description tasks with the given input](#find---find-description-tasks-with-the-given-input)","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"  9. [`sort time` - Sort tasks based on date](#sort-time---sort-tasks-based-on-date)","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"  10. [`bye` - Exit program](#bye---exit-program)","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"- [Frequently Asked Questions(FAQ)](#frequently-asked-questionsfaq)","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"## Quick Start","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"1. Ensure that you have [java](https://aws.amazon.com/corretto/) (version 11 and above) installed in your computer.","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"2. Download miniDuke.jar from [A-Release tag](https://github.com/tttyyzzz/ip/releases/tag/A-Release) and store it into a folder.","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"3. Store miniDuke.jar file to the file that you would want to store","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"4. Open command prompt(for windows) or terminal(for mac and linux) and change directory to the folder .jar file is stored","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"5. Run command ```java -jar miniDuke.jar```","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"\u003e ‚ùï Note: if the command cannot be executed, please ensure that there is no duke.txt file in the folder. ","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"\u003e If there is duke.txt file, please rename or remove it.","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"6. Upon start, if you manage to see the message below in your console, you have successfully installed and run duke.jar","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"Hello from","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"          (_)     (_) ____        _        ","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":" _ __ ___  _ _ __  _ |  _ \\ _   _| | _____ ","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"| \u0027_ ` _ \\| | \u0027_ \\| || | | | | | | |/ / _ \\","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"| | | | | | | | | | || |_| | |_| |   \u003c  __/","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"|_| |_| |_|_|_| |_|_||____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"There are too many students changing this logo away.","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"Let\u0027s keep it this way to show the contribution Duke has done to","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"thousands of students. (No matter positive or negative)","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"F","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"credits to address-book-level2 [https://github.com/se-edu/addressbook-level2]","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"     Hello! I\u0027m Duke","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"     What can I do for you?","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"1. Words in anchor tags \u003c\u003e are parameters required to be provided by the user.","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"   - The description needed will be placed in the anchor tag. e.g. \u003ctime\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"   - Those commands that do not have anchor tags \u003c\u003e will take in no parameters. Extra words after the command word will be omitted.","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"     - Example of such commands are `help` ,`list` and `bye`","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"2. Some commands require additional keywords to ensure correct input. Without those additional keywords, the command will be deemed as invalid.","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"   - Example of commands that require additional keywords are `deadline` and `event`","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"tttyyzzz"},"content":"   ","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"tttyyzzz"},"content":"3. All time input \u0026lt;time\u003e will require YYYY-MM-DD or YYYY-MM-DD HHMM.","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"tttyyzzz"},"content":"### `help` - View help","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"tttyyzzz"},"content":"Description: `help` function will print out all available commands and the command format","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `help`","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"tttyyzzz"},"content":"help","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"tttyyzzz"},"content":"     Hi user. Great to meet you.","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"tttyyzzz"},"content":"     Let me show you all the commands we have.","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"tttyyzzz"},"content":"     1. help -- helps you to list down all the commands available like now","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"tttyyzzz"},"content":"     2. list -- shows you the list of all the task you have entered","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"tttyyzzz"},"content":"     3. bye -- exits the program","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"tttyyzzz"},"content":"     4. done \u003cindex\u003e -- marks task with the input index as done","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"tttyyzzz"},"content":"     5. delete \u003cindex\u003e -- delete task with the input index","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"tttyyzzz"},"content":"     6. sort time -- sort tasks with timeframe by date/time in ascending order","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"tttyyzzz"},"content":"     7. find \u003ctext\u003e -- find all tasks with that contains the input text","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"tttyyzzz"},"content":"     8. todo \u003cdescription\u003e -- creates a todo task with description","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"tttyyzzz"},"content":"     9. deadline \u003cdescription\u003e /by \u003ctime\u003e where \u003ctime\u003e is YYYY-MM-DD or YYYY-MM-DD HHMM","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"tttyyzzz"},"content":"     -- creates a deadline task with description as task name and the date as deadline","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"tttyyzzz"},"content":"     10. event \u003cdescription\u003e /at \u003ctime1\u003e to \u003ctime2\u003e where \u003ctime1\u003e could be YYYY-MM-DD","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"tttyyzzz"},"content":"     or YYYY-MM-DD HHMM while \u003ctime2\u003e could be YYYY-MM-DD or YYYY-MM-DD HHMM or even HHMM.","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"tttyyzzz"},"content":"     If \u003ctime2\u003e is HHMM, it will inherit YYYY-MM-DD from \u003ctime1\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"tttyyzzz"},"content":"     -- creates an event task with the description given and store 2 time given by the input","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"tttyyzzz"},"content":"### `list` - List all the tasks created","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"tttyyzzz"},"content":"Description: This command will show all the tasks in the list","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `list`","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"tttyyzzz"},"content":"__if there is no tasks in the list:__","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"tttyyzzz"},"content":"list","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"tttyyzzz"},"content":"     You have no tasks in the list at the moment.","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"tttyyzzz"},"content":"     Please add a new task to begin.","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"tttyyzzz"},"content":"__if there are tasks in the list:__","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"tttyyzzz"},"content":"list","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"tttyyzzz"},"content":"     Here are the tasks in your list:","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"tttyyzzz"},"content":"     1. [T][ ] create a task","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"tttyyzzz"},"content":"     2. [D][X] create a deadline task (by: 01-10-2021 1159)","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"tttyyzzz"},"content":"     3. [E][ ] this is what happens when time1 is later than time2 (at: 01-10-2021 0300 to 02-10-2021 1300)","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"tttyyzzz"},"content":"### `todo` - Create a todo task","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"tttyyzzz"},"content":"Description: Todo is a type of task that store only description.","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"tttyyzzz"},"content":"Create a todo by following the format below:","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `todo` \u0026lt;description\u0026gt;","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":136,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"tttyyzzz"},"content":"todo create a task","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"tttyyzzz"},"content":"     [T][ ] create a task","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"tttyyzzz"},"content":"     Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"tttyyzzz"},"content":"todo create another task","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"tttyyzzz"},"content":"     [T][ ] create another task","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"tttyyzzz"},"content":"     Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"tttyyzzz"},"content":"### `deadline` - Create a deadline task","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"tttyyzzz"},"content":"Description: Deadline is a type of task that takes in a description and time. ","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"tttyyzzz"},"content":"Time format is either in YYYY-MM-DD or YYYY-MM-DD HHMM.","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"tttyyzzz"},"content":"Create a deadline by following the format below:","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `deadline` \u0026lt;description\u0026gt; /by \u0026lt;time\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"tttyyzzz"},"content":"deadline create a deadline task /by 2021-10-01 1159","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"tttyyzzz"},"content":"     [D][ ] create a deadline task (by: 01-10-2021 1159)","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"tttyyzzz"},"content":"     Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"tttyyzzz"},"content":"### `event` - Create an event task","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"tttyyzzz"},"content":"Description: Event is a type of task that takes in a description and 2 time inputs.","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"tttyyzzz"},"content":"Time format is either in YYYY-MM-DD or YYYY-MM-DD HHMM.","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"tttyyzzz"},"content":"Create a deadline by following the format below:","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `event` \u0026lt;description\u0026gt; /at \u0026lt;time1\u003e to \u0026lt;time2\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"tttyyzzz"},"content":"\u003e‚ùï Note: if \u0026lt;time1\u003e is later than \u0026lt;time2\u003e, the time will switch around","lastModifiedDate":"2021-09-24"},{"lineNumber":189,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"tttyyzzz"},"content":"event this is what happens when time1 is later than time2 /at 2021-10-02 1300 to 2021-10-01 0300","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"tttyyzzz"},"content":"     [E][ ] this is what happens when time1 is later than time2 (at: 01-10-2021 0300 to 02-10-2021 1300)","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"tttyyzzz"},"content":"     Now you have 4 tasks in the list.","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"tttyyzzz"},"content":"### `done` - Check corresponding task as done","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"tttyyzzz"},"content":"Description: will mark a particular task as done, by showing an X on the second square bracket [ ].","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `done` \u0026lt;number\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"tttyyzzz"},"content":"\u003e ‚ùï Note: Please provide a positive whole number that is tagged to the task as shown with the list command.","lastModifiedDate":"2021-09-24"},{"lineNumber":210,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"tttyyzzz"},"content":"done 3","lastModifiedDate":"2021-09-23"},{"lineNumber":216,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":217,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":218,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":219,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":220,"author":{"gitId":"tttyyzzz"},"content":"     Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-23"},{"lineNumber":221,"author":{"gitId":"tttyyzzz"},"content":"     [D][X] create a deadline task","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":223,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":224,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":225,"author":{"gitId":"tttyyzzz"},"content":"### `delete` - Delete corresponding task from list","lastModifiedDate":"2021-09-23"},{"lineNumber":226,"author":{"gitId":"tttyyzzz"},"content":"Description: Delete a task with that has the corresponding number","lastModifiedDate":"2021-09-23"},{"lineNumber":227,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":228,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `delete` \u003cnumber\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":229,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"tttyyzzz"},"content":"\u003e ‚ùï Note: Please provide a positive whole number that is tagged to the task as shown with the list command.","lastModifiedDate":"2021-09-24"},{"lineNumber":231,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":232,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":236,"author":{"gitId":"tttyyzzz"},"content":"delete 2","lastModifiedDate":"2021-09-23"},{"lineNumber":237,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":238,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":239,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":240,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":241,"author":{"gitId":"tttyyzzz"},"content":"     Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-23"},{"lineNumber":242,"author":{"gitId":"tttyyzzz"},"content":"     [T][ ] create another task","lastModifiedDate":"2021-09-23"},{"lineNumber":243,"author":{"gitId":"tttyyzzz"},"content":"     Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-23"},{"lineNumber":244,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":245,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":246,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":247,"author":{"gitId":"tttyyzzz"},"content":"### `find` - Find description tasks with the given input","lastModifiedDate":"2021-09-23"},{"lineNumber":248,"author":{"gitId":"tttyyzzz"},"content":"Description: Returns all the list that contains the following text","lastModifiedDate":"2021-09-23"},{"lineNumber":249,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":250,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `find` \u0026lt;text\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":251,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":252,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":253,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":254,"author":{"gitId":"tttyyzzz"},"content":"Input:","lastModifiedDate":"2021-09-23"},{"lineNumber":255,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":256,"author":{"gitId":"tttyyzzz"},"content":"find create a","lastModifiedDate":"2021-09-23"},{"lineNumber":257,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":258,"author":{"gitId":"tttyyzzz"},"content":"Output","lastModifiedDate":"2021-09-23"},{"lineNumber":259,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":260,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":261,"author":{"gitId":"tttyyzzz"},"content":"     [T][ ] create a task","lastModifiedDate":"2021-09-23"},{"lineNumber":262,"author":{"gitId":"tttyyzzz"},"content":"     [D][X] create a deadline task (by: 01-10-2021 1159)","lastModifiedDate":"2021-09-23"},{"lineNumber":263,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":264,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":265,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":266,"author":{"gitId":"tttyyzzz"},"content":"### `sort time` - Sort tasks based on date","lastModifiedDate":"2021-09-23"},{"lineNumber":267,"author":{"gitId":"tttyyzzz"},"content":"Description: Sort tasks with time in ascending order. Tasks without time will be ignored.","lastModifiedDate":"2021-09-23"},{"lineNumber":268,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":269,"author":{"gitId":"tttyyzzz"},"content":"\u003e Format: `sort time`","lastModifiedDate":"2021-09-23"},{"lineNumber":270,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":271,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":272,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":273,"author":{"gitId":"tttyyzzz"},"content":"Input","lastModifiedDate":"2021-09-23"},{"lineNumber":274,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":275,"author":{"gitId":"tttyyzzz"},"content":"sort time","lastModifiedDate":"2021-09-23"},{"lineNumber":276,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":277,"author":{"gitId":"tttyyzzz"},"content":"Output","lastModifiedDate":"2021-09-23"},{"lineNumber":278,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":279,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":280,"author":{"gitId":"tttyyzzz"},"content":"     [E][ ] this is what happens when time1 is later than time2 (at: 01-10-2021 0300 to 02-10-2021 1300)","lastModifiedDate":"2021-09-23"},{"lineNumber":281,"author":{"gitId":"tttyyzzz"},"content":"     [D][X] create a deadline task (by: 01-10-2021 1159)","lastModifiedDate":"2021-09-23"},{"lineNumber":282,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":283,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":284,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":285,"author":{"gitId":"tttyyzzz"},"content":"### `bye` - Exit program","lastModifiedDate":"2021-09-23"},{"lineNumber":286,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":287,"author":{"gitId":"tttyyzzz"},"content":"Description: Exits the program","lastModifiedDate":"2021-09-23"},{"lineNumber":288,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":289,"author":{"gitId":"tttyyzzz"},"content":"\u003eFormat: `bye`","lastModifiedDate":"2021-09-23"},{"lineNumber":290,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":291,"author":{"gitId":"tttyyzzz"},"content":"__Example:__","lastModifiedDate":"2021-09-23"},{"lineNumber":292,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":293,"author":{"gitId":"tttyyzzz"},"content":"Input","lastModifiedDate":"2021-09-23"},{"lineNumber":294,"author":{"gitId":"tttyyzzz"},"content":"```text","lastModifiedDate":"2021-09-23"},{"lineNumber":295,"author":{"gitId":"tttyyzzz"},"content":"bye","lastModifiedDate":"2021-09-23"},{"lineNumber":296,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":297,"author":{"gitId":"tttyyzzz"},"content":"Output:","lastModifiedDate":"2021-09-23"},{"lineNumber":298,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":299,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":300,"author":{"gitId":"tttyyzzz"},"content":"     Bye. Hope to see you again soon!","lastModifiedDate":"2021-09-23"},{"lineNumber":301,"author":{"gitId":"tttyyzzz"},"content":"    _________________________________________________________________","lastModifiedDate":"2021-09-23"},{"lineNumber":302,"author":{"gitId":"tttyyzzz"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":303,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":304,"author":{"gitId":"tttyyzzz"},"content":"### Frequently Asked Questions(FAQ)","lastModifiedDate":"2021-09-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":306,"author":{"gitId":"tttyyzzz"},"content":"1. **Q:** Is it possible to save all the task and access the tasks again? ","lastModifiedDate":"2021-09-23"},{"lineNumber":307,"author":{"gitId":"tttyyzzz"},"content":"    ","lastModifiedDate":"2021-09-23"},{"lineNumber":308,"author":{"gitId":"tttyyzzz"},"content":"   **A:** Yes, all the tasks will be saved in the duke.txt file in the folder that you have run your command.","lastModifiedDate":"2021-09-23"},{"lineNumber":309,"author":{"gitId":"tttyyzzz"},"content":"      Make sure you run the duke.jar in the same folder everytime you start the application, so that you can","lastModifiedDate":"2021-09-23"},{"lineNumber":310,"author":{"gitId":"tttyyzzz"},"content":"      access to all the tasks in last saved file.","lastModifiedDate":"2021-09-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":312,"author":{"gitId":"tttyyzzz"},"content":"      If you want to shift the application to other computer, be sure to copy the duke.jar and duke.txt file","lastModifiedDate":"2021-09-23"},{"lineNumber":313,"author":{"gitId":"tttyyzzz"},"content":"      to the new computer. Losing the duke.txt file means that all saved tasks would be gone.","lastModifiedDate":"2021-09-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":316,"author":{"gitId":"tttyyzzz"},"content":"2. **Q:** Is there a way to edit tasks without CLI?","lastModifiedDate":"2021-09-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":318,"author":{"gitId":"tttyyzzz"},"content":"   **A:** Yes, you can edit the tasks before you start or after you end the application. There will be a text file","lastModifiedDate":"2021-09-23"},{"lineNumber":319,"author":{"gitId":"tttyyzzz"},"content":"      that stores all the files in certain format. However, please ensure that all tasks are in the correct format,","lastModifiedDate":"2021-09-23"},{"lineNumber":320,"author":{"gitId":"tttyyzzz"},"content":"      or you might have the risk of the task list being corrupted.","lastModifiedDate":"2021-09-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":323,"author":{"gitId":"tttyyzzz"},"content":"3. **Q:** There is a file called duke.txt being generated. Should I treat it as an unwanted file and delete it?","lastModifiedDate":"2021-09-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2019-07-29"},{"lineNumber":325,"author":{"gitId":"tttyyzzz"},"content":"   **A:** The file is used to store all the tasks you have recorded down in the application. Deleting the file means that","lastModifiedDate":"2021-09-23"},{"lineNumber":326,"author":{"gitId":"tttyyzzz"},"content":"      all the tasks saved by the program will be deleted. Unless you want a clean task list upon restarting your program, ","lastModifiedDate":"2021-09-23"},{"lineNumber":327,"author":{"gitId":"tttyyzzz"},"content":"      it is not advisable to perform the action.","lastModifiedDate":"2021-09-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":329,"author":{"gitId":"tttyyzzz"},"content":"## Command Summary","lastModifiedDate":"2021-09-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":331,"author":{"gitId":"tttyyzzz"},"content":"|  Commands   |                      Description                       |","lastModifiedDate":"2021-09-23"},{"lineNumber":332,"author":{"gitId":"tttyyzzz"},"content":"|-------------|--------------------------------------------------------|","lastModifiedDate":"2021-09-23"},{"lineNumber":333,"author":{"gitId":"tttyyzzz"},"content":"[bye](#bye---exit-program)| Exits the program","lastModifiedDate":"2021-09-29"},{"lineNumber":334,"author":{"gitId":"tttyyzzz"},"content":"[deadline](#content-deadline---create-a-deadline-task)| Create a deadline task","lastModifiedDate":"2021-09-29"},{"lineNumber":335,"author":{"gitId":"tttyyzzz"},"content":"[delete](#delete---delete-corresponding-task-from-list)| Delete corresponding task from list","lastModifiedDate":"2021-09-29"},{"lineNumber":336,"author":{"gitId":"tttyyzzz"},"content":"[done](#done---check-corresponding-task-as-done)| Check corresponding task as done","lastModifiedDate":"2021-09-29"},{"lineNumber":337,"author":{"gitId":"tttyyzzz"},"content":"[event](#event---create-an-event-task)| Create an event task","lastModifiedDate":"2021-09-29"},{"lineNumber":338,"author":{"gitId":"tttyyzzz"},"content":"[find](#find---find-description-tasks-with-the-given-input)| Find tasks that contains the relevant keyword","lastModifiedDate":"2021-09-29"},{"lineNumber":339,"author":{"gitId":"tttyyzzz"},"content":"[help](#help---view-help) | Shows all available commands for the program","lastModifiedDate":"2021-09-29"},{"lineNumber":340,"author":{"gitId":"tttyyzzz"},"content":"[list](#list---list-all-the-tasks-created)| show all the tasks in the list","lastModifiedDate":"2021-09-29"},{"lineNumber":341,"author":{"gitId":"tttyyzzz"},"content":"[sort time](#sort-time---sort-tasks-based-on-date)| sort all tasks with date and time based on date and time ascending","lastModifiedDate":"2021-09-23"},{"lineNumber":342,"author":{"gitId":"tttyyzzz"},"content":"[todo](#content-todo---create-a-todo-task)| create a todo task","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"tttyyzzz":326,"-":16}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"    public abstract void run() throws DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":7}},{"path":"src/main/java/command/CommandBye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"public class CommandBye extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"    public static final String BYE_MESSAGE \u003d \"     Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"     * Prints goodbye message upon exit","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    public void run() {","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(Ui.DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(BYE_MESSAGE);","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(Ui.DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":17}},{"path":"src/main/java/command/CommandDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.Deadline;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"public class CommandDeadline extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    private static final int SECOND_ARRAY_PARAMETER \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private String word;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    private String[] descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    public CommandDeadline(String word, String[] descriptionInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"        this.word \u003d word;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"        this.descriptionInput \u003d descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     * Create a deadline task in list","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException if description input is incorrect","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkDescription(word, descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkTimeframe(descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"        Deadline deadline \u003d new Deadline(descriptionInput[FIRST_ARRAY_PARAMETER],","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"                Parser.parseDeadlineDate(descriptionInput[SECOND_ARRAY_PARAMETER]));","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"        TaskList.addTask(deadline);","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":35}},{"path":"src/main/java/command/CommandDelete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"public class CommandDelete extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    private static final int SECOND_ARRAY_PARAMETER \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    private String[] words;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private String[] descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public CommandDelete(String[] words, String[] descriptionInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        this.words \u003d words;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"        this.descriptionInput \u003d descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     * Delete a task corresponding to the index","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when there is no parameters after command","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkDescription(words[FIRST_ARRAY_PARAMETER], descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        taskNumber \u003d Integer.parseInt(words[SECOND_ARRAY_PARAMETER]);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"        TaskList.deleteTask(taskNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":31}},{"path":"src/main/java/command/CommandDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"public class CommandDone extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    private static final int SECOND_ARRAY_PARAMETER \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    private String[] words;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private String[] descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public CommandDone(String[] words, String[] descriptionInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        this.words \u003d words;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"        this.descriptionInput \u003d descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     * Mark a task as done corresponding to the index","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when there is no parameters after command","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkDescription(words[FIRST_ARRAY_PARAMETER], descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        int taskNumber \u003d Integer.parseInt(words[SECOND_ARRAY_PARAMETER]);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        TaskList.checkDoneTask(taskNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":30}},{"path":"src/main/java/command/CommandEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Event;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"public class CommandEvent extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    private static final int SECOND_ARRAY_PARAMETER \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private String word;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    private String[] descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    public CommandEvent(String word, String[] descriptionInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"        this.word \u003d word;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"        this.descriptionInput \u003d descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     * Create an event task and put it in list","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when incorrect parameters is passed","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkDescription(word, descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkTimeframe(descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"        Event event \u003d new Event(descriptionInput[FIRST_ARRAY_PARAMETER],","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"                Parser.parseEventDate(descriptionInput[SECOND_ARRAY_PARAMETER]));","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"        TaskList.addTask(event);","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":35}},{"path":"src/main/java/command/CommandFind.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"public class CommandFind extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    private String word;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private String[] descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public CommandFind(String word, String[] descriptionInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        this.word \u003d word;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"        this.descriptionInput \u003d descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     * Find all tasks that contains the substring given by the user","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when there is no input after find","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkDescription(word, descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        Ui.printFilteredDateTimedTask(descriptionInput[FIRST_ARRAY_PARAMETER]);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":29}},{"path":"src/main/java/command/CommandHelp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class CommandHelp extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    public CommandHelp() {","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"     * Prints help command","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    public void run() {","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"        Ui.printHelp();","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":19}},{"path":"src/main/java/command/CommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class CommandList extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    public static final String LIST_HEADER \u003d \"     Here are the tasks in your list:\";","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"    public static final String LIST_NO_TASK \u003d \"     You have no tasks in the list at the moment.\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"            \"     Please add a new task to begin.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    private static final int INDEX_FIX \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    public CommandList() {","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"     * Print all the tasks in the list array","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    public void run() {","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(Ui.DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"        int size \u003d TaskList.getArraySize();","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"        if (size !\u003d 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(LIST_HEADER);","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"            for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"                int numbering \u003d i + INDEX_FIX;","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"                System.out.println(\"     \" + numbering + \". \" + TaskList.getTask(i));","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(LIST_NO_TASK);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(Ui.DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":32}},{"path":"src/main/java/command/CommandSort.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"public class CommandSort extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    private String word;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private String[] descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public CommandSort(String word, String[] descriptionInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        this.word \u003d word;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"        this.descriptionInput \u003d descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     * Prints all the task that contains date time sorted in ascending order of datetime","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when incorrect parameters is passed","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkDescription(word, descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        sortRequiredList(descriptionInput[FIRST_ARRAY_PARAMETER]);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"     * Check if the keyword given by the user is correct","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"     * Format: sort \u0027keyword\u0027","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"     * e.g. sort time","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"     * @param keyword","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when the keyword is incompatible","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"    public static void sortRequiredList(String keyword) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"        if (keyword.equals(\"time\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"            Ui.printSortedDateTimedTask();","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"            throw new DukeException(\"No such option for sort\");","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":45}},{"path":"src/main/java/command/CommandTodo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"import duke.Todo;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"public class CommandTodo extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private String word;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    private String[] descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    public CommandTodo(String word, String[] descriptionInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"        this.word \u003d word;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"        this.descriptionInput \u003d descriptionInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * Create a todo task and store it in list","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when no description input is given","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        Parser.checkDescription(word, descriptionInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        Todo todo \u003d new Todo(descriptionInput[FIRST_ARRAY_PARAMETER]);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"        TaskList.addTask(todo);","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tttyyzzz":31}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class Deadline extends TimedTask {","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    public static final char TASK_TYPE_DEADLINE \u003d \u0027D\u0027;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Deadline from console","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"     * @param description of the deadline task","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"     * @param date        is a datetime object","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    public Deadline(String description, LocalDateTime date) {","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"        super(description, TASK_TYPE_DEADLINE, date);","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Deadline from file","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * @param description of the deadline task","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     * @param isDone      status of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"     * @param date        is a datetime object","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    public Deadline(String description, boolean isDone, LocalDateTime date) {","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"        super(description, TASK_TYPE_DEADLINE, isDone, date);","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"     * Convert event task to string upon printing on console","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"     * @return string of deadline task","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"        String formatDateTime \u003d getStartDate().format(format);","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"        return \"[\" + taskType + \"][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"                + description + \" (by: \" + formatDateTime + \")\";","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"     * Convert datetime object to string for storing in file","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"     * @return string consist of deadline datetime","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"        String formatDateTime \u003d getStartDate().format(format);","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"        return formatDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tttyyzzz":53}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import command.Command;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"public class Duke {","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    public static final String filePath \u003d \"duke.txt\";","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"        String input;","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"        Ui.printDuke();","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"        Ui.printWelcomeMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"        // load data into arraylist","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"        f.createNewFile();","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"        // and create scanner input","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"            Scanner in \u003d new Scanner(f);","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"            Storage.loadData(in);","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"            in.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(\"file not found\");","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"        boolean isConversation;// true by default","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"        do {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"            parseInputFromUser(input, words);","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"            saveTaskIntoFile(f);","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"            isConversation \u003d !words[0].equals(Parser.COMMAND_BYE);","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"        } while (isConversation);","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"     * Attempts to write into file","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"     * @param f File object of the particular pathname","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"     * @throws IOException when file is missing while app is running","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"    private static void saveTaskIntoFile(File f) throws IOException {","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"            FileWriter fileWrite \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"            Storage.storeData(fileWrite);","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"            fileWrite.close();","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(\"file not found, tasks cannot be saved. Please run the program again.\");","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"            f.createNewFile();","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"            System.exit(0);","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(\"Please restart the app and try again\");","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"tttyyzzz"},"content":"     * Takes in input from user and excute based on the command given","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"tttyyzzz"},"content":"     * Also helps to solve exceptions if user enters invalid command","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"tttyyzzz"},"content":"     * @param input user input in String","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"tttyyzzz"},"content":"     * @param words an array of user inputs split by \u0027 \u0027","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"tttyyzzz"},"content":"    private static void parseInputFromUser(String input, String[] words) {","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"tttyyzzz"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"tttyyzzz"},"content":"            Command command \u003d Parser.checkCommand(words, input);","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"tttyyzzz"},"content":"            command.run();","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"tttyyzzz"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":74,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-12"},{"lineNumber":75,"author":{"gitId":"tttyyzzz"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":76,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(ErrorMessage.EXCEPTION_NUMBER_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"tttyyzzz"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":78,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(ErrorMessage.EXCEPTION_MESSAGE_INPUT_NOT_INT);","lastModifiedDate":"2021-09-12"},{"lineNumber":79,"author":{"gitId":"tttyyzzz"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":80,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(ErrorMessage.EXCEPTION_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"tttyyzzz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(ErrorMessage.EXCEPTION_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"tttyyzzz"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(ErrorMessage.EXCEPTION_INCORRECT_TIME_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"tttyyzzz"},"content":"        } catch (UnknownCommandException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(ErrorMessage.EXCEPTION_MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"tttyyzzz"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(e.fillInStackTrace());","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(ErrorMessage.EXCEPTION_WRONG_INPUT);","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"tttyyzzz":90,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":" * Custom exception to deal with incorrect input format from user","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    private String message;","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"     * Store error message upon constructed","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"     * @param message","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"     * To get the message from the instance of the Exception","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     * @return error message to be printed","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    public String getMessage() {","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"        return message;","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"tttyyzzz":27}},{"path":"src/main/java/duke/ErrorMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":" * List of error messages","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class ErrorMessage {","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_MISSING_DESCRIPTION_TODO \u003d","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"            \"     ‚òπ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_MISSING_DESCRIPTION_EVENT \u003d","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"            \"     ‚òπ OOPS!!! The description of an event cannot be empty.\";","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_MISSING_DESCRIPTION_DEADLINE \u003d","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"            \"     ‚òπ OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_MESSAGE_UNKNOWN_COMMAND \u003d","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"            \"     ‚òπ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_MESSAGE_MISSING_PARAMETERS_AFTER_KEYWORD \u003d","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"            \"     ‚òπ OOPS!!! I\u0027m sorry, but I don\u0027t know what is the timeframe of this task :-(\";","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_MESSAGE_MISSING_PARAMETERS_AFTER_COMMAND \u003d","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"            \"     OOPS! The command requires a parameter e.g. done 2\\n\" +","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"                    \" The number \u00272\u0027 will be the parameter for the command done\";","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_MESSAGE_INPUT_NOT_INT \u003d","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"            \"     ‚òπ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"                    \"     Please input a string so that I can understand.\";","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_INCORRECT_TIME_FORMAT \u003d","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"            \"     Date keyed in is of invalid format\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"                    \"     Please input date in the following format: YYYY-MM-DD HHMM\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"                    \"     or YYYY-MM-DD\";","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_WRONG_INPUT \u003d","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"            \"     invalid input, please try a valid command\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"                    \"     Commands can be found by typing help\";","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_NUMBER_FORMAT \u003d","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"            \"     Please input an integer.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EXCEPTION_INDEX_OUT_OF_BOUNDS \u003d","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"            \"     Please input a positive integer that corresponds to the task in list\";","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"tttyyzzz":34}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":" * An inheritance from task that requires a range of time for additional input","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"public class Event extends TimedTask {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    public static final char TASK_TYPE_EVENT \u003d \u0027E\u0027;","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    public static final int FIRST_TIME_INPUT \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    public static final int SECOND_TIME_INPUT \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    private LocalDateTime endDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Event from console","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"     * @param description of the event task","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     * @param date        is an array of 2 dates, start_date and end_date respectively","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"    public Event(String description, LocalDateTime[] date) {","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"        super(description, TASK_TYPE_EVENT, date[0]);","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"        endDate \u003d date[1];","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Event from file","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"     * @param description of the event task","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"     * @param date        is an array of 2 dates, start_date and end_date respectively","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"    public Event(String description, boolean isDone, LocalDateTime[] date) {","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"        super(description, TASK_TYPE_EVENT, isDone, date[0]);","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"        endDate \u003d date[1];","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"     * Convert event task to string upon printing on console","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"     * @return string of event task","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"        return \"[\" + taskType + \"][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"                + description + \" (at: \" + getDate() + \")\";","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"     * Convert datetime object to string for storing in file","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"     * @return string consist of start_date and end_date","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"        String formatStartDateTime \u003d getStartDate().format(format);","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"        String formatEndDateTime \u003d endDate.format(format);","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"tttyyzzz"},"content":"        return formatStartDateTime + \" to \" + formatEndDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tttyyzzz":60}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import command.*;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"public class Parser {","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    private static final int DESCRIPTION_PARAMETERS \u003d 2;","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_ARRAY_PARAMETER \u003d 0;","lastModifiedDate":"2021-09-12"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    private static final int SECOND_ARRAY_PARAMETER \u003d 1;","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    private static final int START_DATE \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    private static final int END_DATE \u003d 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_SORT \u003d \"sort\";","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    public static final String COMMAND_HELP \u003d \"help\";","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    public static final String INPUT_DELIMITER \u003d \" \";","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    public static final String EVENT_DELIMITER \u003d \" /by \";","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"    public static final String DEADLINE_DELIMITER \u003d \" /at \";","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"    private static final int FIRST_TIME_INPUT \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"    private static final int SECOND_TIME_INPUT \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"     * Execute commands based on the command word given","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"     * @param words String input by user.","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"    public static Command checkCommand(String[] words, String input) throws","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"            UnknownCommandException, DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"        String[] parsedParameters \u003d parseInput(words, input);","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"        switch (words[FIRST_ARRAY_PARAMETER]) {","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandBye();","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandList();","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandDone(words, parsedParameters);","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandDelete(words, parsedParameters);","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandTodo(words[FIRST_ARRAY_PARAMETER], parsedParameters);","lastModifiedDate":"2021-09-24"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandDeadline(words[FIRST_ARRAY_PARAMETER], parsedParameters);","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandEvent(words[FIRST_ARRAY_PARAMETER], parsedParameters);","lastModifiedDate":"2021-09-24"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_SORT:","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandSort(words[FIRST_ARRAY_PARAMETER], parsedParameters);","lastModifiedDate":"2021-09-24"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandFind(words[FIRST_ARRAY_PARAMETER], parsedParameters);","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"tttyyzzz"},"content":"        case COMMAND_HELP:","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"            return new CommandHelp();","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"        default:","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"tttyyzzz"},"content":"            throw new UnknownCommandException();","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"tttyyzzz"},"content":"     * Throws different exception based on the command type","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"tttyyzzz"},"content":"     * @param command          is the first word of user input","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"tttyyzzz"},"content":"     * @param descriptionInput is the string that followed after the command","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException if the subsequent words after the command is empty","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"tttyyzzz"},"content":"    public static void checkDescription(String command, String[] descriptionInput) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"tttyyzzz"},"content":"        if (descriptionInput[FIRST_ARRAY_PARAMETER].equals(\"\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"tttyyzzz"},"content":"            switch (command) {","lastModifiedDate":"2021-09-12"},{"lineNumber":75,"author":{"gitId":"tttyyzzz"},"content":"            case COMMAND_TODO:","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"tttyyzzz"},"content":"                throw new DukeException(ErrorMessage.EXCEPTION_MISSING_DESCRIPTION_TODO);","lastModifiedDate":"2021-09-12"},{"lineNumber":77,"author":{"gitId":"tttyyzzz"},"content":"            case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"tttyyzzz"},"content":"                throw new DukeException(ErrorMessage.EXCEPTION_MISSING_DESCRIPTION_DEADLINE);","lastModifiedDate":"2021-09-12"},{"lineNumber":79,"author":{"gitId":"tttyyzzz"},"content":"            case COMMAND_EVENT:","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"tttyyzzz"},"content":"                throw new DukeException(ErrorMessage.EXCEPTION_MISSING_DESCRIPTION_EVENT);","lastModifiedDate":"2021-09-12"},{"lineNumber":81,"author":{"gitId":"tttyyzzz"},"content":"            default:","lastModifiedDate":"2021-09-12"},{"lineNumber":82,"author":{"gitId":"tttyyzzz"},"content":"                throw new DukeException(ErrorMessage.EXCEPTION_MESSAGE_MISSING_PARAMETERS_AFTER_COMMAND);","lastModifiedDate":"2021-09-12"},{"lineNumber":83,"author":{"gitId":"tttyyzzz"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":84,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":87,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"tttyyzzz"},"content":"     * Throws input if necessary commands requires additional input","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"tttyyzzz"},"content":"     * @param descriptionInput, line of text after the command word","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException when there are missing parameters given the valid command word","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"tttyyzzz"},"content":"    public static void checkTimeframe(String[] descriptionInput) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"tttyyzzz"},"content":"        boolean emptyInput \u003d descriptionInput[SECOND_ARRAY_PARAMETER].equals(\"\");","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"tttyyzzz"},"content":"        if (emptyInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"tttyyzzz"},"content":"            throw new DukeException(ErrorMessage.EXCEPTION_MESSAGE_MISSING_PARAMETERS_AFTER_KEYWORD);","lastModifiedDate":"2021-09-12"},{"lineNumber":97,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":98,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":99,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":100,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"tttyyzzz"},"content":"     * Takes description and split based on command accordingly","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":103,"author":{"gitId":"tttyyzzz"},"content":"     * @param words array of words which include the command word","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"tttyyzzz"},"content":"     * @param input the input given by the user","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"tttyyzzz"},"content":"     * @return parsed output","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"tttyyzzz"},"content":"    private static String[] parseInput(String[] words, String input) {","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"tttyyzzz"},"content":"        String[] output \u003d new String[DESCRIPTION_PARAMETERS];","lastModifiedDate":"2021-09-12"},{"lineNumber":109,"author":{"gitId":"tttyyzzz"},"content":"        output[0] \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"tttyyzzz"},"content":"        output[1] \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":111,"author":{"gitId":"tttyyzzz"},"content":"        if (words.length \u003c 2) {","lastModifiedDate":"2021-09-13"},{"lineNumber":112,"author":{"gitId":"tttyyzzz"},"content":"            return output;","lastModifiedDate":"2021-09-13"},{"lineNumber":113,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":114,"author":{"gitId":"tttyyzzz"},"content":"        String[] newWord \u003d input.split(INPUT_DELIMITER, 2);","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"tttyyzzz"},"content":"        if (words[0].equals(COMMAND_DEADLINE) \u0026\u0026 newWord[1].contains(EVENT_DELIMITER)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"tttyyzzz"},"content":"            output \u003d newWord[1].split(EVENT_DELIMITER, 2);","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"tttyyzzz"},"content":"        } else if (words[0].equals(COMMAND_EVENT) \u0026\u0026 newWord[1].contains(DEADLINE_DELIMITER)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"tttyyzzz"},"content":"            output \u003d newWord[1].split(DEADLINE_DELIMITER, 2);","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"tttyyzzz"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"tttyyzzz"},"content":"            output[0] \u003d newWord[1];","lastModifiedDate":"2021-09-13"},{"lineNumber":121,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":122,"author":{"gitId":"tttyyzzz"},"content":"        return output;","lastModifiedDate":"2021-09-02"},{"lineNumber":123,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":124,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":125,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":126,"author":{"gitId":"tttyyzzz"},"content":"     * Change datetime string into datetime object for deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":127,"author":{"gitId":"tttyyzzz"},"content":"     * if parser is YYYY-MM-DD, time will automatically be 0000","lastModifiedDate":"2021-09-22"},{"lineNumber":128,"author":{"gitId":"tttyyzzz"},"content":"     * else if parser YYYY-MM-DD HHMM, time will follow based on user input","lastModifiedDate":"2021-09-22"},{"lineNumber":129,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":130,"author":{"gitId":"tttyyzzz"},"content":"     * @param parser is the datetime part of input","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"tttyyzzz"},"content":"     * @return datetime object","lastModifiedDate":"2021-09-22"},{"lineNumber":132,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException if input format of time is incorrect or invalid numbers for time","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"tttyyzzz"},"content":"    public static LocalDateTime parseDeadlineDate(String parser) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"tttyyzzz"},"content":"        String[] stringDate \u003d parser.split(INPUT_DELIMITER);","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"tttyyzzz"},"content":"        LocalDateTime date;","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"tttyyzzz"},"content":"        DateTimeFormatter formatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"tttyyzzz"},"content":"        if (stringDate.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"tttyyzzz"},"content":"            formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"tttyyzzz"},"content":"            date \u003d LocalDateTime.parse(parser + \" 0000\", formatter);","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"tttyyzzz"},"content":"        } else if (stringDate.length \u003d\u003d 2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"tttyyzzz"},"content":"            // store both date and time","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"tttyyzzz"},"content":"            formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"tttyyzzz"},"content":"            date \u003d LocalDateTime.parse(parser, formatter);","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"tttyyzzz"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"tttyyzzz"},"content":"            //throw an exception when there is wrong time format","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"tttyyzzz"},"content":"            throw new DukeException(ErrorMessage.EXCEPTION_INCORRECT_TIME_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"tttyyzzz"},"content":"        return date;","lastModifiedDate":"2021-09-22"},{"lineNumber":150,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":151,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":153,"author":{"gitId":"tttyyzzz"},"content":"     * Change datetime string into datetime object for event","lastModifiedDate":"2021-09-22"},{"lineNumber":154,"author":{"gitId":"tttyyzzz"},"content":"     * if parser is YYYY-MM-DD to YYYY-MM-DD, time will be set to 0000","lastModifiedDate":"2021-09-22"},{"lineNumber":155,"author":{"gitId":"tttyyzzz"},"content":"     * if parser is YYYY-MM-DD HHMM to HHMM, the second time will follow the date given,","lastModifiedDate":"2021-09-22"},{"lineNumber":156,"author":{"gitId":"tttyyzzz"},"content":"     * assuming that the event start and end on the same day","lastModifiedDate":"2021-09-22"},{"lineNumber":157,"author":{"gitId":"tttyyzzz"},"content":"     * if parser is YYYY-MM-DD to YYYY-MM-DD HHMM, the time will be based on user input","lastModifiedDate":"2021-09-22"},{"lineNumber":158,"author":{"gitId":"tttyyzzz"},"content":"     * \u003cp\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":159,"author":{"gitId":"tttyyzzz"},"content":"     * Types of input for event time accepted: (date \u003d YYYY-MM-DD, time \u003d HHMM)","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"tttyyzzz"},"content":"     * date to date","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"tttyyzzz"},"content":"     * date to time","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"tttyyzzz"},"content":"     * date to date time","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"tttyyzzz"},"content":"     * date time to time","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"tttyyzzz"},"content":"     * date time to dead time","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":166,"author":{"gitId":"tttyyzzz"},"content":"     * @param parser is the datetime part of input","lastModifiedDate":"2021-09-22"},{"lineNumber":167,"author":{"gitId":"tttyyzzz"},"content":"     * @return datetime object","lastModifiedDate":"2021-09-22"},{"lineNumber":168,"author":{"gitId":"tttyyzzz"},"content":"     * @throws DukeException if input format of time is incorrect","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":170,"author":{"gitId":"tttyyzzz"},"content":"    public static LocalDateTime[] parseEventDate(String parser) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"tttyyzzz"},"content":"        String[] stringDates \u003d parser.split(INPUT_DELIMITER);","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"tttyyzzz"},"content":"        LocalDateTime[] dates;","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"tttyyzzz"},"content":"        if (stringDates.length \u003d\u003d 3 \u0026\u0026 stringDates[1].equals(\"to\")","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"tttyyzzz"},"content":"                \u0026\u0026 stringDates[2].length() \u003d\u003d 4) {","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"tttyyzzz"},"content":"            //date to time","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"tttyyzzz"},"content":"            String startDate \u003d stringDates[0] + \" 0000\";","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"tttyyzzz"},"content":"            String endDate \u003d stringDates[0] + \u0027 \u0027 + stringDates[2];","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"tttyyzzz"},"content":"            dates \u003d formatTime(startDate, endDate);","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"tttyyzzz"},"content":"        } else if (stringDates.length \u003d\u003d 3 \u0026\u0026 stringDates[1].equals(\"to\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"tttyyzzz"},"content":"            //date to date","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"tttyyzzz"},"content":"            String startDate \u003d stringDates[0] + \" 0000\";","lastModifiedDate":"2021-09-22"},{"lineNumber":182,"author":{"gitId":"tttyyzzz"},"content":"            String endDate \u003d stringDates[2] + \" 0000\";","lastModifiedDate":"2021-09-22"},{"lineNumber":183,"author":{"gitId":"tttyyzzz"},"content":"            dates \u003d formatTime(startDate, endDate);","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"tttyyzzz"},"content":"        } else if (stringDates.length \u003d\u003d 4 \u0026\u0026 stringDates[2].equals(\"to\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":185,"author":{"gitId":"tttyyzzz"},"content":"            //date time to date","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"tttyyzzz"},"content":"            String startDate \u003d stringDates[0] + \u0027 \u0027 + stringDates[1];","lastModifiedDate":"2021-09-22"},{"lineNumber":187,"author":{"gitId":"tttyyzzz"},"content":"            String endDate \u003d stringDates[0] + \u0027 \u0027 + stringDates[3];","lastModifiedDate":"2021-09-22"},{"lineNumber":188,"author":{"gitId":"tttyyzzz"},"content":"            dates \u003d formatTime(startDate, endDate);","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"tttyyzzz"},"content":"        } else if (stringDates.length \u003d\u003d 4 \u0026\u0026 stringDates[1].equals(\"to\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"tttyyzzz"},"content":"            //date to date time","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"tttyyzzz"},"content":"            String startDate \u003d stringDates[0] + \u0027 \u0027 + \"0000\";","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"tttyyzzz"},"content":"            String endDate \u003d stringDates[2] + \u0027 \u0027 + stringDates[3];","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"tttyyzzz"},"content":"            dates \u003d formatTime(startDate, endDate);","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"tttyyzzz"},"content":"        } else if (stringDates.length \u003d\u003d 5 \u0026\u0026 stringDates[2].equals(\"to\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":195,"author":{"gitId":"tttyyzzz"},"content":"            //date time to date time","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"tttyyzzz"},"content":"            String startDate \u003d stringDates[0] + \u0027 \u0027 + stringDates[1];","lastModifiedDate":"2021-09-22"},{"lineNumber":197,"author":{"gitId":"tttyyzzz"},"content":"            String endDate \u003d stringDates[3] + \u0027 \u0027 + stringDates[4];","lastModifiedDate":"2021-09-22"},{"lineNumber":198,"author":{"gitId":"tttyyzzz"},"content":"            dates \u003d formatTime(startDate, endDate);","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"tttyyzzz"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"tttyyzzz"},"content":"            throw new DukeException(ErrorMessage.EXCEPTION_INCORRECT_TIME_FORMAT);","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"tttyyzzz"},"content":"        return arrangeEventDate(dates);","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"tttyyzzz"},"content":"     * Convert String of start_date and end_date to datetime","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":208,"author":{"gitId":"tttyyzzz"},"content":"     * @param startDate string for start_date","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"tttyyzzz"},"content":"     * @param endDate   string for end_date","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"tttyyzzz"},"content":"     * @return an array of 2 datetime for start_date and end_date","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"tttyyzzz"},"content":"    private static LocalDateTime[] formatTime(String startDate, String endDate) {","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"tttyyzzz"},"content":"        DateTimeFormatter formatter;","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"tttyyzzz"},"content":"        LocalDateTime[] dates \u003d new LocalDateTime[2];","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"tttyyzzz"},"content":"        formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":216,"author":{"gitId":"tttyyzzz"},"content":"        dates[START_DATE] \u003d LocalDateTime.parse(startDate, formatter);","lastModifiedDate":"2021-09-22"},{"lineNumber":217,"author":{"gitId":"tttyyzzz"},"content":"        dates[END_DATE] \u003d LocalDateTime.parse(endDate, formatter);","lastModifiedDate":"2021-09-22"},{"lineNumber":218,"author":{"gitId":"tttyyzzz"},"content":"        return dates;","lastModifiedDate":"2021-09-22"},{"lineNumber":219,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":220,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":221,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"tttyyzzz"},"content":"     * Swap the dates around if end_date is before start_date","lastModifiedDate":"2021-09-23"},{"lineNumber":223,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":224,"author":{"gitId":"tttyyzzz"},"content":"     * @param date an array of start_date, end_date","lastModifiedDate":"2021-09-23"},{"lineNumber":225,"author":{"gitId":"tttyyzzz"},"content":"     * @return swapped dates if above condition is met. else dates remains in the same order","lastModifiedDate":"2021-09-23"},{"lineNumber":226,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":227,"author":{"gitId":"tttyyzzz"},"content":"    private static LocalDateTime[] arrangeEventDate(LocalDateTime[] date) {","lastModifiedDate":"2021-09-23"},{"lineNumber":228,"author":{"gitId":"tttyyzzz"},"content":"        if (date[FIRST_TIME_INPUT].isAfter(date[SECOND_TIME_INPUT])) {","lastModifiedDate":"2021-09-23"},{"lineNumber":229,"author":{"gitId":"tttyyzzz"},"content":"            LocalDateTime temp \u003d date[FIRST_TIME_INPUT];","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"tttyyzzz"},"content":"            date[FIRST_TIME_INPUT] \u003d date[SECOND_TIME_INPUT];","lastModifiedDate":"2021-09-23"},{"lineNumber":231,"author":{"gitId":"tttyyzzz"},"content":"            date[SECOND_TIME_INPUT] \u003d temp;","lastModifiedDate":"2021-09-23"},{"lineNumber":232,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"tttyyzzz"},"content":"        return date;","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":236,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-02"},{"lineNumber":237,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"tttyyzzz":237}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"import java.lang.System;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"public class Storage {","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    public static final int TRUE_VALUE \u003d 1;","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    public static final int FALSE_VALUE \u003d 0;","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public static final int RESULT_TASK_TYPE \u003d 0;","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    public static final int RESULT_IS_DONE \u003d 1;","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    public static final int RESULT_DESCRIPTION \u003d 2;","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"    public static final int RESULT_TIME \u003d 3;","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    public static final String Todo \u003d \"T\";","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    public static final String Deadline \u003d \"D\";","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"    public static final String Event \u003d \"E\";","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     * Read all the lines in the file line by line","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"     * and convert it to task type after reading each line","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"     * @param readFile file targeted for read operation","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"    public static void loadData(Scanner readFile) {","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"        while (readFile.hasNext()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"            String information \u003d readFile.nextLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"            parseInformation(information);","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"     * Split lines read based on \" | \" into array","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"     * @param information string extracted from File","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"    private static void parseInformation(String information) {","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"        String[] result \u003d information.split(\" \\\\| \");","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"        checkTaskType(result);","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"     * To take in the letter and check if letters fit the task types","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"     * T: Todo","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"     * D: Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"     * E: Event","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"     * @param result an array of string that is being parsed by \" | \"","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"    private static void checkTaskType(String[] result) {","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"        Task newTask;","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"        switch (result[RESULT_TASK_TYPE]) {","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"        case Todo:","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"            newTask \u003d new Todo(result[RESULT_DESCRIPTION],","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"tttyyzzz"},"content":"                    strToBoolean(result[RESULT_IS_DONE]));","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"            TaskList.reloadTask(newTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"tttyyzzz"},"content":"        case Deadline:// need to edit this","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"tttyyzzz"},"content":"            newTask \u003d new Deadline(result[RESULT_DESCRIPTION],","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"tttyyzzz"},"content":"                    strToBoolean(result[RESULT_IS_DONE]), parseDeadline(result[RESULT_TIME]));","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"tttyyzzz"},"content":"            TaskList.reloadTask(newTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"tttyyzzz"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"tttyyzzz"},"content":"        case Event:// need to edit this","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"tttyyzzz"},"content":"            newTask \u003d new Event(result[RESULT_DESCRIPTION],","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"tttyyzzz"},"content":"                    strToBoolean(result[RESULT_IS_DONE]), parseEvent(result[RESULT_TIME]));","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"tttyyzzz"},"content":"            TaskList.reloadTask(newTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"tttyyzzz"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"tttyyzzz"},"content":"        default:","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"tttyyzzz"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"tttyyzzz"},"content":"    private static boolean strToBoolean(String s) {","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"tttyyzzz"},"content":"        return !s.equals(\"0\");","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"tttyyzzz"},"content":"     * Saves data on file after every CRUD operation","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"tttyyzzz"},"content":"     * @param fileWrite File given to be written on","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"tttyyzzz"},"content":"     * @throws IOException when file could not be read or if user deletes file while using the program","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"tttyyzzz"},"content":"    public static void storeData(FileWriter fileWrite) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"tttyyzzz"},"content":"        ArrayList\u003cTask\u003e list \u003d TaskList.getList();","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"tttyyzzz"},"content":"        for (Task task : list) {","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"tttyyzzz"},"content":"            fileWrite.write(parseTask(task) + System.lineSeparator());","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"tttyyzzz"},"content":"        fileWrite.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"tttyyzzz"},"content":"     * Stores task in a given format below.","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"tttyyzzz"},"content":"     * Todo:        T | 0 | description","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"tttyyzzz"},"content":"     * Deadline:    D | 0 | description | DD-MM-YYYY HHMM","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"tttyyzzz"},"content":"     * Event:       E | 0 | description | DD-MM-YYYY HHMM to DD-MM-YYYY HHMM","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"tttyyzzz"},"content":"     * @param task task stored in ArrayList\u003cTask\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"tttyyzzz"},"content":"     * @return newString to store as text in file","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"tttyyzzz"},"content":"    private static String parseTask(Task task) {","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"tttyyzzz"},"content":"        String newString;","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"tttyyzzz"},"content":"        newString \u003d task.getTaskType() + \" | \" + booleanInt(task.isDone) +","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"tttyyzzz"},"content":"                \" | \" + task.getDescription();","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"tttyyzzz"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"tttyyzzz"},"content":"            Event event \u003d (Event) task;","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"tttyyzzz"},"content":"            newString \u003d newString + \" | \" + event.getDate();","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"tttyyzzz"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"tttyyzzz"},"content":"            Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"tttyyzzz"},"content":"            newString \u003d newString + \" | \" + deadline.getDate();","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"tttyyzzz"},"content":"        return newString;","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":118,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":119,"author":{"gitId":"tttyyzzz"},"content":"     * Takes the string stored inside the file and convert it into a datetime object for creation","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"tttyyzzz"},"content":"     * of task to store into arraylist upon the start of program","lastModifiedDate":"2021-09-22"},{"lineNumber":121,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":122,"author":{"gitId":"tttyyzzz"},"content":"     * @param result input of string date to be parsed","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"tttyyzzz"},"content":"     * @return datetime object","lastModifiedDate":"2021-09-22"},{"lineNumber":124,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":125,"author":{"gitId":"tttyyzzz"},"content":"    private static LocalDateTime parseDeadline(String result) {","lastModifiedDate":"2021-09-22"},{"lineNumber":126,"author":{"gitId":"tttyyzzz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":127,"author":{"gitId":"tttyyzzz"},"content":"        return LocalDateTime.parse(result, formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":129,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":130,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"tttyyzzz"},"content":"     * Takes the string stored inside the file and convert it into a datetime object for creation","lastModifiedDate":"2021-09-22"},{"lineNumber":132,"author":{"gitId":"tttyyzzz"},"content":"     * of task to store into arraylist upon the start of program","lastModifiedDate":"2021-09-22"},{"lineNumber":133,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":134,"author":{"gitId":"tttyyzzz"},"content":"     * @param result input of string date to be parsed","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"tttyyzzz"},"content":"     * @return datetime object","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"tttyyzzz"},"content":"    private static LocalDateTime[] parseEvent(String result) {","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"tttyyzzz"},"content":"        String[] results \u003d result.split(\" to \");","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"tttyyzzz"},"content":"        LocalDateTime[] dates \u003d new LocalDateTime[2];","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"tttyyzzz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"tttyyzzz"},"content":"        dates[0] \u003d LocalDateTime.parse(results[0], formatter);","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"tttyyzzz"},"content":"        dates[1] \u003d LocalDateTime.parse(results[1], formatter);","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"tttyyzzz"},"content":"        return dates;","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"tttyyzzz"},"content":"    private static int booleanInt(boolean isDone) {","lastModifiedDate":"2021-09-15"},{"lineNumber":147,"author":{"gitId":"tttyyzzz"},"content":"        return isDone ? TRUE_VALUE : FALSE_VALUE;","lastModifiedDate":"2021-09-15"},{"lineNumber":148,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":149,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"tttyyzzz":149}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":" * A Class that is a parent of Todo, Deadline, Event","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":" * Created so that different classes of similar functionalities(Task)","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":" * could be placed together","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    protected char taskType;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Task object.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"     * @param description Task name of Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"     * @param taskType    T:todo D:deadline E:event","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    public Task(String description, char taskType) {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Task object.","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"     * @param description Task name of Task.","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"     * @param taskType    T:todo D:deadline E:event","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"     * @param isDone      Status of Task","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"    public Task(String description, char taskType, boolean isDone) {","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"     * Returns status of Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"     * @return \"X\" if isDone is true, else return  \" \".","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"     * Change isDone to true and print out the task on console","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(Ui.DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(Ui.TASK_CHECK_DONE);","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(\"     \" + \"[\" + this.taskType + \"][X] \" + this.description);","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(Ui.DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"     * Returns description of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"tttyyzzz"},"content":"     * @return Description of task.","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"tttyyzzz"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"tttyyzzz"},"content":"        return description;","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"tttyyzzz"},"content":"     * Returns character based on their task type","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"tttyyzzz"},"content":"     * T:todo D:deadline E:event","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"tttyyzzz"},"content":"     * @return necessary taskType as above","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"tttyyzzz"},"content":"    public char getTaskType() {","lastModifiedDate":"2021-09-02"},{"lineNumber":74,"author":{"gitId":"tttyyzzz"},"content":"        return taskType;","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":76,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"tttyyzzz":77}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class TaskList {","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    private static final int INDEX_FIX \u003d 1;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"    protected static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"     * Add new Task in list","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"     * @param newTask Task object created based on command.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"    //might move to main/duke class","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    public static void addTask(Task newTask) {","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"        list.add(newTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"        Ui.printAddNewTask(newTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * Add new Task in list","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"     * @param newTask Task object created based on command.","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    //might move to main/duke class","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"    public static void reloadTask(Task newTask) {","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        list.add(newTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"     * Calls Task.markAsDone().","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"     * @param taskNumber Task number that is tagged to the task on console.","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"    public static void checkDoneTask(int taskNumber) {","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"        int taskIndex \u003d taskNumber - INDEX_FIX;","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"        list.get(taskIndex).markAsDone();","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"    public static void deleteTask(int taskNumber) {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"        int taskIndex \u003d taskNumber - INDEX_FIX;","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"        Task task \u003d list.remove(taskIndex);","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"        Ui.printDeleteTask(list.size(), task);","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"     * Getter for Task array list","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"     * @return ArrayList\u003cTask\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"    public static ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"        return list;","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"     * Returns the number of task in the task array list","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"     * @return an integer for the number of task in the task array list","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"tttyyzzz"},"content":"    public static int getArraySize() {","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"tttyyzzz"},"content":"        return list.size();","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"tttyyzzz"},"content":"     * Get the task based on its index","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"tttyyzzz"},"content":"     * @param index number of the task in the task array list","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"tttyyzzz"},"content":"     * @return repective task","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"tttyyzzz"},"content":"    public static Task getTask(int index) {","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"tttyyzzz"},"content":"        return list.get(index);","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"tttyyzzz"},"content":"     * Returns the task array list that contains input","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"tttyyzzz"},"content":"     * @param input the string user wants to find in the task description","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"tttyyzzz"},"content":"     * @return the task array list that contains input in description","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"tttyyzzz"},"content":"    public static ArrayList\u003cTask\u003e findTask(String input) {","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"tttyyzzz"},"content":"        //create new array to store correct results","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"tttyyzzz"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d (ArrayList\u003cTask\u003e) list.stream()","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"tttyyzzz"},"content":"                .filter(task -\u003e {","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"tttyyzzz"},"content":"                    return task.getDescription().contains(input);","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"tttyyzzz"},"content":"                }).collect(Collectors.toList());","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"tttyyzzz"},"content":"        return filteredList;","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"tttyyzzz":89}},{"path":"src/main/java/duke/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"public abstract class TimedTask extends Task {","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    protected LocalDateTime startDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of TimedTask from console","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"     * @param description description of task","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"     * @param taskType    a character that represent a task","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"     * @param date        the start date of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    protected TimedTask(String description, char taskType, LocalDateTime date) {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"        super(description, taskType);","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"        startDate \u003d date;","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of TimedTask from file","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"     * @param description description of task","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"     * @param taskType    a character that represent a task","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"     * @param isDone      status of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"     * @param date        the start date of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"    protected TimedTask(String description, char taskType, boolean isDone, LocalDateTime date) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"        super(description, taskType, isDone);","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"        startDate \u003d date;","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"     * Getter for the start date for sorting","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"     * @return start date","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"    public LocalDateTime getStartDate() {","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"        return startDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"tttyyzzz":42}},{"path":"src/main/java/duke/TimedTaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class TimedTaskList {","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    private static ArrayList\u003cTimedTask\u003e timedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"     * Sort task based on time/start time and remove Todo while sorting","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"     * @return List of Deadline and Event in ascending order of time","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public static ArrayList\u003cTimedTask\u003e getSortedList() {","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        for (Task task : TaskList.getList()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"            if (task instanceof TimedTask) {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"                timedList.add((TimedTask) task);","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"        timedList.sort(TimedTaskDateComparator);","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"        return timedList;","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"     * Override Comparator to make sorting of deadline and event based on time possible","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"    public static Comparator\u003cTimedTask\u003e TimedTaskDateComparator \u003d new Comparator\u003c\u003e() {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"        @Override","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"        public int compare(TimedTask task1, TimedTask task2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"            return task1.getStartDate().compareTo(task2.getStartDate());","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"    };","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"tttyyzzz":34}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":" * A type of task that stores a description of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    public static final char TASK_TYPE_TODO \u003d \u0027T\u0027;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Todo Task from console","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"     * @param description","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"        super(description, TASK_TYPE_TODO);","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"     * Constructor of Todo Task from file","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"     * @param description","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"     * @param isDone","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"        super(description, TASK_TYPE_TODO, isDone);","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"     * Convert event task to string upon printing on console","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"     * @return string of todo task","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"        return \"[\" + taskType + \"][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"                + description;","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tttyyzzz":38}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"public class Ui {","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"    public static final String DASH_LINE \u003d \"    _________________________________________________________________\";","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"    public static final String WELCOME_MESSAGE \u003d \"     Hello! I\u0027m Duke\\n\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"            \"     What can I do for you?\";","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"    public static final String TASK_MESSAGE_START \u003d \"     Now you have \";","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"    public static final String TASK_MESSAGE_END \u003d \" tasks in the list.\";","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"    public static final String DELETE_MESSAGE \u003d \"     Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"    public static final String TASK_CHECK_DONE \u003d \"     Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"    public static final String HELP_OUTPUT \u003d \"     Hi user. Great to meet you.\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"            \"     Let me show you all the commands we have.\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"            \"     1. help -- helps you to list down all the commands available like now\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"            \"     2. list -- shows you the list of all the task you have entered\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"            \"     3. bye -- exits the program\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"            \"     4. done \u003cindex\u003e -- marks task with the input index as done\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"            \"     5. delete \u003cindex\u003e -- delete task with the input index\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"            \"     6. sort time -- sort tasks with timeframe by date/time in ascending order\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"            \"     7. find \u003ctext\u003e -- find all tasks with that contains the input text\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"            \"     8. todo \u003cdescription\u003e -- creates a todo task with description\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"            \"     9. deadline \u003cdescription\u003e /by \u003ctime\u003e where \u003ctime\u003e is YYYY-MM-DD or YYYY-MM-DD HHMM\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"            \"     -- creates a deadline task with description as task name and the date as deadline\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"            \"     10. event \u003cdescription\u003e /at \u003ctime1\u003e to \u003ctime2\u003e where \u003ctime1\u003e could be YYYY-MM-DD\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"            \"     or YYYY-MM-DD HHMM while \u003ctime2\u003e could be YYYY-MM-DD or YYYY-MM-DD HHMM or even HHMM.\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"            \"     If \u003ctime2\u003e is HHMM, it will inherit YYYY-MM-DD from \u003ctime1\u003e\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"            \"     -- creates an event task with the description given and store 2 time given by the input\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"    public static final String logo \u003d \"          (_)     (_) ____        _        \\n\"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"            + \" _ __ ___  _ _ __  _ |  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"            + \"| \u0027_ ` _ \\\\| | \u0027_ \\\\| || | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"            + \"| | | | | | | | | | || |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"            + \"|_| |_| |_|_|_| |_|_||____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"    public static final String text \u003d \"There are too many students changing this logo away.\\n\"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"            + \"Let\u0027s keep it this way to show the contribution Duke has done to\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"            + \"thousands of students. (No matter positive or negative)\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"            + \"F\\n\\n\"","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tttyyzzz"},"content":"            + \"credits to address-book-level2 [https://github.com/se-edu/addressbook-level2]\";","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"tttyyzzz"},"content":"     * Prints welcome message","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"tttyyzzz"},"content":"    public static void printWelcomeMessage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(WELCOME_MESSAGE);","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"tttyyzzz"},"content":"     * Print out the task status upon adding","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"tttyyzzz"},"content":"     * @param newTask the task that was added to the task array list","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"tttyyzzz"},"content":"    public static void printAddNewTask(Task newTask) {","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(\"     \" + newTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(TASK_MESSAGE_START +","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"tttyyzzz"},"content":"                TaskList.getArraySize() + TASK_MESSAGE_END);","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"tttyyzzz"},"content":"     * Print the deleted task and the number of tasks left","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"tttyyzzz"},"content":"     * @param size is the size of the task array list after deletion","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"tttyyzzz"},"content":"     * @param task is the task that was deleted","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"tttyyzzz"},"content":"    public static void printDeleteTask(int size, Task task) {","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DELETE_MESSAGE);","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(\"     \" + task);","lastModifiedDate":"2021-09-12"},{"lineNumber":73,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(TASK_MESSAGE_START + size","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"tttyyzzz"},"content":"                + TASK_MESSAGE_END);","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"tttyyzzz"},"content":"     * Prints all the deadline and event tasks sorted in ascending time order","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"tttyyzzz"},"content":"     * if there is no event and deadline tasks, a message will be sent instead","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"tttyyzzz"},"content":"    public static void printSortedDateTimedTask() {","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"tttyyzzz"},"content":"        boolean isEmpty \u003d true;","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"tttyyzzz"},"content":"        for (TimedTask task : TimedTaskList.getSortedList()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(\"     \" + task);","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"tttyyzzz"},"content":"            isEmpty \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"tttyyzzz"},"content":"        if (isEmpty) {","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(\"     There are no deadlines or events to sort\");","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"tttyyzzz"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"tttyyzzz"},"content":"     * Print filtered task array list that has the input user wants on console","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"tttyyzzz"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":98,"author":{"gitId":"tttyyzzz"},"content":"     * @param input is the input user requires to be in the task description","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"tttyyzzz"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"tttyyzzz"},"content":"    public static void printFilteredDateTimedTask(String input) {","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"tttyyzzz"},"content":"        boolean isEmpty \u003d true;","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"tttyyzzz"},"content":"        for (Task task : TaskList.findTask(input)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(\"     \" + task);","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"tttyyzzz"},"content":"            isEmpty \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"tttyyzzz"},"content":"        if (isEmpty) {","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"tttyyzzz"},"content":"            System.out.println(\"     There are no results with the substring \\\"\" + input + \"\\\"\");","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"tttyyzzz"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(DASH_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":113,"author":{"gitId":"tttyyzzz"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(HELP_OUTPUT);","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"tttyyzzz"},"content":"    public static void printDuke() {","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"tttyyzzz"},"content":"        System.out.println(\"Hello from\\n\" + logo + text);","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"tttyyzzz"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"tttyyzzz":120}},{"path":"src/main/java/duke/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":" * Exception is thrown when command keyed in is not in the command list","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"public class UnknownCommandException extends Exception {","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"    //No code needed","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"tttyyzzz":8}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tttyyzzz"},"content":"hi","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"tttyyzzz"},"content":"help","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tttyyzzz"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tttyyzzz"},"content":"todo todo","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tttyyzzz"},"content":"todo","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"tttyyzzz"},"content":"deadline deadline /by 2020-12-23","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tttyyzzz"},"content":"deadline deadline /by 2020-12-23 0500","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tttyyzzz"},"content":"deadline","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"tttyyzzz"},"content":"deadline deadline","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"deadline deadline /at 2020-12-23","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"deadline deadline /by 2020-13-24","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"deadline deadline /by 2020-12-24 2500","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"event event /at 2020-12-23 to 2020-12-12","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"event event /at 2020-12-23 0300 to 2020-12-12","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tttyyzzz"},"content":"event event /at 2020-12-23 to 0300","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"event event /at 2020-12-23 to 2020-12-24 0300","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tttyyzzz"},"content":"event event /at 2020-12-23 0200 to 2020-12-24 0300","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tttyyzzz"},"content":"event event /at 2020-12-25 0200 to 2020-12-24 0300","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tttyyzzz"},"content":"todo todo2","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"tttyyzzz"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"tttyyzzz"},"content":"done 2","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"done 3","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tttyyzzz"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tttyyzzz"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tttyyzzz"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tttyyzzz"},"content":"delete 4","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"tttyyzzz"},"content":"delete 1","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"tttyyzzz"},"content":"delete 1","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"tttyyzzz"},"content":"delete 1","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"tttyyzzz"},"content":"delete 100","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tttyyzzz"},"content":"done 1000","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tttyyzzz"},"content":"list","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"tttyyzzz"},"content":"find dead","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tttyyzzz"},"content":"find eve","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"tttyyzzz"},"content":"sort time","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"tttyyzzz"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tttyyzzz":36}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"tttyyzzz"},"content":"REM javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\\"*.java\"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tttyyzzz"},"content":"REM C:\\Java0\\jdk11.0.12_7\\bin\\java.exe \"-javaagent:C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2021.2\\lib\\idea_rt.jar\u003d1091:C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2021.2\\bin\" -Dfile.encoding\u003dUTF-8 -classpath \"C:\\Users\\tohyi\\Desktop\\CG1111\\cs2113T\\ip project\\out\\production\\ip project\" Duke","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tttyyzzz"},"content":"REM javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\handleException\\*.java ..\\src\\main\\java\\handleTask\\*.java ..\\src\\main\\java\\handleInput\\*.java","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"tttyyzzz"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\*.java ..\\src\\main\\java\\command\\*.java","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tttyyzzz"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"tttyyzzz"},"content":"    echo - BUILD FAILURE -","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"tttyyzzz"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt  \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"tttyyzzz":7,"-":18}}]
