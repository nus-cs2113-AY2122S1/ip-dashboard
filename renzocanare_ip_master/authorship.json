[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"Duke is a task manager to organize your list of *todos, deadlines and events* via ","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"the Command Line Interface (*CLI*).","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"- [Features \u0026 Usage](#featuresheader)","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":"    - [Listing all commands: `@help`](#help)","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"    - [Displaying Stored Tasks:](#displayingheader)","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"        - [Listing all stored tasks: `list`](#list)","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"        - [Finding stored tasks by keyword: `find`](#find)","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    - [Task Management:](#taskmanagementheader)","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"        - [Adding a Todo: `todo`](#todo)","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"        - [Adding a Deadline: `deadline`](#deadline)","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"        - [Adding an Event: `event`](#event)","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"        - [Marking task as done: `done`](#done)","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"        - [Deleting a task: `delete`](#delete)","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"    - [Exiting the program: `exit`](#exit)","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"    - [Saving the data](#save)","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"- [Summary of commands](#soc)","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"## Features \u0026 Usage \u003ca name\u003d\"featuresheader\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"\u003e - Words in `UPPER_CASE` are parameters to be input by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"\u003e - Parameters must be in the order as listed in the specified format.","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"\u003e - Extraneous parameters for commands that do not take in parameters (such as `@help`,","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"    `list` and `exit`) will **NOT** be ignored. An unrecognized command error will be thrown","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"\u003e when there are extraneous parameters for such commands. ","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"### Listing all commands: \u003ca name\u003d\"help\"\u003e`@help`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"Shows all commands that Duke can use.","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"Format: `@help`","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"\u003ca name\u003d\"displayingheader\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"### Listing all stored tasks: \u003ca name\u003d\"list\"\u003e`list`\u003c/a\u003e ","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"Shows a list of all tasks stored in Duke.","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"Format: `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"### Finding stored tasks by keyword: \u003ca name\u003d\"find\"\u003e`find`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"Shows a list of tasks that contain the keyword in their description.","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"- The search is case-sensitive. e.g. `rope` will **NOT** match `Rope`.","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"- `KEYWORD` cannot be empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"Example usage \u0026 expected output:","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"find rope","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"As requested, here are the matching tasks in your list:","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"1. [T][ ] tie rope","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"2. [E][ ] jump rope (at: Sep 27 2021)","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"\u003ca name\u003d\"taskmanagementheader\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"renzocanare"},"content":"### Adding a Todo: \u003ca name\u003d\"todo\"\u003e`todo`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"renzocanare"},"content":"Adds a Todo to the list of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"renzocanare"},"content":"Format: `todo TODO_DESCRIPTION`","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"renzocanare"},"content":"- `TODO_DESCRIPTION` cannot be empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"renzocanare"},"content":"Example usage \u0026 expected output:","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"renzocanare"},"content":"todo wash the dishes","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"renzocanare"},"content":"Alright! I\u0027ve successfully added this task:","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"renzocanare"},"content":"[T][ ] wash the dishes","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"renzocanare"},"content":"You now have 2 tasks in the list!","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"renzocanare"},"content":"### Adding a Deadline: \u003ca name\u003d\"deadline\"\u003e`deadline`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"renzocanare"},"content":"Adds a Deadline to the list of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"renzocanare"},"content":"Format: `deadline DEADLINE_DESCRIPTION /by DEADLINE_DATE`","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"renzocanare"},"content":"- `DEADLINE_DESCRIPTION` and `DEADLINE_DATE` cannot be empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"renzocanare"},"content":"- `DEADLINE_DATE` **must be in the format** of \u0027yyyy-MM-dd\u0027, and will be reformatted","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"renzocanare"},"content":"to \u0027MMM dd yyyy\u0027.","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"renzocanare"},"content":"Example usage \u0026 expected output:","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"renzocanare"},"content":"deadline complete homework /by 2021-09-27","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"renzocanare"},"content":"Alright! I\u0027ve successfully added this task:","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"renzocanare"},"content":"[D][ ] complete homework (at: Sep 27 2021)","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"renzocanare"},"content":"You now have 3 tasks in the list!","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"renzocanare"},"content":"### Adding an Event: \u003ca name\u003d\"event\"\u003e`event`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"renzocanare"},"content":"Adds an Event to the list of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"renzocanare"},"content":"Format: `event EVENT_DESCRIPTION /by EVENT_DATE`","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"renzocanare"},"content":"- `EVENT_DESCRIPTION` and `DEVENT_DATE` cannot be empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"renzocanare"},"content":"- `EVENT_DATE` **must be in the format** of \u0027yyyy-MM-dd\u0027, and will be reformatted","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"renzocanare"},"content":"  to \u0027MMM dd yyyy\u0027.","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"renzocanare"},"content":"Example usage \u0026 expected output:","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":116,"author":{"gitId":"renzocanare"},"content":"event jump rope /by 2021-06-14","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"renzocanare"},"content":"Alright! I\u0027ve successfully added this task:","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"renzocanare"},"content":"[E][ ] jump rope (at: Jun 14 2021)","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"renzocanare"},"content":"You now have 4 tasks in the list!","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":123,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"renzocanare"},"content":"### Marking a task as done: \u003ca name\u003d\"done\"\u003e`done`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"renzocanare"},"content":"Marks a selected task as completed.","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"renzocanare"},"content":"Format: `done TASK_NUMBER`","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"renzocanare"},"content":"- `TASK_NUMBER` cannot be empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"renzocanare"},"content":"- `TASK_NUMBER` must be a positive integer from 1 to N, where N is the ","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"renzocanare"},"content":"  total number of tasks in the list.","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"renzocanare"},"content":"Example usage \u0026 expected output:","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"renzocanare"},"content":"done 2","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"renzocanare"},"content":"Great work! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"renzocanare"},"content":"[T][X] wash the dishes","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"renzocanare"},"content":"### Deleting a task: \u003ca name\u003d\"delete\"\u003e`delete`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"renzocanare"},"content":"Deletes a selected task from the list of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"renzocanare"},"content":"Format: `delete TASK_NUMBER`","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"renzocanare"},"content":"- `TASK_NUMBER` cannot be empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"renzocanare"},"content":"- `TASK_NUMBER` must be a positive integer from 1 to N, where N is the","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"renzocanare"},"content":"  total number of tasks in the list.","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"renzocanare"},"content":"Example usage \u0026 expected output:","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"renzocanare"},"content":"delete 2","lastModifiedDate":"2021-09-27"},{"lineNumber":155,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"renzocanare"},"content":"Alright! I\u0027ve removed this task:","lastModifiedDate":"2021-09-27"},{"lineNumber":157,"author":{"gitId":"renzocanare"},"content":"[T][X] wash the dishes","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"renzocanare"},"content":"Now you have 3 tasks remaining in the list.","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"renzocanare"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"renzocanare"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":161,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"renzocanare"},"content":"### Exiting the program: \u003ca name\u003d\"exit\"\u003e`exit`\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":166,"author":{"gitId":"renzocanare"},"content":"Exits the program.","lastModifiedDate":"2021-09-27"},{"lineNumber":167,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":168,"author":{"gitId":"renzocanare"},"content":"Format: `exit`","lastModifiedDate":"2021-09-27"},{"lineNumber":169,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"renzocanare"},"content":"\u003cbr/\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":171,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":172,"author":{"gitId":"renzocanare"},"content":"### Saving the data \u003ca name\u003d\"save\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":173,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":174,"author":{"gitId":"renzocanare"},"content":"The list of tasks are saved in the hard disk automatically after the program is","lastModifiedDate":"2021-09-27"},{"lineNumber":175,"author":{"gitId":"renzocanare"},"content":"exited successfully using the `exit` command.","lastModifiedDate":"2021-09-27"},{"lineNumber":176,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":177,"author":{"gitId":"renzocanare"},"content":"\u003e \u003cins\u003e**Warning:**\u003c/ins\u003e You must exit the program using the `exit` command for the data to save","lastModifiedDate":"2021-09-30"},{"lineNumber":178,"author":{"gitId":"renzocanare"},"content":"successfully. Exiting the program without using the `exit` command will **NOT** save your data.","lastModifiedDate":"2021-09-27"},{"lineNumber":179,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":180,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":181,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":182,"author":{"gitId":"renzocanare"},"content":"---","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":184,"author":{"gitId":"renzocanare"},"content":"## Summary of commands \u003ca name\u003d\"soc\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"renzocanare"},"content":"Action | Format, Examples ","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"renzocanare"},"content":"--- | --- ","lastModifiedDate":"2021-09-27"},{"lineNumber":188,"author":{"gitId":"renzocanare"},"content":"List Commands | `@help`","lastModifiedDate":"2021-09-27"},{"lineNumber":189,"author":{"gitId":"renzocanare"},"content":"Display Stored Tasks | `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":190,"author":{"gitId":"renzocanare"},"content":"Find Tasks by Keyword | `find KEYWORD` \u003cbr /\u003e e.g.`find project` ","lastModifiedDate":"2021-09-27"},{"lineNumber":191,"author":{"gitId":"renzocanare"},"content":"Add a Todo   | `todo TODO_DESCRIPTION` \u003cbr /\u003e e.g.`todo cs2113t project` ","lastModifiedDate":"2021-09-27"},{"lineNumber":192,"author":{"gitId":"renzocanare"},"content":"Add a Deadline | `deadline DEADLINE_DESCRIPTION /by DEADLINE_DATE` \u003cbr /\u003e e.g.`deadline tP Tasks /by 2021-06-14` ","lastModifiedDate":"2021-09-27"},{"lineNumber":193,"author":{"gitId":"renzocanare"},"content":"Add a Event | `event EVENT_DESCRIPTION /at EVENT_DATE` \u003cbr /\u003e e.g.`event tP Meeting /at 2021-09-27` ","lastModifiedDate":"2021-09-27"},{"lineNumber":194,"author":{"gitId":"renzocanare"},"content":"Mark Task as Done | `done TASK_NUMBER` \u003cbr /\u003e e.g.`done 3` ","lastModifiedDate":"2021-09-27"},{"lineNumber":195,"author":{"gitId":"renzocanare"},"content":"Delete a Task | `delete TASK_NUMBER` \u003cbr /\u003e e.g.`delete 1` ","lastModifiedDate":"2021-09-27"},{"lineNumber":196,"author":{"gitId":"renzocanare"},"content":"Exit the Program | `exit` ","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"renzocanare":182,"-":14}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":" * Class to contain all DEADLINE type tasks, inherits the TASK class.","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"        setBy(by);","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"     * Sets the deadline date of the object.","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"     * @param newDate new date the object is due by.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"    public void setBy(LocalDate newDate) {","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"        this.by \u003d newDate;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"     * Overrides the getType() method, returning the string \"D\" representing DEADLINE tasks when called.","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"     * @return string \"D\" representing DEADLINE tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"    public String getType() {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"        return \"D\";","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"     * Overrides the getWhen() method, returning the formatted due date of the DEADLINE object.","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"     * @return the due date of the DEADLINE object in the DATE_FORMAT set in Task class.","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"    public String getFormattedWhen() {","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"        return this.by.format(DateTimeFormatter.ofPattern((Task.DATE_FORMAT)));","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"     * Gets the unformatted date of when the task is due/occurring.","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"     * @return the unformatted due/occurring date of the Deadline.","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"    public String getUnformattedWhen() {","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"        return by.toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"     * Overrides the toString() method, returning the","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"     * type of class \"D\", the status of the object (done/not done), the object\u0027s description and the object\u0027s","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"     * due date.","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"     * @return string \"D\" representing DEADLINE tasks, the status of the object, the object\u0027s description and the object\u0027s due date.","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"    public String toString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"        return (\"[D]\" + \"[\" + getStatusIcon() + \"] \" + description + \"(by: \" + by.format(DateTimeFormatter.ofPattern((Task.DATE_FORMAT))) + \")\");","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"renzocanare":64}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":" * Contains the main method and is responsible for structure of program-flow.","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    private static ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"    private static Ui ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"    private static Storage storage;","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"    private static Parser parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"     * Runs the whole program as per the program flow:","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"     * Initialize Program -\u003e Run Duke Conversation Loop -\u003e Exits Program","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"     * @throws IOException due to creation of save file when file not found.","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"    public static void run() throws IOException{","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"        initDuke();","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"        runDuke();","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"        exitDuke();","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"     * Initializes the program.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"     * This method initializes all the required classes for the program, and runs the method","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"     * to create a folder for the save file if not found, and also the method to creates a save file if not found. This then","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"     * loads the saved data from the saved file.","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"     * @throws IOException due to creation of save file when file not found.","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"    public static void initDuke() throws IOException {","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"        try {","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"            storage.initSaveFile(tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"            storage.createSaveFile();","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"     *  Runs the main conversation loop of the program.","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"     *  Allows for the inputs to the command line and takes them in. The method will then pass the","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"     *  inputs to the the parser for command processing.","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"    public static void runDuke() {","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"        String line;","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"        // start the taskbot","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"        ui.printWelcome();","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"        line \u003d in.nextLine();","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"        // process inputs by user","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"        parser.parseInputs(in, line, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"renzocanare"},"content":"     * Saves and exits the program.","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"renzocanare"},"content":"     * Calls the method required to save the program, and then exits the program with an exit message.","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"renzocanare"},"content":"    public static void exitDuke() {","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"renzocanare"},"content":"        // save to file and exit after finished","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"renzocanare"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"renzocanare"},"content":"            storage.writeToSave(tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"renzocanare"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"renzocanare"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"renzocanare"},"content":"        ui.printExit();","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"renzocanare"},"content":"     * Main method of the program.","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"renzocanare"},"content":"     * Calls the run() method of the Duke class to begin the program.","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"renzocanare"},"content":"     * @param args allows for arguments when running the program in terminal.","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"renzocanare"},"content":"     * @throws IOException due to creation of save file when file not found.","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"renzocanare"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"renzocanare"},"content":"        new Duke().run();","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"renzocanare":87,"-":3}},{"path":"src/main/java/DukeMissingDescException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":" * Class exception to handle for missing description exceptions specific","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":" * to this program.","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"public class DukeMissingDescException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":"    // no code needed","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"renzocanare":7}},{"path":"src/main/java/DukeMissingParamException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":" * Class exception to handle for missing parameter exceptions specific","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":" * to this program.","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"public class DukeMissingParamException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":"    // no code needed","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"renzocanare":7}},{"path":"src/main/java/DukeMultipleParamException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":" * Class exception to handle for multiple parameter exceptions specific","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":" * to this program.","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"public class DukeMultipleParamException extends Exception {","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":"    // no code needed","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"renzocanare":7}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":" * Class to contain all EVENT type tasks, inherits the TASK class.","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"    protected LocalDate at;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"        setAt(at);","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"     * Sets the EVENT date of the object.","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"     * @param newDate new date the object is occurring.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"    public void setAt(LocalDate newDate) {","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"        this.at \u003d newDate;","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"     * Overrides the getType() method, returning the string \"E\" representing EVENT tasks when called.","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"     * @return string \"E\" representing DEADLINE tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"    public String getType() {","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"        return \"E\";","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"     * Overrides the getWhen() method, returning the formatted occurring date of the EVENT object.","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"     * @return the occurring date of the EVENT object in the DATE_FORMAT set in Task class.","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"    public String getFormattedWhen() {","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"        return this.at.format(DateTimeFormatter.ofPattern((Task.DATE_FORMAT)));","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"     * Gets the unformatted date of when the task is due/occurring.","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"     * @return the unformatted due/occurring date of the Event.","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"    public String getUnformattedWhen() {","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"        return at.toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"     * Overrides the toString() method, returning the","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"     * type of class \"E\", the status of the object (done/not done), the object\u0027s description and the object\u0027s","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"     * occurring date.","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"     * @return string \"E\" representing DEADLINE tasks, the status of the object, the object\u0027s description and the object\u0027s occurring date.","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"    public String toString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"        return (\"[E]\" + \"[\" + getStatusIcon() + \"] \" + description + \"(at: \" + at.format(DateTimeFormatter.ofPattern((Task.DATE_FORMAT))) + \")\");","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"renzocanare":65}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":" * Class handling the user\u0027s command inputs.","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"public class Parser {","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"    protected Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    protected TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"    protected String LINE_DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"    protected String EXIT_COMMAND \u003d \"exit\";","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"    protected String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"    protected String HELP_COMMAND \u003d \"@help\";","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"    protected String DONE_COMMAND \u003d \"done\";","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"    protected String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"    protected String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"    protected String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"    protected String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"    protected String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"     * Filters the task number for use when marking tasks as done or deleting tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"     * The task number is expected to be an integer.","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"     * @param userInput the string of input to be filtered.","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"     * @return the task number to marked as done/deleted.","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingParamException when the task number has not been input.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"     * @throws NumberFormatException when a non-integer/string has been input where expected.","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"    public int filterTaskNum(String userInput) throws DukeMissingParamException, NumberFormatException {","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"        String[] words \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"        // check to see if task number has not been input","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"        if (words.length \u003e 1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"            return Integer.parseInt(words[1]);","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"        else {","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMissingParamException();","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"     * Processes the commands input by the user and the errors caused by incorrect input.","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"     * Checks if the input has any of the commands in the list, and processes the parameters according to the","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"     * respective command. If the parameters are incorrect, an error message will be printed.","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"     * Command List: EXIT, LIST, HELP, DONE, DELETE, TODO, DEADLINE, EVENT, FIND.","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"     * @param in the system scanner, required to move to next line.","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"     * @param line the input of the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the ArrayList of Tasks to operate the commands on.","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"    public void parseInputs(Scanner in, String line, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"        // while input is not \"exit\", keep taking inputs.","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"        while (!line.equals(EXIT_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"            if (line.equals(LIST_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"                ui.printList(tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"            } else if (line.equals(HELP_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"                ui.printHelp();","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"            } else if (line.contains(DONE_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"                try {","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"                    int taskNum \u003d filterTaskNum(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"                    taskList.markTaskDone(taskNum, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"                catch (DukeMissingParamException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"renzocanare"},"content":"                    ui.printDoneEmptyError();","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"renzocanare"},"content":"                catch (NumberFormatException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"renzocanare"},"content":"                    ui.printDoneWordError();","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"renzocanare"},"content":"                catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"renzocanare"},"content":"                    ui.printDoneInvalidNumError();","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"renzocanare"},"content":"            } else if (line.contains(DELETE_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"renzocanare"},"content":"                try {","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"renzocanare"},"content":"                    int taskNum \u003d filterTaskNum(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"renzocanare"},"content":"                    taskList.deleteTask(taskNum, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"renzocanare"},"content":"                catch (DukeMissingParamException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"renzocanare"},"content":"                    ui.printDeleteEmptyError();","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"renzocanare"},"content":"                catch (NumberFormatException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"renzocanare"},"content":"                    ui.printDeleteWordError();","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"renzocanare"},"content":"                catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"renzocanare"},"content":"                    ui.printDeleteInvalidNumError();","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"renzocanare"},"content":"            } else if (line.contains(TODO_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"renzocanare"},"content":"                try {","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"renzocanare"},"content":"                    // adds todo and prints success message","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"renzocanare"},"content":"                    taskList.addTodo(line, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"renzocanare"},"content":"                catch (DukeMissingDescException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"renzocanare"},"content":"                    ui.printTodoEmptyError();","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"renzocanare"},"content":"            } else if (line.contains(DEADLINE_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"renzocanare"},"content":"                try {","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"renzocanare"},"content":"                    // adds deadline and prints success message","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"renzocanare"},"content":"                    taskList.addDeadline(line, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"renzocanare"},"content":"                catch (DukeMissingDescException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"renzocanare"},"content":"                    ui.printDeadlineEmptyError();","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"renzocanare"},"content":"                catch (DukeMissingParamException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"renzocanare"},"content":"                    ui.printDeadlineMissingParamError();","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"renzocanare"},"content":"                catch (DateTimeParseException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"renzocanare"},"content":"                    ui.printDeadlineEventDateParamError();","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"renzocanare"},"content":"            } else if (line.contains(EVENT_COMMAND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"renzocanare"},"content":"                try {","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"renzocanare"},"content":"                    // adds event and prints success message","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"renzocanare"},"content":"                    taskList.addEvent(line, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"renzocanare"},"content":"                } catch (DukeMissingDescException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"renzocanare"},"content":"                    ui.printEventEmptyError();","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"renzocanare"},"content":"                } catch (DukeMissingParamException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"renzocanare"},"content":"                    ui.printEventMissingParamError();","lastModifiedDate":"2021-09-22"},{"lineNumber":118,"author":{"gitId":"renzocanare"},"content":"                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":119,"author":{"gitId":"renzocanare"},"content":"                    ui.printDeadlineEventDateParamError();","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-22"},{"lineNumber":121,"author":{"gitId":"renzocanare"},"content":"            } else if (line.contains(FIND_COMMAND)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":122,"author":{"gitId":"renzocanare"},"content":"                try {","lastModifiedDate":"2021-09-22"},{"lineNumber":123,"author":{"gitId":"renzocanare"},"content":"                    taskList.findTasks(line, tasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":124,"author":{"gitId":"renzocanare"},"content":"                } catch (DukeMissingParamException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":125,"author":{"gitId":"renzocanare"},"content":"                    ui.printFindMissingParamError();","lastModifiedDate":"2021-09-22"},{"lineNumber":126,"author":{"gitId":"renzocanare"},"content":"                } catch (DukeMultipleParamException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":127,"author":{"gitId":"renzocanare"},"content":"                    ui.printFindMultipleParamError();","lastModifiedDate":"2021-09-22"},{"lineNumber":128,"author":{"gitId":"renzocanare"},"content":"                }","lastModifiedDate":"2021-09-22"},{"lineNumber":129,"author":{"gitId":"renzocanare"},"content":"            } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"renzocanare"},"content":"                // throw error when no commands are found in input","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"renzocanare"},"content":"                ui.printUnknownCommand();","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"renzocanare"},"content":"            line \u003d in.nextLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":136,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"renzocanare":136}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.io.File;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":" * Class handling the loading of tasks from the save file and saving tasks in the save file.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"public class Storage {","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"    protected TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"    protected String DIRECTORY_NAME \u003d \"data\";","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"    protected String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"    protected int TASK_INIT_OFFSET \u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"    public Storage() {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"        this.initFolder();","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"     * Initializes the save folder. If a save folder does not exist, then it will be automatically created.","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"    public void initFolder() {","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"        File directory \u003d new File(DIRECTORY_NAME);","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"            directory.mkdir();","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"            System.out.println(\"Missing directory, creating new directory.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"     * Initialize the save file. If a save file does not exist, then it will be automatically created.","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"     * The save file will then be read and loaded into the ArrayList of Tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"     * @throws FileNotFoundException when the save file does not exist.","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"    public void initSaveFile(ArrayList\u003cTask\u003e tasks) throws FileNotFoundException {","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"        File f \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"        Scanner saveFile \u003d new Scanner(f);","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"        int addCounter \u003d 0;","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"        while (saveFile.hasNextLine()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"            String line \u003d saveFile.nextLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"            String[] processWordsArr \u003d line.split((\"[|]\"));","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"            if (line.charAt(0) \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"                taskList.addTask(new Todo(processWordsArr[2].substring(TASK_INIT_OFFSET)), tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"            } else if (line.charAt(0) \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"                taskList.addTask(new Deadline(processWordsArr[2].substring(TASK_INIT_OFFSET), LocalDate.parse(processWordsArr[3].substring(TASK_INIT_OFFSET))), tasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"            } else if (line.charAt(0) \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"                taskList.addTask(new Event(processWordsArr[2].substring(TASK_INIT_OFFSET), LocalDate.parse(processWordsArr[3].substring(TASK_INIT_OFFSET))), tasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"            if (processWordsArr[1].charAt(1) \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"                tasks.get(addCounter).markAsDone();","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"            addCounter++;","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"     * Creates the new save file, \"duke.txt\".","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"     * @throws IOException when there is an error in creating the save file.","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"    public void createSaveFile() throws IOException {","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"renzocanare"},"content":"        File f \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"renzocanare"},"content":"        f.createNewFile();","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"renzocanare"},"content":"        System.out.println(\"Missing duke.txt, creating new file.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"renzocanare"},"content":"     * Stores the current ArrayList of Tasks into the save file, rewriting all of the save file\u0027s previous contents.","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"renzocanare"},"content":"     * Follows the format:","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"renzocanare"},"content":"     * [Task Type Symbol] | [Task Done Status] | [Task Description] | [Task Due/Event Date (for Deadline and Event only)]","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the ArrayList of Tasks to be saved into the save file.","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"renzocanare"},"content":"     * @throws IOException when there is an error writing into the save file and saving it.","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"renzocanare"},"content":"    public void writeToSave(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"renzocanare"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"renzocanare"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"renzocanare"},"content":"            String doneNumber \u003d \"0\";","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"renzocanare"},"content":"            if (tasks.get(i).isDone) {","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"renzocanare"},"content":"                doneNumber \u003d \"1\";","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"renzocanare"},"content":"            String textToAdd;","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"renzocanare"},"content":"            if (tasks.get(i).getType().equals(\"T\")) {","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"renzocanare"},"content":"                textToAdd \u003d tasks.get(i).getType() + \" | \"","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"renzocanare"},"content":"                        + doneNumber + \" | \"","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"renzocanare"},"content":"                        +  tasks.get(i).description + System.lineSeparator();","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"renzocanare"},"content":"            } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"renzocanare"},"content":"                textToAdd \u003d tasks.get(i).getType() + \" | \"","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"renzocanare"},"content":"                        + doneNumber + \" | \"","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"renzocanare"},"content":"                        +  tasks.get(i).description + \"| \" + tasks.get(i).getUnformattedWhen() + System.lineSeparator();","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"renzocanare"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"renzocanare"},"content":"        fw.close();","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"renzocanare":102}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":" * Class to contain TASKs type.","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"    protected String taskType;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"    protected LocalDate eventDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"    public static final String DATE_FORMAT \u003d \"MMM dd yyyy\";","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"        this.taskType \u003d \"\";","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"     * Gets the status of the task object and returns the corresponding icon.","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"     * @return \"X\" if the task is marked as done, and blank otherwise.","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"     * Marks the task as done.","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"     * Gets the type of task.","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"     * @return the type of the task if it is a todo, deadline or event.","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"    public String getType() {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"        return taskType;","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"     * Gets the formatted date of when the task is due/occurring.","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"     * @return the due/occurring date of the task in the DATE_FORMAT set in this class.","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"    public String getFormattedWhen() {","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"        return eventDate.format(DateTimeFormatter.ofPattern((Task.DATE_FORMAT)));","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"     * Gets the unformatted date of when the task is due/occurring.","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"     * @return the unformatted due/occurring date of the task.","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"    public String getUnformattedWhen() {","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"        return eventDate.toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"     * Gets the description of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"renzocanare"},"content":"     * @return description of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"renzocanare"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"renzocanare"},"content":"        return description;","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"renzocanare"},"content":"     * Overrides the toString() method, returning the","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"renzocanare"},"content":"     * type of class, the status of the object (done/not done) and the object\u0027s description.","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"renzocanare"},"content":"     * @return the type of task, the status of the object, and the object\u0027s description.","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"renzocanare"},"content":"    public String toString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"renzocanare"},"content":"        return (\"[\" + taskType + \"]\" + \"[\" + getStatusIcon() + \"] \" + description);","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"renzocanare":82}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":" * Class handling the task list and its operations.","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"public class TaskList {","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"    protected Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    protected int DONE_OFFSET \u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"    protected int TODO_LEN_OFFSET \u003d 4;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"    protected int TODO_SUBSTRING_OFFSET \u003d 5;","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"    protected int DEADLINE_BY_OFFSET \u003d 4;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"    protected int DEADLINE_LEN_OFFSET \u003d 8;","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"    protected int DEADLINE_SUBSTRING_OFFSET \u003d 9;","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"    protected int DELETE_OFFSET \u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"    protected int DEADLINE_DESC_OFFSET \u003d 9;","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"    protected int EVENT_DESC_OFFSET \u003d 6;","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"    protected int EVENT_BY_OFFSET \u003d 4;","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"    protected int EVENT_LEN_OFFSET \u003d 5;","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"    protected int EVENT_SUBSTRING_OFFSET \u003d 6;","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"     * Marks the selected task as done if the task number is valid.","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"     * Throws an error if the selected task number is not valid.","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"     * @param numToMark the displayed number of the task to be marked as done.","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the ArrayList of Tasks where the task to be marked as done is stored.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"     * @throws IndexOutOfBoundsException when the task number selected is not valid.","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"    public void markTaskDone(int numToMark, ArrayList\u003cTask\u003e tasks) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"        if ((numToMark - DONE_OFFSET \u003e\u003d 0) \u0026\u0026 (tasks.get(numToMark - DONE_OFFSET) !\u003d null)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"            tasks.get(numToMark - DONE_OFFSET).markAsDone();","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"            ui.printTaskMarked(numToMark, tasks, DONE_OFFSET);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"        else {","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"            ui.printDoneInvalidNumError();","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"     * Adds a task to the ArrayList of Tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"     * @param t the task to be added to the ArrayList of Tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the ArrayList of Tasks where the task is to be added to.","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"    public void addTask(Task t, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"        tasks.add(t);","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"     * Adds a TODO type task to the ArrayList of Tasks, and checks if any required parameters are missing (description).","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"     * Throws an error if required parameters are missing.","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"     * @param line the input of the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the he ArrayList of Tasks where the TODO task is to be added to.","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingDescException when the description of the task is not input by the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"    public void addTodo(String line, ArrayList\u003cTask\u003e tasks) throws DukeMissingDescException {","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"        if (line.length() \u003d\u003d TODO_LEN_OFFSET || line.substring(TODO_SUBSTRING_OFFSET).isBlank()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMissingDescException();","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"        String todoDescription \u003d line.substring(TODO_SUBSTRING_OFFSET);","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"        this.addTask(new Todo(todoDescription), tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"        ui.printAddedTodo(todoDescription, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"renzocanare"},"content":"     * Adds a DEADLINE type task to the ArrayList of Tasks, and checks if any required parameters are missing (description, due date).","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"renzocanare"},"content":"     * Throws an error if required parameters are missing.","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"renzocanare"},"content":"     * @param line the input of the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the he ArrayList of Tasks where the DEDADLINE task is to be added to.","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingDescException when the description of the deadline task is not input by the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingParamException when the /by flag is not input.","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"renzocanare"},"content":"    public void addDeadline(String line, ArrayList\u003cTask\u003e tasks) throws DukeMissingDescException, DukeMissingParamException, DateTimeParseException, StringIndexOutOfBoundsException {","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"renzocanare"},"content":"        if (line.length() \u003d\u003d DEADLINE_LEN_OFFSET || line.substring(DEADLINE_SUBSTRING_OFFSET).isBlank()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMissingDescException();","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"renzocanare"},"content":"        int posOfBy \u003d line.indexOf(\"/by\");","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"renzocanare"},"content":"        // throw error if missing /by parameter","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"renzocanare"},"content":"        if (posOfBy \u003d\u003d -1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMissingParamException();","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"renzocanare"},"content":"        int posOfLastChar \u003d line.length();","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"renzocanare"},"content":"        // get description from input","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"renzocanare"},"content":"        String deadlineDescription \u003d line.substring(DEADLINE_DESC_OFFSET, posOfBy);","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"renzocanare"},"content":"        // get deadline when from input","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"renzocanare"},"content":"        LocalDate deadlineBy \u003d LocalDate.parse(line.substring(posOfBy + DEADLINE_BY_OFFSET, posOfLastChar));","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"renzocanare"},"content":"        this.addTask(new Deadline(deadlineDescription, deadlineBy), tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"renzocanare"},"content":"        ui.printAddedDeadline(deadlineDescription, deadlineBy, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"renzocanare"},"content":"     * Adds a EVENT type task to the ArrayList of Tasks, and checks if any required parameters are missing (description, event date).","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"renzocanare"},"content":"     * Throws an error if required parameters are missing.","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"renzocanare"},"content":"     * @param line the input of the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the ArrayList of Tasks where the EVENT task is to be added to.","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingDescException when the description of the event task is not input by the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingParamException when the /at flag is not input.","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"renzocanare"},"content":"     * @throws DateTimeParseException when the date input is not in the correct format.","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"renzocanare"},"content":"    public void addEvent(String line, ArrayList\u003cTask\u003e tasks) throws DukeMissingDescException, DukeMissingParamException, DateTimeParseException, StringIndexOutOfBoundsException {","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"renzocanare"},"content":"        if (line.length() \u003d\u003d EVENT_LEN_OFFSET || line.substring(EVENT_SUBSTRING_OFFSET).isBlank()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMissingDescException();","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"renzocanare"},"content":"        int posOfAt \u003d line.indexOf(\"/at\");","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"renzocanare"},"content":"        // throw error if missing /at parameter","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"renzocanare"},"content":"        if (posOfAt \u003d\u003d -1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMissingParamException();","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":122,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":123,"author":{"gitId":"renzocanare"},"content":"        int posOfLastChar \u003d line.length();","lastModifiedDate":"2021-09-21"},{"lineNumber":124,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"renzocanare"},"content":"        // get description from input","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"renzocanare"},"content":"        String eventDescription \u003d line.substring(EVENT_DESC_OFFSET, posOfAt);","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"renzocanare"},"content":"        // get event when from input","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"renzocanare"},"content":"        LocalDate eventAt \u003d LocalDate.parse(line.substring(posOfAt + EVENT_BY_OFFSET, posOfLastChar));","lastModifiedDate":"2021-09-22"},{"lineNumber":130,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"renzocanare"},"content":"        addTask(new Event(eventDescription, eventAt), tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"renzocanare"},"content":"        ui.printAddedEvent(eventDescription, eventAt, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"renzocanare"},"content":"  ","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"renzocanare"},"content":"     * Deletes a task from the ArrayList of Tasks. Throws an error if the task number to be deleted is missing, incorrectly","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"renzocanare"},"content":"     * input or is not a valid task number.","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"renzocanare"},"content":"     * @param numToRemove the task number to be removed.","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the ArrayList of Tasks where the task is to removed.","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingParamException when the task number to be deleted is not input.","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"renzocanare"},"content":"     * @throws NumberFormatException when a string is input where the task number to be deleted is expected.","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"renzocanare"},"content":"     * @throws IndexOutOfBoundsException when the task number is invalid.","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"renzocanare"},"content":"    public void deleteTask(int numToRemove, ArrayList\u003cTask\u003e tasks) throws DukeMissingParamException, NumberFormatException, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"renzocanare"},"content":"        if ((numToRemove - DELETE_OFFSET \u003e\u003d 0) \u0026\u0026 (tasks.get(numToRemove - DELETE_OFFSET) !\u003d null)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"renzocanare"},"content":"            ui.printDeleteTask(numToRemove, DELETE_OFFSET, tasks);","lastModifiedDate":"2021-09-30"},{"lineNumber":148,"author":{"gitId":"renzocanare"},"content":"        }   tasks.remove(tasks.get(numToRemove - DELETE_OFFSET));","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"renzocanare"},"content":"     * Prints out all tasks that contain the matching keyword. The method will look through the entire ArrayList of Tasks,","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"renzocanare"},"content":"     * and checks if any of the task\u0027s description contains the keyword input by the user. It will store the tasks in another","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"renzocanare"},"content":"     * ArrayList if there is a match, and print that ArrayList which contains all the matched tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":155,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"renzocanare"},"content":"     * @param line the input of the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":157,"author":{"gitId":"renzocanare"},"content":"     * @param tasks the ArrayList of Tasks to check if the keyword matches any of it\u0027s task\u0027s description.","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMissingParamException when the keyword is not input by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"renzocanare"},"content":"     * @throws ArrayIndexOutOfBoundsException when the keyword is not input by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"renzocanare"},"content":"     * @throws DukeMultipleParamException when there are more than one keywords input by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":161,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"renzocanare"},"content":"    public void findTasks(String line, ArrayList\u003cTask\u003e tasks) throws DukeMissingParamException, ArrayIndexOutOfBoundsException, DukeMultipleParamException {","lastModifiedDate":"2021-09-22"},{"lineNumber":163,"author":{"gitId":"renzocanare"},"content":"        String input[] \u003d line.split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":164,"author":{"gitId":"renzocanare"},"content":"        if (input.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-22"},{"lineNumber":165,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMissingParamException();","lastModifiedDate":"2021-09-22"},{"lineNumber":166,"author":{"gitId":"renzocanare"},"content":"        } else if (input.length \u003e 2) {","lastModifiedDate":"2021-09-22"},{"lineNumber":167,"author":{"gitId":"renzocanare"},"content":"            throw new DukeMultipleParamException();","lastModifiedDate":"2021-09-22"},{"lineNumber":168,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":169,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":170,"author":{"gitId":"renzocanare"},"content":"        ArrayList\u003cTask\u003e matchedKeys \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-22"},{"lineNumber":171,"author":{"gitId":"renzocanare"},"content":"        for (Task matchingTasks : tasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":172,"author":{"gitId":"renzocanare"},"content":"            if (matchingTasks.getDescription().contains(input[1])) {","lastModifiedDate":"2021-09-22"},{"lineNumber":173,"author":{"gitId":"renzocanare"},"content":"                matchedKeys.add(matchingTasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":174,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":175,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":176,"author":{"gitId":"renzocanare"},"content":"        ui.printMatchedTasks(matchedKeys, tasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":177,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":178,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":179,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"renzocanare":179}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":" * Class to contain all TODO type tasks, inherits the TASK class.","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"     * Overrides the getType() method, returning the string \"T\" representing TODO tasks when called.","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"     * @return string \"T\" representing TODO tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"    public String getType() {","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"        return \"T\";","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"     * Overrides the toString() method, returning the","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"     * type of class \"T\", the status of the object (done/not done) and the object\u0027s description.","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"     * @return string \"T\" representing TODO tasks, the status of the object and the object\u0027s description.","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"    public String toString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"        return (\"[T]\" + \"[\" + getStatusIcon() + \"] \" + description);","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"renzocanare":30}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"renzocanare"},"content":"/**","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"renzocanare"},"content":" * Class handling the user interface interactions with the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"renzocanare"},"content":" */","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"renzocanare"},"content":"public class Ui {","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"renzocanare"},"content":"    protected int ARRAYLIST_PRINT_OFFSET \u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"renzocanare"},"content":"    protected String LINE_DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"renzocanare"},"content":"    protected String EXIT_MESSAGE \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"renzocanare"},"content":"            + \"Your tasks have been saved! Thanks for talking with me, see you soon!\" + System.lineSeparator()","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"renzocanare"},"content":"    protected String UNKNOWN_COMMAND \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"renzocanare"},"content":"            + \"Unrecognized command! ☹ Please try again, or type @help for a list of commands.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"renzocanare"},"content":"    protected String DONE_EMPTY \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, you did not select a task to mark as done ☹\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"renzocanare"},"content":"    protected String DELETE_EMPTY \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, you did not select a task to delete ☹\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"renzocanare"},"content":"    protected String DONE_WORD \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, you entered a word instead of a number after done ☹ Please enter the task number to be marked as done!\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"renzocanare"},"content":"    protected String DELETE_WORD \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, you entered a word instead of a number after delete ☹ Please enter the task number to delete!\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"renzocanare"},"content":"    protected String DONE_INVALID_NUM \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, you entered an invalid task number to mark as done! ☹ Please enter the correct task number.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"renzocanare"},"content":"    protected String DELETE_INVALID_NUM \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, you entered an invalid task number to delete! ☹ Please enter the correct task number.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"renzocanare"},"content":"    protected String TODO_EMPTY \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, the TODO description cannot be empty ☹\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"renzocanare"},"content":"    protected String DEADLINE_EMPTY \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, the DEADLINE description cannot be empty ☹\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"renzocanare"},"content":"    protected String DEADLINE_MISSINGPARAM \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"renzocanare"},"content":"            + \"Woops! Did you forget the /by parameter?\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"renzocanare"},"content":"    protected String DEADLINE_EVENT_DATEPARAM \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"renzocanare"},"content":"            + \"Woops! Please enter a valid date format YYYY-MM-DD (e.g. 1999-06-14)\" + System.lineSeparator()","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"renzocanare"},"content":"    protected String EVENT_EMPTY \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, the EVENT description cannot be empty ☹\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"renzocanare"},"content":"    protected String EVENT_MISSINGPARAM \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"renzocanare"},"content":"            + \"Woops! Did you forget the /at parameter?\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"renzocanare"},"content":"    protected String FIND_MISSINGPARAM \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, did you forget to include the keyword you are searching for?\" + System.lineSeparator()","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"renzocanare"},"content":"    protected String FIND_MULTIPLEPARAM \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"renzocanare"},"content":"            + \"Sorry, please include only one keyword to search for!\" + System.lineSeparator()","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"renzocanare"},"content":"            + LINE_DIVIDER;","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"renzocanare"},"content":"    public void printWelcome() {","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"renzocanare"},"content":"        String welcomeMessage \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"renzocanare"},"content":"                + \"Hello! I\u0027m your friendly taskbot, John!\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"renzocanare"},"content":"                + \"Please type @help for a list of commands. How can I help?\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"renzocanare"},"content":"                + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"renzocanare"},"content":"        System.out.println(welcomeMessage);","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"renzocanare"},"content":"    public void printHelp() {","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"renzocanare"},"content":"        String helpMessage \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"renzocanare"},"content":"                + \"todo \u003ctask\u003e - Adds a todo task.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"renzocanare"},"content":"                + \"deadline \u003ctask\u003e /by \u003cdue date\u003e - Adds a deadline task.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"renzocanare"},"content":"                + \"event \u003ctask\u003e /at \u003cevent date\u003e - Adds an event task.\" + System.lineSeparator()","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"renzocanare"},"content":"                + \"list - Lists all tasks recorded.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"renzocanare"},"content":"                + \"find \u003ckeyword\u003e - Lists all tasks that have the keyword in their description.\" + System.lineSeparator()","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"renzocanare"},"content":"                + \"done \u003ctask number\u003e - Marks selected task number as done with an X.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"renzocanare"},"content":"                + \"delete \u003ctask number\u003e - Deletes selected task number.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"renzocanare"},"content":"                + \"exit - Saves and exits the taskbot.\" + System.lineSeparator()","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"renzocanare"},"content":"                + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"renzocanare"},"content":"        System.out.println(helpMessage);","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"renzocanare"},"content":"    public void printAddedTodo(String todoDescription, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"renzocanare"},"content":"        String addedMessage \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"renzocanare"},"content":"                + \"Alright! I\u0027ve successfully added this task:\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"renzocanare"},"content":"                + \"[T]\" + \"[ \" + \"] \" + todoDescription + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"renzocanare"},"content":"                + \"You now have \" + tasks.size() + \" tasks in the list!\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"renzocanare"},"content":"                + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"renzocanare"},"content":"        System.out.println(addedMessage);","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"renzocanare"},"content":"    public void printAddedDeadline(String deadlineDescription, LocalDate deadlineBy, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"renzocanare"},"content":"        String addedMessage \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"renzocanare"},"content":"                + \"Alright! I\u0027ve successfully added this task:\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"renzocanare"},"content":"                + \"[D]\" + \"[ \" + \"] \" + deadlineDescription +","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"renzocanare"},"content":"                \"(by: \" + deadlineBy.format(DateTimeFormatter.ofPattern((Task.DATE_FORMAT))) + \")\" + System.lineSeparator()","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"renzocanare"},"content":"                + \"You now have \" + tasks.size() + \" tasks in the list!\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"renzocanare"},"content":"                + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"renzocanare"},"content":"        System.out.println(addedMessage);","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"renzocanare"},"content":"    public void printAddedEvent(String eventDescription, LocalDate eventAt, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"renzocanare"},"content":"        String addedMessage \u003d LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"renzocanare"},"content":"                + \"Alright! I\u0027ve successfully added this task:\"  + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"renzocanare"},"content":"                + \"[E]\" + \"[ \" + \"] \" + eventDescription +","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"renzocanare"},"content":"                \"(at: \" + eventAt.format(DateTimeFormatter.ofPattern((Task.DATE_FORMAT))) + \")\" + System.lineSeparator()","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"renzocanare"},"content":"                + \"You now have \" + tasks.size() + \" tasks in the list!\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"renzocanare"},"content":"                + LINE_DIVIDER;","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"renzocanare"},"content":"        System.out.println(addedMessage);","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"renzocanare"},"content":"    public void printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"renzocanare"},"content":"        System.out.println(LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"renzocanare"},"content":"                + \"As requested, here are the tasks in your list:\");","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"renzocanare"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"renzocanare"},"content":"            System.out.println(\"There are no tasks recorded!\");","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"renzocanare"},"content":"        } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"renzocanare"},"content":"            for (Task element : tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"renzocanare"},"content":"                System.out.println((tasks.indexOf(element) + ARRAYLIST_PRINT_OFFSET) + \".\" + element.toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"renzocanare"},"content":"        System.out.println(LINE_DIVIDER);","lastModifiedDate":"2021-09-21"},{"lineNumber":122,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":123,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":124,"author":{"gitId":"renzocanare"},"content":"    public void printLineDivider() {","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"renzocanare"},"content":"        System.out.println(LINE_DIVIDER);","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"renzocanare"},"content":"    public void printExit() {","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"renzocanare"},"content":"        System.out.println(EXIT_MESSAGE);","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"renzocanare"},"content":"    public void printUnknownCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"renzocanare"},"content":"        System.out.println(UNKNOWN_COMMAND);","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":136,"author":{"gitId":"renzocanare"},"content":"    public void printDoneEmptyError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":137,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DONE_EMPTY);","lastModifiedDate":"2021-09-21"},{"lineNumber":138,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":139,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":140,"author":{"gitId":"renzocanare"},"content":"    public void printDoneWordError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":141,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DONE_WORD);","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"renzocanare"},"content":"    public void printDoneInvalidNumError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DONE_INVALID_NUM);","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"renzocanare"},"content":"    public void printDeleteEmptyError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DELETE_EMPTY);","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"renzocanare"},"content":"    public void printDeleteWordError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DELETE_WORD);","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"renzocanare"},"content":"    public void printDeleteInvalidNumError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DELETE_INVALID_NUM);","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"renzocanare"},"content":"    public void printTodoEmptyError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"renzocanare"},"content":"        System.out.println(TODO_EMPTY);","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":164,"author":{"gitId":"renzocanare"},"content":"    public void printDeadlineEmptyError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":165,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DEADLINE_EMPTY);","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"renzocanare"},"content":"    public void printDeadlineMissingParamError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DEADLINE_MISSINGPARAM);","lastModifiedDate":"2021-09-21"},{"lineNumber":170,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":171,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":172,"author":{"gitId":"renzocanare"},"content":"    public void printDeadlineEventDateParamError() {","lastModifiedDate":"2021-09-22"},{"lineNumber":173,"author":{"gitId":"renzocanare"},"content":"        System.out.println(DEADLINE_EVENT_DATEPARAM);","lastModifiedDate":"2021-09-22"},{"lineNumber":174,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":175,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":176,"author":{"gitId":"renzocanare"},"content":"    public void printEventEmptyError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":177,"author":{"gitId":"renzocanare"},"content":"        System.out.println(EVENT_EMPTY);","lastModifiedDate":"2021-09-21"},{"lineNumber":178,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":179,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":180,"author":{"gitId":"renzocanare"},"content":"    public void printEventMissingParamError() {","lastModifiedDate":"2021-09-21"},{"lineNumber":181,"author":{"gitId":"renzocanare"},"content":"        System.out.println(EVENT_MISSINGPARAM);","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"renzocanare"},"content":"    public void printTaskMarked(int numToMark, ArrayList\u003cTask\u003e tasks, int DONE_OFFSET) {","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"renzocanare"},"content":"        System.out.println(LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"renzocanare"},"content":"                + \"Great work! I\u0027ve marked this task as done:\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":187,"author":{"gitId":"renzocanare"},"content":"                + tasks.get(numToMark - DONE_OFFSET).toString() + System.lineSeparator()","lastModifiedDate":"2021-09-30"},{"lineNumber":188,"author":{"gitId":"renzocanare"},"content":"                + LINE_DIVIDER);","lastModifiedDate":"2021-09-21"},{"lineNumber":189,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":190,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":191,"author":{"gitId":"renzocanare"},"content":"    public void printDeleteTask(int numToRemove, int DELETE_OFFSET, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-30"},{"lineNumber":192,"author":{"gitId":"renzocanare"},"content":"        System.out.println(LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":193,"author":{"gitId":"renzocanare"},"content":"                + \"Alright! I\u0027ve removed this task:\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":194,"author":{"gitId":"renzocanare"},"content":"                + tasks.get(numToRemove - DELETE_OFFSET).toString() + System.lineSeparator()","lastModifiedDate":"2021-09-30"},{"lineNumber":195,"author":{"gitId":"renzocanare"},"content":"                + \"Now you have \" + (tasks.size() - DELETE_OFFSET)+ \" tasks remaining in the list.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":196,"author":{"gitId":"renzocanare"},"content":"                + LINE_DIVIDER);","lastModifiedDate":"2021-09-21"},{"lineNumber":197,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":198,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":199,"author":{"gitId":"renzocanare"},"content":"    public void printMatchedTasks(ArrayList\u003cTask\u003e matchedKeys, ArrayList\u003cTask\u003e tasks)  {","lastModifiedDate":"2021-09-22"},{"lineNumber":200,"author":{"gitId":"renzocanare"},"content":"        System.out.println(LINE_DIVIDER + System.lineSeparator()","lastModifiedDate":"2021-09-22"},{"lineNumber":201,"author":{"gitId":"renzocanare"},"content":"                + \"As requested, here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-22"},{"lineNumber":202,"author":{"gitId":"renzocanare"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-22"},{"lineNumber":203,"author":{"gitId":"renzocanare"},"content":"            System.out.println(\"There are no tasks recorded!\");","lastModifiedDate":"2021-09-22"},{"lineNumber":204,"author":{"gitId":"renzocanare"},"content":"        } else if (matchedKeys.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-22"},{"lineNumber":205,"author":{"gitId":"renzocanare"},"content":"            System.out.println(\"The keyword cannot be found!\");","lastModifiedDate":"2021-09-22"},{"lineNumber":206,"author":{"gitId":"renzocanare"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":207,"author":{"gitId":"renzocanare"},"content":"            int taskCounter \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":208,"author":{"gitId":"renzocanare"},"content":"            for (Task element : matchedKeys) {","lastModifiedDate":"2021-09-22"},{"lineNumber":209,"author":{"gitId":"renzocanare"},"content":"                System.out.println(taskCounter + ARRAYLIST_PRINT_OFFSET + \". \" + element.toString());","lastModifiedDate":"2021-09-22"},{"lineNumber":210,"author":{"gitId":"renzocanare"},"content":"                taskCounter++;","lastModifiedDate":"2021-09-22"},{"lineNumber":211,"author":{"gitId":"renzocanare"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":212,"author":{"gitId":"renzocanare"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":213,"author":{"gitId":"renzocanare"},"content":"        System.out.println(LINE_DIVIDER);","lastModifiedDate":"2021-09-22"},{"lineNumber":214,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":215,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":216,"author":{"gitId":"renzocanare"},"content":"    public void printFindMissingParamError() {","lastModifiedDate":"2021-09-22"},{"lineNumber":217,"author":{"gitId":"renzocanare"},"content":"        System.out.println(FIND_MISSINGPARAM);","lastModifiedDate":"2021-09-22"},{"lineNumber":218,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":219,"author":{"gitId":"renzocanare"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":220,"author":{"gitId":"renzocanare"},"content":"    public void printFindMultipleParamError() {","lastModifiedDate":"2021-09-22"},{"lineNumber":221,"author":{"gitId":"renzocanare"},"content":"        System.out.println(FIND_MULTIPLEPARAM);","lastModifiedDate":"2021-09-22"},{"lineNumber":222,"author":{"gitId":"renzocanare"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":223,"author":{"gitId":"renzocanare"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"renzocanare":223}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"renzocanare"},"content":"todo borrow book","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"renzocanare"},"content":"event book fair /at Monday 3pm","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"renzocanare"},"content":"deadline sell book /by Monday 2pm","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"renzocanare"},"content":"bye","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"renzocanare":4}}]
