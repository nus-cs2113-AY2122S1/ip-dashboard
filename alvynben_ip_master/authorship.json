[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"# Triss project template","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"alvynben"},"content":"3. After that, locate the `src/main/java/Triss.java` file, right-click it, and choose `Run Triss.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"alvynben":2,"-":22}},{"path":"src/main/java/triss/Triss.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"package triss;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"alvynben"},"content":"import triss.exception.TrissException;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"alvynben"},"content":"import triss.task.Deadline;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"alvynben"},"content":"import triss.task.Event;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"alvynben"},"content":"import triss.task.Task;","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"alvynben"},"content":"import triss.task.Todo;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"alvynben"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"alvynben"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"alvynben"},"content":"import java.io.File;","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"alvynben"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"alvynben"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"alvynben"},"content":"public class Triss {","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"alvynben"},"content":"    /** Logo shown during startup */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"alvynben"},"content":"    private static final String LOGO \u003d \"████████ ██████  ██ ███████ ███████ \\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"alvynben"},"content":"            \"   ██    ██   ██ ██ ██      ██      \\n\" +","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"alvynben"},"content":"            \"   ██    ██████  ██ ███████ ███████ \\n\" +","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"alvynben"},"content":"            \"   ██    ██   ██ ██      ██      ██ \\n\" +","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"alvynben"},"content":"            \"   ██    ██   ██ ██ ███████ ███████ \\n\";","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"alvynben"},"content":"    /** String of underscores to separate user input and Triss output */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"alvynben"},"content":"    public static final String SEPARATOR_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"alvynben"},"content":"    /** Boolean to track if user has said \"bye\" */","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"alvynben"},"content":"    private static boolean hasUserSaidBye \u003d false;","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"alvynben"},"content":"    /** Array to keep track of user\u0027s tasks */","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"alvynben"},"content":"    private static final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"alvynben"},"content":"    /** Length of the word \"todo\" */","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"alvynben"},"content":"    public static final int END_INDEX_OF_WORD_TODO \u003d 4;","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"alvynben"},"content":"    /** Length of the word \"deadline\" */","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"alvynben"},"content":"    public static final int END_INDEX_OF_WORD_DEADLINE \u003d 8;","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"alvynben"},"content":"    /** Length of the word \"event\" */","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"alvynben"},"content":"    public static final int END_INDEX_OF_WORD_EVENT \u003d 5;","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"alvynben"},"content":"     * Loops Triss into receiving user input and giving output messages.","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"alvynben"},"content":"     * It will only end once the user types \"bye\".","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"alvynben"},"content":"     * @param args No params currently used.","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"alvynben"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"alvynben"},"content":"        // Print LOGO and welcome text","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"alvynben"},"content":"        printWelcomeMessage();","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"alvynben"},"content":"        // Initialise user input reader","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"alvynben"},"content":"        Scanner in \u003d createNewInputReader();","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"alvynben"},"content":"        // Check for any stored data","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"alvynben"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"alvynben"},"content":"            initialiseDataStorage();","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"alvynben"},"content":"        } catch (TrissException error) {","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"alvynben"},"content":"            System.out.println(error.getMessage());","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"alvynben"},"content":"        } catch (IOException error) {","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"alvynben"},"content":"            System.out.println(\"Tasks storage has been corrupted! Try restarting.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"alvynben"},"content":"        // While user has not said \"bye\", check for next line of input","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"alvynben"},"content":"        while (!hasUserSaidBye) {","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":65,"author":{"gitId":"alvynben"},"content":"            // Get the next line of input, and parse it to find the user\u0027s command (first word in input)","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"alvynben"},"content":"            String userInput \u003d getUserInput(in);","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"alvynben"},"content":"            String userCommand \u003d parseUserInput(userInput, 0);","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"alvynben"},"content":"            printLine(SEPARATOR_LINE);","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"alvynben"},"content":"            // Perform actions based on user\u0027s command","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"alvynben"},"content":"            switch (userCommand) {","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"alvynben"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"alvynben"},"content":"                handleUserShuttingDown();","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"alvynben"},"content":"                printShutdownMessage();","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"alvynben"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"alvynben"},"content":"            case \"list\":","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"alvynben"},"content":"                printAllTasks();","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"alvynben"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"alvynben"},"content":"            case \"done\":","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"alvynben"},"content":"                handleUserMarkingTaskAsDone(userInput);","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"alvynben"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"alvynben"},"content":"            case \"delete\":","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"alvynben"},"content":"                handleUserDeletingTask(userInput);","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"alvynben"},"content":"                break;","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"alvynben"},"content":"            default:","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"alvynben"},"content":"                try {","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"alvynben"},"content":"                    handleUserCreatingTask(userInput);","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"alvynben"},"content":"                } catch (TrissException exception) {","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"alvynben"},"content":"                    printLine(exception.getMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"alvynben"},"content":"                }","lastModifiedDate":"2021-09-06"},{"lineNumber":91,"author":{"gitId":"alvynben"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"alvynben"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"alvynben"},"content":"            printLine(SEPARATOR_LINE);","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":100,"author":{"gitId":"alvynben"},"content":"    private static void handleUserDeletingTask(String userInput) {","lastModifiedDate":"2021-09-11"},{"lineNumber":101,"author":{"gitId":"alvynben"},"content":"        // Get number of task after the term \"done\"","lastModifiedDate":"2021-09-11"},{"lineNumber":102,"author":{"gitId":"alvynben"},"content":"        int indexOfRemovableTask;","lastModifiedDate":"2021-09-11"},{"lineNumber":103,"author":{"gitId":"alvynben"},"content":"        // Throw exception if user did not type a number after \"done\"","lastModifiedDate":"2021-09-11"},{"lineNumber":104,"author":{"gitId":"alvynben"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":105,"author":{"gitId":"alvynben"},"content":"            indexOfRemovableTask \u003d Integer.parseInt(parseUserInput(userInput, 1)) - 1;","lastModifiedDate":"2021-09-11"},{"lineNumber":106,"author":{"gitId":"alvynben"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":107,"author":{"gitId":"alvynben"},"content":"            printLine(\"Ach, nee! That task does not exist.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":108,"author":{"gitId":"alvynben"},"content":"            return;","lastModifiedDate":"2021-09-11"},{"lineNumber":109,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":110,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":111,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":112,"author":{"gitId":"alvynben"},"content":"        // If task does not exist, do not delete any task","lastModifiedDate":"2021-09-11"},{"lineNumber":113,"author":{"gitId":"alvynben"},"content":"        if (indexOfRemovableTask \u003e\u003d tasks.size() || indexOfRemovableTask \u003c 0) {","lastModifiedDate":"2021-09-11"},{"lineNumber":114,"author":{"gitId":"alvynben"},"content":"            printLine(\"Apologies! That task does not exist.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":115,"author":{"gitId":"alvynben"},"content":"            return;","lastModifiedDate":"2021-09-11"},{"lineNumber":116,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":117,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":118,"author":{"gitId":"alvynben"},"content":"        // Find task since it exists","lastModifiedDate":"2021-09-11"},{"lineNumber":119,"author":{"gitId":"alvynben"},"content":"        Task chosenTask \u003d tasks.get(indexOfRemovableTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":120,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":121,"author":{"gitId":"alvynben"},"content":"        // Remove task from tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":122,"author":{"gitId":"alvynben"},"content":"        tasks.remove(chosenTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":123,"author":{"gitId":"alvynben"},"content":"        printLine(\"Wunderbar! This task has been deleted:\");","lastModifiedDate":"2021-09-11"},{"lineNumber":124,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":125,"author":{"gitId":"alvynben"},"content":"        // Print out the task in the following format: \"    [X] Task\"","lastModifiedDate":"2021-09-11"},{"lineNumber":126,"author":{"gitId":"alvynben"},"content":"        printLine(\"    \" + chosenTask.printTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":127,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":128,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":129,"author":{"gitId":"alvynben"},"content":"    private static void initialiseDataStorage() throws IOException, TrissException {","lastModifiedDate":"2021-09-11"},{"lineNumber":130,"author":{"gitId":"alvynben"},"content":"        File dataDirectory \u003d new File(\"data\");","lastModifiedDate":"2021-09-11"},{"lineNumber":131,"author":{"gitId":"alvynben"},"content":"        File storedTasks \u003d new File(\"data/storedtasks.txt\");","lastModifiedDate":"2021-09-11"},{"lineNumber":132,"author":{"gitId":"alvynben"},"content":"        if (dataDirectory.exists()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":133,"author":{"gitId":"alvynben"},"content":"            Scanner fileReader \u003d new Scanner(storedTasks);","lastModifiedDate":"2021-09-11"},{"lineNumber":134,"author":{"gitId":"alvynben"},"content":"            while (fileReader.hasNext()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":135,"author":{"gitId":"alvynben"},"content":"                String lineInFile \u003d fileReader.nextLine();","lastModifiedDate":"2021-09-11"},{"lineNumber":136,"author":{"gitId":"alvynben"},"content":"                String[] taskDetails \u003d lineInFile.split(\",\");","lastModifiedDate":"2021-09-11"},{"lineNumber":137,"author":{"gitId":"alvynben"},"content":"                switch (taskDetails[0]) {","lastModifiedDate":"2021-09-11"},{"lineNumber":138,"author":{"gitId":"alvynben"},"content":"                case \"[T]\":","lastModifiedDate":"2021-09-11"},{"lineNumber":139,"author":{"gitId":"alvynben"},"content":"                    createNewTodo(\"todo \" + taskDetails[2], true);","lastModifiedDate":"2021-09-11"},{"lineNumber":140,"author":{"gitId":"alvynben"},"content":"                    break;","lastModifiedDate":"2021-09-11"},{"lineNumber":141,"author":{"gitId":"alvynben"},"content":"                case \"[E]\":","lastModifiedDate":"2021-09-11"},{"lineNumber":142,"author":{"gitId":"alvynben"},"content":"                    createNewEvent(\"event \" + taskDetails[2] + \" /\" + taskDetails[3], true);","lastModifiedDate":"2021-09-11"},{"lineNumber":143,"author":{"gitId":"alvynben"},"content":"                    break;","lastModifiedDate":"2021-09-11"},{"lineNumber":144,"author":{"gitId":"alvynben"},"content":"                case \"[D]\":","lastModifiedDate":"2021-09-11"},{"lineNumber":145,"author":{"gitId":"alvynben"},"content":"                    createNewDeadline(\"deadline \" + taskDetails[2] + \" /\" + taskDetails[3], true);","lastModifiedDate":"2021-09-11"},{"lineNumber":146,"author":{"gitId":"alvynben"},"content":"                    break;","lastModifiedDate":"2021-09-11"},{"lineNumber":147,"author":{"gitId":"alvynben"},"content":"                default:","lastModifiedDate":"2021-09-11"},{"lineNumber":148,"author":{"gitId":"alvynben"},"content":"                    throw new TrissException(\"Tasks storage has been corrupted! Try restarting.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":149,"author":{"gitId":"alvynben"},"content":"                }","lastModifiedDate":"2021-09-11"},{"lineNumber":150,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":151,"author":{"gitId":"alvynben"},"content":"                if (taskDetails[1].equals(\"[X]\")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":152,"author":{"gitId":"alvynben"},"content":"                    tasks.get(tasks.size() - 1).setDone(true);","lastModifiedDate":"2021-09-11"},{"lineNumber":153,"author":{"gitId":"alvynben"},"content":"                }","lastModifiedDate":"2021-09-11"},{"lineNumber":154,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":155,"author":{"gitId":"alvynben"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":156,"author":{"gitId":"alvynben"},"content":"        } else {","lastModifiedDate":"2021-09-11"},{"lineNumber":157,"author":{"gitId":"alvynben"},"content":"            dataDirectory.mkdir();","lastModifiedDate":"2021-09-11"},{"lineNumber":158,"author":{"gitId":"alvynben"},"content":"            FileWriter fw \u003d new FileWriter(storedTasks.getAbsoluteFile());","lastModifiedDate":"2021-09-11"},{"lineNumber":159,"author":{"gitId":"alvynben"},"content":"            fw.close();","lastModifiedDate":"2021-09-11"},{"lineNumber":160,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":161,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":162,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":163,"author":{"gitId":"alvynben"},"content":"    private static void handleUserShuttingDown() {","lastModifiedDate":"2021-09-11"},{"lineNumber":164,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":165,"author":{"gitId":"alvynben"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":166,"author":{"gitId":"alvynben"},"content":"            FileWriter fw \u003d new FileWriter(\"data/storedtasks.txt\");","lastModifiedDate":"2021-09-11"},{"lineNumber":167,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":168,"author":{"gitId":"alvynben"},"content":"            for (Task task:tasks) {","lastModifiedDate":"2021-09-11"},{"lineNumber":169,"author":{"gitId":"alvynben"},"content":"                fw.write(task.printTaskForStoring() + System.lineSeparator());","lastModifiedDate":"2021-09-11"},{"lineNumber":170,"author":{"gitId":"alvynben"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":171,"author":{"gitId":"alvynben"},"content":"            fw.close();","lastModifiedDate":"2021-09-11"},{"lineNumber":172,"author":{"gitId":"alvynben"},"content":"        } catch (IOException error) {","lastModifiedDate":"2021-09-11"},{"lineNumber":173,"author":{"gitId":"alvynben"},"content":"            System.out.println(\"Tasks storage has been corrupted! Try restarting.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":174,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":175,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":176,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":177,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":178,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":179,"author":{"gitId":"alvynben"},"content":"     * Create a new Scanner to read user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":180,"author":{"gitId":"alvynben"},"content":"     * @return A new Scanner.","lastModifiedDate":"2021-08-31"},{"lineNumber":181,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":182,"author":{"gitId":"alvynben"},"content":"    private static Scanner createNewInputReader() {","lastModifiedDate":"2021-08-31"},{"lineNumber":183,"author":{"gitId":"alvynben"},"content":"        return new Scanner(System.in);","lastModifiedDate":"2021-08-31"},{"lineNumber":184,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":185,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":186,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":187,"author":{"gitId":"alvynben"},"content":"     * Print a string, then terminates the line.","lastModifiedDate":"2021-08-31"},{"lineNumber":188,"author":{"gitId":"alvynben"},"content":"     * @param s The string to be printed.","lastModifiedDate":"2021-08-31"},{"lineNumber":189,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":190,"author":{"gitId":"alvynben"},"content":"    private static void printLine(String s) {","lastModifiedDate":"2021-08-31"},{"lineNumber":191,"author":{"gitId":"alvynben"},"content":"        System.out.println(s);","lastModifiedDate":"2021-08-31"},{"lineNumber":192,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":193,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":194,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":195,"author":{"gitId":"alvynben"},"content":"     * Parse the user input and return the word in the index the user wants.","lastModifiedDate":"2021-08-31"},{"lineNumber":196,"author":{"gitId":"alvynben"},"content":"     * @param userInput The user input to be parsed.","lastModifiedDate":"2021-08-31"},{"lineNumber":197,"author":{"gitId":"alvynben"},"content":"     * @param i The index of the word in the user input to be returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":198,"author":{"gitId":"alvynben"},"content":"     * @return Parsed string from user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":199,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":200,"author":{"gitId":"alvynben"},"content":"    private static String parseUserInput(String userInput, int i) {","lastModifiedDate":"2021-08-31"},{"lineNumber":201,"author":{"gitId":"alvynben"},"content":"        return userInput.split(\" \")[i];","lastModifiedDate":"2021-08-31"},{"lineNumber":202,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":203,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":204,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":205,"author":{"gitId":"alvynben"},"content":"     * Read the next line of user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":206,"author":{"gitId":"alvynben"},"content":"     * If the user input is blank, asks user for input again.","lastModifiedDate":"2021-08-31"},{"lineNumber":207,"author":{"gitId":"alvynben"},"content":"     * @param in The InputReader (Scanner) that will be used to read the next line.","lastModifiedDate":"2021-08-31"},{"lineNumber":208,"author":{"gitId":"alvynben"},"content":"     * @return Valid user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":209,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":210,"author":{"gitId":"alvynben"},"content":"    private static String getUserInput(Scanner in) {","lastModifiedDate":"2021-08-31"},{"lineNumber":211,"author":{"gitId":"alvynben"},"content":"        /* String variable to store user input */","lastModifiedDate":"2021-08-31"},{"lineNumber":212,"author":{"gitId":"alvynben"},"content":"        String userInput \u003d in.nextLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":213,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":214,"author":{"gitId":"alvynben"},"content":"        while (userInput.isBlank()) {","lastModifiedDate":"2021-08-31"},{"lineNumber":215,"author":{"gitId":"alvynben"},"content":"            printLine(\"Stop with the silent treatment! Say something?\");","lastModifiedDate":"2021-08-31"},{"lineNumber":216,"author":{"gitId":"alvynben"},"content":"            printLine(SEPARATOR_LINE);","lastModifiedDate":"2021-08-31"},{"lineNumber":217,"author":{"gitId":"alvynben"},"content":"            userInput \u003d in.nextLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":218,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":219,"author":{"gitId":"alvynben"},"content":"        return userInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":220,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":221,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":222,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":223,"author":{"gitId":"alvynben"},"content":"     * Creates new task depending on first word in user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":224,"author":{"gitId":"alvynben"},"content":"     * @param userInput The user\u0027s input.","lastModifiedDate":"2021-08-31"},{"lineNumber":225,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":226,"author":{"gitId":"alvynben"},"content":"    private static void handleUserCreatingTask(String userInput) throws TrissException {","lastModifiedDate":"2021-09-06"},{"lineNumber":227,"author":{"gitId":"alvynben"},"content":"        String taskType \u003d parseUserInput(userInput, 0);","lastModifiedDate":"2021-08-31"},{"lineNumber":228,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":229,"author":{"gitId":"alvynben"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-31"},{"lineNumber":230,"author":{"gitId":"alvynben"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-31"},{"lineNumber":231,"author":{"gitId":"alvynben"},"content":"            createNewDeadline(userInput, false);","lastModifiedDate":"2021-09-11"},{"lineNumber":232,"author":{"gitId":"alvynben"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":233,"author":{"gitId":"alvynben"},"content":"        case \"event\":","lastModifiedDate":"2021-08-31"},{"lineNumber":234,"author":{"gitId":"alvynben"},"content":"            createNewEvent(userInput, false);","lastModifiedDate":"2021-09-11"},{"lineNumber":235,"author":{"gitId":"alvynben"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":236,"author":{"gitId":"alvynben"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-31"},{"lineNumber":237,"author":{"gitId":"alvynben"},"content":"            createNewTodo(userInput, false);","lastModifiedDate":"2021-09-11"},{"lineNumber":238,"author":{"gitId":"alvynben"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":239,"author":{"gitId":"alvynben"},"content":"        default:","lastModifiedDate":"2021-08-31"},{"lineNumber":240,"author":{"gitId":"alvynben"},"content":"            String errorMessage \u003d \"Oof, I didn\u0027t understand your command! Let\u0027s try that again.\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":241,"author":{"gitId":"alvynben"},"content":"                    + \" \\n\" + \"Type a todo in this format:\\n\" + \"    todo Eat with Friends\";","lastModifiedDate":"2021-09-06"},{"lineNumber":242,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(errorMessage);","lastModifiedDate":"2021-09-06"},{"lineNumber":243,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":244,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":245,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":246,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":247,"author":{"gitId":"alvynben"},"content":"     * Creates a new todo based on user\u0027s input.","lastModifiedDate":"2021-08-31"},{"lineNumber":248,"author":{"gitId":"alvynben"},"content":"     * If user did not type in this format: \"todo Eat with Friends\", it asks the user to try again.","lastModifiedDate":"2021-08-31"},{"lineNumber":249,"author":{"gitId":"alvynben"},"content":"     * @param userInput Any user input starting with the words \"todo\"","lastModifiedDate":"2021-08-31"},{"lineNumber":250,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":251,"author":{"gitId":"alvynben"},"content":"    private static void createNewTodo(String userInput, boolean isSilent) throws TrissException {","lastModifiedDate":"2021-09-11"},{"lineNumber":252,"author":{"gitId":"alvynben"},"content":"        String taskName;","lastModifiedDate":"2021-08-31"},{"lineNumber":253,"author":{"gitId":"alvynben"},"content":"        taskName \u003d userInput.substring(END_INDEX_OF_WORD_TODO).trim();","lastModifiedDate":"2021-08-28"},{"lineNumber":254,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":255,"author":{"gitId":"alvynben"},"content":"        if (taskName.isBlank()) {","lastModifiedDate":"2021-08-31"},{"lineNumber":256,"author":{"gitId":"alvynben"},"content":"            String errorMessage \u003d \"You didn\u0027t specify a name for your todo! Let\u0027s try that again.\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":257,"author":{"gitId":"alvynben"},"content":"                    + \" \\n\" + \"Type a todo in this format:\\n\" + \"    todo Eat with Friends\";","lastModifiedDate":"2021-09-06"},{"lineNumber":258,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(errorMessage);","lastModifiedDate":"2021-09-06"},{"lineNumber":259,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":260,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":261,"author":{"gitId":"alvynben"},"content":"        // Add todo to tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":262,"author":{"gitId":"alvynben"},"content":"        Task newTodo \u003d new Todo(taskName);","lastModifiedDate":"2021-09-11"},{"lineNumber":263,"author":{"gitId":"alvynben"},"content":"        tasks.add(newTodo);","lastModifiedDate":"2021-09-11"},{"lineNumber":264,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":265,"author":{"gitId":"alvynben"},"content":"        // Then, echo the task if not silent","lastModifiedDate":"2021-09-11"},{"lineNumber":266,"author":{"gitId":"alvynben"},"content":"        if (!isSilent) {","lastModifiedDate":"2021-09-11"},{"lineNumber":267,"author":{"gitId":"alvynben"},"content":"            printLine(\"I\u0027ve added: \" + newTodo.printTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":268,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":269,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":270,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":271,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":272,"author":{"gitId":"alvynben"},"content":"     * Creates a new event based on the user\u0027s input.","lastModifiedDate":"2021-08-31"},{"lineNumber":273,"author":{"gitId":"alvynben"},"content":"     * User has to type the input in this format: \"event Stay in a log cabin /Friday the 13th\".","lastModifiedDate":"2021-08-31"},{"lineNumber":274,"author":{"gitId":"alvynben"},"content":"     * If the user types incorrectly, it asks the user to try again.","lastModifiedDate":"2021-08-31"},{"lineNumber":275,"author":{"gitId":"alvynben"},"content":"     * @param userInput Any user input starting with the word \"event\".","lastModifiedDate":"2021-08-31"},{"lineNumber":276,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":277,"author":{"gitId":"alvynben"},"content":"    private static void createNewEvent(String userInput, boolean isSilent) throws TrissException {","lastModifiedDate":"2021-09-11"},{"lineNumber":278,"author":{"gitId":"alvynben"},"content":"        String taskName;","lastModifiedDate":"2021-08-31"},{"lineNumber":279,"author":{"gitId":"alvynben"},"content":"        String eventTiming;","lastModifiedDate":"2021-08-31"},{"lineNumber":280,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":281,"author":{"gitId":"alvynben"},"content":"        // Parse the task\u0027s name from the user\u0027s input","lastModifiedDate":"2021-09-06"},{"lineNumber":282,"author":{"gitId":"alvynben"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":283,"author":{"gitId":"alvynben"},"content":"            taskName \u003d userInput.substring(END_INDEX_OF_WORD_EVENT, userInput.indexOf(\"/\")).trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":284,"author":{"gitId":"alvynben"},"content":"            eventTiming \u003d userInput.substring(userInput.indexOf(\"/\") + 1).trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":285,"author":{"gitId":"alvynben"},"content":"        } catch (Exception error) {","lastModifiedDate":"2021-09-06"},{"lineNumber":286,"author":{"gitId":"alvynben"},"content":"            String errorMessage \u003d \"You didn\u0027t format your event properly!\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":287,"author":{"gitId":"alvynben"},"content":"                    + \" \\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":288,"author":{"gitId":"alvynben"},"content":"                    + \"Try inserting an event in this format:\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":289,"author":{"gitId":"alvynben"},"content":"                    + \"    event Stay in a log cabin /Friday the 13th\";","lastModifiedDate":"2021-09-06"},{"lineNumber":290,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(errorMessage);","lastModifiedDate":"2021-09-06"},{"lineNumber":291,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":292,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":293,"author":{"gitId":"alvynben"},"content":"        // Catch other possible errors","lastModifiedDate":"2021-09-06"},{"lineNumber":294,"author":{"gitId":"alvynben"},"content":"        // Throw error if user did not type in a name for the task","lastModifiedDate":"2021-09-06"},{"lineNumber":295,"author":{"gitId":"alvynben"},"content":"        if (taskName.isBlank()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":296,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(\"Your event name is blank! Let\u0027s try that again.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":297,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":298,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":299,"author":{"gitId":"alvynben"},"content":"        // Throw error if user did not type in a timing for the event","lastModifiedDate":"2021-09-06"},{"lineNumber":300,"author":{"gitId":"alvynben"},"content":"        if (eventTiming.isBlank()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":301,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(\"You didn\u0027t insert a date in your event! Let\u0027s try that again.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":302,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":303,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":304,"author":{"gitId":"alvynben"},"content":"        // Add event to tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":305,"author":{"gitId":"alvynben"},"content":"        Event newEvent \u003d new Event(taskName, eventTiming);","lastModifiedDate":"2021-09-11"},{"lineNumber":306,"author":{"gitId":"alvynben"},"content":"        tasks.add(newEvent);","lastModifiedDate":"2021-09-11"},{"lineNumber":307,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":308,"author":{"gitId":"alvynben"},"content":"        // Then, echo the task if not silent","lastModifiedDate":"2021-09-11"},{"lineNumber":309,"author":{"gitId":"alvynben"},"content":"        if (!isSilent) {","lastModifiedDate":"2021-09-11"},{"lineNumber":310,"author":{"gitId":"alvynben"},"content":"            printLine(\"I\u0027ve added: \" + newEvent.printTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":311,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":312,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":313,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":314,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":315,"author":{"gitId":"alvynben"},"content":"     * Creates a new deadline based on the user\u0027s input.","lastModifiedDate":"2021-08-31"},{"lineNumber":316,"author":{"gitId":"alvynben"},"content":"     * User has to type the input in this format: \"deadline Meet with Friends /12th July\".","lastModifiedDate":"2021-08-31"},{"lineNumber":317,"author":{"gitId":"alvynben"},"content":"     * If the user types incorrectly, it asks the user to try again.","lastModifiedDate":"2021-08-31"},{"lineNumber":318,"author":{"gitId":"alvynben"},"content":"     * @param userInput Any user input starting with the word \"deadline\".","lastModifiedDate":"2021-08-31"},{"lineNumber":319,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":320,"author":{"gitId":"alvynben"},"content":"    private static void createNewDeadline(String userInput, boolean isSilent) throws TrissException {","lastModifiedDate":"2021-09-11"},{"lineNumber":321,"author":{"gitId":"alvynben"},"content":"        String deadlineDate;","lastModifiedDate":"2021-08-31"},{"lineNumber":322,"author":{"gitId":"alvynben"},"content":"        String taskName;","lastModifiedDate":"2021-08-31"},{"lineNumber":323,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":324,"author":{"gitId":"alvynben"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":325,"author":{"gitId":"alvynben"},"content":"            deadlineDate \u003d userInput.substring(userInput.indexOf(\"/\") + 1).trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":326,"author":{"gitId":"alvynben"},"content":"            taskName \u003d userInput.substring(END_INDEX_OF_WORD_DEADLINE, userInput.indexOf(\"/\")).trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":327,"author":{"gitId":"alvynben"},"content":"        } catch (Exception error) {","lastModifiedDate":"2021-09-06"},{"lineNumber":328,"author":{"gitId":"alvynben"},"content":"            String errorMessage \u003d \"You didn\u0027t write your deadline properly!\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":329,"author":{"gitId":"alvynben"},"content":"                    + \" \\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":330,"author":{"gitId":"alvynben"},"content":"                    + \"Try inserting a deadline in this format:\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":331,"author":{"gitId":"alvynben"},"content":"                    + \"    deadline Meet with Friends /12th July\";","lastModifiedDate":"2021-09-06"},{"lineNumber":332,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(errorMessage);","lastModifiedDate":"2021-09-06"},{"lineNumber":333,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":334,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":335,"author":{"gitId":"alvynben"},"content":"        // Catch other possible errors","lastModifiedDate":"2021-09-06"},{"lineNumber":336,"author":{"gitId":"alvynben"},"content":"        // Throw error if user did not type in a name for the task","lastModifiedDate":"2021-09-06"},{"lineNumber":337,"author":{"gitId":"alvynben"},"content":"        if (taskName.isBlank()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":338,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(\"Your deadline name is blank! Let\u0027s try that again.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":339,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":340,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":341,"author":{"gitId":"alvynben"},"content":"        // Throw error if user did not type in a timing for the event","lastModifiedDate":"2021-09-06"},{"lineNumber":342,"author":{"gitId":"alvynben"},"content":"        if (deadlineDate.isBlank()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":343,"author":{"gitId":"alvynben"},"content":"            throw new TrissException(\"You didn\u0027t insert a date in your deadline! Let\u0027s try that again.\");","lastModifiedDate":"2021-09-06"},{"lineNumber":344,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":345,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":346,"author":{"gitId":"alvynben"},"content":"        // Add deadline to tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":347,"author":{"gitId":"alvynben"},"content":"        Deadline newDeadline \u003d new Deadline(taskName, deadlineDate);","lastModifiedDate":"2021-09-11"},{"lineNumber":348,"author":{"gitId":"alvynben"},"content":"        tasks.add(newDeadline);","lastModifiedDate":"2021-09-11"},{"lineNumber":349,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":350,"author":{"gitId":"alvynben"},"content":"        // Then, echo the task if not silent","lastModifiedDate":"2021-09-11"},{"lineNumber":351,"author":{"gitId":"alvynben"},"content":"        if (!isSilent) {","lastModifiedDate":"2021-09-11"},{"lineNumber":352,"author":{"gitId":"alvynben"},"content":"            printLine(\"I\u0027ve added: \" + newDeadline.printTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":353,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":354,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":355,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":356,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":357,"author":{"gitId":"alvynben"},"content":"     * Mark user task as done, if request is valid.","lastModifiedDate":"2021-08-31"},{"lineNumber":358,"author":{"gitId":"alvynben"},"content":"     * Stops if user did not specify a task.","lastModifiedDate":"2021-08-31"},{"lineNumber":359,"author":{"gitId":"alvynben"},"content":"     * Stops if user\u0027s chosen task does not exist.","lastModifiedDate":"2021-09-11"},{"lineNumber":360,"author":{"gitId":"alvynben"},"content":"     * Informs user if task was already done.","lastModifiedDate":"2021-08-31"},{"lineNumber":361,"author":{"gitId":"alvynben"},"content":"     * @param userInput Any user input starting with \"done\"","lastModifiedDate":"2021-08-31"},{"lineNumber":362,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":363,"author":{"gitId":"alvynben"},"content":"    private static void handleUserMarkingTaskAsDone(String userInput) {","lastModifiedDate":"2021-08-27"},{"lineNumber":364,"author":{"gitId":"alvynben"},"content":"        // Get number of task after the term \"done\"","lastModifiedDate":"2021-08-21"},{"lineNumber":365,"author":{"gitId":"alvynben"},"content":"        int indexOfCompletedTask;","lastModifiedDate":"2021-08-27"},{"lineNumber":366,"author":{"gitId":"alvynben"},"content":"        // Throw exception if user did not type a number after \"done\"","lastModifiedDate":"2021-08-27"},{"lineNumber":367,"author":{"gitId":"alvynben"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":368,"author":{"gitId":"alvynben"},"content":"            indexOfCompletedTask \u003d Integer.parseInt(parseUserInput(userInput, 1)) - 1;","lastModifiedDate":"2021-08-31"},{"lineNumber":369,"author":{"gitId":"alvynben"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":370,"author":{"gitId":"alvynben"},"content":"            printLine(\"Ach, nee! That task does not exist.\");","lastModifiedDate":"2021-08-31"},{"lineNumber":371,"author":{"gitId":"alvynben"},"content":"            return;","lastModifiedDate":"2021-08-27"},{"lineNumber":372,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":373,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":374,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":375,"author":{"gitId":"alvynben"},"content":"        // If task does not exist, do not delete any task","lastModifiedDate":"2021-08-21"},{"lineNumber":376,"author":{"gitId":"alvynben"},"content":"        if (indexOfCompletedTask \u003e\u003d tasks.size() || indexOfCompletedTask \u003c 0) {","lastModifiedDate":"2021-09-11"},{"lineNumber":377,"author":{"gitId":"alvynben"},"content":"            printLine(\"Apologies! That task does not exist.\");","lastModifiedDate":"2021-08-31"},{"lineNumber":378,"author":{"gitId":"alvynben"},"content":"            return;","lastModifiedDate":"2021-08-27"},{"lineNumber":379,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":380,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":381,"author":{"gitId":"alvynben"},"content":"        // Find task since it exists","lastModifiedDate":"2021-08-27"},{"lineNumber":382,"author":{"gitId":"alvynben"},"content":"        Task chosenTask \u003d tasks.get(indexOfCompletedTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":383,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":384,"author":{"gitId":"alvynben"},"content":"        // If task was already done, let user know","lastModifiedDate":"2021-08-23"},{"lineNumber":385,"author":{"gitId":"alvynben"},"content":"        if (chosenTask.isDone()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":386,"author":{"gitId":"alvynben"},"content":"            printLine(\"Oh! This task was already marked as done:\");","lastModifiedDate":"2021-08-31"},{"lineNumber":387,"author":{"gitId":"alvynben"},"content":"            // Print out the task in the following format: \"    [X] Task\"","lastModifiedDate":"2021-08-28"},{"lineNumber":388,"author":{"gitId":"alvynben"},"content":"            printLine(\"    \" + chosenTask.printTask());","lastModifiedDate":"2021-08-31"},{"lineNumber":389,"author":{"gitId":"alvynben"},"content":"            return;","lastModifiedDate":"2021-08-27"},{"lineNumber":390,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":391,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":392,"author":{"gitId":"alvynben"},"content":"        // If task exists, and is not done, mark it as done","lastModifiedDate":"2021-08-27"},{"lineNumber":393,"author":{"gitId":"alvynben"},"content":"        chosenTask.setDone(true);","lastModifiedDate":"2021-08-21"},{"lineNumber":394,"author":{"gitId":"alvynben"},"content":"        printLine(\"Wunderbar! This task has been marked as done:\");","lastModifiedDate":"2021-08-31"},{"lineNumber":395,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":396,"author":{"gitId":"alvynben"},"content":"        // Print out the task in the following format: \"    [X] Task\"","lastModifiedDate":"2021-08-27"},{"lineNumber":397,"author":{"gitId":"alvynben"},"content":"        printLine(\"    \" + chosenTask.printTask());","lastModifiedDate":"2021-08-31"},{"lineNumber":398,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":399,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":400,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":401,"author":{"gitId":"alvynben"},"content":"     * Prints all tasks stored in Task Array tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":402,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":403,"author":{"gitId":"alvynben"},"content":"    private static void printAllTasks() {","lastModifiedDate":"2021-08-27"},{"lineNumber":404,"author":{"gitId":"alvynben"},"content":"        // If user said \"list\", print a list of all saved tasks","lastModifiedDate":"2021-08-27"},{"lineNumber":405,"author":{"gitId":"alvynben"},"content":"        for (Task task:tasks) {","lastModifiedDate":"2021-09-11"},{"lineNumber":406,"author":{"gitId":"alvynben"},"content":"            printLine(tasks.indexOf(task) + 1 + \".\" + task.printTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":407,"author":{"gitId":"alvynben"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":408,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":409,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":410,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":411,"author":{"gitId":"alvynben"},"content":"     * Prints shutdown message.","lastModifiedDate":"2021-08-31"},{"lineNumber":412,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":413,"author":{"gitId":"alvynben"},"content":"    private static void printShutdownMessage() {","lastModifiedDate":"2021-08-27"},{"lineNumber":414,"author":{"gitId":"alvynben"},"content":"        // If user said \"bye\", update hasUserSaidBye and print closing phrase","lastModifiedDate":"2021-08-27"},{"lineNumber":415,"author":{"gitId":"alvynben"},"content":"        hasUserSaidBye \u003d true;","lastModifiedDate":"2021-08-27"},{"lineNumber":416,"author":{"gitId":"alvynben"},"content":"        printLine(\"Thanks for coming. Auf wiedersehen!\");","lastModifiedDate":"2021-08-31"},{"lineNumber":417,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":418,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":419,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":420,"author":{"gitId":"alvynben"},"content":"     * Prints welcome message.","lastModifiedDate":"2021-08-31"},{"lineNumber":421,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":422,"author":{"gitId":"alvynben"},"content":"    private static void printWelcomeMessage() {","lastModifiedDate":"2021-08-27"},{"lineNumber":423,"author":{"gitId":"alvynben"},"content":"        printLine(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2021-08-31"},{"lineNumber":424,"author":{"gitId":"alvynben"},"content":"        printLine(SEPARATOR_LINE);","lastModifiedDate":"2021-08-31"},{"lineNumber":425,"author":{"gitId":"alvynben"},"content":"        printLine(\"Hello! I\u0027m Triss :)\");","lastModifiedDate":"2021-08-31"},{"lineNumber":426,"author":{"gitId":"alvynben"},"content":"        printLine(\"What can I do for you?\");","lastModifiedDate":"2021-08-31"},{"lineNumber":427,"author":{"gitId":"alvynben"},"content":"        printLine(SEPARATOR_LINE);","lastModifiedDate":"2021-08-31"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":429,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"alvynben":427,"-":2}},{"path":"src/main/java/triss/exception/TrissException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"package triss.exception;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"alvynben"},"content":"public class TrissException extends Exception{","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"alvynben"},"content":"    public TrissException(String errorMessage) {","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"alvynben"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"alvynben"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"alvynben":8}},{"path":"src/main/java/triss/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"package triss.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"alvynben"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"alvynben"},"content":"    /** Represents the date this task should be done by */","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"alvynben"},"content":"    private String dueDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"alvynben"},"content":"     * Creates a deadline with task type [D], and dueDate based on user\u0027s input.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"alvynben"},"content":"     * @param name The name of the deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"alvynben"},"content":"     * @param dueDate The due date of the deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"alvynben"},"content":"    public Deadline(String name, String dueDate) {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"alvynben"},"content":"        super(name);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"alvynben"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"alvynben"},"content":"        this.typeOfTask \u003d \"[D]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"alvynben"},"content":"     * Get the due date of the deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"alvynben"},"content":"     * @return Due date of the deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"alvynben"},"content":"    public String getDueDate() {","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"alvynben"},"content":"        return dueDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"alvynben"},"content":"     * Returns the deadline in a human-readable format.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"alvynben"},"content":"     * @return [Type of Task][Completion Status] [Name of Task] ([Due Date of Task])","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"alvynben"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"alvynben"},"content":"        return this.getTypeOfTask() + this.getDoneStatusAsSymbol() + \" \"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"alvynben"},"content":"                + this.getName() + \" (\" + this.getDueDate() + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"alvynben"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"alvynben"},"content":"    public String printTaskForStoring() {","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"alvynben"},"content":"        return getTypeOfTask() + \",\" + getDoneStatusAsSymbol()","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"alvynben"},"content":"                + \",\" + getName() + \",\" + getDueDate();","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"alvynben"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"alvynben":40}},{"path":"src/main/java/triss/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"package triss.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"alvynben"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"alvynben"},"content":"    /** The timing this event occurs at */","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"alvynben"},"content":"    private String timing;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"alvynben"},"content":"     * Creates a deadline with task type [E], and timing based on user\u0027s input.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"alvynben"},"content":"     * @param name The name of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"alvynben"},"content":"     * @param timing The timing of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"alvynben"},"content":"    public Event(String name, String timing) {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"alvynben"},"content":"        super(name);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"alvynben"},"content":"        this.timing \u003d timing;","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"alvynben"},"content":"        this.typeOfTask \u003d \"[E]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"alvynben"},"content":"     * Get the timing of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"alvynben"},"content":"     * @return Timing of the event.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"alvynben"},"content":"    public String getTiming() {","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"alvynben"},"content":"        return timing;","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"alvynben"},"content":"     * Returns the event in a human-readable format.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"alvynben"},"content":"     * @return [Type of Task][Completion Status] [Name of Task] ([Timing of Task])","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"alvynben"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"alvynben"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"alvynben"},"content":"        return this.getTypeOfTask() + this.getDoneStatusAsSymbol() + \" \"","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"alvynben"},"content":"                + this.getName() + \" (\" + this.getTiming() + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"alvynben"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"alvynben"},"content":"    public String printTaskForStoring() {","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"alvynben"},"content":"        return getTypeOfTask() + \",\" + getDoneStatusAsSymbol()","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"alvynben"},"content":"                + \",\" + getName() + \",\" + getTiming();","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"alvynben"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"alvynben":41}},{"path":"src/main/java/triss/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"package triss.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"alvynben"},"content":"public class Task {","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"alvynben"},"content":"    /** Name of task */","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"alvynben"},"content":"    private String name;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"alvynben"},"content":"    /** Whether the task has been completed */","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"alvynben"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"alvynben"},"content":"    /** Type of task stored as [\u0027Type\u0027] */","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"alvynben"},"content":"    protected String typeOfTask \u003d \"[T]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"alvynben"},"content":"     * Creates a task with the specified name.","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"alvynben"},"content":"     * @param name Name of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"alvynben"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"alvynben"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"alvynben"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"alvynben"},"content":"     * Get the name of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"alvynben"},"content":"     * @return Name of task.","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"alvynben"},"content":"    public String getName() {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"alvynben"},"content":"        return name;","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"alvynben"},"content":"     * Get the completion status of the task as a symbol.","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"alvynben"},"content":"     * @return \"[X]\" if done and \"[ ]\" if not done.","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"alvynben"},"content":"    public String getDoneStatusAsSymbol() {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"alvynben"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"alvynben"},"content":"     * Get the type of task.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"alvynben"},"content":"     * @return [T] if todo, [D] if deadline, [E] if event.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"alvynben"},"content":"    public String getTypeOfTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"alvynben"},"content":"        return typeOfTask;","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"alvynben"},"content":"     * Find out if task is done.","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"alvynben"},"content":"     * @return True if done or False is not done.","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"alvynben"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"alvynben"},"content":"        return isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"alvynben"},"content":"     * Change if task has been done.","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"alvynben"},"content":"     * @param done True if done or False if not done.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"alvynben"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"alvynben"},"content":"        isDone \u003d done;","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"alvynben"},"content":"     * Returns task in a human-readable format.","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"alvynben"},"content":"     * @return [Type of Task][Completion Status] [Name of Task]","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"alvynben"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"alvynben"},"content":"        return this.getTypeOfTask() + this.getDoneStatusAsSymbol() + \" \" + this.getName();","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"alvynben"},"content":"     * Returns task for storing in data/storedtasks.txt","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"alvynben"},"content":"     * @return [Type of Task],[Completion Status],[Name of Task]","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"alvynben"},"content":"    public String printTaskForStoring() {","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"alvynben"},"content":"        return getTypeOfTask() + \",\" + getDoneStatusAsSymbol() + \",\" + getName();","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"alvynben"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"alvynben":75}},{"path":"src/main/java/triss/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"package triss.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"alvynben"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"alvynben"},"content":"     * Creates a todo with task type [T].","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"alvynben"},"content":"     * @param name Name of the todo.","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"alvynben"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"alvynben"},"content":"        super(name);","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"alvynben"},"content":"        //","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"alvynben"},"content":"        this.typeOfTask \u003d \"[T]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"alvynben"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"alvynben"},"content":"     * Returns task in a human-readable format.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"alvynben"},"content":"     * @return [Type of Task][Completion Status] [Name of Task]","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"alvynben"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"alvynben"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"alvynben"},"content":"        return this.getTypeOfTask() + this.getDoneStatusAsSymbol() + \" \" + this.getName();","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"alvynben"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"alvynben"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"alvynben"},"content":"    public String printTaskForStoring() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"alvynben"},"content":"        return super.printTaskForStoring();","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"alvynben"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"alvynben"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"alvynben":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"alvynben"},"content":"todo eat","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"alvynben"},"content":"deadline pray /12th July","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"alvynben"},"content":"list","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"alvynben"},"content":"event love /Friday the 13th","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"alvynben"},"content":"done 1","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"alvynben"},"content":"done 2","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"alvynben"},"content":"list","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"alvynben"},"content":"done 3","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"alvynben"},"content":"done 4","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"alvynben"},"content":"list","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"alvynben"},"content":"done 1","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"alvynben"},"content":"done 2","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"alvynben"},"content":"list","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"alvynben"},"content":"bye","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"alvynben":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"alvynben"},"content":"java -classpath ..\\bin Triss \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"alvynben":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"alvynben"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/triss/*.java","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"alvynben"},"content":"java -classpath ../bin Triss \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"alvynben"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"alvynben":3,"-":31}}]
