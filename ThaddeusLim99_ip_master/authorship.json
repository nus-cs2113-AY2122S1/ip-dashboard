[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Command takes in the parsed input from the user and splits it into three categories.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" * They are the command type, description of the task and the date. Depending on the","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" * type of command, description and date may be empty. Command then returns the","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" * appropriate mesage to return to Logic class to output to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":" *","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"commandInput\"  type of command.","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"descriptionInput\" Y description of task.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"dateInput\" event date/deadline.","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":" * @return output message to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"public class Command extends Logic {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"    protected Boolean isBye;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    protected String command;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    protected String description;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"    protected String date;","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"    protected String returnString;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"    public Command(String commandInput, String descriptionInput, String dateInput) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"        this.command \u003d commandInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"        this.description \u003d descriptionInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"        this.date \u003d dateInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"        this.isBye \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"     * Executes the given command received from the Parser class.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the appropriate message to the Logic class.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return output message to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"    public String executeCommand() {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        switch (command) {","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"            isBye \u003d true;","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"            returnString \u003d Message.printExit();","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"            if (lIST_INDEX \u003c LIST_LENGTH) {","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"                Tasks[lIST_INDEX] \u003d new Todo(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"                lIST_INDEX++;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"Got it. I\u0027ve added this task:\\n\" + Tasks[lIST_INDEX - 1] + \"\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"                        + \"Now you have \" + String.valueOf(lIST_INDEX) + \" tasks in the list.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"                //\u003e\u003d 100 tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"List is full! :(\";","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"            if (lIST_INDEX \u003c LIST_LENGTH) {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"                Tasks[lIST_INDEX] \u003d new Deadline(description, date);","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"                lIST_INDEX++;","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"Got it. I\u0027ve added this task:\\n\" + Tasks[lIST_INDEX - 1] + \"\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"                        + \"Now you have \" + String.valueOf(lIST_INDEX) + \" tasks in the list.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"                //\u003e\u003d 100 tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"List is full! :(\";","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"event\":","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"            if (lIST_INDEX \u003c LIST_LENGTH) {","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"                Tasks[lIST_INDEX] \u003d new Event(description, date);","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"                lIST_INDEX++;","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"Got it. I\u0027ve added this task:\\n\" + Tasks[lIST_INDEX - 1] + \"\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"                        + \"Now you have \" + String.valueOf(lIST_INDEX) + \" tasks in the list.\";","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"                //\u003e\u003d 100 tasks","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"List is full! :(\";","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"list\":","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"            //no tasks in list","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"            if (lIST_INDEX \u003d\u003d 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"No tasks added yet! :)\";","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"ThaddeusLim99"},"content":"                //when there are tasks in list","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"                String listMessage \u003d \"Here is the list you requested!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"                for (int i \u003d 1; i \u003c\u003d lIST_INDEX; i++) {","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"                    listMessage +\u003d \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"                    listMessage +\u003d String.valueOf(i) + \".\";","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"                    listMessage +\u003d Tasks[i - 1];","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"                }","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d listMessage;","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"done\":","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"            int index \u003d Integer.parseInt(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"            //index cannot be \u003c\u003d 0","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"            if (index \u003c\u003d 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"Invalid index\";","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"ThaddeusLim99"},"content":"            } else if (index \u003c\u003d lIST_INDEX) {","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"                //valid index","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"                Tasks[index - 1].markDone();","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"                        + \"[X] \" + Tasks[index - 1].getDescription();","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"                //not enough tasks to make it to that index","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"                returnString \u003d \"No task at that index\";","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"        default:","lastModifiedDate":"2021-08-31"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"            returnString \u003d \"???\\n\" + \"I do not understand what you are saying\";","lastModifiedDate":"2021-08-31"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"        return returnString;","lastModifiedDate":"2021-08-31"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":106,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":108,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the boolean isBye as a way to tell Logic class when is it appropriate to exit the while loop.","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return boolean isBye.","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"    public boolean getExitStatus() {","lastModifiedDate":"2021-08-31"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"        return isBye;","lastModifiedDate":"2021-08-31"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":117}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Deadline class to represent a task which has a deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" * Parent class is Task class.","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" *","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"description\" the name of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"by\" deadline of task","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":" * @return modified message when the toString() method is called.","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"     * Overrides the toString() method.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return returns a modified message","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":26}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Duke class acts as entry point to programme.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"        //run logic of programme","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"        Logic logic \u003d new Logic();","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"        logic.run();","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ThaddeusLim99":6,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Event class to represent a task which has an event.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" * Parent class is Task class.","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" *","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"description\" the name of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"at\" event date","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":" * @return modified message when the toString() method is called.","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"    protected String at;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"     * Overrides the toString() method.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return returns a modified message","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":26}},{"path":"src/main/java/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Logic class runs the main logic of the programme.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"public class Logic {","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"    protected static int lIST_INDEX \u003d 0;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"    protected static int LIST_LENGTH \u003d 100;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"    private static UserInterface userInterface;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"    protected static Task[] Tasks \u003d new Task[LIST_LENGTH];","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"    public Logic() {","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"        userInterface \u003d new UserInterface();","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"     * Runs the main logic of the program.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"     * Welcome message is printed to user and programme enters a while loop to repeatedly get input","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"     * from the user and then correspondingly respond to them. Input is put through the Parser class","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"     * which then put through the Command class. The output of the Command class is given to the","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"     * UserInterface Class to print out the message to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"    public void run() {","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"        userInterface.printMessage(Message.printWelcome());","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"            //get input","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"            String inputCommand \u003d userInterface.getInput();","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"            //parse input","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"            Parser parseInput \u003d new Parser(inputCommand);","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"            //put parsed input into Command object","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"            Command commandHandler \u003d new Command(parseInput.getCommand(),parseInput.getDescription(),parseInput.getDate());","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"            //get appropriate message","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"            String commandMessage \u003dcommandHandler.executeCommand();","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"            //print out message","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"            userInterface.printMessage(commandMessage);","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"            //see whether to exit the program","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"            isExit \u003d commandHandler.getExitStatus();","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":41}},{"path":"src/main/java/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Contains common messages to be printed out.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" *","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" * @return output mesage to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"public class Message {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns an ASCII art of PEPE the frog.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the position is unset, NaN is returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return PEPE.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    public static String printPepe() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"        String poggers \u003d \"⠄⠰⠛⠋⢉⣡⣤⣄⡉⠓⢦⣀⠙⠉⠡⠔⠒⠛⠛⠛⠶⢶⣄⠘⢿⣷⣤⡈⠻⣧\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⢀⡔⠄⠄⠄⠙⣿⣿⣿⣷⣤⠉⠁⡀⠐⠒⢿⣿⣿⣿⣶⣄⡈⠳⢄⣹⣿⣿⣾⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⣼⠁⢠⡄⠄⠄⣿⣿⣿⣿⡟⠄⡐⠁⡀⠄⠈⣿⣿⣿⣿⣿⣷⣤⡈⠻⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⢻⡀⠈⠄⠄⣀⣿⣿⣿⡿⠃⠄⡇⠈⠛⠄⠄⣿⣿⣿⣿⣿⣿⠟⠋⣠⣶⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⢉⡓⠚⠛⠛⠋⣉⣩⣤⣤⣀⠑⠤⣤⣤⣾⣿⣿⣿⡿⠛⢁⣤⣾⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠈⠙⠛⠋⣭⣭⣶⣾⣿⣿⣿⣷⣦⢠⡍⠉⠉⢠⣤⣴⠚⢩⣴⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⢴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣭⣭⣭⣥⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⣴⣶⡶⠶⠶⠶⠶⠶⠶⠶⠶⣮⣭⣝⣛⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠙⣿⡄⠄⠄⢀⡤⠬⢭⣝⣒⢂⠭⣉⠻⠿⣷⣶⣦⣭⡛⣿⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠄⠸⣿⡇⠄⠸⣎⣁⣾⠿⠉⢀⠇⣸⣿⣿⢆⡉⠹⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠄⠄⣿⡇⠄⢀⡶⠶⠶⠾⠿⠮⠭⠭⢭⣥⣿⣿⣷⢸⣿⢸⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠄⠄⣿⡇⠄⠈⣷⠄⠄⠄⣭⣙⣹⢙⣰⡎⣿⢏⣡⣾⢏⣾⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠄⢰⣿⡇⠄⠄⢿⠄⠄⠈⣿⠉⠉⣻⣿⡷⣰⣿⡿⣡⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠄⢸⣿⡇⠄⠄⠘⠿⠤⠤⠿⠿⠿⢤⣤⣤⡿⣃⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\" +","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"                         \"⠄⠄⠘⢿⣷⣤⣄⣀⣀⣀⣀⣀⣠⣴⣾⡿⢋⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"        return poggers;","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns a line.","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the position is unset, NaN is returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return a Line.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"    public static String printLine() {","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        String line \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"        return line;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the full welcome message.","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the position is unset, NaN is returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return welcome message.","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"    public static String printWelcome() {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        String welcomeMessage \u003d printPepe() + \"Poggers! I\u0027m Pepe\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"What can I do for you?\";","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"        return welcomeMessage;","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns exit message.","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the position is unset, NaN is returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return exit message.","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"    public static String printExit() {","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        String exit \u003d \"Bye my little pogchamp! Hope to see you again soon!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        return exit;","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":69}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Parser class gets the raw input from Logic class and then returns the specified arguments of interest","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" * to the Logic class. These are the type of command, the description of the dask and the date.","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" *","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"input\" raw input from user.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":" * @return appropriate information depending on the method called.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"public class Parser {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"    private String[] arguments;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"    private String inputString;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"    public Parser(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"        this.inputString \u003d input;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"        this.arguments \u003d input.split(\" \");","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the command type.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return command type.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getCommand() {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"        return arguments[0].toLowerCase();","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns position of the first whitespace encountered in the input.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param input  input from user.","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return position of first whitespace.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"    public int getFirstWhiteSpace(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        for (int index \u003d 0; index \u003c input.length(); index++) {","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"            //sees if character at that index is a whitespace","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"            if (Character.isWhitespace(input.charAt(index))) {","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"                return index;","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        return -1;","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns position of the backslash character used to mark out the border for description and date.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return position of the backslash character.","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"    public int getSlash() {","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"        return inputString.indexOf(\"/\");","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the description of th task.","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return description of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"        String description \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"        int index;","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"        if (getCommand().equals(\"todo\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"            //find first whitespace and assigns everything up to that point to description variable","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"            int firstWhitespace \u003d getFirstWhiteSpace(inputString);","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"            description \u003d  inputString.substring(firstWhitespace).trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        } else if (getCommand().equals(\"list\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"            description \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        } else if (getCommand().equals(\"event\") || getCommand().equals(\"deadline\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"            //find first whitespace and first backslash and assign whatever is in the middle to description variable","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"            int firstWhitespace \u003d getFirstWhiteSpace(inputString);","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"            int slashPos \u003d getSlash();","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"            //to include error catching","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"            if (slashPos !\u003d -1) {","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"                description \u003d inputString.substring(firstWhitespace, slashPos).trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"        } else if (getCommand().equals(\"done\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"            //only the number(in string) remains","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"            description \u003d inputString.replaceAll(\"[^0-9]\",\"\");","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"ThaddeusLim99"},"content":"            index \u003d Integer.parseInt(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"            description \u003d String.valueOf(index);","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"            description \u003d \"Invalid command\";","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"        return description;","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns date of deadline/event.","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return date.","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getDate() {","lastModifiedDate":"2021-08-31"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"        String date \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"ThaddeusLim99"},"content":"        if (getCommand().equals(\"deadline\") || getCommand().equals((\"event\"))) {","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"            int slashPos \u003d getSlash();","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"            //to include error catching","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"            if (slashPos !\u003d -1) {","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"                String dateString \u003d inputString.substring(slashPos + 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"                int firstWhitespace \u003d getFirstWhiteSpace(dateString);","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"                date \u003d dateString.substring(firstWhitespace);","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"            //date is not relevant for other commands","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"            date \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"        return date;","lastModifiedDate":"2021-08-31"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":105}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Task class to represent a task.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" * Is a parent class to Todo, Event and Deadline classes.","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" *","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"description\" the name of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":" * @return modified message when the toString() method is called.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"public class Task {","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"    protected String description;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns a String whether a task is done or not.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the task is done, X is returned.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the task is not done, a whitespace is returned.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return status icon for task.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns task\u0027 description.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return task\u0027 description.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"        return description;","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"     * Sets a task as done by setting isDone as true.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"     * Overrides the toString() method.","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return returns a modified message","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"ThaddeusLim99":53}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":" * Todo class to represent a task that needs to be done.","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":" * Parent class is Task class.","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" *","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" * @param \"description\" the name of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":" * @return modified message when the toString() method is called.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"     * Overrides the toString() method.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return returns a modified message","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":23}},{"path":"src/main/java/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" * UserInterface interacts with the user for input and output.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"public class UserInterface {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns input given from the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the position is unset, NaN is returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return input from the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getInput() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"        return input;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"     * Prints out message from programme to user.","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"     * If the position is unset, NaN is returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return output to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    public void printMessage(String commandMessage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"        System.out.println(Message.printLine());","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"        System.out.println(commandMessage);","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"        System.out.println(Message.printLine());","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"ThaddeusLim99":33}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"todo eat dinner","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"deadline homework /by 1/9","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"event interview /at 1/9","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"done 2","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"bye","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"ThaddeusLim99":7}}]
