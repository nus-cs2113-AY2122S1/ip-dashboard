[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"   -----------------------------------","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"   Hello! I\u0027m Duke","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"   What can I do for you?","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"shyamgj1900"},"content":"   -----------------------------------","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shyamgj1900":4,"-":18}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"D \u003c \u003e submit CS iP by: Tuesday 12PM","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"E \u003cX\u003e meeting at: Tuesday 3PM","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"T \u003cX\u003e read book","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"D \u003cX\u003e submit assignment by: Friday 5PM","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"T \u003c \u003e play tennis","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"E \u003cX\u003e family lunch at: Sunday 1PM","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"T \u003c \u003e watch movie","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"shyamgj1900":7}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"    private final TaskList task;","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"        ui \u003d new Ui(tasks, filePath);","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"        task \u003d new TaskList(tasks, filePath);","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"shyamgj1900"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"shyamgj1900"},"content":"            storage.loadFile(task.getTask());","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"shyamgj1900"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"shyamgj1900"},"content":"            ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"shyamgj1900"},"content":"            ui.fileNotFoundMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"shyamgj1900"},"content":"    public void run() {","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"shyamgj1900"},"content":"        ui.welcomeMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"shyamgj1900"},"content":"        if (task.getTaskSize() !\u003d 0) {","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"shyamgj1900"},"content":"            ui.taskLoadMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"shyamgj1900"},"content":"            System.out.println(\"There are \" + task.getTaskSize() + \" tasks present\");","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"shyamgj1900"},"content":"        } else {","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"shyamgj1900"},"content":"            ui.fileEmptyMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"shyamgj1900"},"content":"        ui.getUserInput();","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"shyamgj1900"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"shyamgj1900"},"content":"        String filePath \u003d \"data/duke.txt\";","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"shyamgj1900"},"content":"        new Duke(filePath).run();","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"shyamgj1900":42,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"shyamgj1900":4}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.parser;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"public class Parser {","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"    public static final int TASK_POS \u003d 3;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"    private static final String DEADLINE_DUE \u003d \"/by\";","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"    private static final String EVENT_DUE \u003d \"/at\";","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"     * The particular deadline task is returned to the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"     * @param command the task to be resolved.","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"     * @param slashPos index of the deadline due time.","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"     * @return the deadline substring of the task.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"    public String getDeadline(String command, int slashPos) {","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"        command \u003d command.substring(0, slashPos);","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"        return command.replace(COMMAND_DEADLINE, \"\");","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"shyamgj1900"},"content":"     * The particular event task is returned to the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"shyamgj1900"},"content":"     * @param command the task to be resolved.","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"shyamgj1900"},"content":"     * @param slashPos index of the event due time.","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"shyamgj1900"},"content":"     * @return the event substring of the task.","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"shyamgj1900"},"content":"    public String getEvent(String command, int slashPos) {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"shyamgj1900"},"content":"        command \u003d command.substring(0, slashPos);","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"shyamgj1900"},"content":"        return command.replace(COMMAND_EVENT, \"\");","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"shyamgj1900"},"content":"     * The particular to-do task is returned to the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"shyamgj1900"},"content":"     * @param command the task to be resolved.","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"shyamgj1900"},"content":"     * @return the to-do substring of the task.","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"shyamgj1900"},"content":"    public String getTodo(String command) {","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"shyamgj1900"},"content":"        return command.replace(COMMAND_TODO, \"\");","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method to indicate the position of the \u0027/\u0027 character in the given string.","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"shyamgj1900"},"content":"     * @param command user input which contains the \u0027/\u0027 character.","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"shyamgj1900"},"content":"     * @return the index of the \u0027/\u0027 character.","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"shyamgj1900"},"content":"    public int getSlashPos(String command) {","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"shyamgj1900"},"content":"        return command.indexOf(\"/\");","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method to return the duration or due of the task in the given string.","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"shyamgj1900"},"content":"     * @param command user input which contains the duration or due of the task.","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"shyamgj1900"},"content":"     * @return the duration or due of the task.","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"shyamgj1900"},"content":"    public String getTaskDuration(String command) {","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"shyamgj1900"},"content":"        if(command.contains(DEADLINE_DUE)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"shyamgj1900"},"content":"            int byPos \u003d command.indexOf(DEADLINE_DUE);","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"shyamgj1900"},"content":"            return command.substring(byPos + TASK_POS);","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"shyamgj1900"},"content":"        } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"shyamgj1900"},"content":"            int atPos \u003d command.indexOf(EVENT_DUE);","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"shyamgj1900"},"content":"            return command.substring(atPos + TASK_POS);","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method which returns the index of the task to be marked done or deleted.","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"shyamgj1900"},"content":"     * @param command user input which contains the index.","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"shyamgj1900"},"content":"     * @return the index of task on which the action is supposed to take place.","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"shyamgj1900"},"content":"    public int getIndex(String command) {","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"shyamgj1900"},"content":"        String[] splitStr \u003d command.split(\" \");","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"shyamgj1900"},"content":"        return Integer.parseInt(splitStr[splitStr.length - 1]);","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method which returns the task string which is searched by the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"shyamgj1900"},"content":"     * @param command user input which contains the task string.","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"shyamgj1900"},"content":"     * @return task string searched by the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"shyamgj1900"},"content":"    public String getFindTask(String command) {","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"shyamgj1900"},"content":"        return command.replace(\"find\", \"\");","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":91,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"shyamgj1900":91}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"import java.io.File;","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"public class Storage {","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"    private String filePath \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"shyamgj1900"},"content":"    public static final int TASK_POS \u003d 3;","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"shyamgj1900"},"content":"    public static final String GREATER_SYMBOL \u003d \"\u003e\";","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"shyamgj1900"},"content":"    public static final String DUE_EVENT \u003d \"at:\";","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"shyamgj1900"},"content":"    public static final String DUE_DEADLINE \u003d \"by:\";","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"shyamgj1900"},"content":"    public static final String TASK_DONE_SYMBOL \u003d \"\u003cX\u003e\";","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"shyamgj1900"},"content":"    public static final String PREFIX_DEADLINE \u003d \"D\";","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"shyamgj1900"},"content":"    public static final String PREFIX_EVENT \u003d \"E\";","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"shyamgj1900"},"content":"    public static final String PREFIX_TODO \u003d \"T\";","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"shyamgj1900"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"shyamgj1900"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"shyamgj1900"},"content":"     * Loads each line of a text file onto an array list of class Task objects.","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"shyamgj1900"},"content":"     * Initially all the content from the file gets copied onto an array list of string.","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"shyamgj1900"},"content":"     * Then each line is checked for the task type and is updated onto the Array list of","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"shyamgj1900"},"content":"     * task objects accordingly.","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"shyamgj1900"},"content":"     * @param task array list of class Task objects.","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"shyamgj1900"},"content":"     * @throws FileNotFoundException exception thrown if file path is not available.","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"shyamgj1900"},"content":"    public void loadFile(ArrayList\u003cTask\u003e task) throws FileNotFoundException {","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"shyamgj1900"},"content":"        ArrayList\u003cString\u003e fileContents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"shyamgj1900"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"shyamgj1900"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"shyamgj1900"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"shyamgj1900"},"content":"            fileContents.add(s.nextLine()); //add each line of the text file to an array list of String","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"shyamgj1900"},"content":"        for (int i \u003d 0; i \u003c fileContents.size(); i++) { //add tasks to array list of class Task objects","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"shyamgj1900"},"content":"            if (fileContents.get(i).startsWith(PREFIX_DEADLINE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"shyamgj1900"},"content":"                processDeadline(task, fileContents, i);","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"shyamgj1900"},"content":"            } else if (fileContents.get(i).startsWith(PREFIX_EVENT)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"shyamgj1900"},"content":"                processEvent(task, fileContents, i);","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"shyamgj1900"},"content":"            } else if (fileContents.get(i).startsWith(PREFIX_TODO)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"shyamgj1900"},"content":"                processTodo(task, fileContents, i);","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"shyamgj1900"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"shyamgj1900"},"content":"     * Allows writing of text to a file on a new line.","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"shyamgj1900"},"content":"     * New text is appended to the file by using the FileWriter class.","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"shyamgj1900"},"content":"     * Text added appears on new line.","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"shyamgj1900"},"content":"     * @param textToAdd the new text to added to the file.","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"shyamgj1900"},"content":"     * @throws IOException exception is thrown whenever an input or output operation fails.","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"shyamgj1900"},"content":"    public void writeToFile(String textToAdd) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"shyamgj1900"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"shyamgj1900"},"content":"        fw.write(textToAdd + System.lineSeparator());","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"shyamgj1900"},"content":"        fw.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"shyamgj1900"},"content":"     * Allows to edit a text file by replacing old text with a new text being passed.","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"shyamgj1900"},"content":"     * Each line in the file is copied to a string. The old string in the file is then","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"shyamgj1900"},"content":"     * replaced with the new string and is written back to the file.","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"shyamgj1900"},"content":"     * @param oldString the string to be replaced.","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"shyamgj1900"},"content":"     * @param newString the string which will replace.","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"shyamgj1900"},"content":"     * @throws IOException exception is thrown whenever an input or output operation fails.","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"shyamgj1900"},"content":"    public void editFile(String oldString, String newString) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"shyamgj1900"},"content":"        File fileToBeModified \u003d new File(filePath);","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"shyamgj1900"},"content":"        String oldContent \u003d \"\";","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"shyamgj1900"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(fileToBeModified));","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"shyamgj1900"},"content":"        String line \u003d br.readLine();","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"shyamgj1900"},"content":"        while (line !\u003d null) {","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"shyamgj1900"},"content":"            oldContent \u003d oldContent + line + System.lineSeparator(); //add each line of the text file to a string.","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"shyamgj1900"},"content":"            line \u003d br.readLine();","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"shyamgj1900"},"content":"        String newContent \u003d oldContent.replaceAll(oldString, newString); //replace old string with new string.","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"shyamgj1900"},"content":"        FileWriter fw \u003d new FileWriter(fileToBeModified);","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"shyamgj1900"},"content":"        fw.write(newContent);","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"shyamgj1900"},"content":"        br.close();","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"shyamgj1900"},"content":"        fw.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"shyamgj1900"},"content":"     * Allows the deletion of a line from the text file.","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"shyamgj1900"},"content":"     * A temporary file is created and all the content except for the content to be","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"shyamgj1900"},"content":"     * deleted is copied onto it. The original file is then deleted and the temporary","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"shyamgj1900"},"content":"     * file is renamed to the original file.","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"shyamgj1900"},"content":"     * @param task the string which is to be deleted from the text file.","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"shyamgj1900"},"content":"     * @throws IOException exception is thrown whenever an input or output operation fails.","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"shyamgj1900"},"content":"    public void deleteTextFromFile(String task) throws IOException {","lastModifiedDate":"2021-09-17"},{"lineNumber":111,"author":{"gitId":"shyamgj1900"},"content":"        File fileToBeModified \u003d new File(filePath);","lastModifiedDate":"2021-09-17"},{"lineNumber":112,"author":{"gitId":"shyamgj1900"},"content":"        File tempFile \u003d new File(fileToBeModified.getAbsolutePath() + \".tmp\");","lastModifiedDate":"2021-09-17"},{"lineNumber":113,"author":{"gitId":"shyamgj1900"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(fileToBeModified));","lastModifiedDate":"2021-09-17"},{"lineNumber":114,"author":{"gitId":"shyamgj1900"},"content":"        PrintWriter pw \u003d new PrintWriter(new FileWriter(tempFile));","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"shyamgj1900"},"content":"        String line \u003d br.readLine();","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"shyamgj1900"},"content":"        while (line !\u003d null) {","lastModifiedDate":"2021-09-17"},{"lineNumber":117,"author":{"gitId":"shyamgj1900"},"content":"            if (!line.equals(task)) { //copy all the content from the old file into the new file except for the content to be deleted","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"shyamgj1900"},"content":"                pw.println(line);","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"shyamgj1900"},"content":"                pw.flush();","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"shyamgj1900"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"shyamgj1900"},"content":"            line \u003d br.readLine();","lastModifiedDate":"2021-09-17"},{"lineNumber":122,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":123,"author":{"gitId":"shyamgj1900"},"content":"        pw.close();","lastModifiedDate":"2021-09-17"},{"lineNumber":124,"author":{"gitId":"shyamgj1900"},"content":"        br.close();","lastModifiedDate":"2021-09-17"},{"lineNumber":125,"author":{"gitId":"shyamgj1900"},"content":"        fileToBeModified.delete(); //delete old file","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"shyamgj1900"},"content":"        tempFile.renameTo(fileToBeModified); //rename new file","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":128,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":129,"author":{"gitId":"shyamgj1900"},"content":"    private void processTodo(ArrayList\u003cTask\u003e task, ArrayList\u003cString\u003e fileContents, int index) {","lastModifiedDate":"2021-09-19"},{"lineNumber":130,"author":{"gitId":"shyamgj1900"},"content":"        int greaterSymbolPos \u003d fileContents.get(index).indexOf(GREATER_SYMBOL);","lastModifiedDate":"2021-09-19"},{"lineNumber":131,"author":{"gitId":"shyamgj1900"},"content":"        String todo \u003d fileContents.get(index).substring(greaterSymbolPos + 1);","lastModifiedDate":"2021-09-19"},{"lineNumber":132,"author":{"gitId":"shyamgj1900"},"content":"        task.add(new Todo(todo));","lastModifiedDate":"2021-09-19"},{"lineNumber":133,"author":{"gitId":"shyamgj1900"},"content":"        setTaskDone(task, fileContents, index);","lastModifiedDate":"2021-09-19"},{"lineNumber":134,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":135,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":136,"author":{"gitId":"shyamgj1900"},"content":"    private void processEvent(ArrayList\u003cTask\u003e task, ArrayList\u003cString\u003e fileContents, int index) {","lastModifiedDate":"2021-09-19"},{"lineNumber":137,"author":{"gitId":"shyamgj1900"},"content":"        int greaterSymbolPos \u003d fileContents.get(index).indexOf(GREATER_SYMBOL);","lastModifiedDate":"2021-09-19"},{"lineNumber":138,"author":{"gitId":"shyamgj1900"},"content":"        int atPos \u003d fileContents.get(index).indexOf(DUE_EVENT);","lastModifiedDate":"2021-09-21"},{"lineNumber":139,"author":{"gitId":"shyamgj1900"},"content":"        String event \u003d fileContents.get(index).substring(greaterSymbolPos + 1, atPos);","lastModifiedDate":"2021-09-19"},{"lineNumber":140,"author":{"gitId":"shyamgj1900"},"content":"        String at \u003d fileContents.get(index).substring(atPos + TASK_POS);","lastModifiedDate":"2021-09-19"},{"lineNumber":141,"author":{"gitId":"shyamgj1900"},"content":"        task.add(new Event(event, at));","lastModifiedDate":"2021-09-19"},{"lineNumber":142,"author":{"gitId":"shyamgj1900"},"content":"        setTaskDone(task, fileContents, index);","lastModifiedDate":"2021-09-19"},{"lineNumber":143,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":144,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":145,"author":{"gitId":"shyamgj1900"},"content":"    private void processDeadline(ArrayList\u003cTask\u003e task, ArrayList\u003cString\u003e fileContents, int index) {","lastModifiedDate":"2021-09-19"},{"lineNumber":146,"author":{"gitId":"shyamgj1900"},"content":"        int greaterSymbolPos \u003d fileContents.get(index).indexOf(GREATER_SYMBOL);","lastModifiedDate":"2021-09-19"},{"lineNumber":147,"author":{"gitId":"shyamgj1900"},"content":"        int byPos \u003d fileContents.get(index).indexOf(DUE_DEADLINE);","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"shyamgj1900"},"content":"        String deadline \u003d fileContents.get(index).substring(greaterSymbolPos + 1, byPos);","lastModifiedDate":"2021-09-19"},{"lineNumber":149,"author":{"gitId":"shyamgj1900"},"content":"        String by \u003d fileContents.get(index).substring(byPos + TASK_POS);","lastModifiedDate":"2021-09-19"},{"lineNumber":150,"author":{"gitId":"shyamgj1900"},"content":"        task.add(new Deadline(deadline, by));","lastModifiedDate":"2021-09-19"},{"lineNumber":151,"author":{"gitId":"shyamgj1900"},"content":"        setTaskDone(task, fileContents, index);","lastModifiedDate":"2021-09-19"},{"lineNumber":152,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":153,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":154,"author":{"gitId":"shyamgj1900"},"content":"    private void setTaskDone(ArrayList\u003cTask\u003e task, ArrayList\u003cString\u003e fileContents, int index) {","lastModifiedDate":"2021-09-19"},{"lineNumber":155,"author":{"gitId":"shyamgj1900"},"content":"        if (fileContents.get(index).contains(TASK_DONE_SYMBOL)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":156,"author":{"gitId":"shyamgj1900"},"content":"            task.get(index).setDone();","lastModifiedDate":"2021-09-19"},{"lineNumber":157,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":158,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":159,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"shyamgj1900":159}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"    protected String by;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"    public Deadline(String task, String by) {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"        super(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"    public String fileText() {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"        return \"D\" + super.fileText() + \"by:\" + this.by;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"        return \"[D]\" + super.toString() + \" (by:\" + this.by + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"shyamgj1900":20}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"    protected String at;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"    public Event(String task, String at) {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"        super(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"    public String fileText() {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"        return \"E\" + super.fileText() + \"at:\" + this.at;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"        return \"[E]\" + super.toString() + \" (at:\" + this.at + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"shyamgj1900":20}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"public class Task {","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"    protected String task;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"    public Task() {","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"        this(\"\");","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"    public Task(String task) {","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method to return the status \"done\" of a particular task.","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"     * @return \u0027X\u0027 if task is done else \u0027 \u0027 if task is not done.","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"shyamgj1900"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"shyamgj1900"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method to return a particular task from the list of tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"shyamgj1900"},"content":"     * @return task from the task list.","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"shyamgj1900"},"content":"    public String getTask() {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"shyamgj1900"},"content":"        return task;","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"shyamgj1900"},"content":"     * Setter method to set whether a particular task is done.","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"shyamgj1900"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"shyamgj1900"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"shyamgj1900"},"content":"     * The status of a task and the task name are returned which is then used","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"shyamgj1900"},"content":"     * to write to a text file","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"shyamgj1900"},"content":"     * @return the status of a task and task name","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"shyamgj1900"},"content":"    public String fileText() {","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"shyamgj1900"},"content":"        return \" \u003c\" + this.getStatusIcon() + \"\u003e\" + this.getTask();","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"shyamgj1900"},"content":"     * The status of a task and the task name are returned which is then user","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"shyamgj1900"},"content":"     * to store them in a task list.","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"shyamgj1900"},"content":"     * @return the status of a task and the task name.","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"shyamgj1900"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"shyamgj1900"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"shyamgj1900"},"content":"        return \"[\" + this.getStatusIcon() + \"]\" + this.getTask();","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"shyamgj1900":61}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"    public Todo(String task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"        super(task);","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"    public String fileText() {","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"        return \"T\" + super.fileText();","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"shyamgj1900":17}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"public class TaskList {","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"    private final Parser parse;","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"shyamgj1900"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks, String filePath) {","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"shyamgj1900"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"shyamgj1900"},"content":"        parse \u003d new Parser();","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"shyamgj1900"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"shyamgj1900"},"content":"        ui \u003d new Ui(tasks, filePath);","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"shyamgj1900"},"content":"     * Creates a new task by adding the task to an Array list of class Task objects.","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"shyamgj1900"},"content":"     * Task to be added is checked whether it is of type deadline, event or to-do.","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"shyamgj1900"},"content":"     * Given text file is also updated accordingly.","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"shyamgj1900"},"content":"     * @param command task to be added to the array list of class Task objects.","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"shyamgj1900"},"content":"     * @throws DukeException exception is thrown whenever an invalid input is given by the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"shyamgj1900"},"content":"     * @throws IOException exception is thrown whenever an input or output operation fails.","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"shyamgj1900"},"content":"    public void createTask(String command) throws DukeException, IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"shyamgj1900"},"content":"        if (command.contains(COMMAND_DEADLINE)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"shyamgj1900"},"content":"            processDeadline(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"shyamgj1900"},"content":"        } else if (command.contains(COMMAND_EVENT)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"shyamgj1900"},"content":"            processEvent(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"shyamgj1900"},"content":"        } else if (command.contains(COMMAND_TODO)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"shyamgj1900"},"content":"            processTodo(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"shyamgj1900"},"content":"        } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"shyamgj1900"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"shyamgj1900"},"content":"     * Deletes a task from the array list of class Task object.","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"shyamgj1900"},"content":"     * Task to be deleted is passed from the user and is removed from the array list.","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"shyamgj1900"},"content":"     * Given text file is also updated accordingly.","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"shyamgj1900"},"content":"     * @param command task to be deleted from the array list","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"shyamgj1900"},"content":"     * @throws NullPointerException exception is thrown when null is used in a case where object is required.","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"shyamgj1900"},"content":"     * @throws IOException exception is thrown whenever an input or output operation fails.","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"shyamgj1900"},"content":"     * @throws NumberFormatException exception is thrown whenever given number is not of correct format.","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"shyamgj1900"},"content":"    public void deleteTask(String command) throws NullPointerException, IOException, NumberFormatException {","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"shyamgj1900"},"content":"        int index \u003d parse.getIndex(command);","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"shyamgj1900"},"content":"        if (index \u003e tasks.size()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"shyamgj1900"},"content":"            throw new NullPointerException(\"Number given is more than the number of tasks in list\");","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"shyamgj1900"},"content":"        String taskToBeDeleted \u003d tasks.get(index - 1).fileText();","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"shyamgj1900"},"content":"        storage.deleteTextFromFile(taskToBeDeleted);","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"shyamgj1900"},"content":"        ui.taskRemovedMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(tasks.get(index - 1).toString());","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"shyamgj1900"},"content":"        tasks.remove(index - 1);","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list\");","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"shyamgj1900"},"content":"     * Marks a given task as done in the array list of class Task objects.","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"shyamgj1900"},"content":"     * Task to be marked done is passed from user and is marked as done in the array list.","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"shyamgj1900"},"content":"     * Given text file is also updated accordingly.","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"shyamgj1900"},"content":"     * @param command task to be deleted from the array list","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"shyamgj1900"},"content":"     * @throws NullPointerException exception is thrown when null is used in a case where object is required.","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"shyamgj1900"},"content":"     * @throws IOException exception is thrown whenever an input or output operation fails.","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"shyamgj1900"},"content":"     * @throws NumberFormatException exception is thrown whenever given number is not of correct format.","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"shyamgj1900"},"content":"    public void markDone(String command) throws NullPointerException, IOException, NumberFormatException {","lastModifiedDate":"2021-09-18"},{"lineNumber":90,"author":{"gitId":"shyamgj1900"},"content":"        int index \u003d parse.getIndex(command);","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"shyamgj1900"},"content":"        if (index \u003e tasks.size()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"shyamgj1900"},"content":"            throw new NullPointerException(\"Number given is more than the number of tasks in list\");","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"shyamgj1900"},"content":"        String oldString \u003d tasks.get(index - 1).fileText();","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"shyamgj1900"},"content":"        tasks.get(index - 1).setDone();","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"shyamgj1900"},"content":"        storage.editFile(oldString, tasks.get(index - 1).fileText());","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"shyamgj1900"},"content":"        ui.taskDoneMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(tasks.get(index - 1).toString());","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":102,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"shyamgj1900"},"content":"     * Tasks are displayed according to the users search query.","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"shyamgj1900"},"content":"     * User can give a task name they want to view. The respective task is","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"shyamgj1900"},"content":"     * then displayed on the screen if the given tasks matches any of the tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"shyamgj1900"},"content":"     * in the list, else no tasks are displayed.","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"shyamgj1900"},"content":"     * @param command task to be found and displayed.","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"shyamgj1900"},"content":"    public void searchTask(String command) {","lastModifiedDate":"2021-09-17"},{"lineNumber":112,"author":{"gitId":"shyamgj1900"},"content":"        String task \u003d parse.getFindTask(command);","lastModifiedDate":"2021-09-17"},{"lineNumber":113,"author":{"gitId":"shyamgj1900"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-09-18"},{"lineNumber":114,"author":{"gitId":"shyamgj1900"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"shyamgj1900"},"content":"            if(tasks.get(i).getTask().contains(task)) {","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"shyamgj1900"},"content":"                if(count \u003d\u003d 0) {","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"shyamgj1900"},"content":"                    ui.showShortLine();","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"shyamgj1900"},"content":"                    ui.taskFoundMessage();","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"shyamgj1900"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"shyamgj1900"},"content":"                System.out.println(count + 1 + \". \" + tasks.get(i).toString());","lastModifiedDate":"2021-09-18"},{"lineNumber":121,"author":{"gitId":"shyamgj1900"},"content":"                count++;","lastModifiedDate":"2021-09-18"},{"lineNumber":122,"author":{"gitId":"shyamgj1900"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":123,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":124,"author":{"gitId":"shyamgj1900"},"content":"        if(count \u003d\u003d 0) {","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"shyamgj1900"},"content":"            ui.showShortLine();","lastModifiedDate":"2021-09-17"},{"lineNumber":126,"author":{"gitId":"shyamgj1900"},"content":"            ui.taskNotFoundMessage();","lastModifiedDate":"2021-09-17"},{"lineNumber":127,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":128,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-17"},{"lineNumber":129,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":130,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":131,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"shyamgj1900"},"content":"     * Prints the array list of class Task objects. No tasks are printed if the","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"shyamgj1900"},"content":"     * array list is empty.","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"shyamgj1900"},"content":"    public void printList() {","lastModifiedDate":"2021-09-15"},{"lineNumber":136,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":137,"author":{"gitId":"shyamgj1900"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-15"},{"lineNumber":138,"author":{"gitId":"shyamgj1900"},"content":"            ui.noTaskMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":139,"author":{"gitId":"shyamgj1900"},"content":"        } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":140,"author":{"gitId":"shyamgj1900"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-15"},{"lineNumber":141,"author":{"gitId":"shyamgj1900"},"content":"                System.out.println(i + 1 + \". \" + tasks.get(i).toString());","lastModifiedDate":"2021-09-15"},{"lineNumber":142,"author":{"gitId":"shyamgj1900"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":143,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":144,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":145,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":146,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":147,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method which returns the array list.","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"shyamgj1900"},"content":"     * @return the array list of class Task objects.","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"shyamgj1900"},"content":"    public ArrayList\u003cTask\u003e getTask() {","lastModifiedDate":"2021-09-15"},{"lineNumber":153,"author":{"gitId":"shyamgj1900"},"content":"       return tasks;","lastModifiedDate":"2021-09-15"},{"lineNumber":154,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":155,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":156,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method which the size of the array list.","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"shyamgj1900"},"content":"     * @return the array list of class Task objects size.","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"shyamgj1900"},"content":"    public int getTaskSize() {","lastModifiedDate":"2021-09-15"},{"lineNumber":162,"author":{"gitId":"shyamgj1900"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-15"},{"lineNumber":163,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":164,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":165,"author":{"gitId":"shyamgj1900"},"content":"    private void processDeadline(String command) throws IndexOutOfBoundsException, IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":166,"author":{"gitId":"shyamgj1900"},"content":"        int slashPos \u003d parse.getSlashPos(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":167,"author":{"gitId":"shyamgj1900"},"content":"        if (slashPos \u003c 0) {","lastModifiedDate":"2021-09-19"},{"lineNumber":168,"author":{"gitId":"shyamgj1900"},"content":"            throw new IndexOutOfBoundsException(\"OOPS!!! The description of a deadline cannot be empty. Must also specify /by\");","lastModifiedDate":"2021-09-19"},{"lineNumber":169,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":170,"author":{"gitId":"shyamgj1900"},"content":"        String deadline \u003d parse.getDeadline(command, slashPos);","lastModifiedDate":"2021-09-19"},{"lineNumber":171,"author":{"gitId":"shyamgj1900"},"content":"        String by \u003d parse.getTaskDuration(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":172,"author":{"gitId":"shyamgj1900"},"content":"        tasks.add(new Deadline(deadline, by));","lastModifiedDate":"2021-09-19"},{"lineNumber":173,"author":{"gitId":"shyamgj1900"},"content":"        storage.writeToFile(tasks.get(tasks.size() - 1).fileText());","lastModifiedDate":"2021-09-19"},{"lineNumber":174,"author":{"gitId":"shyamgj1900"},"content":"        taskAdded();","lastModifiedDate":"2021-09-19"},{"lineNumber":175,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":176,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":177,"author":{"gitId":"shyamgj1900"},"content":"    private void processEvent(String command) throws IndexOutOfBoundsException, IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":178,"author":{"gitId":"shyamgj1900"},"content":"        int slashPos \u003d parse.getSlashPos(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":179,"author":{"gitId":"shyamgj1900"},"content":"        if (slashPos \u003c 0) {","lastModifiedDate":"2021-09-19"},{"lineNumber":180,"author":{"gitId":"shyamgj1900"},"content":"            throw new IndexOutOfBoundsException(\"OOPS!!! The description of an event cannot be empty. Must also specify /at\");","lastModifiedDate":"2021-09-19"},{"lineNumber":181,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":182,"author":{"gitId":"shyamgj1900"},"content":"        String event \u003d parse.getEvent(command, slashPos);","lastModifiedDate":"2021-09-19"},{"lineNumber":183,"author":{"gitId":"shyamgj1900"},"content":"        String at \u003d parse.getTaskDuration(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":184,"author":{"gitId":"shyamgj1900"},"content":"        tasks.add(new Event(event, at));","lastModifiedDate":"2021-09-19"},{"lineNumber":185,"author":{"gitId":"shyamgj1900"},"content":"        storage.writeToFile(tasks.get(tasks.size() - 1).fileText());","lastModifiedDate":"2021-09-19"},{"lineNumber":186,"author":{"gitId":"shyamgj1900"},"content":"        taskAdded();","lastModifiedDate":"2021-09-19"},{"lineNumber":187,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":188,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":189,"author":{"gitId":"shyamgj1900"},"content":"    private void processTodo(String command) throws IndexOutOfBoundsException, IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":190,"author":{"gitId":"shyamgj1900"},"content":"        String todo \u003d parse.getTodo(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":191,"author":{"gitId":"shyamgj1900"},"content":"        if (todo.equals(\"\")) {","lastModifiedDate":"2021-09-19"},{"lineNumber":192,"author":{"gitId":"shyamgj1900"},"content":"            throw new IndexOutOfBoundsException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":193,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":194,"author":{"gitId":"shyamgj1900"},"content":"        tasks.add(new Todo(todo));","lastModifiedDate":"2021-09-19"},{"lineNumber":195,"author":{"gitId":"shyamgj1900"},"content":"        storage.writeToFile(tasks.get(tasks.size() - 1).fileText());","lastModifiedDate":"2021-09-19"},{"lineNumber":196,"author":{"gitId":"shyamgj1900"},"content":"        taskAdded();","lastModifiedDate":"2021-09-19"},{"lineNumber":197,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":198,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":199,"author":{"gitId":"shyamgj1900"},"content":"    private void taskAdded() {","lastModifiedDate":"2021-09-19"},{"lineNumber":200,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-19"},{"lineNumber":201,"author":{"gitId":"shyamgj1900"},"content":"        ui.taskAddedMessage();","lastModifiedDate":"2021-09-19"},{"lineNumber":202,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(tasks.get(tasks.size() - 1).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":203,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list\");","lastModifiedDate":"2021-09-19"},{"lineNumber":204,"author":{"gitId":"shyamgj1900"},"content":"        ui.showShortLine();","lastModifiedDate":"2021-09-19"},{"lineNumber":205,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":206,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"shyamgj1900":206}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shyamgj1900"},"content":"package duke.ui;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"shyamgj1900"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"shyamgj1900"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"shyamgj1900"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"shyamgj1900"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"shyamgj1900"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"shyamgj1900"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"shyamgj1900"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"shyamgj1900"},"content":"public class Ui {","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"shyamgj1900"},"content":"    private String command \u003d \"\";","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"shyamgj1900"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"shyamgj1900"},"content":"    private String filePath \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_EXIT \u003d \"bye\";","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_DISPLAY_TASKS \u003d \"list\";","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_MARK_DONE \u003d \"done\";","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_DELETE_TASK \u003d \"delete\";","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"shyamgj1900"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"shyamgj1900"},"content":"    public Ui(ArrayList\u003cTask\u003e tasks, String filePath) {","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"shyamgj1900"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"shyamgj1900"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"shyamgj1900"},"content":"     * Input from the user is read till user inputs command \"bye\".","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"shyamgj1900"},"content":"     * The input command is read from the user using the readCommand() method from the Ui","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"shyamgj1900"},"content":"     * class and is passed to the \"processUserInput()\" method to resolve the user input further.","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"shyamgj1900"},"content":"    public void getUserInput() {","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"shyamgj1900"},"content":"        boolean flag \u003d true;","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"shyamgj1900"},"content":"        while (flag) {","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"shyamgj1900"},"content":"            try {","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"shyamgj1900"},"content":"                readCommand(); //read input from user","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"shyamgj1900"},"content":"                flag \u003d processUserInput(true);","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"shyamgj1900"},"content":"            } catch (DukeException err) {","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"shyamgj1900"},"content":"                showMediumLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"shyamgj1900"},"content":"                invalidCommandMessage();","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"shyamgj1900"},"content":"                showMediumLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"shyamgj1900"},"content":"            } catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"shyamgj1900"},"content":"                showLongLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"shyamgj1900"},"content":"                System.out.println(err.getMessage());","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"shyamgj1900"},"content":"                showLongLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"shyamgj1900"},"content":"            } catch (NullPointerException err) {","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"shyamgj1900"},"content":"                showMediumLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"shyamgj1900"},"content":"                System.out.println(err.getMessage());","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"shyamgj1900"},"content":"                showMediumLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"shyamgj1900"},"content":"            } catch (IOException err) {","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"shyamgj1900"},"content":"                showMediumLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"shyamgj1900"},"content":"                System.out.println(\"Something went wrong\" + err.getMessage());","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"shyamgj1900"},"content":"                showMediumLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"shyamgj1900"},"content":"            } catch (NumberFormatException err) {","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"shyamgj1900"},"content":"                showShortLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"shyamgj1900"},"content":"                invalidIntegerMessage();","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"shyamgj1900"},"content":"                showShortLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"shyamgj1900"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"shyamgj1900"},"content":"     * Getter method to return command entered by the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"shyamgj1900"},"content":"     * @return the command entered by the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"shyamgj1900"},"content":"    public String getCommand() {","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"shyamgj1900"},"content":"        return this.command;","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"shyamgj1900"},"content":"    public void welcomeMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"-----------------------------------\");","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"-----------------------------------\");","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"shyamgj1900"},"content":"    public void exitMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"-----------------------------------\");","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"-----------------------------------\");","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"shyamgj1900"},"content":"    public void showShortLine() {","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"-----------------------------------\");","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"shyamgj1900"},"content":"    public void showMediumLine() {","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"---------------------------------------------------------\");","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"shyamgj1900"},"content":"    public void showLongLine() {","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"---------------------------------------------------------------------------\");","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"shyamgj1900"},"content":"    public void fileNotFoundMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"File not found\");","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"shyamgj1900"},"content":"    public void taskLoadMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Tasks loaded from file!!!!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":102,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"shyamgj1900"},"content":"    public void fileEmptyMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Tasks file empty\");","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"shyamgj1900"},"content":"    public void invalidCommandMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"shyamgj1900"},"content":"    public void invalidIntegerMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Please specify an index number\");","lastModifiedDate":"2021-09-19"},{"lineNumber":114,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":115,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":116,"author":{"gitId":"shyamgj1900"},"content":"    public void taskAddedMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Got it. I\u0027ve added this task\");","lastModifiedDate":"2021-09-15"},{"lineNumber":118,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":119,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":120,"author":{"gitId":"shyamgj1900"},"content":"    public void taskRemovedMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":121,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-09-15"},{"lineNumber":122,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":123,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":124,"author":{"gitId":"shyamgj1900"},"content":"    public void taskDoneMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":125,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-09-15"},{"lineNumber":126,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":127,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":128,"author":{"gitId":"shyamgj1900"},"content":"    public void noTaskMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":129,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"No tasks in list\");","lastModifiedDate":"2021-09-15"},{"lineNumber":130,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":131,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":132,"author":{"gitId":"shyamgj1900"},"content":"    public void taskFoundMessage() {","lastModifiedDate":"2021-09-17"},{"lineNumber":133,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-17"},{"lineNumber":134,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":135,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":136,"author":{"gitId":"shyamgj1900"},"content":"    public void taskNotFoundMessage() {","lastModifiedDate":"2021-09-17"},{"lineNumber":137,"author":{"gitId":"shyamgj1900"},"content":"        System.out.println(\"No tasks match the given query\");","lastModifiedDate":"2021-09-17"},{"lineNumber":138,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":139,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":140,"author":{"gitId":"shyamgj1900"},"content":"    private void readCommand() {","lastModifiedDate":"2021-09-21"},{"lineNumber":141,"author":{"gitId":"shyamgj1900"},"content":"        Scanner myCommand \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"shyamgj1900"},"content":"        command \u003d myCommand.nextLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"shyamgj1900"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"shyamgj1900"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"shyamgj1900"},"content":"     * Checks the user input for a particular command to execute a particular action.","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"shyamgj1900"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"shyamgj1900"},"content":"     * @param flag checks whether further instruction need to be executed","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"shyamgj1900"},"content":"     * @return true if further actions are to be executed, false otherwise","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"shyamgj1900"},"content":"     * @throws IOException exception is thrown whenever an input or output operation fails.","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"shyamgj1900"},"content":"     * @throws DukeException exception is thrown whenever user inputs an invalid command.","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"shyamgj1900"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"shyamgj1900"},"content":"    private boolean processUserInput(boolean flag) throws IOException, DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"shyamgj1900"},"content":"        TaskList task \u003d new TaskList(tasks, filePath);","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"shyamgj1900"},"content":"        if (Objects.equals(getCommand(), COMMAND_DISPLAY_TASKS)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"shyamgj1900"},"content":"            task.printList();","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"shyamgj1900"},"content":"        } else if (getCommand().contains(COMMAND_MARK_DONE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"shyamgj1900"},"content":"            task.markDone(getCommand());","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"shyamgj1900"},"content":"        } else if (getCommand().contains(COMMAND_DELETE_TASK)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"shyamgj1900"},"content":"            task.deleteTask(getCommand());","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"shyamgj1900"},"content":"        } else if(getCommand().contains(COMMAND_FIND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"shyamgj1900"},"content":"            task.searchTask(getCommand());","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"shyamgj1900"},"content":"        } else if (Objects.equals(getCommand(), COMMAND_EXIT)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":164,"author":{"gitId":"shyamgj1900"},"content":"            exitMessage();","lastModifiedDate":"2021-09-21"},{"lineNumber":165,"author":{"gitId":"shyamgj1900"},"content":"            flag \u003d false;","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"shyamgj1900"},"content":"        } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"shyamgj1900"},"content":"            task.createTask(getCommand());","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"shyamgj1900"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"shyamgj1900"},"content":"        return flag;","lastModifiedDate":"2021-09-21"},{"lineNumber":170,"author":{"gitId":"shyamgj1900"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":171,"author":{"gitId":"shyamgj1900"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"shyamgj1900":171}}]
