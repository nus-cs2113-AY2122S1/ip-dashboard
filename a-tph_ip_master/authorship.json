[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"a-tph"},"content":"3. After that, locate the `src/main/java/Kate.java` file, right-click it, and choose `Run Kate.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"a-tph"},"content":"    _  __     _         ","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"a-tph"},"content":"   | |/ /__ _| |_ ___ ","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"a-tph"},"content":"   | \u0027 \u003c/ _` |  _/ -_)      ","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"a-tph"},"content":"   |_|\\_\\__,_|\\__\\___|  ","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"a-tph"},"content":"   ","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":18,"a-tph":6}},{"path":"src/main/java/kate/Kate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"import kate.command.Command;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"import kate.exception.EmptyFieldException;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"a-tph"},"content":"import kate.exception.EmptyTaskException;","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"a-tph"},"content":"import kate.exception.FileCorruptedException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"a-tph"},"content":"import kate.exception.InvalidCommandException;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"a-tph"},"content":"import kate.exception.InvalidFieldException;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"a-tph"},"content":"import kate.task.Deadline;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"a-tph"},"content":"import kate.task.Event;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"a-tph"},"content":"import kate.task.Task;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"a-tph"},"content":"import kate.task.ToDo;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"a-tph"},"content":"import java.io.File;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"a-tph"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"a-tph"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"a-tph"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"a-tph"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"a-tph"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"a-tph"},"content":"public class Kate {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"a-tph"},"content":"     * Decorative prefixes to provide indentations and wrappers for the output message","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"a-tph"},"content":"    private static final String TEXT_INDENTATION \u003d \"    \";","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"a-tph"},"content":"    private static final String LOGO_INDENTATION \u003d \"                    \";","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"a-tph"},"content":"    private static final String TEXT_WRAPPER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\"","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"a-tph"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"a-tph"},"content":"     * A custom ASCII art logo for Project Kate","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"a-tph"},"content":"    private static final String LOGO_KATE \u003d LOGO_INDENTATION + \" _  __     _         \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"a-tph"},"content":"            + LOGO_INDENTATION + \"| |/ /__ _| |_ ___   \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"a-tph"},"content":"            + LOGO_INDENTATION + \"| \u0027 \u003c/ _` |  _/ -_)  \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"a-tph"},"content":"            + LOGO_INDENTATION + \"|_|\\\\_\\\\__,_|\\\\__\\\\___|  \\n\";","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"a-tph"},"content":"    private static final String GREET_MESSAGE \u003d TEXT_INDENTATION","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"a-tph"},"content":"            + \"This is Kate, your personal assistant ;)\\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"How can I help you?\\n\";","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"a-tph"},"content":"    private static final String BYE_MESSAGE \u003d TEXT_INDENTATION","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"a-tph"},"content":"            + \"Leaving already? Oh well see you again soon!\\n\";","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"a-tph"},"content":"     * Length of the action commands inclusive of a space","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"a-tph"},"content":"    private static final int TODO_LENGTH \u003d 4;","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"a-tph"},"content":"    private static final int DEADLINE_LENGTH \u003d 8;","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"a-tph"},"content":"    private static final int EVENT_LENGTH \u003d 5;","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"a-tph"},"content":"    private static final int DELETE_LENGTH \u003d 6;","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"a-tph"},"content":"     * Specific description on how to use the action commands","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"a-tph"},"content":"     * User inputs should be in location with square brackets","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"a-tph"},"content":"    private static final String COMMAND_TODO \u003d \"todo [description]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"a-tph"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline [description] /by [deadline]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"a-tph"},"content":"    private static final String COMMAND_EVENT \u003d \"event [description] /at [time frame]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"a-tph"},"content":"    private static final String COMMAND_DONE \u003d \"done [task number shown in list]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"a-tph"},"content":"    private static final String COMMAND_DELETE \u003d \"delete [task number]\";","lastModifiedDate":"2021-09-10"},{"lineNumber":62,"author":{"gitId":"a-tph"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"a-tph"},"content":"    private static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"a-tph"},"content":"    private static final String FAILURE_MESSAGE_ADD_TODO \u003d TEXT_INDENTATION","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"a-tph"},"content":"            + \"Please specify a task with: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"\\\"\" + COMMAND_TODO + \"\\\"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"a-tph"},"content":"    private static final String FAILURE_MESSAGE_ADD_DEADLINE \u003d TEXT_INDENTATION","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"a-tph"},"content":"            + \"Please specify a task with: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"\\\"\" + COMMAND_DEADLINE + \"\\\"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"a-tph"},"content":"    private static final String FAILURE_MESSAGE_ADD_EVENT \u003d TEXT_INDENTATION","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"a-tph"},"content":"            + \"Please specify a task with: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"\\\"\" + COMMAND_EVENT + \"\\\"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"a-tph"},"content":"    private static final String FAILURE_MESSAGE_SET_DONE \u003d TEXT_INDENTATION","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"a-tph"},"content":"            + \"Please specify a task with: \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"\\\"\" + COMMAND_DONE + \"\\\"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"a-tph"},"content":"    private static final String FAILURE_MESSAGE_INVALID_COMMAND \u003d TEXT_INDENTATION","lastModifiedDate":"2021-09-04"},{"lineNumber":78,"author":{"gitId":"a-tph"},"content":"            + \"Please enter a valid command! \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"Type \u003chelp\u003e for the list of commands\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"a-tph"},"content":"    private static final String FAILURE_MESSAGE_DELETE_TASK \u003d TEXT_INDENTATION","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"a-tph"},"content":"            + \"Please provide a valid task number: \\n\"","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"\\\"\" + COMMAND_DELETE + \"\\\"\\n\";","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"a-tph"},"content":"    private static final String FAILURE_MESSAGE_EMPTY_TASK \u003d TEXT_INDENTATION","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"a-tph"},"content":"            + \"Task list is empty!\\n\"","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"a-tph"},"content":"            + TEXT_INDENTATION + \"Please specify a task using the \u003chelp\u003e page \\n\";","lastModifiedDate":"2021-09-10"},{"lineNumber":86,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"a-tph"},"content":"     * Target path names of the saved tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":90,"author":{"gitId":"a-tph"},"content":"    private static final String DIRECTORY_NAME_DATA \u003d \"data\";","lastModifiedDate":"2021-09-11"},{"lineNumber":91,"author":{"gitId":"a-tph"},"content":"    private static final String FILE_NAME_KATE \u003d \"kate.txt\";","lastModifiedDate":"2021-09-11"},{"lineNumber":92,"author":{"gitId":"a-tph"},"content":"    private static final String PATH_KATE \u003d DIRECTORY_NAME_DATA + \"/\" + FILE_NAME_KATE;","lastModifiedDate":"2021-09-11"},{"lineNumber":93,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":94,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"a-tph"},"content":"     * Initialise an array list of tasks","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"a-tph"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"a-tph"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"a-tph"},"content":"        printGreetMessage();","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"a-tph"},"content":"        startKate();","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"a-tph"},"content":"        printByeMessage();","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"a-tph"},"content":"     * Retrieve and process user inputs depending on the commands","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"a-tph"},"content":"    private static void startKate() {","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"a-tph"},"content":"        createDataFile();","lastModifiedDate":"2021-09-11"},{"lineNumber":110,"author":{"gitId":"a-tph"},"content":"        loadDataFile();","lastModifiedDate":"2021-09-11"},{"lineNumber":111,"author":{"gitId":"a-tph"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"a-tph"},"content":"        while (true) {","lastModifiedDate":"2021-09-04"},{"lineNumber":113,"author":{"gitId":"a-tph"},"content":"            String userInput \u003d in.nextLine();","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"a-tph"},"content":"            try {","lastModifiedDate":"2021-09-04"},{"lineNumber":115,"author":{"gitId":"a-tph"},"content":"                Command command \u003d extractCommand(userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":116,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"a-tph"},"content":"                switch (command) {","lastModifiedDate":"2021-09-04"},{"lineNumber":118,"author":{"gitId":"a-tph"},"content":"                case TODO:","lastModifiedDate":"2021-09-04"},{"lineNumber":119,"author":{"gitId":"a-tph"},"content":"                    addToDo(userInput);","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-04"},{"lineNumber":121,"author":{"gitId":"a-tph"},"content":"                case DEADLINE:","lastModifiedDate":"2021-09-04"},{"lineNumber":122,"author":{"gitId":"a-tph"},"content":"                    addDeadline(userInput);","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"a-tph"},"content":"                case EVENT:","lastModifiedDate":"2021-09-04"},{"lineNumber":125,"author":{"gitId":"a-tph"},"content":"                    addEvent(userInput);","lastModifiedDate":"2021-08-28"},{"lineNumber":126,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-04"},{"lineNumber":127,"author":{"gitId":"a-tph"},"content":"                case LIST:","lastModifiedDate":"2021-09-04"},{"lineNumber":128,"author":{"gitId":"a-tph"},"content":"                    printTasks();","lastModifiedDate":"2021-08-28"},{"lineNumber":129,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-04"},{"lineNumber":130,"author":{"gitId":"a-tph"},"content":"                case DONE:","lastModifiedDate":"2021-09-04"},{"lineNumber":131,"author":{"gitId":"a-tph"},"content":"                    indicateDone(userInput);","lastModifiedDate":"2021-08-28"},{"lineNumber":132,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"a-tph"},"content":"                case DELETE:","lastModifiedDate":"2021-09-10"},{"lineNumber":134,"author":{"gitId":"a-tph"},"content":"                    deleteTask(userInput);","lastModifiedDate":"2021-09-10"},{"lineNumber":135,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-10"},{"lineNumber":136,"author":{"gitId":"a-tph"},"content":"                case BYE:","lastModifiedDate":"2021-09-04"},{"lineNumber":137,"author":{"gitId":"a-tph"},"content":"                    return;","lastModifiedDate":"2021-09-04"},{"lineNumber":138,"author":{"gitId":"a-tph"},"content":"                case HELP:","lastModifiedDate":"2021-09-04"},{"lineNumber":139,"author":{"gitId":"a-tph"},"content":"                    printHelpPage();","lastModifiedDate":"2021-08-28"},{"lineNumber":140,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-04"},{"lineNumber":141,"author":{"gitId":"a-tph"},"content":"                default:","lastModifiedDate":"2021-09-04"},{"lineNumber":142,"author":{"gitId":"a-tph"},"content":"                    break;","lastModifiedDate":"2021-09-04"},{"lineNumber":143,"author":{"gitId":"a-tph"},"content":"                }","lastModifiedDate":"2021-09-04"},{"lineNumber":144,"author":{"gitId":"a-tph"},"content":"            } catch (InvalidCommandException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":145,"author":{"gitId":"a-tph"},"content":"                printMessage(FAILURE_MESSAGE_INVALID_COMMAND);","lastModifiedDate":"2021-09-04"},{"lineNumber":146,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":147,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":148,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":149,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":150,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":151,"author":{"gitId":"a-tph"},"content":"     * Adds a general task to be done","lastModifiedDate":"2021-09-04"},{"lineNumber":152,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":153,"author":{"gitId":"a-tph"},"content":"     * @param userInput A general task that user wants to add","lastModifiedDate":"2021-09-04"},{"lineNumber":154,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":155,"author":{"gitId":"a-tph"},"content":"    private static void addToDo(String userInput) {","lastModifiedDate":"2021-09-04"},{"lineNumber":156,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":157,"author":{"gitId":"a-tph"},"content":"            String taskDescription \u003d processToDoInput(userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":158,"author":{"gitId":"a-tph"},"content":"            tasks.add(new ToDo(taskDescription));","lastModifiedDate":"2021-09-04"},{"lineNumber":159,"author":{"gitId":"a-tph"},"content":"            printAddedTask();","lastModifiedDate":"2021-09-04"},{"lineNumber":160,"author":{"gitId":"a-tph"},"content":"            appendTaskToFile(getAddedTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":161,"author":{"gitId":"a-tph"},"content":"        } catch (EmptyFieldException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":162,"author":{"gitId":"a-tph"},"content":"            printMessage(FAILURE_MESSAGE_ADD_TODO);","lastModifiedDate":"2021-09-04"},{"lineNumber":163,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":164,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":165,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":166,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":167,"author":{"gitId":"a-tph"},"content":"     * Processes the user input to extract description","lastModifiedDate":"2021-09-04"},{"lineNumber":168,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":169,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provided by user","lastModifiedDate":"2021-09-04"},{"lineNumber":170,"author":{"gitId":"a-tph"},"content":"     * @return Task description for ToDo","lastModifiedDate":"2021-09-04"},{"lineNumber":171,"author":{"gitId":"a-tph"},"content":"     * @throws EmptyFieldException If task description is empty","lastModifiedDate":"2021-09-04"},{"lineNumber":172,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":173,"author":{"gitId":"a-tph"},"content":"    private static String processToDoInput(String userInput) throws EmptyFieldException {","lastModifiedDate":"2021-09-04"},{"lineNumber":174,"author":{"gitId":"a-tph"},"content":"        String taskDescription \u003d userInput.substring(TODO_LENGTH).strip();","lastModifiedDate":"2021-09-04"},{"lineNumber":175,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":176,"author":{"gitId":"a-tph"},"content":"        if (taskDescription.isEmpty()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":177,"author":{"gitId":"a-tph"},"content":"            throw new EmptyFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":178,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":179,"author":{"gitId":"a-tph"},"content":"        return taskDescription;","lastModifiedDate":"2021-09-04"},{"lineNumber":180,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":181,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":182,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":183,"author":{"gitId":"a-tph"},"content":"     * Adds a task that has a deadline","lastModifiedDate":"2021-09-04"},{"lineNumber":184,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":185,"author":{"gitId":"a-tph"},"content":"     * @param userInput A task a user wants to add that has a deadline","lastModifiedDate":"2021-09-04"},{"lineNumber":186,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":187,"author":{"gitId":"a-tph"},"content":"    private static void addDeadline(String userInput) {","lastModifiedDate":"2021-09-04"},{"lineNumber":188,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":189,"author":{"gitId":"a-tph"},"content":"            String[] infoArr \u003d processDeadlineInput(userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":190,"author":{"gitId":"a-tph"},"content":"            String taskDescription \u003d infoArr[0];","lastModifiedDate":"2021-09-04"},{"lineNumber":191,"author":{"gitId":"a-tph"},"content":"            String deadline \u003d infoArr[1];","lastModifiedDate":"2021-09-04"},{"lineNumber":192,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":193,"author":{"gitId":"a-tph"},"content":"            tasks.add(new Deadline(taskDescription, deadline));","lastModifiedDate":"2021-09-04"},{"lineNumber":194,"author":{"gitId":"a-tph"},"content":"            printAddedTask();","lastModifiedDate":"2021-09-04"},{"lineNumber":195,"author":{"gitId":"a-tph"},"content":"            appendTaskToFile(getAddedTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":196,"author":{"gitId":"a-tph"},"content":"        } catch (EmptyFieldException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":197,"author":{"gitId":"a-tph"},"content":"            printMessage(FAILURE_MESSAGE_ADD_DEADLINE);","lastModifiedDate":"2021-09-04"},{"lineNumber":198,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":199,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":200,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":201,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":202,"author":{"gitId":"a-tph"},"content":"     * Process the user input to extract description and deadline","lastModifiedDate":"2021-09-04"},{"lineNumber":203,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":204,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provided by user","lastModifiedDate":"2021-09-04"},{"lineNumber":205,"author":{"gitId":"a-tph"},"content":"     * @return String array of description and deadline","lastModifiedDate":"2021-09-04"},{"lineNumber":206,"author":{"gitId":"a-tph"},"content":"     * @throws EmptyFieldException If description or deadline is empty","lastModifiedDate":"2021-09-04"},{"lineNumber":207,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":208,"author":{"gitId":"a-tph"},"content":"    private static String[] processDeadlineInput(String userInput) throws EmptyFieldException {","lastModifiedDate":"2021-09-04"},{"lineNumber":209,"author":{"gitId":"a-tph"},"content":"        String taskInfo \u003d userInput.substring(DEADLINE_LENGTH).strip();","lastModifiedDate":"2021-09-04"},{"lineNumber":210,"author":{"gitId":"a-tph"},"content":"        String[] infoArr \u003d taskInfo.split(\" /by \", 2);","lastModifiedDate":"2021-09-04"},{"lineNumber":211,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":212,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":213,"author":{"gitId":"a-tph"},"content":"            String taskDescription \u003d infoArr[0].strip();","lastModifiedDate":"2021-08-28"},{"lineNumber":214,"author":{"gitId":"a-tph"},"content":"            String deadline \u003d infoArr[1].strip();","lastModifiedDate":"2021-09-04"},{"lineNumber":215,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":216,"author":{"gitId":"a-tph"},"content":"            if (taskDescription.isEmpty() || deadline.isEmpty()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":217,"author":{"gitId":"a-tph"},"content":"                throw new EmptyFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":218,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":219,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":220,"author":{"gitId":"a-tph"},"content":"            infoArr[0] \u003d taskDescription;","lastModifiedDate":"2021-09-04"},{"lineNumber":221,"author":{"gitId":"a-tph"},"content":"            infoArr[1] \u003d deadline;","lastModifiedDate":"2021-09-04"},{"lineNumber":222,"author":{"gitId":"a-tph"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":223,"author":{"gitId":"a-tph"},"content":"            throw new EmptyFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":224,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":225,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":226,"author":{"gitId":"a-tph"},"content":"        return infoArr;","lastModifiedDate":"2021-09-04"},{"lineNumber":227,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":228,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":229,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":230,"author":{"gitId":"a-tph"},"content":"     * Adds a task that is an event","lastModifiedDate":"2021-09-04"},{"lineNumber":231,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":232,"author":{"gitId":"a-tph"},"content":"     * @param userInput An event the user wants to add","lastModifiedDate":"2021-09-04"},{"lineNumber":233,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":234,"author":{"gitId":"a-tph"},"content":"    private static void addEvent(String userInput) {","lastModifiedDate":"2021-09-04"},{"lineNumber":235,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":236,"author":{"gitId":"a-tph"},"content":"            String[] infoArr \u003d processEventInput(userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":237,"author":{"gitId":"a-tph"},"content":"            String taskDescription \u003d infoArr[0];","lastModifiedDate":"2021-09-04"},{"lineNumber":238,"author":{"gitId":"a-tph"},"content":"            String timeFrame \u003d infoArr[1];","lastModifiedDate":"2021-09-04"},{"lineNumber":239,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":240,"author":{"gitId":"a-tph"},"content":"            tasks.add(new Event(taskDescription, timeFrame));","lastModifiedDate":"2021-09-04"},{"lineNumber":241,"author":{"gitId":"a-tph"},"content":"            printAddedTask();","lastModifiedDate":"2021-09-04"},{"lineNumber":242,"author":{"gitId":"a-tph"},"content":"            appendTaskToFile(getAddedTask());","lastModifiedDate":"2021-09-11"},{"lineNumber":243,"author":{"gitId":"a-tph"},"content":"        } catch (EmptyFieldException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":244,"author":{"gitId":"a-tph"},"content":"            printMessage(FAILURE_MESSAGE_ADD_EVENT);","lastModifiedDate":"2021-09-04"},{"lineNumber":245,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":246,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":247,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":248,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":249,"author":{"gitId":"a-tph"},"content":"     * Process the user input to extract description and time frame","lastModifiedDate":"2021-09-04"},{"lineNumber":250,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":251,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provided by user","lastModifiedDate":"2021-09-04"},{"lineNumber":252,"author":{"gitId":"a-tph"},"content":"     * @return String array of description and time frame","lastModifiedDate":"2021-09-04"},{"lineNumber":253,"author":{"gitId":"a-tph"},"content":"     * @throws EmptyFieldException If description or time frame is empty","lastModifiedDate":"2021-09-04"},{"lineNumber":254,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":255,"author":{"gitId":"a-tph"},"content":"    private static String[] processEventInput(String userInput) throws EmptyFieldException {","lastModifiedDate":"2021-09-04"},{"lineNumber":256,"author":{"gitId":"a-tph"},"content":"        String taskInfo \u003d userInput.substring(EVENT_LENGTH).strip();","lastModifiedDate":"2021-09-04"},{"lineNumber":257,"author":{"gitId":"a-tph"},"content":"        String[] infoArr \u003d taskInfo.split(\" /at \", 2);","lastModifiedDate":"2021-09-04"},{"lineNumber":258,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":259,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":260,"author":{"gitId":"a-tph"},"content":"            String taskDescription \u003d infoArr[0].strip();","lastModifiedDate":"2021-08-28"},{"lineNumber":261,"author":{"gitId":"a-tph"},"content":"            String timeframe \u003d infoArr[1].strip();","lastModifiedDate":"2021-09-04"},{"lineNumber":262,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":263,"author":{"gitId":"a-tph"},"content":"            if (taskDescription.isEmpty() || timeframe.isEmpty()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":264,"author":{"gitId":"a-tph"},"content":"                throw new EmptyFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":265,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":266,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":267,"author":{"gitId":"a-tph"},"content":"            infoArr[0] \u003d taskDescription;","lastModifiedDate":"2021-09-04"},{"lineNumber":268,"author":{"gitId":"a-tph"},"content":"            infoArr[1] \u003d timeframe;","lastModifiedDate":"2021-09-04"},{"lineNumber":269,"author":{"gitId":"a-tph"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":270,"author":{"gitId":"a-tph"},"content":"            throw new EmptyFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":271,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":272,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":273,"author":{"gitId":"a-tph"},"content":"        return infoArr;","lastModifiedDate":"2021-09-04"},{"lineNumber":274,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":275,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":276,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":277,"author":{"gitId":"a-tph"},"content":"     * Marks task as done for a particular task number","lastModifiedDate":"2021-09-04"},{"lineNumber":278,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":279,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provided by user to indicate task completion for a task","lastModifiedDate":"2021-09-04"},{"lineNumber":280,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":281,"author":{"gitId":"a-tph"},"content":"    private static void indicateDone(String userInput) {","lastModifiedDate":"2021-09-04"},{"lineNumber":282,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":283,"author":{"gitId":"a-tph"},"content":"            Task curTask \u003d processDoneInput(userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":284,"author":{"gitId":"a-tph"},"content":"            curTask.setDone();","lastModifiedDate":"2021-09-04"},{"lineNumber":285,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":286,"author":{"gitId":"a-tph"},"content":"            String doneMessage \u003d TEXT_INDENTATION + \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":287,"author":{"gitId":"a-tph"},"content":"                    + TEXT_INDENTATION + \"  \" + curTask.getTaskInfo() + \"\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":288,"author":{"gitId":"a-tph"},"content":"            printMessage(doneMessage);","lastModifiedDate":"2021-09-04"},{"lineNumber":289,"author":{"gitId":"a-tph"},"content":"            updateTasksToFile();","lastModifiedDate":"2021-09-11"},{"lineNumber":290,"author":{"gitId":"a-tph"},"content":"        } catch (EmptyFieldException | InvalidFieldException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":291,"author":{"gitId":"a-tph"},"content":"            printMessage(FAILURE_MESSAGE_SET_DONE);","lastModifiedDate":"2021-09-04"},{"lineNumber":292,"author":{"gitId":"a-tph"},"content":"        } catch (EmptyTaskException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":293,"author":{"gitId":"a-tph"},"content":"            printMessage(FAILURE_MESSAGE_EMPTY_TASK);","lastModifiedDate":"2021-09-10"},{"lineNumber":294,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":295,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":296,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":297,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":298,"author":{"gitId":"a-tph"},"content":"     * Process user input to extract the object of the associated task number","lastModifiedDate":"2021-09-04"},{"lineNumber":299,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":300,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provided by user","lastModifiedDate":"2021-09-04"},{"lineNumber":301,"author":{"gitId":"a-tph"},"content":"     * @return Task object of the task that is done","lastModifiedDate":"2021-09-10"},{"lineNumber":302,"author":{"gitId":"a-tph"},"content":"     * @throws EmptyFieldException   If task number provided is empty","lastModifiedDate":"2021-09-04"},{"lineNumber":303,"author":{"gitId":"a-tph"},"content":"     * @throws InvalidFieldException If task number provided is invalid","lastModifiedDate":"2021-09-04"},{"lineNumber":304,"author":{"gitId":"a-tph"},"content":"     * @throws EmptyTaskException    If task list is empty","lastModifiedDate":"2021-09-10"},{"lineNumber":305,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":306,"author":{"gitId":"a-tph"},"content":"    private static Task processDoneInput(String userInput) throws EmptyFieldException, InvalidFieldException,","lastModifiedDate":"2021-09-10"},{"lineNumber":307,"author":{"gitId":"a-tph"},"content":"            EmptyTaskException {","lastModifiedDate":"2021-09-10"},{"lineNumber":308,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":309,"author":{"gitId":"a-tph"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-09-10"},{"lineNumber":310,"author":{"gitId":"a-tph"},"content":"            throw new EmptyTaskException();","lastModifiedDate":"2021-09-10"},{"lineNumber":311,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":312,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":313,"author":{"gitId":"a-tph"},"content":"        String[] inputArr \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-10"},{"lineNumber":314,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":315,"author":{"gitId":"a-tph"},"content":"            String doneInput \u003d inputArr[1];","lastModifiedDate":"2021-09-11"},{"lineNumber":316,"author":{"gitId":"a-tph"},"content":"            if (doneInput.isEmpty()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":317,"author":{"gitId":"a-tph"},"content":"                throw new EmptyFieldException();","lastModifiedDate":"2021-09-11"},{"lineNumber":318,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":319,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":320,"author":{"gitId":"a-tph"},"content":"            int taskNumber \u003d Integer.parseInt(doneInput);","lastModifiedDate":"2021-09-11"},{"lineNumber":321,"author":{"gitId":"a-tph"},"content":"            if ((taskNumber \u003e tasks.size()) || (taskNumber \u003c 1) || inputArr.length !\u003d 2) {","lastModifiedDate":"2021-09-04"},{"lineNumber":322,"author":{"gitId":"a-tph"},"content":"                throw new InvalidFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":323,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":324,"author":{"gitId":"a-tph"},"content":"            int taskNumberIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-09-04"},{"lineNumber":325,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":326,"author":{"gitId":"a-tph"},"content":"            return tasks.get(taskNumberIndex);","lastModifiedDate":"2021-09-04"},{"lineNumber":327,"author":{"gitId":"a-tph"},"content":"        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":328,"author":{"gitId":"a-tph"},"content":"            throw new InvalidFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":329,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":330,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":331,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":332,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":333,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":334,"author":{"gitId":"a-tph"},"content":"     * Delete a task specified by a task number","lastModifiedDate":"2021-09-10"},{"lineNumber":335,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":336,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provided by user","lastModifiedDate":"2021-09-10"},{"lineNumber":337,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":338,"author":{"gitId":"a-tph"},"content":"    private static void deleteTask(String userInput) {","lastModifiedDate":"2021-09-10"},{"lineNumber":339,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-10"},{"lineNumber":340,"author":{"gitId":"a-tph"},"content":"            Task deletedTask \u003d processDeleteInput(userInput);","lastModifiedDate":"2021-09-10"},{"lineNumber":341,"author":{"gitId":"a-tph"},"content":"            String deletedTaskInfo \u003d deletedTask.getTaskInfo();","lastModifiedDate":"2021-09-11"},{"lineNumber":342,"author":{"gitId":"a-tph"},"content":"            tasks.remove(deletedTask);","lastModifiedDate":"2021-09-10"},{"lineNumber":343,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":344,"author":{"gitId":"a-tph"},"content":"            String deleteMessage \u003d TEXT_INDENTATION + \"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2021-09-10"},{"lineNumber":345,"author":{"gitId":"a-tph"},"content":"                    + TEXT_INDENTATION + \"  \" + deletedTaskInfo + \"\\n\"","lastModifiedDate":"2021-09-10"},{"lineNumber":346,"author":{"gitId":"a-tph"},"content":"                    + TEXT_INDENTATION + \"You currently have (\"","lastModifiedDate":"2021-09-11"},{"lineNumber":347,"author":{"gitId":"a-tph"},"content":"                    + tasks.size() + \") tasks in your list :)\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":348,"author":{"gitId":"a-tph"},"content":"            printMessage(deleteMessage);","lastModifiedDate":"2021-09-10"},{"lineNumber":349,"author":{"gitId":"a-tph"},"content":"            updateTasksToFile();","lastModifiedDate":"2021-09-11"},{"lineNumber":350,"author":{"gitId":"a-tph"},"content":"        } catch (EmptyFieldException | InvalidFieldException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":351,"author":{"gitId":"a-tph"},"content":"            printMessage(FAILURE_MESSAGE_DELETE_TASK);","lastModifiedDate":"2021-09-10"},{"lineNumber":352,"author":{"gitId":"a-tph"},"content":"        } catch (EmptyTaskException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":353,"author":{"gitId":"a-tph"},"content":"            printMessage(FAILURE_MESSAGE_EMPTY_TASK);","lastModifiedDate":"2021-09-10"},{"lineNumber":354,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":355,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":356,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":357,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":358,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":359,"author":{"gitId":"a-tph"},"content":"     * Process user input to extract the deleted task number","lastModifiedDate":"2021-09-10"},{"lineNumber":360,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":361,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provided by the user","lastModifiedDate":"2021-09-10"},{"lineNumber":362,"author":{"gitId":"a-tph"},"content":"     * @return Task object of the deleted task","lastModifiedDate":"2021-09-10"},{"lineNumber":363,"author":{"gitId":"a-tph"},"content":"     * @throws EmptyFieldException   If task number provided is empty","lastModifiedDate":"2021-09-10"},{"lineNumber":364,"author":{"gitId":"a-tph"},"content":"     * @throws InvalidFieldException If task number provided is invalid","lastModifiedDate":"2021-09-10"},{"lineNumber":365,"author":{"gitId":"a-tph"},"content":"     * @throws EmptyTaskException    If task list is empty","lastModifiedDate":"2021-09-10"},{"lineNumber":366,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":367,"author":{"gitId":"a-tph"},"content":"    private static Task processDeleteInput(String userInput) throws EmptyFieldException, InvalidFieldException,","lastModifiedDate":"2021-09-10"},{"lineNumber":368,"author":{"gitId":"a-tph"},"content":"            EmptyTaskException {","lastModifiedDate":"2021-09-10"},{"lineNumber":369,"author":{"gitId":"a-tph"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2021-09-10"},{"lineNumber":370,"author":{"gitId":"a-tph"},"content":"            throw new EmptyTaskException();","lastModifiedDate":"2021-09-10"},{"lineNumber":371,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":372,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":373,"author":{"gitId":"a-tph"},"content":"        String taskInput \u003d userInput.substring(DELETE_LENGTH).strip();","lastModifiedDate":"2021-09-11"},{"lineNumber":374,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":375,"author":{"gitId":"a-tph"},"content":"        if (taskInput.isEmpty()) {","lastModifiedDate":"2021-09-10"},{"lineNumber":376,"author":{"gitId":"a-tph"},"content":"            throw new EmptyFieldException();","lastModifiedDate":"2021-09-04"},{"lineNumber":377,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":378,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":379,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-10"},{"lineNumber":380,"author":{"gitId":"a-tph"},"content":"            int taskNumber \u003d Integer.parseInt(taskInput);","lastModifiedDate":"2021-09-10"},{"lineNumber":381,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":382,"author":{"gitId":"a-tph"},"content":"            if ((taskNumber \u003e tasks.size()) || (taskNumber \u003c 1)) {","lastModifiedDate":"2021-09-10"},{"lineNumber":383,"author":{"gitId":"a-tph"},"content":"                throw new InvalidFieldException();","lastModifiedDate":"2021-09-10"},{"lineNumber":384,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":385,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":386,"author":{"gitId":"a-tph"},"content":"            int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-09-10"},{"lineNumber":387,"author":{"gitId":"a-tph"},"content":"            Task deletedTask \u003d tasks.get(taskIndex);","lastModifiedDate":"2021-09-10"},{"lineNumber":388,"author":{"gitId":"a-tph"},"content":"            return deletedTask;","lastModifiedDate":"2021-09-10"},{"lineNumber":389,"author":{"gitId":"a-tph"},"content":"        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":390,"author":{"gitId":"a-tph"},"content":"            throw new InvalidFieldException();","lastModifiedDate":"2021-09-10"},{"lineNumber":391,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":392,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":393,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":394,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":395,"author":{"gitId":"a-tph"},"content":"     * Greet message from Kate","lastModifiedDate":"2021-09-11"},{"lineNumber":396,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":397,"author":{"gitId":"a-tph"},"content":"    public static void printGreetMessage() {","lastModifiedDate":"2021-08-28"},{"lineNumber":398,"author":{"gitId":"a-tph"},"content":"        System.out.println(LOGO_KATE);","lastModifiedDate":"2021-08-28"},{"lineNumber":399,"author":{"gitId":"a-tph"},"content":"        printMessage(GREET_MESSAGE);","lastModifiedDate":"2021-08-28"},{"lineNumber":400,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":401,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":402,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":403,"author":{"gitId":"a-tph"},"content":"     * Bye message from Kate","lastModifiedDate":"2021-09-11"},{"lineNumber":404,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":405,"author":{"gitId":"a-tph"},"content":"    public static void printByeMessage() {","lastModifiedDate":"2021-08-28"},{"lineNumber":406,"author":{"gitId":"a-tph"},"content":"        printMessage(BYE_MESSAGE);","lastModifiedDate":"2021-08-28"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":408,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":409,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":410,"author":{"gitId":"a-tph"},"content":"     * Prints a general message that is nicely formatted","lastModifiedDate":"2021-08-28"},{"lineNumber":411,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":412,"author":{"gitId":"a-tph"},"content":"     * @param msg A string input to be formatted and printed","lastModifiedDate":"2021-08-28"},{"lineNumber":413,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":414,"author":{"gitId":"a-tph"},"content":"    public static void printMessage(String msg) {","lastModifiedDate":"2021-08-28"},{"lineNumber":415,"author":{"gitId":"a-tph"},"content":"        String formattedMsg \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":416,"author":{"gitId":"a-tph"},"content":"        formattedMsg +\u003d TEXT_WRAPPER + msg + TEXT_WRAPPER;","lastModifiedDate":"2021-08-28"},{"lineNumber":417,"author":{"gitId":"a-tph"},"content":"        System.out.println(formattedMsg);","lastModifiedDate":"2021-08-28"},{"lineNumber":418,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":419,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":420,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":421,"author":{"gitId":"a-tph"},"content":"     * Prints a confirmation that a task has been added","lastModifiedDate":"2021-08-28"},{"lineNumber":422,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":423,"author":{"gitId":"a-tph"},"content":"    public static void printAddedTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":424,"author":{"gitId":"a-tph"},"content":"        String formattedMsg \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":425,"author":{"gitId":"a-tph"},"content":"        formattedMsg +\u003d TEXT_WRAPPER + TEXT_INDENTATION + \"Okay, I have added this task!\\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":426,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"  \" + getAddedTask().getTaskInfo() + \"\\n\"","lastModifiedDate":"2021-09-11"},{"lineNumber":427,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"You currently have (\" + tasks.size()","lastModifiedDate":"2021-08-28"},{"lineNumber":428,"author":{"gitId":"a-tph"},"content":"                + \") tasks in your list :)\\n\" + TEXT_WRAPPER;","lastModifiedDate":"2021-08-28"},{"lineNumber":429,"author":{"gitId":"a-tph"},"content":"        System.out.println(formattedMsg);","lastModifiedDate":"2021-08-28"},{"lineNumber":430,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":431,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":432,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":433,"author":{"gitId":"a-tph"},"content":"     * Prints all the tasks entered by the user","lastModifiedDate":"2021-08-28"},{"lineNumber":434,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":435,"author":{"gitId":"a-tph"},"content":"    public static void printTasks() {","lastModifiedDate":"2021-08-28"},{"lineNumber":436,"author":{"gitId":"a-tph"},"content":"        String formattedMsg \u003d \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":437,"author":{"gitId":"a-tph"},"content":"        formattedMsg +\u003d TEXT_WRAPPER + TEXT_INDENTATION + \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-08-28"},{"lineNumber":438,"author":{"gitId":"a-tph"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2021-08-28"},{"lineNumber":439,"author":{"gitId":"a-tph"},"content":"            Task curTask \u003d tasks.get(i);","lastModifiedDate":"2021-08-28"},{"lineNumber":440,"author":{"gitId":"a-tph"},"content":"            int numberedBullets \u003d i + 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":441,"author":{"gitId":"a-tph"},"content":"            formattedMsg +\u003d TEXT_INDENTATION + numberedBullets + \". \"","lastModifiedDate":"2021-08-28"},{"lineNumber":442,"author":{"gitId":"a-tph"},"content":"                    + curTask.getTaskInfo() + \"\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":443,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":444,"author":{"gitId":"a-tph"},"content":"        formattedMsg +\u003d TEXT_WRAPPER;","lastModifiedDate":"2021-08-28"},{"lineNumber":445,"author":{"gitId":"a-tph"},"content":"        System.out.println(formattedMsg);","lastModifiedDate":"2021-08-28"},{"lineNumber":446,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":447,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":448,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":449,"author":{"gitId":"a-tph"},"content":"     * Retrieves the task added most recently","lastModifiedDate":"2021-08-28"},{"lineNumber":450,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":451,"author":{"gitId":"a-tph"},"content":"     * @return Most recently added Task object","lastModifiedDate":"2021-08-28"},{"lineNumber":452,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":453,"author":{"gitId":"a-tph"},"content":"    private static Task getAddedTask() {","lastModifiedDate":"2021-08-28"},{"lineNumber":454,"author":{"gitId":"a-tph"},"content":"        int lastElementIndex \u003d tasks.size() - 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":455,"author":{"gitId":"a-tph"},"content":"        return tasks.get(lastElementIndex);","lastModifiedDate":"2021-08-28"},{"lineNumber":456,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":457,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":458,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":459,"author":{"gitId":"a-tph"},"content":"     * Extracts the command from the user input","lastModifiedDate":"2021-09-04"},{"lineNumber":460,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":461,"author":{"gitId":"a-tph"},"content":"     * @param userInput Input provide by user","lastModifiedDate":"2021-09-04"},{"lineNumber":462,"author":{"gitId":"a-tph"},"content":"     * @return Command object of the given valid command","lastModifiedDate":"2021-09-04"},{"lineNumber":463,"author":{"gitId":"a-tph"},"content":"     * @throws InvalidCommandException If command is invalid","lastModifiedDate":"2021-09-04"},{"lineNumber":464,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":465,"author":{"gitId":"a-tph"},"content":"    private static Command extractCommand(String userInput) throws InvalidCommandException {","lastModifiedDate":"2021-09-04"},{"lineNumber":466,"author":{"gitId":"a-tph"},"content":"        String[] inputArr \u003d userInput.split(\" \");","lastModifiedDate":"2021-09-04"},{"lineNumber":467,"author":{"gitId":"a-tph"},"content":"        String givenCommand \u003d inputArr[0].toUpperCase();","lastModifiedDate":"2021-09-04"},{"lineNumber":468,"author":{"gitId":"a-tph"},"content":"        for (Command command : Command.values()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":469,"author":{"gitId":"a-tph"},"content":"            if (command.name().equals(givenCommand)) {","lastModifiedDate":"2021-09-04"},{"lineNumber":470,"author":{"gitId":"a-tph"},"content":"                return command;","lastModifiedDate":"2021-09-04"},{"lineNumber":471,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":472,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":473,"author":{"gitId":"a-tph"},"content":"        throw new InvalidCommandException();","lastModifiedDate":"2021-09-04"},{"lineNumber":474,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":475,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":476,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":477,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":478,"author":{"gitId":"a-tph"},"content":"     * Prints the list of all available commands","lastModifiedDate":"2021-08-28"},{"lineNumber":479,"author":{"gitId":"a-tph"},"content":"     * Only prints when user key in an invalid command","lastModifiedDate":"2021-08-28"},{"lineNumber":480,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":481,"author":{"gitId":"a-tph"},"content":"    public static void printHelpPage() {","lastModifiedDate":"2021-08-28"},{"lineNumber":482,"author":{"gitId":"a-tph"},"content":"        String helpText \u003d TEXT_INDENTATION + \"Please enter only the following commands: \\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":483,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"- \" + COMMAND_TODO + \"\\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":484,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"- \" + COMMAND_DEADLINE + \"\\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":485,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"- \" + COMMAND_EVENT + \"\\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":486,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"- \" + COMMAND_DONE + \"\\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":487,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"- \" + COMMAND_DELETE + \"\\n\"","lastModifiedDate":"2021-09-10"},{"lineNumber":488,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"- \" + COMMAND_LIST + \"\\n\"","lastModifiedDate":"2021-08-28"},{"lineNumber":489,"author":{"gitId":"a-tph"},"content":"                + TEXT_INDENTATION + \"- \" + COMMAND_BYE + \"\\n\";","lastModifiedDate":"2021-08-28"},{"lineNumber":490,"author":{"gitId":"a-tph"},"content":"        printMessage(helpText);","lastModifiedDate":"2021-08-28"},{"lineNumber":491,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":492,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":493,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":494,"author":{"gitId":"a-tph"},"content":"     * Creates the data folder and file if it doesn\u0027t exist","lastModifiedDate":"2021-09-11"},{"lineNumber":495,"author":{"gitId":"a-tph"},"content":"     * The file contents will be wiped out for every instance of the program","lastModifiedDate":"2021-09-11"},{"lineNumber":496,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":497,"author":{"gitId":"a-tph"},"content":"    public static void createDataFile() {","lastModifiedDate":"2021-09-11"},{"lineNumber":498,"author":{"gitId":"a-tph"},"content":"        File dataDir \u003d new File(DIRECTORY_NAME_DATA);","lastModifiedDate":"2021-09-11"},{"lineNumber":499,"author":{"gitId":"a-tph"},"content":"        File dataFile \u003d new File(PATH_KATE);","lastModifiedDate":"2021-09-11"},{"lineNumber":500,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":501,"author":{"gitId":"a-tph"},"content":"            dataDir.mkdirs();","lastModifiedDate":"2021-09-11"},{"lineNumber":502,"author":{"gitId":"a-tph"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2021-09-11"},{"lineNumber":503,"author":{"gitId":"a-tph"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":504,"author":{"gitId":"a-tph"},"content":"            printMessage(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-09-11"},{"lineNumber":505,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":506,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":507,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":508,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":509,"author":{"gitId":"a-tph"},"content":"     * Loads the task contents from data/kate.txt","lastModifiedDate":"2021-09-11"},{"lineNumber":510,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":511,"author":{"gitId":"a-tph"},"content":"    private static void loadDataFile() {","lastModifiedDate":"2021-09-11"},{"lineNumber":512,"author":{"gitId":"a-tph"},"content":"        File dataFile \u003d new File(PATH_KATE);","lastModifiedDate":"2021-09-11"},{"lineNumber":513,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":514,"author":{"gitId":"a-tph"},"content":"            Scanner scanner \u003d new Scanner(dataFile);","lastModifiedDate":"2021-09-11"},{"lineNumber":515,"author":{"gitId":"a-tph"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":516,"author":{"gitId":"a-tph"},"content":"                processData(scanner.nextLine());","lastModifiedDate":"2021-09-11"},{"lineNumber":517,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":518,"author":{"gitId":"a-tph"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":519,"author":{"gitId":"a-tph"},"content":"            printMessage(TEXT_INDENTATION + \"File not found!\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":520,"author":{"gitId":"a-tph"},"content":"        } catch (FileCorruptedException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":521,"author":{"gitId":"a-tph"},"content":"            printMessage(TEXT_INDENTATION + \"Did you tamper with the data file? It is CORRUPTED!\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":522,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":523,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":524,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":525,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":526,"author":{"gitId":"a-tph"},"content":"     * Process the text input and pass it into the current array list;","lastModifiedDate":"2021-09-11"},{"lineNumber":527,"author":{"gitId":"a-tph"},"content":"     * @param storedTask One line of the record in data/kate.txt","lastModifiedDate":"2021-09-11"},{"lineNumber":528,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":529,"author":{"gitId":"a-tph"},"content":"    private static void processData(String storedTask) throws FileCorruptedException {","lastModifiedDate":"2021-09-11"},{"lineNumber":530,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":531,"author":{"gitId":"a-tph"},"content":"            String[] storedArr \u003d storedTask.split(\" \\\\| \");","lastModifiedDate":"2021-09-11"},{"lineNumber":532,"author":{"gitId":"a-tph"},"content":"            String taskLabel \u003d storedArr[0];","lastModifiedDate":"2021-09-11"},{"lineNumber":533,"author":{"gitId":"a-tph"},"content":"            boolean isDone \u003d Boolean.parseBoolean(storedArr[1]);","lastModifiedDate":"2021-09-11"},{"lineNumber":534,"author":{"gitId":"a-tph"},"content":"            String description \u003d storedArr[2];","lastModifiedDate":"2021-09-11"},{"lineNumber":535,"author":{"gitId":"a-tph"},"content":"            switch (taskLabel) {","lastModifiedDate":"2021-09-11"},{"lineNumber":536,"author":{"gitId":"a-tph"},"content":"            case \"T\":","lastModifiedDate":"2021-09-11"},{"lineNumber":537,"author":{"gitId":"a-tph"},"content":"                tasks.add(new ToDo(description, isDone));","lastModifiedDate":"2021-09-11"},{"lineNumber":538,"author":{"gitId":"a-tph"},"content":"                break;","lastModifiedDate":"2021-09-11"},{"lineNumber":539,"author":{"gitId":"a-tph"},"content":"            case \"D\":","lastModifiedDate":"2021-09-11"},{"lineNumber":540,"author":{"gitId":"a-tph"},"content":"                String deadline \u003d storedArr[3];","lastModifiedDate":"2021-09-11"},{"lineNumber":541,"author":{"gitId":"a-tph"},"content":"                tasks.add(new Deadline(description, isDone, deadline));","lastModifiedDate":"2021-09-11"},{"lineNumber":542,"author":{"gitId":"a-tph"},"content":"                break;","lastModifiedDate":"2021-09-11"},{"lineNumber":543,"author":{"gitId":"a-tph"},"content":"            case \"E\":","lastModifiedDate":"2021-09-11"},{"lineNumber":544,"author":{"gitId":"a-tph"},"content":"                String event \u003d storedArr[3];","lastModifiedDate":"2021-09-11"},{"lineNumber":545,"author":{"gitId":"a-tph"},"content":"                tasks.add(new Event(description, isDone, event));","lastModifiedDate":"2021-09-11"},{"lineNumber":546,"author":{"gitId":"a-tph"},"content":"                break;","lastModifiedDate":"2021-09-11"},{"lineNumber":547,"author":{"gitId":"a-tph"},"content":"            default:","lastModifiedDate":"2021-09-11"},{"lineNumber":548,"author":{"gitId":"a-tph"},"content":"                throw new FileCorruptedException();","lastModifiedDate":"2021-09-16"},{"lineNumber":549,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":550,"author":{"gitId":"a-tph"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":551,"author":{"gitId":"a-tph"},"content":"            throw new FileCorruptedException();","lastModifiedDate":"2021-09-11"},{"lineNumber":552,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":553,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":554,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":555,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":556,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":557,"author":{"gitId":"a-tph"},"content":"     * Appends a task to ./data/kate.txt","lastModifiedDate":"2021-09-11"},{"lineNumber":558,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":559,"author":{"gitId":"a-tph"},"content":"     * @param task Task to be appended","lastModifiedDate":"2021-09-11"},{"lineNumber":560,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":561,"author":{"gitId":"a-tph"},"content":"    private static void appendTaskToFile(Task task) {","lastModifiedDate":"2021-09-11"},{"lineNumber":562,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":563,"author":{"gitId":"a-tph"},"content":"            FileWriter file \u003d new FileWriter(PATH_KATE, true);","lastModifiedDate":"2021-09-11"},{"lineNumber":564,"author":{"gitId":"a-tph"},"content":"            String taskInfo \u003d task.getTaskInfoForFile() + \"\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":565,"author":{"gitId":"a-tph"},"content":"            file.write(taskInfo);","lastModifiedDate":"2021-09-11"},{"lineNumber":566,"author":{"gitId":"a-tph"},"content":"            file.close();","lastModifiedDate":"2021-09-11"},{"lineNumber":567,"author":{"gitId":"a-tph"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":568,"author":{"gitId":"a-tph"},"content":"            printMessage(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-09-11"},{"lineNumber":569,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":570,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":571,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":572,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":573,"author":{"gitId":"a-tph"},"content":"     * Update the contents of task information to ./data/kate.txt","lastModifiedDate":"2021-09-11"},{"lineNumber":574,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":575,"author":{"gitId":"a-tph"},"content":"    private static void updateTasksToFile() {","lastModifiedDate":"2021-09-11"},{"lineNumber":576,"author":{"gitId":"a-tph"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":577,"author":{"gitId":"a-tph"},"content":"            FileWriter file \u003d new FileWriter(PATH_KATE);","lastModifiedDate":"2021-09-11"},{"lineNumber":578,"author":{"gitId":"a-tph"},"content":"            String taskInfo \u003d \"\";","lastModifiedDate":"2021-09-11"},{"lineNumber":579,"author":{"gitId":"a-tph"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2021-09-11"},{"lineNumber":580,"author":{"gitId":"a-tph"},"content":"                Task curTask \u003d tasks.get(i);","lastModifiedDate":"2021-09-11"},{"lineNumber":581,"author":{"gitId":"a-tph"},"content":"                taskInfo +\u003d curTask.getTaskInfoForFile() + \"\\n\";","lastModifiedDate":"2021-09-11"},{"lineNumber":582,"author":{"gitId":"a-tph"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":583,"author":{"gitId":"a-tph"},"content":"            file.write(taskInfo);","lastModifiedDate":"2021-09-11"},{"lineNumber":584,"author":{"gitId":"a-tph"},"content":"            file.close();","lastModifiedDate":"2021-09-11"},{"lineNumber":585,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":586,"author":{"gitId":"a-tph"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":587,"author":{"gitId":"a-tph"},"content":"            printMessage(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-09-11"},{"lineNumber":588,"author":{"gitId":"a-tph"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":589,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":590,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":591,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"a-tph":589,"-":2}},{"path":"src/main/java/kate/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.command;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public enum Command {","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"    TODO, DEADLINE, EVENT, LIST, DONE, DELETE, HELP, BYE","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"a-tph":5}},{"path":"src/main/java/kate/exception/EmptyFieldException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class EmptyFieldException extends Exception {","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"a-tph":4}},{"path":"src/main/java/kate/exception/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.exception;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class EmptyTaskException extends Exception {","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"a-tph":4}},{"path":"src/main/java/kate/exception/FileCorruptedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.exception;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class FileCorruptedException extends Exception {","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"a-tph":4}},{"path":"src/main/java/kate/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"a-tph":4}},{"path":"src/main/java/kate/exception/InvalidFieldException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.exception;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class InvalidFieldException extends Exception {","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"a-tph":4}},{"path":"src/main/java/kate/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"    protected String deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"a-tph"},"content":"    private static final String DEADLINE_CHECKBOX \u003d \"[D]\";","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"a-tph"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"a-tph"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"a-tph"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"a-tph"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"a-tph"},"content":"    public Deadline(String description, boolean isDone, String deadline) {","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"a-tph"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"a-tph"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"a-tph"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"a-tph"},"content":"     * Retrieves the deadline information to be written to a file","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"a-tph"},"content":"     * @return Formatted String of Deadline information","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"a-tph"},"content":"    public String getTaskInfoForFile() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"a-tph"},"content":"        return \"D\" + \" | \" + isDone + \" | \" + description + \" | \" + deadline;","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"a-tph"},"content":"     * Retrieves Task information and additional deadline information","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"a-tph"},"content":"     * @return String description of task and additional deadline information","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"a-tph"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"a-tph"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"a-tph"},"content":"        return DEADLINE_CHECKBOX + super.getTaskInfo()","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"a-tph"},"content":"                + \" (by: \" + deadline + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"a-tph":38}},{"path":"src/main/java/kate/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"    protected String timeFrame;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"a-tph"},"content":"    private static final String EVENT_CHECKBOX \u003d \"[E]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"a-tph"},"content":"    public Event(String description, String timeFrame) {","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"a-tph"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"a-tph"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"a-tph"},"content":"        this.timeFrame \u003d timeFrame;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"a-tph"},"content":"    public Event(String description, boolean isDone, String timeFrame) {","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"a-tph"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"a-tph"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"a-tph"},"content":"        this.timeFrame \u003d timeFrame;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"a-tph"},"content":"     * Retrieves the event information to be written to a file","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"a-tph"},"content":"     * @return Formatted String of Event information","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"a-tph"},"content":"    public String getTaskInfoForFile() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"a-tph"},"content":"        return \"E\" + \" | \" + isDone + \" | \" + description + \" | \" + timeFrame;","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"a-tph"},"content":"     * Retrieves Task information and additional event information","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"a-tph"},"content":"     * @return String description of task and additional event information","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"a-tph"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"a-tph"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"a-tph"},"content":"        return EVENT_CHECKBOX + super.getTaskInfo()","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"a-tph"},"content":"                + \" (at: \" + timeFrame + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"a-tph":38}},{"path":"src/main/java/kate/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"    protected String description;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"a-tph"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"a-tph"},"content":"    public abstract String getTaskInfoForFile();","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"a-tph"},"content":"     * Retrieves status icon for tasks that are either done or not done","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"a-tph"},"content":"     * @return String \"X\" if done or \" \" if not done","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"a-tph"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"a-tph"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"a-tph"},"content":"     * Sets task to done","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"a-tph"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"a-tph"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"a-tph"},"content":"     * Retrieves the task information with description","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"a-tph"},"content":"     * @return Description of task","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"a-tph"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"a-tph"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"a-tph":33}},{"path":"src/main/java/kate/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"package kate.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"    private static final String TODO_CHECKBOX \u003d \"[T]\";","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"a-tph"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"a-tph"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"a-tph"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"a-tph"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"a-tph"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"a-tph"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"a-tph"},"content":"     * Retrieves the todo information to be written to a file","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"a-tph"},"content":"     * @return Formatted String of Todo information","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"a-tph"},"content":"    public String getTaskInfoForFile() {","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"a-tph"},"content":"        return \"T\" + \" | \" + isDone + \" | \" + description;","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"a-tph"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"a-tph"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"a-tph"},"content":"     * Retrieves Task information and additional todo information","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"a-tph"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"a-tph"},"content":"     * @return String description of task and additional todo information","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"a-tph"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"a-tph"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"a-tph"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"a-tph"},"content":"        return TODO_CHECKBOX + super.getTaskInfo();","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"a-tph"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"a-tph"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"a-tph":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"a-tph"},"content":"test","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"a-tph"},"content":"todo sleep","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"a-tph"},"content":"deadline sleep by 10pm","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"a-tph"},"content":"deadline sleep /by 11pm","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"a-tph"},"content":"event wake up /at 5am","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"a-tph"},"content":"list","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"a-tph"},"content":"done 1","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"a-tph"},"content":"done 3","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"a-tph"},"content":"list","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"a-tph"},"content":"bye","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"a-tph":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"a-tph"},"content":"java -classpath ..\\bin Kate \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"a-tph":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"a-tph"},"content":"java -classpath ../bin Kate \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"a-tph":1}}]
