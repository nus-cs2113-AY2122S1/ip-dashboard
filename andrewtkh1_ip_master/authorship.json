[{"path":"src/main/java/tan/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    final static String BORDER \u003d \"------------------------------------------------------------------------\";","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"        final Scanner SC \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"        printIntro();","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"        String input;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"        while (true) {","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"            input \u003d readInput(SC);","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"            String command \u003d getCommand(input);","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"            switch (command) {","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"            case \"end\":","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"                exitProgram();","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"            case \"list\":","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"                TaskManager.printList();","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"            case \"done\":","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"                TaskManager.markTaskAsDone(getIndexOfTask(input));","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"            default:","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"                TaskManager.addTask(input);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(BORDER);","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"     * Simply prints the intro message","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"     * \u0026 border once.","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"    public static void printIntro() {","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Top of the morning my good sir, what can I do for you on this fine day?\");","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     * Simply prints the outro message","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"     * \u0026 border once.","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"    public static void printOutro() {","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"I bid you farewell my good man. Good Bye.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     * This function reads the users input","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     * and strips any extra front \u0026 back space","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     * and returns the String.","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"     * @param sc The scanner that allows java to read from the terminal.","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"     * @return The user input in a String format without any trailing spaces","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"    public static String readInput(Scanner sc) {","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"        return input.strip();","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"     * Calls the printOutro function","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"     * and closes this program.","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"    public static void exitProgram() {","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"        printOutro();","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input as a String","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"     * splits it into an array along spaces","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"     * and assumes the user keyed in the corresponding","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"     * index at the 2nd input. It then returns the index","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"     * in integer.","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a string.","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"     * @return The index of the task in integer.","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"    public static int getIndexOfTask(String x) {","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"        String[] listOfInputs \u003d x.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"        //To implement a try-catch here.","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"        return Integer.parseInt(listOfInputs[1]);","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"     * splits it along the spaces \u0026 returns","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"     * the first \"word\" of the string.","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole string.","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"     * @return The first word of the string.","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"    public static String getCommand(String x) {","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"        return x.split(\" \")[0];","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"andrewtkh1":97,"-":4}},{"path":"src/main/java/tan/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import tan.exceptions.DukeFormatExceptions;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Deadline;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Event;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.ToDo;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"import java.util.List;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    private static List\u003cTask\u003e listOfTasks \u003d new LinkedList\u003cTask\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"    private static int totalNumberOfTask \u003d 0;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"    public TaskManager() {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the Task which is at","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"     * the index, null otherwise.","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * @param indexTask index of the task to obtain.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     * @return Task at specified index.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getTask(int indexTask) {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"        if (indexTask \u003e listOfTasks.size() || indexTask \u003c 0) {","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Task is out of range!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"        return listOfTasks.get(indexTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"     * Marks a certain task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     * @param indexTask The index of the task to be marked as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"    public static void markTaskAsDone(int indexTask) {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"        if (indexTask \u003e listOfTasks.size() || indexTask \u003c 0) {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"No such task!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"            return;","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        Task currentTask \u003d getTask(indexTask - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"        if (currentTask !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"            currentTask.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     * Takes the user input as a string","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     * and decides what type of command it is and","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"     * executes its respective jobs.","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"     * If none of the inputs matches any of the command,","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"     * It tells the user to try again.","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput The entire input from the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"    public static void addTask(String userInput) {","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"        String typeOfTask \u003d getTypeOfTask(userInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"        Task curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"        switch (typeOfTask) {","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"            curTask \u003d getToDoTask(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"            if (curTask \u003d\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"                return;","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"            curTask \u003d getDeadlineTask(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"            if (curTask \u003d\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"                return;","lastModifiedDate":"2021-09-05"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"        case \"event\":","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"            curTask \u003d getEventTask(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"            if (curTask \u003d\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"                return;","lastModifiedDate":"2021-09-05"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"        default:","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Unknown command, Try again.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"            return;","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"        totalNumberOfTask +\u003d 1;","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"You have added: \" + curTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Your current total number of task is: \" + totalNumberOfTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the users input and","lastModifiedDate":"2021-09-05"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"     * splits tries to get the description","lastModifiedDate":"2021-09-05"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"     * and the event date, then creates a new","lastModifiedDate":"2021-09-05"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"     * event task as the parameters and returns it.","lastModifiedDate":"2021-09-05"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"     * If getting the description or Event date fails,","lastModifiedDate":"2021-09-05"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"     * it will throw either a DukeFormatException or","lastModifiedDate":"2021-09-05"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"     * IndexOutOfBoundsException.","lastModifiedDate":"2021-09-05"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":101,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput - The user input in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"     * @return returns the task created, else null.","lastModifiedDate":"2021-09-05"},{"lineNumber":103,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":104,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getEventTask(String userInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":105,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":106,"author":{"gitId":"andrewtkh1"},"content":"            String eventDesc \u003d getDescriptionOfEvent(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":107,"author":{"gitId":"andrewtkh1"},"content":"            String eventTimeDate \u003d getDateTimeOfEvent(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":108,"author":{"gitId":"andrewtkh1"},"content":"            Task curTask \u003d new Event(eventDesc, eventTimeDate);","lastModifiedDate":"2021-09-05"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"            listOfTasks.add(curTask);","lastModifiedDate":"2021-09-05"},{"lineNumber":110,"author":{"gitId":"andrewtkh1"},"content":"            return curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"        } catch (DukeFormatExceptions d) {","lastModifiedDate":"2021-09-05"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(d);","lastModifiedDate":"2021-09-05"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException I) {","lastModifiedDate":"2021-09-05"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please check your formatting \u0026 input!\");","lastModifiedDate":"2021-09-05"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the users input and","lastModifiedDate":"2021-09-05"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"     * splits tries to get the description","lastModifiedDate":"2021-09-05"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"     * and the deadline date, then creates a new","lastModifiedDate":"2021-09-05"},{"lineNumber":123,"author":{"gitId":"andrewtkh1"},"content":"     * deadline task as the parameters and returns it.","lastModifiedDate":"2021-09-05"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"     * If getting the description or deadline date fails,","lastModifiedDate":"2021-09-05"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"     * it will throw either a DukeFormatException or","lastModifiedDate":"2021-09-05"},{"lineNumber":126,"author":{"gitId":"andrewtkh1"},"content":"     * IndexOutOfBoundsException.","lastModifiedDate":"2021-09-05"},{"lineNumber":127,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":128,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput - The user input in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":129,"author":{"gitId":"andrewtkh1"},"content":"     * @return returns the task created, else null.","lastModifiedDate":"2021-09-05"},{"lineNumber":130,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":131,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getDeadlineTask(String userInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":133,"author":{"gitId":"andrewtkh1"},"content":"            String deadlineDesc \u003d getDescriptionOfDeadline(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":134,"author":{"gitId":"andrewtkh1"},"content":"            String deadlineDateTime \u003d getDateTimeOfDeadline(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":135,"author":{"gitId":"andrewtkh1"},"content":"            Task curTask \u003d new Deadline(deadlineDesc, deadlineDateTime);","lastModifiedDate":"2021-09-05"},{"lineNumber":136,"author":{"gitId":"andrewtkh1"},"content":"            listOfTasks.add(curTask);","lastModifiedDate":"2021-09-05"},{"lineNumber":137,"author":{"gitId":"andrewtkh1"},"content":"            return curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":138,"author":{"gitId":"andrewtkh1"},"content":"        } catch (DukeFormatExceptions e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":139,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-05"},{"lineNumber":140,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException x) {","lastModifiedDate":"2021-09-05"},{"lineNumber":141,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please check your formatting \u0026 input!\");","lastModifiedDate":"2021-09-05"},{"lineNumber":142,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":143,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":144,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":145,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":146,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":147,"author":{"gitId":"andrewtkh1"},"content":"     * This function takes in the users input","lastModifiedDate":"2021-09-05"},{"lineNumber":148,"author":{"gitId":"andrewtkh1"},"content":"     * as a String and tries to create the ToDo","lastModifiedDate":"2021-09-05"},{"lineNumber":149,"author":{"gitId":"andrewtkh1"},"content":"     * Task with it. If there is an issue","lastModifiedDate":"2021-09-05"},{"lineNumber":150,"author":{"gitId":"andrewtkh1"},"content":"     * with the formatting, it will return NULL.","lastModifiedDate":"2021-09-05"},{"lineNumber":151,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":152,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput The user\u0027s input in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":153,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the task else NULL.","lastModifiedDate":"2021-09-05"},{"lineNumber":154,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":155,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getToDoTask(String userInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":156,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":157,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":158,"author":{"gitId":"andrewtkh1"},"content":"            String todoDesc \u003d getDescriptionOfToDo(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":159,"author":{"gitId":"andrewtkh1"},"content":"            Task curTask \u003d new ToDo(todoDesc);","lastModifiedDate":"2021-09-05"},{"lineNumber":160,"author":{"gitId":"andrewtkh1"},"content":"            listOfTasks.add(curTask);","lastModifiedDate":"2021-09-05"},{"lineNumber":161,"author":{"gitId":"andrewtkh1"},"content":"            return curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":162,"author":{"gitId":"andrewtkh1"},"content":"        } catch (DukeFormatExceptions e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":163,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-05"},{"lineNumber":164,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":165,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":166,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":167,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":168,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":169,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":170,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input as a string","lastModifiedDate":"2021-08-30"},{"lineNumber":171,"author":{"gitId":"andrewtkh1"},"content":"     * when the user is adding an event and returns","lastModifiedDate":"2021-08-30"},{"lineNumber":172,"author":{"gitId":"andrewtkh1"},"content":"     * the \"at\" date/time as a string. The function","lastModifiedDate":"2021-08-30"},{"lineNumber":173,"author":{"gitId":"andrewtkh1"},"content":"     * uses the \"/at\" to find the date/time. Throws a","lastModifiedDate":"2021-09-05"},{"lineNumber":174,"author":{"gitId":"andrewtkh1"},"content":"     * DukeFormatExceptions error if its unable to find \"/at\".","lastModifiedDate":"2021-09-05"},{"lineNumber":175,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":176,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":177,"author":{"gitId":"andrewtkh1"},"content":"     * @return the date/time of the input.","lastModifiedDate":"2021-09-05"},{"lineNumber":178,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":179,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDateTimeOfEvent(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":180,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /at... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":181,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/at\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":182,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/at\");","lastModifiedDate":"2021-08-30"},{"lineNumber":183,"author":{"gitId":"andrewtkh1"},"content":"            //+3 to the index as we don\u0027t want to capture \"/at\".","lastModifiedDate":"2021-08-30"},{"lineNumber":184,"author":{"gitId":"andrewtkh1"},"content":"            String dateTime \u003d x.substring(indexOfSlash + 3);","lastModifiedDate":"2021-08-30"},{"lineNumber":185,"author":{"gitId":"andrewtkh1"},"content":"            return dateTime.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":186,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":187,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/at\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":188,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":189,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":190,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":191,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input as a string","lastModifiedDate":"2021-08-30"},{"lineNumber":192,"author":{"gitId":"andrewtkh1"},"content":"     * when the user is adding an event and returns","lastModifiedDate":"2021-08-30"},{"lineNumber":193,"author":{"gitId":"andrewtkh1"},"content":"     * the description as a string. The function","lastModifiedDate":"2021-08-30"},{"lineNumber":194,"author":{"gitId":"andrewtkh1"},"content":"     * uses the \"/at\" to find the description. Throws a","lastModifiedDate":"2021-09-05"},{"lineNumber":195,"author":{"gitId":"andrewtkh1"},"content":"     * DukeFormatExceptions error if its unable to find \"/at\".","lastModifiedDate":"2021-09-05"},{"lineNumber":196,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":197,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":198,"author":{"gitId":"andrewtkh1"},"content":"     * @return the date/time of the input.","lastModifiedDate":"2021-09-05"},{"lineNumber":199,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":200,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDescriptionOfEvent(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":201,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /by... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":202,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/at\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":203,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfFirstSpace \u003d x.indexOf(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":204,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/at\");","lastModifiedDate":"2021-08-30"},{"lineNumber":205,"author":{"gitId":"andrewtkh1"},"content":"            String description \u003d x.substring(indexOfFirstSpace + 1, indexOfSlash - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":206,"author":{"gitId":"andrewtkh1"},"content":"            return description.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":207,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":208,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/at\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":209,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":210,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":211,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":212,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input as a string","lastModifiedDate":"2021-08-30"},{"lineNumber":213,"author":{"gitId":"andrewtkh1"},"content":"     * when the user is adding a deadline and returns","lastModifiedDate":"2021-08-30"},{"lineNumber":214,"author":{"gitId":"andrewtkh1"},"content":"     * the deadline date/time as a string. The function","lastModifiedDate":"2021-08-30"},{"lineNumber":215,"author":{"gitId":"andrewtkh1"},"content":"     * uses the \"/by\" to find the date/time. Throws a","lastModifiedDate":"2021-09-05"},{"lineNumber":216,"author":{"gitId":"andrewtkh1"},"content":"     * DukeFormatExceptions error if its unable to find \"/by\".","lastModifiedDate":"2021-09-05"},{"lineNumber":217,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":218,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":219,"author":{"gitId":"andrewtkh1"},"content":"     * @return the date/time of the input","lastModifiedDate":"2021-09-05"},{"lineNumber":220,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":221,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDateTimeOfDeadline(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":222,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /by... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":223,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/by\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":224,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/by\");","lastModifiedDate":"2021-08-30"},{"lineNumber":225,"author":{"gitId":"andrewtkh1"},"content":"            //+3 to the index as we don\u0027t want to capture \"/by\".","lastModifiedDate":"2021-08-30"},{"lineNumber":226,"author":{"gitId":"andrewtkh1"},"content":"            String dateTime \u003d x.substring(indexOfSlash + 3);","lastModifiedDate":"2021-08-30"},{"lineNumber":227,"author":{"gitId":"andrewtkh1"},"content":"            return dateTime.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":228,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":229,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/by\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":230,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":231,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":232,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":233,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input as a string","lastModifiedDate":"2021-08-30"},{"lineNumber":234,"author":{"gitId":"andrewtkh1"},"content":"     * when the user is adding a deadline and returns","lastModifiedDate":"2021-08-30"},{"lineNumber":235,"author":{"gitId":"andrewtkh1"},"content":"     * the description as a string. The function","lastModifiedDate":"2021-08-30"},{"lineNumber":236,"author":{"gitId":"andrewtkh1"},"content":"     * uses the \"/by\" to find the description. Throws a","lastModifiedDate":"2021-09-05"},{"lineNumber":237,"author":{"gitId":"andrewtkh1"},"content":"     * * DukeFormatExceptions error if its unable to find \"/by\".","lastModifiedDate":"2021-09-05"},{"lineNumber":238,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":239,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":240,"author":{"gitId":"andrewtkh1"},"content":"     * @return the date/time of the input or null if \"/by\" is not found.","lastModifiedDate":"2021-08-30"},{"lineNumber":241,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":242,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDescriptionOfDeadline(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":243,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /by... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":244,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/by\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":245,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfFirstSpace \u003d x.indexOf(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":246,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/by\");","lastModifiedDate":"2021-08-30"},{"lineNumber":247,"author":{"gitId":"andrewtkh1"},"content":"            String description \u003d x.substring(indexOfFirstSpace + 1, indexOfSlash - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":248,"author":{"gitId":"andrewtkh1"},"content":"            return description.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":249,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":250,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/by\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":251,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":252,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":253,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":254,"author":{"gitId":"andrewtkh1"},"content":"     * Assumes the type of tasks is the","lastModifiedDate":"2021-08-30"},{"lineNumber":255,"author":{"gitId":"andrewtkh1"},"content":"     * first word in the string and returns","lastModifiedDate":"2021-08-30"},{"lineNumber":256,"author":{"gitId":"andrewtkh1"},"content":"     * that word. If unable to split, returns null.","lastModifiedDate":"2021-09-05"},{"lineNumber":257,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":258,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole string of user input.","lastModifiedDate":"2021-08-30"},{"lineNumber":259,"author":{"gitId":"andrewtkh1"},"content":"     * @return The first word of that String, else null.","lastModifiedDate":"2021-09-05"},{"lineNumber":260,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":261,"author":{"gitId":"andrewtkh1"},"content":"    private static String getTypeOfTask(String x) {","lastModifiedDate":"2021-08-30"},{"lineNumber":262,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":263,"author":{"gitId":"andrewtkh1"},"content":"            String[] inputs \u003d x.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":264,"author":{"gitId":"andrewtkh1"},"content":"            return inputs[0].toLowerCase();","lastModifiedDate":"2021-08-30"},{"lineNumber":265,"author":{"gitId":"andrewtkh1"},"content":"        } catch (PatternSyntaxException p) {","lastModifiedDate":"2021-09-05"},{"lineNumber":266,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Unable to the input properly. Please try again.\");","lastModifiedDate":"2021-09-05"},{"lineNumber":267,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":268,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":269,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":270,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":271,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":272,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the original string with the first","lastModifiedDate":"2021-08-30"},{"lineNumber":273,"author":{"gitId":"andrewtkh1"},"content":"     * word excluded. It finds the first space char","lastModifiedDate":"2021-08-30"},{"lineNumber":274,"author":{"gitId":"andrewtkh1"},"content":"     * and assumes anything before it is the first word.","lastModifiedDate":"2021-08-30"},{"lineNumber":275,"author":{"gitId":"andrewtkh1"},"content":"     * This will throw a DukeFormatExceptions error","lastModifiedDate":"2021-09-05"},{"lineNumber":276,"author":{"gitId":"andrewtkh1"},"content":"     * if it is unable to find a space character in the string.","lastModifiedDate":"2021-09-05"},{"lineNumber":277,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":278,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":279,"author":{"gitId":"andrewtkh1"},"content":"     * @return The remaining String excluding the 1st word.","lastModifiedDate":"2021-08-30"},{"lineNumber":280,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":281,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDescriptionOfToDo(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":282,"author":{"gitId":"andrewtkh1"},"content":"        //Gets the index of the first space.","lastModifiedDate":"2021-08-30"},{"lineNumber":283,"author":{"gitId":"andrewtkh1"},"content":"        int indexOfFirstSpace \u003d x.indexOf(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":284,"author":{"gitId":"andrewtkh1"},"content":"        if (indexOfFirstSpace \u003d\u003d -1) {","lastModifiedDate":"2021-08-30"},{"lineNumber":285,"author":{"gitId":"andrewtkh1"},"content":"            throw new DukeFormatExceptions(\"Parameters are empty! Please try again.\");","lastModifiedDate":"2021-09-05"},{"lineNumber":286,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":287,"author":{"gitId":"andrewtkh1"},"content":"        String description \u003d x.substring(indexOfFirstSpace + 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":288,"author":{"gitId":"andrewtkh1"},"content":"        return description;","lastModifiedDate":"2021-08-30"},{"lineNumber":289,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":290,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":291,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":292,"author":{"gitId":"andrewtkh1"},"content":"     * Prints all the task \u0026 their current status","lastModifiedDate":"2021-08-30"},{"lineNumber":293,"author":{"gitId":"andrewtkh1"},"content":"     * in the list. Or informs the user if the list","lastModifiedDate":"2021-08-30"},{"lineNumber":294,"author":{"gitId":"andrewtkh1"},"content":"     * is empty.","lastModifiedDate":"2021-08-30"},{"lineNumber":295,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":296,"author":{"gitId":"andrewtkh1"},"content":"    public static void printList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":297,"author":{"gitId":"andrewtkh1"},"content":"        if (listOfTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":298,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"List is empty!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":299,"author":{"gitId":"andrewtkh1"},"content":"            return;","lastModifiedDate":"2021-08-21"},{"lineNumber":300,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":301,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Your list of tasks contains:\");","lastModifiedDate":"2021-08-21"},{"lineNumber":302,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":303,"author":{"gitId":"andrewtkh1"},"content":"            for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":304,"author":{"gitId":"andrewtkh1"},"content":"                Task currentTask \u003d listOfTasks.get(i);","lastModifiedDate":"2021-08-21"},{"lineNumber":305,"author":{"gitId":"andrewtkh1"},"content":"                System.out.println(currentTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":306,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":307,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException i) {","lastModifiedDate":"2021-09-05"},{"lineNumber":308,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in printing task! Contact Admin \u003d(\");","lastModifiedDate":"2021-09-05"},{"lineNumber":309,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":310,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":311,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":312,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"andrewtkh1":312}},{"path":"src/main/java/tan/exceptions/DukeFormatExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.exceptions;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class DukeFormatExceptions extends Exception {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"    public DukeFormatExceptions(String message) {","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"        super(message);","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"andrewtkh1":7}},{"path":"src/main/java/tan/tasktype/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    private final String deadlineIcon \u003d \"D\";","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    private String dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"    public Deadline(String description, String dateTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the icon for Deadline tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the String \"D\"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    public String getIcon() {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        return deadlineIcon;","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the deadline for the task","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns deadline in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"    public String getDateTime() {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"        return dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"     * This will return the whole string","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"     * including its icon, status, task name","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"     * and deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task icon, status, name and deadline in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"        return (\"[\" + getIcon() + \"]\" + \"[\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"                + getTaskName() + \" (by: \" + getDateTime() + \")\");","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":45}},{"path":"src/main/java/tan/tasktype/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    private String dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    private final String eventIcon \u003d \"E\";","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"    public Event(String description, String dateTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the icon for Event tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the String \"E\"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    public String getIcon() {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        return eventIcon;","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the do-by date for the task","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns do-by date in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"    public String getDateTime() {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"        return dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"     * This will return the whole string","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"     * including its icon, status, task name","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"     * and do-by date.","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task icon, status, name and do-by date in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"        return (\"[\" + getIcon() + \"]\" + \"[\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"                + getTaskName() + \" (at: \" + getDateTime() + \")\");","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":45}},{"path":"src/main/java/tan/tasktype/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"    protected String name;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    public Task() {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"        this(\"Unnamed\");","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     * This is the abstract function to","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"     * get each task\u0027s respective icon.","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"     * @return The icon in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    public abstract String getIcon();","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the name of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     * @return The name of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"        return name;","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"     * Sets the name of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The name of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    public void setTaskName(String x) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"        this.name \u003d x;","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     * Marks the current task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Sweet! You\u0027ve just completed this task: \");","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"[\" + this.getStatusIcon() + \"] \" + name);","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the status icon of","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     * the current task based on it\u0027s status.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"     * @return The icon of its current status.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"andrewtkh1":60}},{"path":"src/main/java/tan/tasktype/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    private final String toDoIcon \u003d \"T\";","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"        super.setTaskName(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the icon for todo tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the String \"T\"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"    public String getIcon() {","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"        return toDoIcon;","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"     * This will return the whole string","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"     * including its icon, status \u0026 task name.","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task icon, status \u0026 name in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"        return (\"[\" + getIcon() + \"]\"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"                + \"[\" + getStatusIcon() + \"] \" + getTaskName());","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":32}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"abcde","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"todo","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"deadline","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"event","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"todo abcde","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"deadline /by","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"event /at","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"event aaabbb /at","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"deadline helpssss /by","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"end","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"REM the ..\\bin is where it will compile to.","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"javac  -cp ..\\src\\main\\java\\tan -Xlint:none -d ..\\bin ..\\src\\main\\java\\tan\\*.java ..\\src\\main\\java\\tan\\exceptions\\*.java ..\\src\\main\\java\\tan\\tasktype\\*.java","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"REM First FIle path is the compiled Java path following the Package name.","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"REM java -classpath C:\\Users\\Pryo\\Desktop\\CS2113\\bin tan/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"java -classpath ..\\bin tan/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"andrewtkh1":5,"-":18}}]
