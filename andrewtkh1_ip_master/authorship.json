[{"path":"src/main/java/tan/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import tan.exceptions.TaskToStringException;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Deadline;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Event;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Task;","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.ToDo;","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"import java.io.File;","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"import java.util.List;","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"import static java.nio.file.StandardOpenOption.CREATE;","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"/**","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":" * HOW TO USE??","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":" * Call setWriterAndReader to set the csvReader \u0026 csvWriter.","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":" * Then use respective reader/writer to perform task.","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":" * Note, if you close csvWriter, you have to write from top","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":" * aga in. Use Flush to push to current writing in buffer to file.","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":" *","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":" * homePath - The directory that the data file is saved at in String.","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":" *","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":" */","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"public class DataManager {","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"    protected static BufferedReader csvReader;","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"    protected static BufferedWriter csvWriter;","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    private static final String homePath \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"    private static final String[] TITLE \u003d {\"Type\", \"Status\", \"Description\", \"Date\"};","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    private static final String FILE_NAME \u003d \"taskData.csv\";","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"    private static Path DATA_PATH;","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"    private static int totalLinesLoaded \u003d 0;","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"     * Saves the current list by deleting the old taskData.csv file and","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"     * recreates a new one with the new List of task. The file\u0027s","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"     * location is specified by the DATA_PATH variable.","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"     * As such, ensure that the DATA_PATH is set","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"     * before running this function.","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     * @param curList The list that contains all the Task.","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IOException Thrown when there is an error in writing to the file.","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"    public static void saveCurrentList(List\u003cTask\u003e curList) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"        File oldFile \u003d new File(DATA_PATH.toString());","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"        boolean isDeleted \u003d oldFile.delete();","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"        if (!isDeleted) {","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Unable to delete file. Please resolve this issue 1st\");","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"            csvWriter \u003d Files.newBufferedWriter(DATA_PATH, CREATE);","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"        writeHeader();","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"        for (Task curTask : curList) {","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"            String curTaskInCsv \u003d getTaskInCsv(curTask);","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"            if (curTaskInCsv \u003d\u003d null) {","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"                System.out.println(\"Error in converting task to string. Duke will not save this task.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"                continue;","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"            csvWriter.append(curTaskInCsv);","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"            csvWriter.append(System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"            csvWriter.flush();","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the properties of a task in String, CSV format.","lastModifiedDate":"2021-09-18"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"     * If the function fails to convert the string into CSV,","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"     * it will return NULL instead.","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"     * @param curTask The Task to be converted.","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task\u0027s properties in CSV format, null otherwise.","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"    private static String getTaskInCsv(Task curTask) {","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"            String type \u003d curTask.getTaskType();","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"            int taskTypeInt \u003d getTaskTypeInt(type);","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"            if (taskTypeInt \u003d\u003d -1) {","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"                throw new TaskToStringException();","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"            String name \u003d curTask.getTaskName();","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"            String date \u003d curTask.getDateTime();","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"            Boolean status \u003d curTask.getStatus();","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"            String statusAsString \u003d (status) ? \"1\" : \"0\";","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"            String taskAsCsv \u003d taskTypeInt + \",\" + statusAsString + \",\" + name + \",\" + date;","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"            return taskAsCsv;","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"            return null;","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":101,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":103,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the integer corresponding to its task type, else -1.","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"andrewtkh1"},"content":"     * This function takes in a task-type in String","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"andrewtkh1"},"content":"     * and returns its corresponding integer value.","lastModifiedDate":"2021-09-13"},{"lineNumber":107,"author":{"gitId":"andrewtkh1"},"content":"     * Its corresponding task type to integers are,","lastModifiedDate":"2021-09-18"},{"lineNumber":108,"author":{"gitId":"andrewtkh1"},"content":"     * 0 - todo, 1 - deadline, 2 - event, -1 - unknown.","lastModifiedDate":"2021-09-13"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"andrewtkh1"},"content":"     * @param taskType The Task type in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"     * @return The value corresponding to its task type in integer. -1 if unknown.","lastModifiedDate":"2021-09-13"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"    public static int getTaskTypeInt(String taskType) {","lastModifiedDate":"2021-09-13"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"        taskType \u003d taskType.toLowerCase();","lastModifiedDate":"2021-09-13"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-13"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"        case \"todo\":","lastModifiedDate":"2021-09-13"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"            return 0;","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"        case \"deadline\":","lastModifiedDate":"2021-09-13"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"            return 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"        case \"event\":","lastModifiedDate":"2021-09-13"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"            return 2;","lastModifiedDate":"2021-09-13"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"        default:","lastModifiedDate":"2021-09-13"},{"lineNumber":123,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Unknown Task Type!\");","lastModifiedDate":"2021-09-13"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"            return -1;","lastModifiedDate":"2021-09-13"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":126,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":127,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":128,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":129,"author":{"gitId":"andrewtkh1"},"content":"     * Returns a list of task containing all the tasks that","lastModifiedDate":"2021-09-18"},{"lineNumber":130,"author":{"gitId":"andrewtkh1"},"content":"     * was originally in the file.","lastModifiedDate":"2021-09-18"},{"lineNumber":131,"author":{"gitId":"andrewtkh1"},"content":"     * View the getStoredData function to understand more about","lastModifiedDate":"2021-09-13"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"     * the data retrieval.","lastModifiedDate":"2021-09-13"},{"lineNumber":133,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":134,"author":{"gitId":"andrewtkh1"},"content":"     * @return The list of tasks that the file contained.","lastModifiedDate":"2021-09-18"},{"lineNumber":135,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":136,"author":{"gitId":"andrewtkh1"},"content":"    public static List\u003cTask\u003e setFileAndGetTasks() {","lastModifiedDate":"2021-09-13"},{"lineNumber":137,"author":{"gitId":"andrewtkh1"},"content":"        initializeFile();","lastModifiedDate":"2021-09-11"},{"lineNumber":138,"author":{"gitId":"andrewtkh1"},"content":"        List\u003cString[]\u003e storedTasks \u003d getStoredDataInString();","lastModifiedDate":"2021-09-13"},{"lineNumber":139,"author":{"gitId":"andrewtkh1"},"content":"        List\u003cTask\u003e listOfStoredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-13"},{"lineNumber":140,"author":{"gitId":"andrewtkh1"},"content":"        int iterator \u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":141,"author":{"gitId":"andrewtkh1"},"content":"        while (iterator \u003c totalLinesLoaded) {","lastModifiedDate":"2021-09-13"},{"lineNumber":142,"author":{"gitId":"andrewtkh1"},"content":"            Task newTask \u003d getNewTask(storedTasks.get(iterator));","lastModifiedDate":"2021-09-13"},{"lineNumber":143,"author":{"gitId":"andrewtkh1"},"content":"            if (newTask !\u003d null) {","lastModifiedDate":"2021-09-13"},{"lineNumber":144,"author":{"gitId":"andrewtkh1"},"content":"                listOfStoredTasks.add(newTask);","lastModifiedDate":"2021-09-13"},{"lineNumber":145,"author":{"gitId":"andrewtkh1"},"content":"                iterator +\u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":146,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":147,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":148,"author":{"gitId":"andrewtkh1"},"content":"        return listOfStoredTasks;","lastModifiedDate":"2021-09-13"},{"lineNumber":149,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":150,"author":{"gitId":"andrewtkh1"},"content":"///////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2021-09-18"},{"lineNumber":151,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":152,"author":{"gitId":"andrewtkh1"},"content":"     * This program takes in a row of data from the data","lastModifiedDate":"2021-09-13"},{"lineNumber":153,"author":{"gitId":"andrewtkh1"},"content":"     * file but in an array format instead of CSV. It then","lastModifiedDate":"2021-09-13"},{"lineNumber":154,"author":{"gitId":"andrewtkh1"},"content":"     * parses all the data to get the necessary information","lastModifiedDate":"2021-09-13"},{"lineNumber":155,"author":{"gitId":"andrewtkh1"},"content":"     * to create a Task by calling createTask().","lastModifiedDate":"2021-09-13"},{"lineNumber":156,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":157,"author":{"gitId":"andrewtkh1"},"content":"     * @param curTaskString The array of the task\u0027s data from the dataFile.","lastModifiedDate":"2021-09-13"},{"lineNumber":158,"author":{"gitId":"andrewtkh1"},"content":"     * @return The Task created according to the data in the array. Null otherwise.","lastModifiedDate":"2021-09-13"},{"lineNumber":159,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":160,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getNewTask(String[] curTaskString) {","lastModifiedDate":"2021-09-13"},{"lineNumber":161,"author":{"gitId":"andrewtkh1"},"content":"        int taskType \u003d Integer.parseInt(curTaskString[0]);","lastModifiedDate":"2021-09-13"},{"lineNumber":162,"author":{"gitId":"andrewtkh1"},"content":"        int statusInt \u003d Integer.parseInt(curTaskString[1]);","lastModifiedDate":"2021-09-13"},{"lineNumber":163,"author":{"gitId":"andrewtkh1"},"content":"        Boolean isDone \u003d statusInt \u003e\u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":164,"author":{"gitId":"andrewtkh1"},"content":"        String description \u003d curTaskString[2];","lastModifiedDate":"2021-09-13"},{"lineNumber":165,"author":{"gitId":"andrewtkh1"},"content":"        String date \u003d curTaskString[3];","lastModifiedDate":"2021-09-13"},{"lineNumber":166,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":167,"author":{"gitId":"andrewtkh1"},"content":"        return createTask(taskType, isDone, description, date);","lastModifiedDate":"2021-09-13"},{"lineNumber":168,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":169,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":170,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":171,"author":{"gitId":"andrewtkh1"},"content":"     * This function creates \u0026 returns the actual task based on the","lastModifiedDate":"2021-09-13"},{"lineNumber":172,"author":{"gitId":"andrewtkh1"},"content":"     * parameters passed in. If the task type integer is not recognized,","lastModifiedDate":"2021-09-13"},{"lineNumber":173,"author":{"gitId":"andrewtkh1"},"content":"     * null is returned.","lastModifiedDate":"2021-09-13"},{"lineNumber":174,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":175,"author":{"gitId":"andrewtkh1"},"content":"     * @param taskType The integer representing its type of task.","lastModifiedDate":"2021-09-13"},{"lineNumber":176,"author":{"gitId":"andrewtkh1"},"content":"     * @param isDone   The completion status of the task.","lastModifiedDate":"2021-09-13"},{"lineNumber":177,"author":{"gitId":"andrewtkh1"},"content":"     * @param name     The Name of the task.","lastModifiedDate":"2021-09-13"},{"lineNumber":178,"author":{"gitId":"andrewtkh1"},"content":"     * @param date     The date, if there is, of the task.","lastModifiedDate":"2021-09-13"},{"lineNumber":179,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task created. Null if task type is not recognized.","lastModifiedDate":"2021-09-13"},{"lineNumber":180,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":181,"author":{"gitId":"andrewtkh1"},"content":"    private static Task createTask(int taskType, boolean isDone, String name, String date) {","lastModifiedDate":"2021-09-13"},{"lineNumber":182,"author":{"gitId":"andrewtkh1"},"content":"        Task newTask;","lastModifiedDate":"2021-09-13"},{"lineNumber":183,"author":{"gitId":"andrewtkh1"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-13"},{"lineNumber":184,"author":{"gitId":"andrewtkh1"},"content":"        case 0:","lastModifiedDate":"2021-09-13"},{"lineNumber":185,"author":{"gitId":"andrewtkh1"},"content":"            //Task type todo.","lastModifiedDate":"2021-09-13"},{"lineNumber":186,"author":{"gitId":"andrewtkh1"},"content":"            newTask \u003d new ToDo(name, isDone);","lastModifiedDate":"2021-09-13"},{"lineNumber":187,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":188,"author":{"gitId":"andrewtkh1"},"content":"        case 1:","lastModifiedDate":"2021-09-13"},{"lineNumber":189,"author":{"gitId":"andrewtkh1"},"content":"            //Task type Deadline.","lastModifiedDate":"2021-09-13"},{"lineNumber":190,"author":{"gitId":"andrewtkh1"},"content":"            newTask \u003d new Deadline(name, isDone, date);","lastModifiedDate":"2021-09-13"},{"lineNumber":191,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":192,"author":{"gitId":"andrewtkh1"},"content":"        case 2:","lastModifiedDate":"2021-09-13"},{"lineNumber":193,"author":{"gitId":"andrewtkh1"},"content":"            //Task type event.","lastModifiedDate":"2021-09-13"},{"lineNumber":194,"author":{"gitId":"andrewtkh1"},"content":"            newTask \u003d new Event(name, isDone, date);","lastModifiedDate":"2021-09-13"},{"lineNumber":195,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":196,"author":{"gitId":"andrewtkh1"},"content":"        default:","lastModifiedDate":"2021-09-13"},{"lineNumber":197,"author":{"gitId":"andrewtkh1"},"content":"            //Error in task type.","lastModifiedDate":"2021-09-13"},{"lineNumber":198,"author":{"gitId":"andrewtkh1"},"content":"            newTask \u003d null;","lastModifiedDate":"2021-09-13"},{"lineNumber":199,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in task type.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":200,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":201,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":202,"author":{"gitId":"andrewtkh1"},"content":"        return newTask;","lastModifiedDate":"2021-09-13"},{"lineNumber":203,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":204,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":205,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":206,"author":{"gitId":"andrewtkh1"},"content":"     * Reads the dataFile converts the data","lastModifiedDate":"2021-09-13"},{"lineNumber":207,"author":{"gitId":"andrewtkh1"},"content":"     * from CSV into a list of string array and returns it.","lastModifiedDate":"2021-09-13"},{"lineNumber":208,"author":{"gitId":"andrewtkh1"},"content":"     * \u003cp\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":209,"author":{"gitId":"andrewtkh1"},"content":"     * Each List element is a row and","lastModifiedDate":"2021-09-13"},{"lineNumber":210,"author":{"gitId":"andrewtkh1"},"content":"     * each array element is a row split along the commas.","lastModifiedDate":"2021-09-13"},{"lineNumber":211,"author":{"gitId":"andrewtkh1"},"content":"     * In the event that a row is un-readable due to IO exception,","lastModifiedDate":"2021-09-13"},{"lineNumber":212,"author":{"gitId":"andrewtkh1"},"content":"     * it will inform the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":213,"author":{"gitId":"andrewtkh1"},"content":"     * \u003cp\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":214,"author":{"gitId":"andrewtkh1"},"content":"     * Note: setup the csvReader before using this function.","lastModifiedDate":"2021-09-13"},{"lineNumber":215,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":216,"author":{"gitId":"andrewtkh1"},"content":"     * @return The data file\u0027s information in a List of arrays.","lastModifiedDate":"2021-09-13"},{"lineNumber":217,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":218,"author":{"gitId":"andrewtkh1"},"content":"    private static List\u003cString[]\u003e getStoredDataInString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":219,"author":{"gitId":"andrewtkh1"},"content":"        String curLine;","lastModifiedDate":"2021-09-13"},{"lineNumber":220,"author":{"gitId":"andrewtkh1"},"content":"        List\u003cString[]\u003e allTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-13"},{"lineNumber":221,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":222,"author":{"gitId":"andrewtkh1"},"content":"            //Reading the file line by line.","lastModifiedDate":"2021-09-16"},{"lineNumber":223,"author":{"gitId":"andrewtkh1"},"content":"            while ((curLine \u003d csvReader.readLine()) !\u003d null) {","lastModifiedDate":"2021-09-13"},{"lineNumber":224,"author":{"gitId":"andrewtkh1"},"content":"                //Split line by comma.","lastModifiedDate":"2021-09-16"},{"lineNumber":225,"author":{"gitId":"andrewtkh1"},"content":"                String[] output \u003d curLine.split(\",\");","lastModifiedDate":"2021-09-13"},{"lineNumber":226,"author":{"gitId":"andrewtkh1"},"content":"                allTasks.add(output);","lastModifiedDate":"2021-09-13"},{"lineNumber":227,"author":{"gitId":"andrewtkh1"},"content":"                totalLinesLoaded +\u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":228,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":229,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":230,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in reading file! Failed loading data.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":231,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-13"},{"lineNumber":232,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":233,"author":{"gitId":"andrewtkh1"},"content":"        return allTasks;","lastModifiedDate":"2021-09-13"},{"lineNumber":234,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":235,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":236,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":237,"author":{"gitId":"andrewtkh1"},"content":"     * Calls the necessary","lastModifiedDate":"2021-09-18"},{"lineNumber":238,"author":{"gitId":"andrewtkh1"},"content":"     * functions to setup the file, file reader,","lastModifiedDate":"2021-09-13"},{"lineNumber":239,"author":{"gitId":"andrewtkh1"},"content":"     * file writer based on the homePath.","lastModifiedDate":"2021-09-13"},{"lineNumber":240,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":241,"author":{"gitId":"andrewtkh1"},"content":"    private static void initializeFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":242,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":243,"author":{"gitId":"andrewtkh1"},"content":"            setWriterAndReaderAndDataPath(homePath);","lastModifiedDate":"2021-09-13"},{"lineNumber":244,"author":{"gitId":"andrewtkh1"},"content":"            writeHeader();","lastModifiedDate":"2021-09-13"},{"lineNumber":245,"author":{"gitId":"andrewtkh1"},"content":"            csvWriter.close();","lastModifiedDate":"2021-09-11"},{"lineNumber":246,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":247,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in writing to file.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":248,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-12"},{"lineNumber":249,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":250,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-13"},{"lineNumber":251,"author":{"gitId":"andrewtkh1"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-13"},{"lineNumber":252,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-12"},{"lineNumber":253,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":254,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":255,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":256,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":257,"author":{"gitId":"andrewtkh1"},"content":"     * This function writes the Header, as per","lastModifiedDate":"2021-09-13"},{"lineNumber":258,"author":{"gitId":"andrewtkh1"},"content":"     * TITLE values, for the data file.","lastModifiedDate":"2021-09-13"},{"lineNumber":259,"author":{"gitId":"andrewtkh1"},"content":"     * Note to setup the csvWriter before calling this.","lastModifiedDate":"2021-09-13"},{"lineNumber":260,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":261,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IOException Thrown in the event of an error while writing.","lastModifiedDate":"2021-09-13"},{"lineNumber":262,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":263,"author":{"gitId":"andrewtkh1"},"content":"    private static void writeHeader() throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":264,"author":{"gitId":"andrewtkh1"},"content":"        csvWriter.append(String.join(\",\", TITLE));","lastModifiedDate":"2021-09-11"},{"lineNumber":265,"author":{"gitId":"andrewtkh1"},"content":"        csvWriter.append(System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":266,"author":{"gitId":"andrewtkh1"},"content":"        csvWriter.flush();","lastModifiedDate":"2021-09-11"},{"lineNumber":267,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":268,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":269,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":270,"author":{"gitId":"andrewtkh1"},"content":"     * This function sets up the file, file Writer/Reader","lastModifiedDate":"2021-09-13"},{"lineNumber":271,"author":{"gitId":"andrewtkh1"},"content":"     * and DATA_PATH. If the file is not found, it will","lastModifiedDate":"2021-09-13"},{"lineNumber":272,"author":{"gitId":"andrewtkh1"},"content":"     * create a new file for the user at the specified","lastModifiedDate":"2021-09-13"},{"lineNumber":273,"author":{"gitId":"andrewtkh1"},"content":"     * directory.","lastModifiedDate":"2021-09-13"},{"lineNumber":274,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":275,"author":{"gitId":"andrewtkh1"},"content":"     * @param homePath user home directory in String format.","lastModifiedDate":"2021-09-13"},{"lineNumber":276,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":277,"author":{"gitId":"andrewtkh1"},"content":"    private static void setWriterAndReaderAndDataPath(String homePath) {","lastModifiedDate":"2021-09-13"},{"lineNumber":278,"author":{"gitId":"andrewtkh1"},"content":"        boolean isFileExist \u003d false;","lastModifiedDate":"2021-09-16"},{"lineNumber":279,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":280,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":281,"author":{"gitId":"andrewtkh1"},"content":"            DATA_PATH \u003d Paths.get(homePath, FILE_NAME);","lastModifiedDate":"2021-09-13"},{"lineNumber":282,"author":{"gitId":"andrewtkh1"},"content":"            isFileExist \u003d Files.exists(DATA_PATH);","lastModifiedDate":"2021-09-16"},{"lineNumber":283,"author":{"gitId":"andrewtkh1"},"content":"            //Sets writer if can find file, else creates file then sets.","lastModifiedDate":"2021-09-13"},{"lineNumber":284,"author":{"gitId":"andrewtkh1"},"content":"            csvWriter \u003d Files.newBufferedWriter(DATA_PATH, CREATE);","lastModifiedDate":"2021-09-13"},{"lineNumber":285,"author":{"gitId":"andrewtkh1"},"content":"            csvReader \u003d Files.newBufferedReader(DATA_PATH);","lastModifiedDate":"2021-09-13"},{"lineNumber":286,"author":{"gitId":"andrewtkh1"},"content":"        } catch (InvalidPathException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":287,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Path to file not found. Please try again.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":288,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-12"},{"lineNumber":289,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":290,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"IO Exception error!\");","lastModifiedDate":"2021-09-12"},{"lineNumber":291,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-12"},{"lineNumber":292,"author":{"gitId":"andrewtkh1"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":293,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Security Error, unable to read data file.\");","lastModifiedDate":"2021-09-12"},{"lineNumber":294,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-12"},{"lineNumber":295,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-12"},{"lineNumber":296,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error :\" + e);","lastModifiedDate":"2021-09-12"},{"lineNumber":297,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-11"},{"lineNumber":298,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":299,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":300,"author":{"gitId":"andrewtkh1"},"content":"        if (isFileExist) {","lastModifiedDate":"2021-09-16"},{"lineNumber":301,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Found data file!\");","lastModifiedDate":"2021-09-10"},{"lineNumber":302,"author":{"gitId":"andrewtkh1"},"content":"        } else {","lastModifiedDate":"2021-09-11"},{"lineNumber":303,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"A new data file has been created at: \" + DATA_PATH.toString());","lastModifiedDate":"2021-09-13"},{"lineNumber":304,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":305,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":306,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"andrewtkh1":306}},{"path":"src/main/java/tan/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Task;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import java.util.List;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    final static String BORDER \u003d \"------------------------------------------------------------------------\";","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"     * The main function to start running Duke!","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"     * @param args Arguments.","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"        final Scanner SC \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        printIntro();","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        intializeAndLoadFile();","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"        String input;","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"        while (true) {","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"            input \u003d readInput(SC);","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"            String command \u003d getCommand(input);","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"            switch (command) {","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"            case \"end\":","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"                exitProgram();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"            case \"list\":","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"                TaskManager.printList();","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"            case \"done\":","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"                int taskIndex \u003d getIndexOfTask(input);","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"                if (taskIndex !\u003d -1) {","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"                    //if successfully get index","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"                    TaskManager.markTaskAsDone(taskIndex);","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"                    saveList();","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"                }","lastModifiedDate":"2021-09-10"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-09-10"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"            case \"delete\":","lastModifiedDate":"2021-09-10"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"                int taskNumber \u003d getIndexOfTask(input);","lastModifiedDate":"2021-09-10"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"                if (taskNumber !\u003d -1) {","lastModifiedDate":"2021-09-10"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"                    //if successfully get index","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"                    TaskManager.deleteTask(taskNumber);","lastModifiedDate":"2021-09-10"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"                    saveList();","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"                }","lastModifiedDate":"2021-09-10"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"            default:","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"                //Assumes that the command is adding some task.","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"                TaskManager.addTask(input);","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"                saveList();","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(BORDER);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"     * Saves the current list","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"     * into the file taskData. It will also inform","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"     * the user if the save was successful or not.","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"    private static void saveList() {","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"        int saveStatus \u003d TaskManager.saveCurrentList();","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"        if (saveStatus \u003d\u003d 0) {","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"File successfully updated.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in saving current task! Please check the inputs.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"     * Setups the reader \u0026 writer","lastModifiedDate":"2021-09-18"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"     * needed to access the data file. If the file is not","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"     * found it creates one. After doing so,","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"     * reads the current data in the file \u0026 loads","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"     * it into the tasklist.","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"    private static void intializeAndLoadFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"        List\u003cTask\u003e listOfStoredDatas \u003d DataManager.setFileAndGetTasks();","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"        TaskManager.loadDataIntoList(listOfStoredDatas);","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"     * Prints the intro message \u0026 border once.","lastModifiedDate":"2021-09-18"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"    public static void printIntro() {","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Top of the morning my good sir, what can I do for you on this fine day?\");","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"     * Prints the outro message \u0026 border once.","lastModifiedDate":"2021-09-18"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"    public static void printOutro() {","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"I bid you farewell my good man. Good Bye.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the user\u0027s input in String","lastModifiedDate":"2021-09-18"},{"lineNumber":103,"author":{"gitId":"andrewtkh1"},"content":"     * after stripping leading and trailing spaces.","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"andrewtkh1"},"content":"     * @param sc Scanner that allows java to read from the terminal.","lastModifiedDate":"2021-09-18"},{"lineNumber":106,"author":{"gitId":"andrewtkh1"},"content":"     * @return User\u0027s input in a String format without any trailing spaces.","lastModifiedDate":"2021-09-18"},{"lineNumber":107,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":108,"author":{"gitId":"andrewtkh1"},"content":"    public static String readInput(Scanner sc) {","lastModifiedDate":"2021-08-30"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-30"},{"lineNumber":110,"author":{"gitId":"andrewtkh1"},"content":"        return input.strip();","lastModifiedDate":"2021-08-30"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"     * Calls the printOutro function","lastModifiedDate":"2021-08-30"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":"     * and closes this program.","lastModifiedDate":"2021-08-30"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"    public static void exitProgram() {","lastModifiedDate":"2021-08-30"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"        printOutro();","lastModifiedDate":"2021-08-30"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-30"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":123,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the index in integer.","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"     * Else, Returns -1 if the input can\u0027t be converted into an int.","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input as a String","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"andrewtkh1"},"content":"     * splits it into an array along spaces","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"andrewtkh1"},"content":"     * and assumes the user keyed in the corresponding","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"andrewtkh1"},"content":"     * index after the first space.","lastModifiedDate":"2021-09-18"},{"lineNumber":129,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a string.","lastModifiedDate":"2021-08-30"},{"lineNumber":131,"author":{"gitId":"andrewtkh1"},"content":"     * @return The index of the task in integer, else -1.","lastModifiedDate":"2021-09-18"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":133,"author":{"gitId":"andrewtkh1"},"content":"    public static int getIndexOfTask(String x) {","lastModifiedDate":"2021-08-30"},{"lineNumber":134,"author":{"gitId":"andrewtkh1"},"content":"        int taskIndex \u003d -1;","lastModifiedDate":"2021-09-10"},{"lineNumber":135,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-10"},{"lineNumber":136,"author":{"gitId":"andrewtkh1"},"content":"            taskIndex \u003d parseIndex(x);","lastModifiedDate":"2021-09-10"},{"lineNumber":137,"author":{"gitId":"andrewtkh1"},"content":"            if (taskIndex \u003c 0) {","lastModifiedDate":"2021-09-10"},{"lineNumber":138,"author":{"gitId":"andrewtkh1"},"content":"                //user keyed in -ve number.","lastModifiedDate":"2021-09-10"},{"lineNumber":139,"author":{"gitId":"andrewtkh1"},"content":"                throw new NumberFormatException();","lastModifiedDate":"2021-09-10"},{"lineNumber":140,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":141,"author":{"gitId":"andrewtkh1"},"content":"        } catch (NumberFormatException exp) {","lastModifiedDate":"2021-09-10"},{"lineNumber":142,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please input a proper index!\");","lastModifiedDate":"2021-09-10"},{"lineNumber":143,"author":{"gitId":"andrewtkh1"},"content":"            return -1;","lastModifiedDate":"2021-09-10"},{"lineNumber":144,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception exp) {","lastModifiedDate":"2021-09-18"},{"lineNumber":145,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error: \" + exp);","lastModifiedDate":"2021-09-18"},{"lineNumber":146,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please try again.\");","lastModifiedDate":"2021-09-18"},{"lineNumber":147,"author":{"gitId":"andrewtkh1"},"content":"            return -1;","lastModifiedDate":"2021-09-10"},{"lineNumber":148,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":149,"author":{"gitId":"andrewtkh1"},"content":"        return taskIndex;","lastModifiedDate":"2021-09-10"},{"lineNumber":150,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":151,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":152,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":153,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the index of the desired task in string.","lastModifiedDate":"2021-09-18"},{"lineNumber":154,"author":{"gitId":"andrewtkh1"},"content":"     * Else, -1. It takes in the user input as a string","lastModifiedDate":"2021-09-18"},{"lineNumber":155,"author":{"gitId":"andrewtkh1"},"content":"     * and assumes the index is after the first space.","lastModifiedDate":"2021-09-18"},{"lineNumber":156,"author":{"gitId":"andrewtkh1"},"content":"     * Note that this function does not verify if the","lastModifiedDate":"2021-09-18"},{"lineNumber":157,"author":{"gitId":"andrewtkh1"},"content":"     * index is within rage of the list.","lastModifiedDate":"2021-09-18"},{"lineNumber":158,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":159,"author":{"gitId":"andrewtkh1"},"content":"     * @param input The whole user\u0027s input as a String.","lastModifiedDate":"2021-09-18"},{"lineNumber":160,"author":{"gitId":"andrewtkh1"},"content":"     * @return The Index as an integer, else -1.","lastModifiedDate":"2021-09-18"},{"lineNumber":161,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":162,"author":{"gitId":"andrewtkh1"},"content":"    public static int parseIndex(String input) {","lastModifiedDate":"2021-09-18"},{"lineNumber":163,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":164,"author":{"gitId":"andrewtkh1"},"content":"        int index \u003d -1;","lastModifiedDate":"2021-09-18"},{"lineNumber":165,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":166,"author":{"gitId":"andrewtkh1"},"content":"            String[] listOfInputs \u003d input.split(\" \");","lastModifiedDate":"2021-09-10"},{"lineNumber":167,"author":{"gitId":"andrewtkh1"},"content":"            index \u003d Integer.parseInt(listOfInputs[1]);","lastModifiedDate":"2021-09-13"},{"lineNumber":168,"author":{"gitId":"andrewtkh1"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":169,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Index not recognized. Try again!\");","lastModifiedDate":"2021-09-13"},{"lineNumber":170,"author":{"gitId":"andrewtkh1"},"content":"            index \u003d -1;","lastModifiedDate":"2021-09-13"},{"lineNumber":171,"author":{"gitId":"andrewtkh1"},"content":"        } catch (ArrayIndexOutOfBoundsException exp) {","lastModifiedDate":"2021-09-18"},{"lineNumber":172,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please check your input.\");","lastModifiedDate":"2021-09-18"},{"lineNumber":173,"author":{"gitId":"andrewtkh1"},"content":"            return -1;","lastModifiedDate":"2021-09-18"},{"lineNumber":174,"author":{"gitId":"andrewtkh1"},"content":"        } catch (PatternSyntaxException exp) {","lastModifiedDate":"2021-09-18"},{"lineNumber":175,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please stop using the app and contact an Admin!\");","lastModifiedDate":"2021-09-18"},{"lineNumber":176,"author":{"gitId":"andrewtkh1"},"content":"            System.exit(-1);","lastModifiedDate":"2021-09-18"},{"lineNumber":177,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":178,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in converting Index.\" + System.lineSeparator() + e);","lastModifiedDate":"2021-09-13"},{"lineNumber":179,"author":{"gitId":"andrewtkh1"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-13"},{"lineNumber":180,"author":{"gitId":"andrewtkh1"},"content":"            return -1;","lastModifiedDate":"2021-09-18"},{"lineNumber":181,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":182,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":183,"author":{"gitId":"andrewtkh1"},"content":"        return index;","lastModifiedDate":"2021-09-13"},{"lineNumber":184,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":185,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":186,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":187,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the command of the user\u0027s input.","lastModifiedDate":"2021-09-18"},{"lineNumber":188,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the whole user input","lastModifiedDate":"2021-08-30"},{"lineNumber":189,"author":{"gitId":"andrewtkh1"},"content":"     * splits it along the spaces \u0026 returns","lastModifiedDate":"2021-08-30"},{"lineNumber":190,"author":{"gitId":"andrewtkh1"},"content":"     * the first \"word\" of the string.","lastModifiedDate":"2021-08-30"},{"lineNumber":191,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":192,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-09-18"},{"lineNumber":193,"author":{"gitId":"andrewtkh1"},"content":"     * @return The Command in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":194,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":195,"author":{"gitId":"andrewtkh1"},"content":"    public static String getCommand(String x) {","lastModifiedDate":"2021-08-30"},{"lineNumber":196,"author":{"gitId":"andrewtkh1"},"content":"        return x.split(\" \")[0];","lastModifiedDate":"2021-08-30"},{"lineNumber":197,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"andrewtkh1":194,"-":4}},{"path":"src/main/java/tan/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import tan.exceptions.DukeFormatExceptions;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Deadline;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Event;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.Task;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import tan.tasktype.ToDo;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"import java.util.List;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    protected static List\u003cTask\u003e listOfTasks \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"    private static int totalNumberOfTask \u003d 0;","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    public static void loadDataIntoList(List\u003cTask\u003e listOfDatas) {","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        listOfTasks.addAll(listOfDatas);","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        totalNumberOfTask \u003d listOfTasks.size();","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * Returns 0 if the file successfully saved, -1 otherwise.","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     * Saves the current list into the data file taskData.csv.","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     * It calls the function saveCurrentList and passes it","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"     * the current list of task to be saved. It will also","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"     * inform the user if any error occurs.","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns 0 if the file was successfully saved, else -1.","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    protected static int saveCurrentList() {","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"            DataManager.saveCurrentList(listOfTasks);","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in writing/opening file! Please try again.\");","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"            return -1;","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Generic Error in saving file. Error is:\" + e);","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"            return -1;","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"        return 0;","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the Task which is at","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"     * the index specified by indexTask, null otherwise.","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"     * @param indexTask Index of the task to obtain.","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     * @return Task at specified index.","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getTask(int indexTask) {","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"        if (isOutOfRange(indexTask)) {","lastModifiedDate":"2021-09-10"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Task is out of range!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"        return listOfTasks.get(indexTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"     * Marks a certain task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"     * Takes in the index of the task","lastModifiedDate":"2021-09-10"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"     * and checks if it is within range.","lastModifiedDate":"2021-09-10"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"     * If it is, mark it as done. If not,","lastModifiedDate":"2021-09-10"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"     * prompt user and return from function.","lastModifiedDate":"2021-09-10"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"     * @param indexTask The index of the task to be marked as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"    public static void markTaskAsDone(int indexTask) {","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"        if (isOutOfRange(indexTask)) {","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"No such task!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"            return;","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"        Task currentTask \u003d getTask(indexTask - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"        if (currentTask !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"            currentTask.markAsDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"     * Deletes a task by checking if the index is","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"     * within range if it is, delete. If not,","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"     * prompts user to key in again.","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"     * @param indexTask The index of the task to be marked as done.","lastModifiedDate":"2021-09-10"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"    public static void deleteTask(int indexTask) {","lastModifiedDate":"2021-09-10"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"        if (isOutOfRange(indexTask)) {","lastModifiedDate":"2021-09-10"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"No such task!\");","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"            return;","lastModifiedDate":"2021-09-10"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"        Task toDelete \u003d getTask(indexTask - 1);","lastModifiedDate":"2021-09-10"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"OooOOHHhh Weeee. I have removed this:\");","lastModifiedDate":"2021-09-10"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(toDelete);","lastModifiedDate":"2021-09-10"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"        listOfTasks.remove(indexTask - 1);","lastModifiedDate":"2021-09-10"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"        totalNumberOfTask -\u003d 1;","lastModifiedDate":"2021-09-10"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Number of tasks left: \" + totalNumberOfTask);","lastModifiedDate":"2021-09-10"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":101,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":103,"author":{"gitId":"andrewtkh1"},"content":"     * Returns true if index provided is out of the range","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"andrewtkh1"},"content":"     * for the current number of stored task. Else false.","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":106,"author":{"gitId":"andrewtkh1"},"content":"     * @param index The index of the task.","lastModifiedDate":"2021-09-10"},{"lineNumber":107,"author":{"gitId":"andrewtkh1"},"content":"     * @return True if it is out of range, False otherwise.","lastModifiedDate":"2021-09-10"},{"lineNumber":108,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"    public static boolean isOutOfRange(int index) {","lastModifiedDate":"2021-09-10"},{"lineNumber":110,"author":{"gitId":"andrewtkh1"},"content":"        return (index \u003e listOfTasks.size() || index \u003c 0);","lastModifiedDate":"2021-09-10"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"     * Adds a new task by taking the user input as a string","lastModifiedDate":"2021-09-18"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":"     * and decides what type of task it is and","lastModifiedDate":"2021-09-18"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"     * executes its respective jobs. If none of the task type","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"     * matches, prompts the user to try again.","lastModifiedDate":"2021-09-18"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput The entire input from the user as a String.","lastModifiedDate":"2021-09-18"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"    public static void addTask(String userInput) {","lastModifiedDate":"2021-08-30"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"        String typeOfTask \u003d getTypeOfTask(userInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":123,"author":{"gitId":"andrewtkh1"},"content":"        Task curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"        switch (typeOfTask) {","lastModifiedDate":"2021-08-30"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"andrewtkh1"},"content":"            curTask \u003d getToDoTask(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":127,"author":{"gitId":"andrewtkh1"},"content":"            if (curTask \u003d\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":128,"author":{"gitId":"andrewtkh1"},"content":"                return;","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":131,"author":{"gitId":"andrewtkh1"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-30"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"            curTask \u003d getDeadlineTask(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":133,"author":{"gitId":"andrewtkh1"},"content":"            if (curTask \u003d\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":134,"author":{"gitId":"andrewtkh1"},"content":"                return;","lastModifiedDate":"2021-09-05"},{"lineNumber":135,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":136,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":137,"author":{"gitId":"andrewtkh1"},"content":"        case \"event\":","lastModifiedDate":"2021-08-30"},{"lineNumber":138,"author":{"gitId":"andrewtkh1"},"content":"            curTask \u003d getEventTask(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":139,"author":{"gitId":"andrewtkh1"},"content":"            if (curTask \u003d\u003d null) {","lastModifiedDate":"2021-09-05"},{"lineNumber":140,"author":{"gitId":"andrewtkh1"},"content":"                return;","lastModifiedDate":"2021-09-05"},{"lineNumber":141,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-09-05"},{"lineNumber":142,"author":{"gitId":"andrewtkh1"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":143,"author":{"gitId":"andrewtkh1"},"content":"        default:","lastModifiedDate":"2021-08-30"},{"lineNumber":144,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Unknown command, Try again.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":145,"author":{"gitId":"andrewtkh1"},"content":"            return;","lastModifiedDate":"2021-08-30"},{"lineNumber":146,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"andrewtkh1"},"content":"        totalNumberOfTask +\u003d 1;","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"You have added: \" + curTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":149,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Your current total number of task is: \" + totalNumberOfTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":150,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":151,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":152,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":153,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":154,"author":{"gitId":"andrewtkh1"},"content":"     * Adds an Event Task to the list and returns the same task, else","lastModifiedDate":"2021-09-18"},{"lineNumber":155,"author":{"gitId":"andrewtkh1"},"content":"     * returns null.","lastModifiedDate":"2021-09-18"},{"lineNumber":156,"author":{"gitId":"andrewtkh1"},"content":"     * This function takes in the users input and tries to get the","lastModifiedDate":"2021-09-18"},{"lineNumber":157,"author":{"gitId":"andrewtkh1"},"content":"     * description and the event date, then creates a new","lastModifiedDate":"2021-09-18"},{"lineNumber":158,"author":{"gitId":"andrewtkh1"},"content":"     * event task adds it to the current list and returns the task.","lastModifiedDate":"2021-09-18"},{"lineNumber":159,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":160,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput - The user input in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":161,"author":{"gitId":"andrewtkh1"},"content":"     * @return The Event task created, else null.","lastModifiedDate":"2021-09-18"},{"lineNumber":162,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":163,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getEventTask(String userInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":164,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":165,"author":{"gitId":"andrewtkh1"},"content":"            String eventDesc \u003d getDescriptionOfEvent(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":166,"author":{"gitId":"andrewtkh1"},"content":"            String eventTimeDate \u003d getDateTimeOfEvent(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":167,"author":{"gitId":"andrewtkh1"},"content":"            Task curTask \u003d new Event(eventDesc, eventTimeDate);","lastModifiedDate":"2021-09-05"},{"lineNumber":168,"author":{"gitId":"andrewtkh1"},"content":"            listOfTasks.add(curTask);","lastModifiedDate":"2021-09-05"},{"lineNumber":169,"author":{"gitId":"andrewtkh1"},"content":"            return curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":170,"author":{"gitId":"andrewtkh1"},"content":"        } catch (DukeFormatExceptions d) {","lastModifiedDate":"2021-09-05"},{"lineNumber":171,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(d);","lastModifiedDate":"2021-09-05"},{"lineNumber":172,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException I) {","lastModifiedDate":"2021-09-05"},{"lineNumber":173,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please check your formatting \u0026 input!\");","lastModifiedDate":"2021-09-05"},{"lineNumber":174,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":175,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":176,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":177,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":178,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":179,"author":{"gitId":"andrewtkh1"},"content":"     * Adds a Deadline Task to the list and returns the same task, else","lastModifiedDate":"2021-09-18"},{"lineNumber":180,"author":{"gitId":"andrewtkh1"},"content":"     * returns null.","lastModifiedDate":"2021-09-18"},{"lineNumber":181,"author":{"gitId":"andrewtkh1"},"content":"     * This function takes in the users input and tries to get the","lastModifiedDate":"2021-09-18"},{"lineNumber":182,"author":{"gitId":"andrewtkh1"},"content":"     * description and the deadline date, then creates a new","lastModifiedDate":"2021-09-18"},{"lineNumber":183,"author":{"gitId":"andrewtkh1"},"content":"     * deadline task adds it to the current list and returns the task.","lastModifiedDate":"2021-09-18"},{"lineNumber":184,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":185,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput - The user input in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":186,"author":{"gitId":"andrewtkh1"},"content":"     * @return The Task created, else null.","lastModifiedDate":"2021-09-18"},{"lineNumber":187,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":188,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getDeadlineTask(String userInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":189,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":190,"author":{"gitId":"andrewtkh1"},"content":"            String deadlineDesc \u003d getDescriptionOfDeadline(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":191,"author":{"gitId":"andrewtkh1"},"content":"            String deadlineDateTime \u003d getDateTimeOfDeadline(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":192,"author":{"gitId":"andrewtkh1"},"content":"            Task curTask \u003d new Deadline(deadlineDesc, deadlineDateTime);","lastModifiedDate":"2021-09-05"},{"lineNumber":193,"author":{"gitId":"andrewtkh1"},"content":"            listOfTasks.add(curTask);","lastModifiedDate":"2021-09-05"},{"lineNumber":194,"author":{"gitId":"andrewtkh1"},"content":"            return curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":195,"author":{"gitId":"andrewtkh1"},"content":"        } catch (DukeFormatExceptions e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":196,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-05"},{"lineNumber":197,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException x) {","lastModifiedDate":"2021-09-05"},{"lineNumber":198,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Please check your formatting \u0026 input!\");","lastModifiedDate":"2021-09-05"},{"lineNumber":199,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":200,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":201,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":202,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":203,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":204,"author":{"gitId":"andrewtkh1"},"content":"     * Adds a Todo Task to the list and returns the same task, else","lastModifiedDate":"2021-09-18"},{"lineNumber":205,"author":{"gitId":"andrewtkh1"},"content":"     * returns null.","lastModifiedDate":"2021-09-18"},{"lineNumber":206,"author":{"gitId":"andrewtkh1"},"content":"     * This function takes in the users input and tries to get the","lastModifiedDate":"2021-09-18"},{"lineNumber":207,"author":{"gitId":"andrewtkh1"},"content":"     * description, then creates a new Todo task and","lastModifiedDate":"2021-09-18"},{"lineNumber":208,"author":{"gitId":"andrewtkh1"},"content":"     * adds it to the current list and returns a copy of the task.","lastModifiedDate":"2021-09-18"},{"lineNumber":209,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":210,"author":{"gitId":"andrewtkh1"},"content":"     * @param userInput The user\u0027s input in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":211,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the task else NULL.","lastModifiedDate":"2021-09-05"},{"lineNumber":212,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":213,"author":{"gitId":"andrewtkh1"},"content":"    private static Task getToDoTask(String userInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":214,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":215,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":216,"author":{"gitId":"andrewtkh1"},"content":"            String todoDesc \u003d getDescriptionOfToDo(userInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":217,"author":{"gitId":"andrewtkh1"},"content":"            Task curTask \u003d new ToDo(todoDesc);","lastModifiedDate":"2021-09-05"},{"lineNumber":218,"author":{"gitId":"andrewtkh1"},"content":"            listOfTasks.add(curTask);","lastModifiedDate":"2021-09-05"},{"lineNumber":219,"author":{"gitId":"andrewtkh1"},"content":"            return curTask;","lastModifiedDate":"2021-09-05"},{"lineNumber":220,"author":{"gitId":"andrewtkh1"},"content":"        } catch (DukeFormatExceptions e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":221,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-05"},{"lineNumber":222,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":223,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":224,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":225,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":226,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":227,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the Date/Time specified when creating an Event task,","lastModifiedDate":"2021-09-18"},{"lineNumber":228,"author":{"gitId":"andrewtkh1"},"content":"     * else throws a DukeFormatExceptions. The function","lastModifiedDate":"2021-09-18"},{"lineNumber":229,"author":{"gitId":"andrewtkh1"},"content":"     * uses the \"/at\" specified in the user\u0027s input to find the date/time.","lastModifiedDate":"2021-09-18"},{"lineNumber":230,"author":{"gitId":"andrewtkh1"},"content":"     * Throws a DukeFormatExceptions error if its unable to find \"/at\".","lastModifiedDate":"2021-09-18"},{"lineNumber":231,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":232,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":233,"author":{"gitId":"andrewtkh1"},"content":"     * @return The date/time of the input in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":234,"author":{"gitId":"andrewtkh1"},"content":"     * @throws DukeFormatExceptions If \"/at\" does not exists in the Input.","lastModifiedDate":"2021-09-18"},{"lineNumber":235,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException If index of (/at + 3) is out of the index range of the input.","lastModifiedDate":"2021-09-18"},{"lineNumber":236,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":237,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDateTimeOfEvent(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":238,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /at... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":239,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/at\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":240,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/at\");","lastModifiedDate":"2021-08-30"},{"lineNumber":241,"author":{"gitId":"andrewtkh1"},"content":"            //+3 to the index as we don\u0027t want to capture \"/at\".","lastModifiedDate":"2021-08-30"},{"lineNumber":242,"author":{"gitId":"andrewtkh1"},"content":"            String dateTime \u003d x.substring(indexOfSlash + 3);","lastModifiedDate":"2021-08-30"},{"lineNumber":243,"author":{"gitId":"andrewtkh1"},"content":"            return dateTime.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":244,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":245,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/at\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":246,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":247,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":248,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":249,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the description of an event task from the user\u0027s input.","lastModifiedDate":"2021-09-18"},{"lineNumber":250,"author":{"gitId":"andrewtkh1"},"content":"     * Else throws a DukeFormatExceptions error","lastModifiedDate":"2021-09-18"},{"lineNumber":251,"author":{"gitId":"andrewtkh1"},"content":"     * The function Takes in the whole user input as a string","lastModifiedDate":"2021-09-18"},{"lineNumber":252,"author":{"gitId":"andrewtkh1"},"content":"     * when the user is adding an event. The function assumes the","lastModifiedDate":"2021-09-18"},{"lineNumber":253,"author":{"gitId":"andrewtkh1"},"content":"     * description is between the first \" \" and the \"/at\" in the input.","lastModifiedDate":"2021-09-18"},{"lineNumber":254,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":255,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":256,"author":{"gitId":"andrewtkh1"},"content":"     * @return The date/time of the input in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":257,"author":{"gitId":"andrewtkh1"},"content":"     * @throws DukeFormatExceptions If \"/at\" does not exists in the Input.","lastModifiedDate":"2021-09-18"},{"lineNumber":258,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException If index of /at is out of the index range of the input","lastModifiedDate":"2021-09-18"},{"lineNumber":259,"author":{"gitId":"andrewtkh1"},"content":"     * or there is no \" \" in the input.","lastModifiedDate":"2021-09-18"},{"lineNumber":260,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":261,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDescriptionOfEvent(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":262,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /by... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":263,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/at\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":264,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfFirstSpace \u003d x.indexOf(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":265,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/at\");","lastModifiedDate":"2021-08-30"},{"lineNumber":266,"author":{"gitId":"andrewtkh1"},"content":"            String description \u003d x.substring(indexOfFirstSpace + 1, indexOfSlash - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":267,"author":{"gitId":"andrewtkh1"},"content":"            return description.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":268,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":269,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/at\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":270,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":271,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":272,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":273,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the Date/Time specified when creating a deadline task,","lastModifiedDate":"2021-09-18"},{"lineNumber":274,"author":{"gitId":"andrewtkh1"},"content":"     * else throws a DukeFormatExceptions. The function","lastModifiedDate":"2021-09-18"},{"lineNumber":275,"author":{"gitId":"andrewtkh1"},"content":"     * uses the \"/by\" specified in the user\u0027s input to find the date/time.","lastModifiedDate":"2021-09-18"},{"lineNumber":276,"author":{"gitId":"andrewtkh1"},"content":"     * Throws a DukeFormatExceptions error if its unable to find \"/by\".","lastModifiedDate":"2021-09-18"},{"lineNumber":277,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":278,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":279,"author":{"gitId":"andrewtkh1"},"content":"     * @return The date/time of the input in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":280,"author":{"gitId":"andrewtkh1"},"content":"     * @throws DukeFormatExceptions If \"/by\" does not exists in the Input.","lastModifiedDate":"2021-09-18"},{"lineNumber":281,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException If index of (/by + 3) is out of the index range of the input.","lastModifiedDate":"2021-09-18"},{"lineNumber":282,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":283,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDateTimeOfDeadline(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":284,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /by... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":285,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/by\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":286,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/by\");","lastModifiedDate":"2021-08-30"},{"lineNumber":287,"author":{"gitId":"andrewtkh1"},"content":"            //+3 to the index as we don\u0027t want to capture \"/by\".","lastModifiedDate":"2021-08-30"},{"lineNumber":288,"author":{"gitId":"andrewtkh1"},"content":"            String dateTime \u003d x.substring(indexOfSlash + 3);","lastModifiedDate":"2021-08-30"},{"lineNumber":289,"author":{"gitId":"andrewtkh1"},"content":"            return dateTime.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":290,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":291,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/by\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":292,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":293,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":294,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":295,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the description of a deadline task from the user\u0027s input.","lastModifiedDate":"2021-09-18"},{"lineNumber":296,"author":{"gitId":"andrewtkh1"},"content":"     * Else throws a DukeFormatExceptions error","lastModifiedDate":"2021-09-18"},{"lineNumber":297,"author":{"gitId":"andrewtkh1"},"content":"     * The function takes in the whole user input as a string","lastModifiedDate":"2021-09-18"},{"lineNumber":298,"author":{"gitId":"andrewtkh1"},"content":"     * when the user is adding a deadline. The function assumes the","lastModifiedDate":"2021-09-18"},{"lineNumber":299,"author":{"gitId":"andrewtkh1"},"content":"     * description is between the first \" \" and the \"/by\" in the input.","lastModifiedDate":"2021-09-18"},{"lineNumber":300,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":301,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":302,"author":{"gitId":"andrewtkh1"},"content":"     * @return The date/time of the input in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":303,"author":{"gitId":"andrewtkh1"},"content":"     * @throws DukeFormatExceptions If \"/by\" does not exists in the Input.","lastModifiedDate":"2021-09-18"},{"lineNumber":304,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException If index of /by is out of the index range of the input","lastModifiedDate":"2021-09-18"},{"lineNumber":305,"author":{"gitId":"andrewtkh1"},"content":"     * or there is no \" \" in the input.","lastModifiedDate":"2021-09-18"},{"lineNumber":306,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":307,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDescriptionOfDeadline(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":308,"author":{"gitId":"andrewtkh1"},"content":"        //Checks if user has used the /by... format.","lastModifiedDate":"2021-08-30"},{"lineNumber":309,"author":{"gitId":"andrewtkh1"},"content":"        if (x.toLowerCase().contains(\"/by\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":310,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfFirstSpace \u003d x.indexOf(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":311,"author":{"gitId":"andrewtkh1"},"content":"            int indexOfSlash \u003d x.indexOf(\"/by\");","lastModifiedDate":"2021-08-30"},{"lineNumber":312,"author":{"gitId":"andrewtkh1"},"content":"            String description \u003d x.substring(indexOfFirstSpace + 1, indexOfSlash - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":313,"author":{"gitId":"andrewtkh1"},"content":"            return description.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":314,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":315,"author":{"gitId":"andrewtkh1"},"content":"        throw new DukeFormatExceptions(\"Code could not find \u0027/by\u0027\");","lastModifiedDate":"2021-09-05"},{"lineNumber":316,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":317,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":318,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":319,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the type of task in String, else null.","lastModifiedDate":"2021-09-18"},{"lineNumber":320,"author":{"gitId":"andrewtkh1"},"content":"     * Assumes the type of tasks is the","lastModifiedDate":"2021-08-30"},{"lineNumber":321,"author":{"gitId":"andrewtkh1"},"content":"     * first word in the string and returns","lastModifiedDate":"2021-08-30"},{"lineNumber":322,"author":{"gitId":"andrewtkh1"},"content":"     * that word. If unable to split, returns null.","lastModifiedDate":"2021-09-05"},{"lineNumber":323,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":324,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole string of user input.","lastModifiedDate":"2021-08-30"},{"lineNumber":325,"author":{"gitId":"andrewtkh1"},"content":"     * @return The type of task in String, else null.","lastModifiedDate":"2021-09-18"},{"lineNumber":326,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":327,"author":{"gitId":"andrewtkh1"},"content":"    private static String getTypeOfTask(String x) {","lastModifiedDate":"2021-08-30"},{"lineNumber":328,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":329,"author":{"gitId":"andrewtkh1"},"content":"            String[] inputs \u003d x.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":330,"author":{"gitId":"andrewtkh1"},"content":"            return inputs[0].toLowerCase();","lastModifiedDate":"2021-08-30"},{"lineNumber":331,"author":{"gitId":"andrewtkh1"},"content":"        } catch (PatternSyntaxException p) {","lastModifiedDate":"2021-09-05"},{"lineNumber":332,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Unable to read the input properly. Please try again.\");","lastModifiedDate":"2021-09-18"},{"lineNumber":333,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":334,"author":{"gitId":"andrewtkh1"},"content":"        return null;","lastModifiedDate":"2021-09-05"},{"lineNumber":335,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":336,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":337,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":338,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the description of a Todo task from the user\u0027s input.","lastModifiedDate":"2021-09-18"},{"lineNumber":339,"author":{"gitId":"andrewtkh1"},"content":"     * Else throws a DukeFormatExceptions error","lastModifiedDate":"2021-09-18"},{"lineNumber":340,"author":{"gitId":"andrewtkh1"},"content":"     * The function takes in the whole user input as a string","lastModifiedDate":"2021-09-18"},{"lineNumber":341,"author":{"gitId":"andrewtkh1"},"content":"     * when the user is adding a todo task. The function assumes the","lastModifiedDate":"2021-09-18"},{"lineNumber":342,"author":{"gitId":"andrewtkh1"},"content":"     * description is after the first \" \" in the input.","lastModifiedDate":"2021-09-18"},{"lineNumber":343,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":344,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The whole user input as a String.","lastModifiedDate":"2021-08-30"},{"lineNumber":345,"author":{"gitId":"andrewtkh1"},"content":"     * @return The remaining String excluding the 1st word.","lastModifiedDate":"2021-08-30"},{"lineNumber":346,"author":{"gitId":"andrewtkh1"},"content":"     * @throws DukeFormatExceptions If there is no \" \"(Space) in the string.","lastModifiedDate":"2021-09-18"},{"lineNumber":347,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException If the index of the space + 1 is out of","lastModifiedDate":"2021-09-18"},{"lineNumber":348,"author":{"gitId":"andrewtkh1"},"content":"     * range of the current input.","lastModifiedDate":"2021-09-18"},{"lineNumber":349,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":350,"author":{"gitId":"andrewtkh1"},"content":"    private static String getDescriptionOfToDo(String x) throws DukeFormatExceptions, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-05"},{"lineNumber":351,"author":{"gitId":"andrewtkh1"},"content":"        //Gets the index of the first space.","lastModifiedDate":"2021-08-30"},{"lineNumber":352,"author":{"gitId":"andrewtkh1"},"content":"        int indexOfFirstSpace \u003d x.indexOf(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":353,"author":{"gitId":"andrewtkh1"},"content":"        if (indexOfFirstSpace \u003d\u003d -1) {","lastModifiedDate":"2021-08-30"},{"lineNumber":354,"author":{"gitId":"andrewtkh1"},"content":"            throw new DukeFormatExceptions(\"Parameters are empty! Please try again.\");","lastModifiedDate":"2021-09-05"},{"lineNumber":355,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":356,"author":{"gitId":"andrewtkh1"},"content":"        String description \u003d x.substring(indexOfFirstSpace + 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":357,"author":{"gitId":"andrewtkh1"},"content":"        return description;","lastModifiedDate":"2021-08-30"},{"lineNumber":358,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":359,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":360,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":361,"author":{"gitId":"andrewtkh1"},"content":"     * Prints all the task \u0026 their current status","lastModifiedDate":"2021-08-30"},{"lineNumber":362,"author":{"gitId":"andrewtkh1"},"content":"     * in the list else, informs the user if the list","lastModifiedDate":"2021-09-18"},{"lineNumber":363,"author":{"gitId":"andrewtkh1"},"content":"     * is empty.","lastModifiedDate":"2021-08-30"},{"lineNumber":364,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":365,"author":{"gitId":"andrewtkh1"},"content":"    public static void printList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":366,"author":{"gitId":"andrewtkh1"},"content":"        if (listOfTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":367,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"List is empty!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":368,"author":{"gitId":"andrewtkh1"},"content":"            return;","lastModifiedDate":"2021-08-21"},{"lineNumber":369,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":370,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Your list of tasks contains:\");","lastModifiedDate":"2021-08-21"},{"lineNumber":371,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":372,"author":{"gitId":"andrewtkh1"},"content":"            for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":373,"author":{"gitId":"andrewtkh1"},"content":"                Task currentTask \u003d listOfTasks.get(i);","lastModifiedDate":"2021-08-21"},{"lineNumber":374,"author":{"gitId":"andrewtkh1"},"content":"                System.out.println(currentTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":375,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":376,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException i) {","lastModifiedDate":"2021-09-05"},{"lineNumber":377,"author":{"gitId":"andrewtkh1"},"content":"            System.out.println(\"Error in printing task! Contact Admin \u003d(\");","lastModifiedDate":"2021-09-05"},{"lineNumber":378,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":379,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":380,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"andrewtkh1":380}},{"path":"src/main/java/tan/exceptions/DukeFormatExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.exceptions;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class DukeFormatExceptions extends Exception {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"    public DukeFormatExceptions(String message) {","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"        super(message);","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"andrewtkh1":7}},{"path":"src/main/java/tan/exceptions/TaskToStringException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.exceptions;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class TaskToStringException extends Exception{","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"    public TaskToStringException(){","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"        super();","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"andrewtkh1":7}},{"path":"src/main/java/tan/tasktype/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    private final String deadlineIcon \u003d \"D\";","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    private String dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"    public Deadline(String description, String dateTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    public Deadline(String description, boolean isDone, String dateTime) {","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the Task\u0027s type in String.","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the string \"Deadline\".","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"        return \"Deadline\";","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the icon for Deadline tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the String \"D\"","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"    public String getIcon() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"        return deadlineIcon;","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the deadline for the task","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"     * in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns deadline in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    public String getDateTime() {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        return dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"     * This will return the whole string","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"     * including its icon, status, task name","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     * and deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task icon, status, name and deadline in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"        return (\"[\" + getIcon() + \"]\" + \"[\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"                + getTaskName() + \" (by: \" + getDateTime() + \")\");","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":61}},{"path":"src/main/java/tan/tasktype/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    private String dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    private final String eventIcon \u003d \"E\";","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"    public Event(String description, String dateTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    public Event(String description, Boolean isDone, String dateTime) {","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the Task\u0027s type in String.","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the string \"Event\".","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"        return \"Event\";","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the icon for Event tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the String \"E\"","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"    public String getIcon() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"        return eventIcon;","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the do-by date for the task","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"     * in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns do-by date in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    public String getDateTime() {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        return dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the formatted string to print the task nicely.","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"     * This will return the whole string","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     * including its icon, status, task name","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     * and do-by date.","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task icon, status, name and do-by date all in a String.","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"        return (\"[\" + getIcon() + \"]\" + \"[\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"                + getTaskName() + \" (at: \" + getDateTime() + \")\");","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":62}},{"path":"src/main/java/tan/tasktype/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"    protected String name;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    public Task(String name, Boolean isDone) {","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"    public Task() {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"        this(\"Unnamed\");","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the type of task in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the type of task in String format.","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the date of task in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the date of task in String format.","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"    public abstract String getDateTime();","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"     * Returns each respective task\u0027s icon.","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"     * @return The icon in String.","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    public abstract String getIcon();","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the name of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"     * @return The name of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"        return name;","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     * Sets the name of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     * @param x The name of the task in String.","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"    protected void setTaskName(String x) {","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"        this.name \u003d x;","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"     * Marks the current task as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"Sweet! You\u0027ve just completed this task:\");","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(\"[\" + this.getStatusIcon() + \"] \" + name);","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the status icon of","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"     * the current task based on it\u0027s status.","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"     * @return The icon of its current status.","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the current status in boolean.","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"     * @return Status of Task in Bool.","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"    public Boolean getStatus() {","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"        return isDone;","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"andrewtkh1":87}},{"path":"src/main/java/tan/tasktype/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package tan.tasktype;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"    private final String toDoIcon \u003d \"T\";","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"        super.setTaskName(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    public ToDo(String description, Boolean isDone) {","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the Task\u0027s type in String.","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the string \"ToDo\".","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"        return \"ToDo\";","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     * Returns \"-\" for the Todo as it","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     * does not have a date.","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns \"-\".","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"    public String getDateTime() {","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"        return \"-\";","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the icon for todo tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the String \"T\"","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"    public String getIcon() {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"        return toDoIcon;","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"     * This will return the whole string","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"     * including its icon, status \u0026 task name.","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"     * @return The task icon, status \u0026 name in String.","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"        return (\"[\" + getIcon() + \"]\"","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"                + \"[\" + getStatusIcon() + \"] \" + getTaskName());","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":57}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"list","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"abcde","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"todo","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"deadline","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"event","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"todo abcde","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"deadline /by","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"event /at","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"event aaabbb /at","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"deadline helpssss /by","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"done x","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"done 20","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"done","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"done 1","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"delete x","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"delete 3x","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"delete","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"end","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"andrewtkh1":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"REM the ..\\bin is where it will compile to.","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"javac  -cp ..\\src\\main\\java\\tan -Xlint:none -d ..\\bin ..\\src\\main\\java\\tan\\*.java ..\\src\\main\\java\\tan\\exceptions\\*.java ..\\src\\main\\java\\tan\\tasktype\\*.java","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"REM First FIle path is the compiled Java path following the Package name.","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"REM java -classpath C:\\Users\\Pryo\\Desktop\\CS2113\\bin tan/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"java -classpath ..\\bin tan/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"andrewtkh1":5,"-":18}}]
