[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"T||true||time to do cs2113t","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"D||false||cs2113t iP||2021-09-22","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"E||false||surf www||5-3","lastModifiedDate":"2021-09-12"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"E||true||you are the apex champion||5-8pm","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"T||false||take you time","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"E||false||testing last time||4-5pm","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"D||false||OS lab 2||2021-09-30","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"D||true||testing123||2021-10-10","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"T||false||hi","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"Kair0s3":9}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"import parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"import task.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"     * Necessary variables for Duke to work properly","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"    public static Ui ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"    private static Storage storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"    private static Parser parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"    private static TaskList tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"     * Initializes the necessary variables for Duke program","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"    public static void initDuke() {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"        tasks \u003d new TaskList(ui);","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"        storage.instantiateTasksFromFile(tasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"        parser \u003d new Parser(ui);","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"        initDuke();","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"        ui.printLogo();","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"        ui.printGreeting();","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"        String userInput;","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"        while (true) {","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"            userInput \u003d ui.getUserInput();","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"            parser.parseUserCommand(userInput, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Kair0s3":32,"-":4}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package exception;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"     * Error Messages","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"    public static final String INVALID_TASK_MESSAGE \u003d Ui.CONSOLE_LINE_PREFIX + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"            + Ui.SPACE_PREFIX + \"That is invalid... Please use the syntax - \"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"            + \"[taskType]\" + Ui.SPACE_PREFIX + \"[taskName] ([/by dateTime] or [/at dateTime] depending on taskType)\"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"            + Ui.LINE_BREAK + Ui.CONSOLE_LINE_PREFIX;","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"    public static final String UNKNOWN_COMMAND_MESSAGE \u003d Ui.CONSOLE_LINE_PREFIX + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"            + Ui.SPACE_PREFIX + \"Hey, I don\u0027t quite understand this command. Please install a new CPU for me ;D\"","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"            + Ui.LINE_BREAK + Ui.SPACE_PREFIX + \"Just kidding, it\u0027s too expensive, just try again...\" + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"            + Ui.CONSOLE_LINE_PREFIX;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"    public static final String MISSING_INDEX_MESSAGE \u003d Ui.CONSOLE_LINE_PREFIX + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"            + Ui.SPACE_PREFIX + \"Excuse me Sir/Madam, which task number? Where is it? Under the Sea?\" + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"            + Ui.CONSOLE_LINE_PREFIX;","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"    public static final String NO_TASK_MESSAGE \u003d Ui.CONSOLE_LINE_PREFIX + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"            + Ui.SPACE_PREFIX + \"Woah woah, you can\u0027t just mark something when your list of tasks is empty\"","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"            + Ui.LINE_BREAK + Ui.CONSOLE_LINE_PREFIX;","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"    public static final String TODO_EMPTY_MESSAGE \u003d Ui.CONSOLE_LINE_PREFIX + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"            + Ui.SPACE_PREFIX + \"Excuse you? The description for todo can NEVER be empty!\" + Ui.LINE_BREAK","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"            + Ui.CONSOLE_LINE_PREFIX;","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with specified error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"     * @param errorMessage The error message of the encountered error/exception","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Kair0s3":35}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"import exception.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"import task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"import task.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"public class Parser {","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"    // Command Prefixes for checking type of command","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"    private static final String COMMAND_BYE \u003d \"Bye\";","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"    private static final String COMMAND_DONE \u003d \"Done\";","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"    private static final String COMMAND_LIST \u003d \"List\";","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"    private static final String COMMAND_DELETE \u003d \"Delete\";","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"    private static final String COMMAND_FIND \u003d \"Find\";","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"    // Prefixes meant for processing data parameters for Task","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"    private static final String BY_WHEN_PREFIX \u003d \"/by\";","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"    private static final String AT_WHEN_PREFIX \u003d \"/at\";","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"    private static final String TASK_TODO_PREFIX \u003d \"Todo\";","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"    private static final String TASK_DEADLINE_PREFIX \u003d \"Deadline\";","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"    private static final String TASK_EVENT_PREFIX \u003d \"Event\";","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"    private static final String EMPTY_VALUE \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with specified Ui Object.","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"     * @param uiObject Ui Object","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"    public Parser(Ui uiObject) {","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"        ui \u003d uiObject;","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"Kair0s3"},"content":"     * Returns the type of command from user input.","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"Kair0s3"},"content":"     * @param userInput The read-in user input.","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"Kair0s3"},"content":"     * @return The type of command","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"Kair0s3"},"content":"    public String getCommandType(String userInput) {","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"Kair0s3"},"content":"        String[] userParams \u003d userInput.split(Ui.SPACE_PREFIX);","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"Kair0s3"},"content":"        return userParams[0];","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"Kair0s3"},"content":"     * Returns the extracted index from user input.","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"Kair0s3"},"content":"     * @param userInput The read-in user input","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"Kair0s3"},"content":"     * @return The index specified by user input","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"Kair0s3"},"content":"    public int getIndex(String userInput) throws DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"Kair0s3"},"content":"        int index;","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"Kair0s3"},"content":"        String[] userParams \u003d userInput.split(Ui.SPACE_PREFIX);","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"Kair0s3"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"Kair0s3"},"content":"            index \u003d Integer.parseInt(userParams[1]);","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"Kair0s3"},"content":"        } catch (ArrayIndexOutOfBoundsException arrError) {","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"Kair0s3"},"content":"            throw new DukeException(DukeException.MISSING_INDEX_MESSAGE);","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"Kair0s3"},"content":"        return index;","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"Kair0s3"},"content":"     * Parses the user input and runs the respective user command functionalities.","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"Kair0s3"},"content":"     * @param userInput The read-in user input","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"Kair0s3"},"content":"     * @param tasks     The list of tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"Kair0s3"},"content":"    public void parseUserCommand(String userInput, TaskList tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"Kair0s3"},"content":"        String commandType \u003d getCommandType(userInput);","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"Kair0s3"},"content":"        if (commandType.equalsIgnoreCase(COMMAND_BYE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"Kair0s3"},"content":"            ui.printFarewell();","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"Kair0s3"},"content":"            System.exit(0);","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"Kair0s3"},"content":"        if (commandType.equalsIgnoreCase(COMMAND_LIST) || userInput.equals(EMPTY_VALUE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"Kair0s3"},"content":"            ui.printTasks(tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"Kair0s3"},"content":"        } else if (commandType.equalsIgnoreCase(COMMAND_DONE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"Kair0s3"},"content":"            try {","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"Kair0s3"},"content":"                int index \u003d getIndex(userInput);","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"Kair0s3"},"content":"                tasks.markTaskAsDone(index - 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"Kair0s3"},"content":"            } catch (DukeException err) {","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"Kair0s3"},"content":"                ui.printErrorMessage(err.getMessage());","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"Kair0s3"},"content":"        } else if (commandType.equalsIgnoreCase(COMMAND_DELETE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"Kair0s3"},"content":"            try {","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"Kair0s3"},"content":"                int index \u003d getIndex(userInput);","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"Kair0s3"},"content":"                tasks.removeTaskAtIndex(index - 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"Kair0s3"},"content":"            } catch (DukeException err) {","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"Kair0s3"},"content":"                ui.printErrorMessage(err.getMessage());","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"Kair0s3"},"content":"        } else if (commandType.equalsIgnoreCase(COMMAND_FIND)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"Kair0s3"},"content":"            parseFindCommand(userInput);","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"Kair0s3"},"content":"        } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"Kair0s3"},"content":"            parseTaskCommands(userInput, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"Kair0s3"},"content":"    public String getKeyword(String userInput) {","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"Kair0s3"},"content":"        return userInput.split(Ui.SPACE_PREFIX)[1];","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"Kair0s3"},"content":"    public void parseFindCommand(String userInput) {","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"Kair0s3"},"content":"        String keyword \u003d getKeyword(userInput);","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"Kair0s3"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d TaskList.getAllTasksByName(keyword);","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"Kair0s3"},"content":"        ui.printFilteredTasks(filteredTasks, keyword);","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"Kair0s3"},"content":"     * Parses the user input and run Task-related commands.","lastModifiedDate":"2021-09-22"},{"lineNumber":113,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"Kair0s3"},"content":"     * @param userInput The read-in user input","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"Kair0s3"},"content":"     * @param tasks     The list of tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"Kair0s3"},"content":"    public void parseTaskCommands(String userInput, TaskList tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"Kair0s3"},"content":"        String taskType \u003d userInput.split(Ui.SPACE_PREFIX)[0];","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"Kair0s3"},"content":"        // Remove the Type of Task from the user input","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"Kair0s3"},"content":"        String taskName \u003d userInput.replace(taskType, EMPTY_VALUE).trim();","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"Kair0s3"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":122,"author":{"gitId":"Kair0s3"},"content":"            if (taskType.equalsIgnoreCase(TASK_TODO_PREFIX)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":123,"author":{"gitId":"Kair0s3"},"content":"                parseNewToDo(taskName, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":124,"author":{"gitId":"Kair0s3"},"content":"            } else if (taskType.equalsIgnoreCase(TASK_DEADLINE_PREFIX)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"Kair0s3"},"content":"                parseNewDeadline(taskName, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"Kair0s3"},"content":"            } else if (taskType.equalsIgnoreCase(TASK_EVENT_PREFIX)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"Kair0s3"},"content":"                parseNewEvent(taskName, tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"Kair0s3"},"content":"            } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"Kair0s3"},"content":"                System.out.println(DukeException.UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"Kair0s3"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"Kair0s3"},"content":"            ui.printErrorMessage(err.getMessage());","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":136,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":137,"author":{"gitId":"Kair0s3"},"content":"     * Parses and validates the task name to create a Todo","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"Kair0s3"},"content":"     * and adds it to the list of tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":140,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the TodoObject to be created","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"Kair0s3"},"content":"     * @param tasks    The list of tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"Kair0s3"},"content":"     * @throws DukeException If the task name is empty.","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"Kair0s3"},"content":"    private void parseNewToDo(String taskName, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"Kair0s3"},"content":"        if (taskName.equals(EMPTY_VALUE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"Kair0s3"},"content":"            throw new DukeException(DukeException.TODO_EMPTY_MESSAGE);","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"Kair0s3"},"content":"        tasks.addNewTodoObject(taskName);","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"Kair0s3"},"content":"     * Returns an array of details containing task name and \"by when\".","lastModifiedDate":"2021-09-22"},{"lineNumber":153,"author":{"gitId":"Kair0s3"},"content":"     * Index 0 contains the task name.","lastModifiedDate":"2021-09-22"},{"lineNumber":154,"author":{"gitId":"Kair0s3"},"content":"     * Index 1 contains the \"by when\" date and time.","lastModifiedDate":"2021-09-22"},{"lineNumber":155,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":156,"author":{"gitId":"Kair0s3"},"content":"     * @param unprocessedTaskName The unprocessed task name containing the prefixes and \"by when\" value.","lastModifiedDate":"2021-09-22"},{"lineNumber":157,"author":{"gitId":"Kair0s3"},"content":"     * @return An array containing task name and \"by when\" value.","lastModifiedDate":"2021-09-22"},{"lineNumber":158,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":159,"author":{"gitId":"Kair0s3"},"content":"    private String[] getTaskNameAndByWhen(String unprocessedTaskName) {","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"Kair0s3"},"content":"        String[] taskNameAndByWhen \u003d new String[2];","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"Kair0s3"},"content":"        String byWhen \u003d unprocessedTaskName.split(BY_WHEN_PREFIX)[1].trim();","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"Kair0s3"},"content":"        String actualTaskName \u003d unprocessedTaskName.replace(BY_WHEN_PREFIX, EMPTY_VALUE).replace(byWhen, EMPTY_VALUE);","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"Kair0s3"},"content":"        taskNameAndByWhen[0] \u003d actualTaskName.trim();","lastModifiedDate":"2021-09-21"},{"lineNumber":164,"author":{"gitId":"Kair0s3"},"content":"        taskNameAndByWhen[1] \u003d byWhen;","lastModifiedDate":"2021-09-21"},{"lineNumber":165,"author":{"gitId":"Kair0s3"},"content":"        return taskNameAndByWhen;","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"Kair0s3"},"content":"     * Parses and validates the unprocessed task name to create a Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":170,"author":{"gitId":"Kair0s3"},"content":"     * and adds it to the list of tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":171,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":172,"author":{"gitId":"Kair0s3"},"content":"     * @param unprocessedTaskName The unprocessed task name before extracting out non-taskName relevant info","lastModifiedDate":"2021-09-22"},{"lineNumber":173,"author":{"gitId":"Kair0s3"},"content":"     * @throws DukeException If the given input does not contain any \"/by\" prefix or deadline name is missing","lastModifiedDate":"2021-09-22"},{"lineNumber":174,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":175,"author":{"gitId":"Kair0s3"},"content":"    private void parseNewDeadline(String unprocessedTaskName, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":176,"author":{"gitId":"Kair0s3"},"content":"        if (!unprocessedTaskName.contains(BY_WHEN_PREFIX)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":177,"author":{"gitId":"Kair0s3"},"content":"            throw new DukeException(DukeException.INVALID_TASK_MESSAGE);","lastModifiedDate":"2021-09-21"},{"lineNumber":178,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":179,"author":{"gitId":"Kair0s3"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":180,"author":{"gitId":"Kair0s3"},"content":"            String[] taskNameAndByWhen \u003d getTaskNameAndByWhen(unprocessedTaskName);","lastModifiedDate":"2021-09-21"},{"lineNumber":181,"author":{"gitId":"Kair0s3"},"content":"            tasks.addNewDeadlineObject(taskNameAndByWhen[0], taskNameAndByWhen[1]);","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"Kair0s3"},"content":"        } catch (ArrayIndexOutOfBoundsException arrError) {","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"Kair0s3"},"content":"            throw new DukeException(\"TOBEREPLACED WITH DEADLINE_EMPTY_MESSAGE\");","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":187,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":188,"author":{"gitId":"Kair0s3"},"content":"     * Returns an array of details containing task name and \"at when\".","lastModifiedDate":"2021-09-22"},{"lineNumber":189,"author":{"gitId":"Kair0s3"},"content":"     * Index 0 contains the task name.","lastModifiedDate":"2021-09-22"},{"lineNumber":190,"author":{"gitId":"Kair0s3"},"content":"     * Index 1 contains the \"at when\" date and time.","lastModifiedDate":"2021-09-22"},{"lineNumber":191,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":192,"author":{"gitId":"Kair0s3"},"content":"     * @param unprocessedTaskName The unprocessed task name containing the prefixes and \"by when\" value.","lastModifiedDate":"2021-09-22"},{"lineNumber":193,"author":{"gitId":"Kair0s3"},"content":"     * @return An array containing task name and \"at when\" value.","lastModifiedDate":"2021-09-22"},{"lineNumber":194,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":195,"author":{"gitId":"Kair0s3"},"content":"    private String[] getTaskNameAndAtWhen(String unprocessedTaskName) {","lastModifiedDate":"2021-09-21"},{"lineNumber":196,"author":{"gitId":"Kair0s3"},"content":"        String[] taskNameAndAtWhen \u003d new String[2];","lastModifiedDate":"2021-09-21"},{"lineNumber":197,"author":{"gitId":"Kair0s3"},"content":"        String atWhen \u003d unprocessedTaskName.split(AT_WHEN_PREFIX)[1].trim();","lastModifiedDate":"2021-09-21"},{"lineNumber":198,"author":{"gitId":"Kair0s3"},"content":"        String actualTaskName \u003d unprocessedTaskName.replace(AT_WHEN_PREFIX, EMPTY_VALUE).replace(atWhen, EMPTY_VALUE);","lastModifiedDate":"2021-09-21"},{"lineNumber":199,"author":{"gitId":"Kair0s3"},"content":"        taskNameAndAtWhen[0] \u003d actualTaskName.trim();","lastModifiedDate":"2021-09-21"},{"lineNumber":200,"author":{"gitId":"Kair0s3"},"content":"        taskNameAndAtWhen[1] \u003d atWhen;","lastModifiedDate":"2021-09-21"},{"lineNumber":201,"author":{"gitId":"Kair0s3"},"content":"        return taskNameAndAtWhen;","lastModifiedDate":"2021-09-21"},{"lineNumber":202,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":203,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":204,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":205,"author":{"gitId":"Kair0s3"},"content":"     * Parses and validates the unprocessed task name to create an Event","lastModifiedDate":"2021-09-22"},{"lineNumber":206,"author":{"gitId":"Kair0s3"},"content":"     * and adds it to the list of tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":207,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":208,"author":{"gitId":"Kair0s3"},"content":"     * @param unprocessedTaskName The unprocessed task name before extracting out non-taskName relevant info","lastModifiedDate":"2021-09-22"},{"lineNumber":209,"author":{"gitId":"Kair0s3"},"content":"     * @throws DukeException If the given input does not contain the \"/at\" prefix or deadline name is missing","lastModifiedDate":"2021-09-22"},{"lineNumber":210,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":211,"author":{"gitId":"Kair0s3"},"content":"    private void parseNewEvent(String unprocessedTaskName, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":212,"author":{"gitId":"Kair0s3"},"content":"        if (!unprocessedTaskName.contains(AT_WHEN_PREFIX)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":213,"author":{"gitId":"Kair0s3"},"content":"            throw new DukeException(DukeException.INVALID_TASK_MESSAGE);","lastModifiedDate":"2021-09-21"},{"lineNumber":214,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":215,"author":{"gitId":"Kair0s3"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":216,"author":{"gitId":"Kair0s3"},"content":"            String [] taskNameAndAtWhen \u003d getTaskNameAndAtWhen(unprocessedTaskName);","lastModifiedDate":"2021-09-21"},{"lineNumber":217,"author":{"gitId":"Kair0s3"},"content":"            tasks.addNewEventObject(taskNameAndAtWhen[0], taskNameAndAtWhen[1]);","lastModifiedDate":"2021-09-21"},{"lineNumber":218,"author":{"gitId":"Kair0s3"},"content":"        } catch (ArrayIndexOutOfBoundsException arrError) {","lastModifiedDate":"2021-09-21"},{"lineNumber":219,"author":{"gitId":"Kair0s3"},"content":"            throw new DukeException(\"TOBEREPLACED WITH EVENT_EMPTY_MESSAGE\");","lastModifiedDate":"2021-09-21"},{"lineNumber":220,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":221,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":222,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":223,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"Kair0s3":223}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"import java.io.File;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"import task.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"import task.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"public class Storage {","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"     * Variables used for loading/saving to the default save filepath.","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"    private final String DEFAULT_SAVE_DIRECTORY \u003d \"data\";","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"    private final String DEFAULT_SAVE_FILE \u003d \"duke.txt\";","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"     * Default class constructor.","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"    public Storage() {}","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"     * Saves the list of tasks to default save file.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"     * Default save file can be found at ./data/duke.txt","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"     * @param tasks The list of tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"    public void saveTasksToFile(TaskList tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"        ArrayList\u003cString\u003e stringFormattedTasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"        File saveDir \u003d new File(DEFAULT_SAVE_DIRECTORY);","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"Kair0s3"},"content":"        saveDir.mkdir();","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"Kair0s3"},"content":"        File saveFile \u003d new File(saveDir, DEFAULT_SAVE_FILE);","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"Kair0s3"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"Kair0s3"},"content":"            saveFile.createNewFile();","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"Kair0s3"},"content":"            FileWriter fw \u003d new FileWriter(saveFile);","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"Kair0s3"},"content":"            stringFormattedTasks \u003d TaskList.getTasksAsStringArrayList(tasks);","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"Kair0s3"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"Kair0s3"},"content":"                fw.write(stringFormattedTasks.get(i) + Ui.LINE_BREAK);","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"Kair0s3"},"content":"            fw.close();","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"Kair0s3"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"Kair0s3"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"Kair0s3"},"content":"            System.out.println(\"Something went wrong\");","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"Kair0s3"},"content":"     * Loads a list of tasks from default save file, if it exists.","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"Kair0s3"},"content":"     * Default save file can be found at ./data/duke.txt","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"Kair0s3"},"content":"     * @param tasks The list of tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"Kair0s3"},"content":"    public void instantiateTasksFromFile(TaskList tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"Kair0s3"},"content":"        File saveDir \u003d new File(DEFAULT_SAVE_DIRECTORY);","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"Kair0s3"},"content":"        saveDir.mkdir();","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"Kair0s3"},"content":"        File savedFile \u003d new File(saveDir, DEFAULT_SAVE_FILE);","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"Kair0s3"},"content":"        if (!savedFile.exists()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"Kair0s3"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"Kair0s3"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"Kair0s3"},"content":"            Scanner fileScanner \u003d new Scanner(savedFile);","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"Kair0s3"},"content":"            while (fileScanner.hasNext()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"Kair0s3"},"content":"                String fileLine \u003d fileScanner.nextLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"Kair0s3"},"content":"                Task savedTask \u003d TaskList.createSavedTask(fileLine);","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"Kair0s3"},"content":"                tasks.loadTaskFromFile(savedTask);","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"Kair0s3"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"Kair0s3"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"Kair0s3":76}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"    protected LocalDate byWhen;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with the specified task name","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"     * and when the Deadline is.","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"     * @param byWhen   The date and time of the Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"    public Deadline(String taskName, LocalDate byWhen) {","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"        super(taskName);","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"        this.byWhen \u003d byWhen;","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with the specified task name, isDone value and when the Deadline is.","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"     * Mainly used for creating a Deadline using values loaded from file.","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"     * @param isDone   The boolean of whether Deadline is done","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"     * @param byWhen   The date and time of the Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"    public Deadline(String taskName, boolean isDone, LocalDate byWhen) {","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"        this.byWhen \u003d byWhen;","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"     * Returns the date and time of the Deadline.","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"Kair0s3"},"content":"     * @return The date and time of the Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"Kair0s3"},"content":"    public String getByWhen() {","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"Kair0s3"},"content":"        return byWhen.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":42,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":43,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"Kair0s3"},"content":"     * Returns the String-formatted Deadline for printing.","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"Kair0s3"},"content":"     * @return The string-formatted Deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"Kair0s3"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"Kair0s3"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"Kair0s3"},"content":"        return \"[D]\" + super.toString() + \" (By -\u003e \"","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"Kair0s3"},"content":"                + byWhen.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Kair0s3":53}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"    protected String atWhen;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with the specified task name and","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"     * when the event is.","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the Event","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"     * @param atWhen The date and time of the Event","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"    public Event(String taskName, String atWhen) {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"        super(taskName);","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"        this.atWhen \u003d atWhen;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with the specified task name, isDone value and when the event is.","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"     * Mainly used for creating an Event using values loaded from file.","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the Event","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"     * @param isDone The boolean value of whether Event is done","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"     * @param atWhen The date and time of the Event","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"    public Event(String taskName, boolean isDone, String atWhen) {","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"        this.atWhen \u003d atWhen;","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"     * Returns the date and time of the Event.","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"     * @return The date and time of the Event","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"Kair0s3"},"content":"    public String getAtWhen() {","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"Kair0s3"},"content":"        return atWhen;","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"Kair0s3"},"content":"     * Returns the String-formatted Event for printing.","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"Kair0s3"},"content":"     * @return The string-formatted Event","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"Kair0s3"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"Kair0s3"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"Kair0s3"},"content":"        return \"[E]\" + super.toString() + \" (At -\u003e \" + atWhen + \")\";","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Kair0s3":49}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"public class Task {","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"    protected String taskName;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with specified task name.","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"    public Task(String taskName) {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with the specified task name and isDone value.","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"     * @param isDone The boolean of whether task is done","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"    public Task(String taskName, boolean isDone) {","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"        this(taskName);","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"            setDone();","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"     * Returns the name of the task.","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"     * @return The name of the task.","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"Kair0s3"},"content":"        return taskName;","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"Kair0s3"},"content":"     * Returns whether the task is done.","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"Kair0s3"},"content":"     * @return The boolean of whether task is done.","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"Kair0s3"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Kair0s3"},"content":"        return isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"Kair0s3"},"content":"     * Sets the task as done.","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"Kair0s3"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Kair0s3"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"Kair0s3"},"content":"     * Returns the Status Icon based on whether task is done.","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"Kair0s3"},"content":"     * @return The status icon based on isDone","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"Kair0s3"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Kair0s3"},"content":"        return (isDone() ? \"X\" : \" \");","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"Kair0s3"},"content":"     * Returns a String-formatted task for printing.","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"Kair0s3"},"content":"     * @return The string-formatted task","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"Kair0s3"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"Kair0s3"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"Kair0s3"},"content":"        return \"[\" + getStatusIcon() + \"] \" + taskName;","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Kair0s3":73}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package task;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"import exception.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"public class TaskList {","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"    private static ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"    private final Ui ui;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor taking in an Ui Object.","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"     * @param uiObject Ui object","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"    public TaskList(Ui uiObject) {","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"        ui \u003d uiObject;","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"     * Returns the size of the list of tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"     * @return Size of Tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"Kair0s3"},"content":"     * Returns the Task at the specified index.","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"Kair0s3"},"content":"     * @param index The index where the task can be found at","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"Kair0s3"},"content":"     * @return Task object","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"Kair0s3"},"content":"    public Task getTaskAtIndex(int index) {","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"Kair0s3"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"Kair0s3"},"content":"     * Adds a new Task to list of tasks after loading from file.","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"Kair0s3"},"content":"     * @param newTask The Task constructed after loaded from file","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"Kair0s3"},"content":"    public void loadTaskFromFile(Task newTask) {","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"Kair0s3"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"Kair0s3"},"content":"     * Adds a new TodoObject to the list of Tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"Kair0s3"},"content":"    public void addNewTodoObject(String taskName) {","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"Kair0s3"},"content":"        Todo newTodo \u003d new Todo(taskName);","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"Kair0s3"},"content":"        tasks.add(newTodo);","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"Kair0s3"},"content":"        ui.printAddedTaskMessage(newTodo.toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"Kair0s3"},"content":"        storage.saveTasksToFile(this);","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"Kair0s3"},"content":"     * Adds a new EventObject to the list of Tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"Kair0s3"},"content":"     * @param atWhen   The date and time of the event","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"Kair0s3"},"content":"    public void addNewEventObject(String taskName, String atWhen) {","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"Kair0s3"},"content":"        Event newEvent \u003d new Event(taskName, atWhen);","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"Kair0s3"},"content":"        tasks.add(newEvent);","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"Kair0s3"},"content":"        ui.printAddedTaskMessage(newEvent.toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"Kair0s3"},"content":"        storage.saveTasksToFile(this);","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"Kair0s3"},"content":"     * Adds a new DeadlineObject to the list of Tasks.","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the task","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"Kair0s3"},"content":"     * @param byWhen   The date and time of the deadline","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"Kair0s3"},"content":"    public void addNewDeadlineObject(String taskName, String byWhen) {","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"Kair0s3"},"content":"        LocalDate byWhenDateTime \u003d LocalDate.parse(byWhen);","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"Kair0s3"},"content":"        Deadline newDeadline \u003d new Deadline(taskName, byWhenDateTime);","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"Kair0s3"},"content":"        tasks.add(newDeadline);","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"Kair0s3"},"content":"        ui.printAddedTaskMessage(newDeadline.toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"Kair0s3"},"content":"        storage.saveTasksToFile(this);","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"Kair0s3"},"content":"     * Removes the Task at the specified index.","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"Kair0s3"},"content":"     * @param index The index where the task can be found at","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"Kair0s3"},"content":"    public void removeTaskAtIndex(int index) {","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"Kair0s3"},"content":"        Task deletedTask \u003d tasks.get(index);","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"Kair0s3"},"content":"        tasks.remove(index);","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"Kair0s3"},"content":"        storage.saveTasksToFile(this);","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"Kair0s3"},"content":"        ui.printDeletedTaskMessage(deletedTask, tasks.size());","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"Kair0s3"},"content":"     * Mark the task as done and calls Ui to print out marked as done message.","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"Kair0s3"},"content":"     * @param index The index of the Task that the user wants to mark as done in the list","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"Kair0s3"},"content":"     * @throws DukeException If tasks is empty, or the index given is out of bounds","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"Kair0s3"},"content":"    public void markTaskAsDone(int index) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"Kair0s3"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"Kair0s3"},"content":"            if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"Kair0s3"},"content":"                throw new DukeException(DukeException.NO_TASK_MESSAGE);","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"Kair0s3"},"content":"            } else if (tasks.size() \u003c\u003d index) {","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"Kair0s3"},"content":"                throw new DukeException(\"OVERFLOWED INDEX PLEASE REPLACE ME\");","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"Kair0s3"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"Kair0s3"},"content":"            task.setDone();","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"Kair0s3"},"content":"            ui.printMarkedTaskDoneMessage(task);","lastModifiedDate":"2021-09-21"},{"lineNumber":122,"author":{"gitId":"Kair0s3"},"content":"            storage.saveTasksToFile(this);","lastModifiedDate":"2021-09-21"},{"lineNumber":123,"author":{"gitId":"Kair0s3"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":124,"author":{"gitId":"Kair0s3"},"content":"            throw new DukeException(\"TOBECHANGED\");","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"Kair0s3"},"content":"     * Returns a list of tasks formatted as strings for saving to file.","lastModifiedDate":"2021-09-22"},{"lineNumber":130,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"Kair0s3"},"content":"     * @return ArrayList of string-formatted Tasks","lastModifiedDate":"2021-09-22"},{"lineNumber":132,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"Kair0s3"},"content":"    public static ArrayList\u003cString\u003e getTasksAsStringArrayList(TaskList tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"Kair0s3"},"content":"        ArrayList\u003cString\u003e stringFormattedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"Kair0s3"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-21"},{"lineNumber":136,"author":{"gitId":"Kair0s3"},"content":"            Task currentTaskPtr \u003d tasks.getTaskAtIndex(i);","lastModifiedDate":"2021-09-21"},{"lineNumber":137,"author":{"gitId":"Kair0s3"},"content":"            char taskIdentifier \u003d currentTaskPtr.toString().charAt(1);","lastModifiedDate":"2021-09-21"},{"lineNumber":138,"author":{"gitId":"Kair0s3"},"content":"            String temp \u003d taskIdentifier + \"||\" + currentTaskPtr.isDone()","lastModifiedDate":"2021-09-21"},{"lineNumber":139,"author":{"gitId":"Kair0s3"},"content":"                    + \"||\" + currentTaskPtr.getTaskName();","lastModifiedDate":"2021-09-21"},{"lineNumber":140,"author":{"gitId":"Kair0s3"},"content":"            if (taskIdentifier \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2021-09-21"},{"lineNumber":141,"author":{"gitId":"Kair0s3"},"content":"                temp +\u003d \"||\" + ((Deadline) currentTaskPtr).getByWhen();","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"Kair0s3"},"content":"            } else if (taskIdentifier \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"Kair0s3"},"content":"                temp +\u003d \"||\" + ((Event) currentTaskPtr).getAtWhen();","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"Kair0s3"},"content":"            stringFormattedTasks.add(temp);","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"Kair0s3"},"content":"        return stringFormattedTasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":151,"author":{"gitId":"Kair0s3"},"content":"     * Creates and returns a Task from the read file line.","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":153,"author":{"gitId":"Kair0s3"},"content":"     * @param fileLine The line of string read from file","lastModifiedDate":"2021-09-22"},{"lineNumber":154,"author":{"gitId":"Kair0s3"},"content":"     * @return A Task created from specified file line.","lastModifiedDate":"2021-09-22"},{"lineNumber":155,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":156,"author":{"gitId":"Kair0s3"},"content":"    public static Task createSavedTask(String fileLine) {","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"Kair0s3"},"content":"        String[] tokens \u003d fileLine.split(\"\\\\|\\\\|\");","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"Kair0s3"},"content":"        String taskType \u003d tokens[0];","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"Kair0s3"},"content":"        String taskName \u003d tokens[2];","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"Kair0s3"},"content":"        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"Kair0s3"},"content":"        Task savedTask;","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"Kair0s3"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"Kair0s3"},"content":"        case \"D\":","lastModifiedDate":"2021-09-21"},{"lineNumber":164,"author":{"gitId":"Kair0s3"},"content":"            LocalDate byWhenDateTime \u003d LocalDate.parse(tokens[3]);","lastModifiedDate":"2021-09-21"},{"lineNumber":165,"author":{"gitId":"Kair0s3"},"content":"            savedTask \u003d new Deadline(taskName, isDone, byWhenDateTime);","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"Kair0s3"},"content":"            break;","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"Kair0s3"},"content":"        case \"E\":","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"Kair0s3"},"content":"            savedTask \u003d new Event(taskName, isDone, tokens[3]);","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"Kair0s3"},"content":"            break;","lastModifiedDate":"2021-09-21"},{"lineNumber":170,"author":{"gitId":"Kair0s3"},"content":"        default:","lastModifiedDate":"2021-09-21"},{"lineNumber":171,"author":{"gitId":"Kair0s3"},"content":"            savedTask \u003d new Todo(taskName, isDone);","lastModifiedDate":"2021-09-21"},{"lineNumber":172,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":173,"author":{"gitId":"Kair0s3"},"content":"        return savedTask;","lastModifiedDate":"2021-09-21"},{"lineNumber":174,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":175,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":176,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":177,"author":{"gitId":"Kair0s3"},"content":"     * Returns a filtered list of Tasks with task name containing the keyword.","lastModifiedDate":"2021-09-22"},{"lineNumber":178,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":179,"author":{"gitId":"Kair0s3"},"content":"     * @param keyword The keyword specified by user","lastModifiedDate":"2021-09-22"},{"lineNumber":180,"author":{"gitId":"Kair0s3"},"content":"     * @return A list of tasks with task name matching the keyword","lastModifiedDate":"2021-09-22"},{"lineNumber":181,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":182,"author":{"gitId":"Kair0s3"},"content":"    public static ArrayList\u003cTask\u003e getAllTasksByName(String keyword) {","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"Kair0s3"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d (ArrayList\u003cTask\u003e) tasks.stream()","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"Kair0s3"},"content":"                .filter((t) -\u003e t.getTaskName().contains(keyword))","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"Kair0s3"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"Kair0s3"},"content":"        return filteredTasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":187,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":188,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"Kair0s3":188}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with the specified task name.","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the Todo","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"        super(taskName);","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"     * Class constructor with specified task name and isDone value.","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"     * Mainly used for creating a Todo using values loaded from file.","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"     * @param taskName The name of the Todo","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"     * @param isDone The boolean of whether the Todo is done","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"    public Todo(String taskName, boolean isDone) {","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"        super(taskName, isDone);","lastModifiedDate":"2021-09-12"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"     * Returns a String-formatted Todo for printing.","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"     * @return The String-formatted Todo","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Kair0s3":33}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"package ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"import task.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"import task.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"public class Ui {","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"     * Decorative prefixes to format program\u0027s output more neatly/cleaner.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"Kair0s3"},"content":"    public static final String CONSOLE_LINE_PREFIX \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"Kair0s3"},"content":"    public static final String SPACE_PREFIX \u003d \" \";","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"Kair0s3"},"content":"    public static final String LINE_BREAK \u003d \"\\n\";","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"Kair0s3"},"content":"    public Ui() {","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"Kair0s3"},"content":"        this(System.in);","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"Kair0s3"},"content":"    public Ui(InputStream in) {","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"Kair0s3"},"content":"        this.sc \u003d new Scanner(in);","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"Kair0s3"},"content":"     * Prints the Duke program logo.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"Kair0s3"},"content":"     * Credits","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"Kair0s3"},"content":"     * ASCII Art Logo generated using","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"Kair0s3"},"content":"     * https://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dDancing%20Font\u0026t\u003dDuke","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"Kair0s3"},"content":"    public void printLogo() {","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"Kair0s3"},"content":"        String logo \u003d \"  ____     _   _    _  __  U _____ u\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"Kair0s3"},"content":"                + \" |  _\\\"\\\\ U |\\\"|u| |  |\\\"|/ /  \\\\| ___\\\"|/\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"Kair0s3"},"content":"                + \"/| | | | \\\\| |\\\\| |  | \u0027 /    |  _|\\\"\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"Kair0s3"},"content":"                + \"U| |_| |\\\\ | |_| |U/| . \\\\u   | |___\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"Kair0s3"},"content":"                + \" |____/ u\u003c\u003c\\\\___/   |_|\\\\_\\\\   |_____|\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"Kair0s3"},"content":"                + \"  |||_  (__) )(  ,-,\u003e\u003e \\\\\\\\,-.\u003c\u003c   \u003e\u003e\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"Kair0s3"},"content":"                + \" (__)_)     (__)  \\\\.)   (_/(__) (__)\";","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"Kair0s3"},"content":"        System.out.println(logo);","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"Kair0s3"},"content":"     * Prints out the program greeting message.","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"Kair0s3"},"content":"    public void printGreeting() {","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"Kair0s3"},"content":"        String greeting \u003d CONSOLE_LINE_PREFIX + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"Hello! You probably know that Iron Man has the best AI-assistant called Jarvis\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"and Spiderman has hmmm, maybe his tingly spidey senses?\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"But don\u0027t worry! You have me, Duke! I am your personal SIDEKICK that does \\\"something\\\"!\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"What is \\\"something\\\" you want me to do?\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"Kair0s3"},"content":"                + CONSOLE_LINE_PREFIX;","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"Kair0s3"},"content":"        System.out.println(greeting);","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"Kair0s3"},"content":"     * Prints out the program farewell (exit) message.","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"Kair0s3"},"content":"    public void printFarewell() {","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"Kair0s3"},"content":"        String farewell \u003d CONSOLE_LINE_PREFIX + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"Bye, have a nice day! From your friendly neighbourhood assistant, Duke~\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"(NICE, I can finally binge watch Rick and Morty~)\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"Kair0s3"},"content":"                + CONSOLE_LINE_PREFIX;","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"Kair0s3"},"content":"        System.out.println(farewell);","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"Kair0s3"},"content":"     * Prints out the respective error messages.","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"Kair0s3"},"content":"     * @param errorMessage Error Message of the encountered error/exception","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"Kair0s3"},"content":"    public void printErrorMessage(String errorMessage) {","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"Kair0s3"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"Kair0s3"},"content":"     * Returns the user input from I/O","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"Kair0s3"},"content":"     * @return User input","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"Kair0s3"},"content":"    public String getUserInput() {","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"Kair0s3"},"content":"        String userInput;","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"Kair0s3"},"content":"        System.out.print(SPACE_PREFIX + \"What\u0027s your plans/command for today (No... I am not hitting on you) : \");","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"Kair0s3"},"content":"        userInput \u003d sc.nextLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"Kair0s3"},"content":"        return userInput;","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"Kair0s3"},"content":"     * Print added to Tasks message.","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"Kair0s3"},"content":"     * @param taskInformation The task\u0027s name","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"Kair0s3"},"content":"    public void printAddedTaskMessage(String taskInformation) {","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"Kair0s3"},"content":"        System.out.println(CONSOLE_LINE_PREFIX + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"Here you go...\" + LINE_BREAK + \" Added to stuff you would definitely forget to do (*facepalm*):\"","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"Kair0s3"},"content":"                + LINE_BREAK + SPACE_PREFIX","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"Kair0s3"},"content":"                + taskInformation","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"Kair0s3"},"content":"                + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"Kair0s3"},"content":"                + CONSOLE_LINE_PREFIX);","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"Kair0s3"},"content":"     * Print deleted Task message.","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"Kair0s3"},"content":"     * @param deletedTask The deleted task","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"Kair0s3"},"content":"     * @param taskCounter The number of remaining tasks left","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"Kair0s3"},"content":"    public void printDeletedTaskMessage(Task deletedTask, int taskCounter) {","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"Kair0s3"},"content":"        System.out.println(CONSOLE_LINE_PREFIX + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"Roger that! I am Thanos and I have snapped away : \" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + deletedTask","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"Kair0s3"},"content":"                + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + \"Now you have \" + taskCounter + \" tasks left!\"","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"Kair0s3"},"content":"                + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"Kair0s3"},"content":"                + CONSOLE_LINE_PREFIX);","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":121,"author":{"gitId":"Kair0s3"},"content":"     * Print \"Task has been marked\" message.","lastModifiedDate":"2021-09-22"},{"lineNumber":122,"author":{"gitId":"Kair0s3"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":123,"author":{"gitId":"Kair0s3"},"content":"     * @param doneTask The task that has been marked as done","lastModifiedDate":"2021-09-22"},{"lineNumber":124,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":125,"author":{"gitId":"Kair0s3"},"content":"    public void printMarkedTaskDoneMessage(Task doneTask) {","lastModifiedDate":"2021-09-20"},{"lineNumber":126,"author":{"gitId":"Kair0s3"},"content":"        System.out.println(SPACE_PREFIX + \"Great! You didn\u0027t forget to do it! I have marked it as done!\" + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"Kair0s3"},"content":"                + SPACE_PREFIX + doneTask + LINE_BREAK","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"Kair0s3"},"content":"                + CONSOLE_LINE_PREFIX);","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"Kair0s3"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"Kair0s3"},"content":"     * Prints all the Tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"Kair0s3"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"Kair0s3"},"content":"    public void printTasks(TaskList tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":135,"author":{"gitId":"Kair0s3"},"content":"        if (tasks.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-09-21"},{"lineNumber":136,"author":{"gitId":"Kair0s3"},"content":"            System.out.println(CONSOLE_LINE_PREFIX + LINE_BREAK + SPACE_PREFIX + \"Hi there! You have no dates! LITERALLY\"","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"Kair0s3"},"content":"                    + LINE_BREAK + CONSOLE_LINE_PREFIX);","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"Kair0s3"},"content":"        } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"Kair0s3"},"content":"            System.out.println(SPACE_PREFIX + \"EEEEEOOOOOO~ ALL RIGHT~ Oops was jamming away in my virtual garage, here\u0027s your PLAN/S...\");","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"Kair0s3"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-21"},{"lineNumber":141,"author":{"gitId":"Kair0s3"},"content":"                System.out.println(SPACE_PREFIX + (i + 1) + \".\" + SPACE_PREFIX + tasks.getTaskAtIndex(i));","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":143,"author":{"gitId":"Kair0s3"},"content":"            System.out.println(CONSOLE_LINE_PREFIX);","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"Kair0s3"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"Kair0s3"},"content":"    public void printFilteredTasks(ArrayList\u003cTask\u003e filteredTasks, String keyword) {","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"Kair0s3"},"content":"        if (filteredTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"Kair0s3"},"content":"            System.out.println(CONSOLE_LINE_PREFIX + LINE_BREAK + SPACE_PREFIX","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"Kair0s3"},"content":"                    + \"Hi there! I can\u0027t seem to find any tasks with the given keyword - \" + keyword","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"Kair0s3"},"content":"                    + LINE_BREAK + CONSOLE_LINE_PREFIX);","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"Kair0s3"},"content":"        }else {","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"Kair0s3"},"content":"            System.out.println(SPACE_PREFIX + \"ALL RIGHTTTT~ I found these using the keyword you have given :D\");","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"Kair0s3"},"content":"            for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"Kair0s3"},"content":"                System.out.println(SPACE_PREFIX + (i + 1) + \".\" + SPACE_PREFIX + filteredTasks.get(i));","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"Kair0s3"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"Kair0s3"},"content":"            System.out.println(CONSOLE_LINE_PREFIX);","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"Kair0s3"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"Kair0s3"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"Kair0s3"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"Kair0s3":160}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Kair0s3"},"content":"list","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Kair0s3"},"content":"todo borrow book","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Kair0s3"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Kair0s3"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Kair0s3"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Kair0s3"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Kair0s3"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Kair0s3"},"content":"done 3","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Kair0s3"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Kair0s3"},"content":"done 2","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Kair0s3"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Kair0s3"},"content":"done 1","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Kair0s3"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Kair0s3"},"content":"bye","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Kair0s3":14}}]
