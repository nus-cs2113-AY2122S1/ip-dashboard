[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"Duke is a **task managing desktop app optimised for usage via the Command Line Interface**(CLI). It is possible for task tracking and management to be done faster on Duke as compared to using a GUI app for those who are able to type fast.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"* Quick Start","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"* Features","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"  * Adding new task: ","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    * Todo task type: `todo`","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    * Deadline task type: `deadline`","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    * Event task type: `event`","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"  * Deleting a task: `delete`","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"  * Finding tasks: `find`","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"  * Marking a task as done: `done`","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"  * Viewing all task: `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"  * Exiting the program: `bye`","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"* Command Summary","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"## Quick Start","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"1. Ensure that Java 11 or above is installed in your Computer.","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"2. Download the latest JAR file from the latest release.","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"3. Copy the file to a folder where you want to run it from. ","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"4. Open a command window in that folder and run the command `java -jar ip.jar`.","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"5. Type the command and press Enter to execute it. Here are some commands you can try:","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"  * `todo buy bread` : adds a todo task type with a description to buy bread.","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"  * `done 1` : marks the first task as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"  * `list` : view all task in the tasks list.","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"6. Refer to the *Features* below for details of each command.","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"### Adding new task","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"Duke is able to handle 3 different types of task: ","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"1. __Todo__ : tasks without any date/time attached to it. i.e. visit new theme park","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"2. __Deadline__: tasks that need to be done before a specific date/time. i.e. submit report by 11-10-2019 5pm","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"3. __Event__: tasks that start at a specific time and ends at a specific time. i.e. team project meeting on 02-10-2019 2-4pm   ","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"  ","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"#### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Todo task type: `todo`","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new Todo task","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"  * Format: `todo TASK_NAME`","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"  * Example: `todo sell bread` ","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"       ","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"    ![Todo Screenshot](https://github.com/markuslyq/ip/blob/master/images/todo%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"    ","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"#### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Deadline task type: `deadline`","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new Deadline task","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"  * Format: `deadline TASK_NAME /preposition DATE/TIME`","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"  * The `DATE` has to be in format of `dd-mm-yyyy`","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"  * Example: `deadline submit report /by 11-10-2019 5pm` ","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"       ","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"    ![Deadline Screenshot](https://github.com/markuslyq/ip/blob/master/images/deadline%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"    ","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"#### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Event task type: `event`","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Adds a new Event task","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"  * Format: `event TASK_NAME /preposition DATE/TIME`","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"  * The `DATE` has to be in format of `dd-mm-yyyy`","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"  * Example: `event team project meeting /on 02-10-2019 2-4pm` ","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"       ","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"    ![Event Screenshot](https://github.com/markuslyq/ip/blob/master/images/event%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2021-07-17"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"Deletes a task from the tasks list.","lastModifiedDate":"2021-09-28"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"* Format: `delete TASK_INDEX`","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"* The `TASK_INDEX` refers to the integer index of a particular task shown in the displayed tasks list.","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"* `TASK_INDEX` __must be a positive integer__ 1, 2, 3, â€¦","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"* Example: `list` followed by `delete 1` deletes the task of index \u00271\u0027.","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"    ![Delete Screenshot](https://github.com/markuslyq/ip/blob/master/images/delete%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"### Finding task: `find`","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"Finds tasks by searching for a keyword.","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"* Format: `find SEARCH_PARAMETERS`","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"* The query is case sensitive, which means that `Oct` will only search for `Oct` and not for `OCT` or `oct`.","lastModifiedDate":"2021-09-28"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"* Example: `find Oct`  ","lastModifiedDate":"2021-09-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"    ![Find Screenshot](https://github.com/markuslyq/ip/blob/master/images/find%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"### Marking a task as done: `done`","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"Marks a particular task in the tasks list as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"* Format: `done TASK_INDEX`","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"* The `TASK_INDEX` refers to the integer index of a particular task shown in the displayed tasks list.","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"* `TASK_INDEX` __must be a positive integer__ 1, 2, 3, â€¦","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"* Example: `list` followed by `done 2` marks the task of index \u00272\u0027 as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"    ![Done Screenshot](https://github.com/markuslyq/ip/blob/master/images/done%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"### Viewing all task: `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"Displays a list of all tasks in the tasks list.","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"* Format: `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"* Example: `list`","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"markuslyq"},"content":"    ![List Screenshot](https://github.com/markuslyq/ip/blob/master/images/list%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":93,"author":{"gitId":"markuslyq"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2021-09-28"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"Exits the program.","lastModifiedDate":"2021-09-28"},{"lineNumber":95,"author":{"gitId":"markuslyq"},"content":"* Format: `bye`","lastModifiedDate":"2021-09-28"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"* Example: `bye`","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"    ![Bye Screenshot](https://github.com/markuslyq/ip/blob/master/images/bye%20screenshot.png?raw\u003dtrue) ","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":100,"author":{"gitId":"markuslyq"},"content":"## Command Summary ","lastModifiedDate":"2021-09-28"},{"lineNumber":101,"author":{"gitId":"markuslyq"},"content":"|Action | Second Header|","lastModifiedDate":"2021-09-28"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"|------------ | -------------|","lastModifiedDate":"2021-09-28"},{"lineNumber":103,"author":{"gitId":"markuslyq"},"content":"|Add Todo task | `todo TASK_NAME` [ i.e. `todo sell bread` ]|","lastModifiedDate":"2021-09-28"},{"lineNumber":104,"author":{"gitId":"markuslyq"},"content":"|Add Deadline task | `deadline TASK_NAME /preposition DATE/TIME` [ i.e. `deadline submit report /by 11-10-2019 5pm` ]|","lastModifiedDate":"2021-09-28"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"|Add Event task | `event TASK_NAME /preposition DATE/TIME` [ i.e. `event team project meeting /on 02-10-2019 2-4pm` ]|","lastModifiedDate":"2021-09-28"},{"lineNumber":106,"author":{"gitId":"markuslyq"},"content":"|Delete | `delete TASK_INDEX` [ i.e. `delete 1` ]|","lastModifiedDate":"2021-09-28"},{"lineNumber":107,"author":{"gitId":"markuslyq"},"content":"|Find | `find SEARCH_PARAMETERS` [i.e. `find Oct` ]|","lastModifiedDate":"2021-09-28"},{"lineNumber":108,"author":{"gitId":"markuslyq"},"content":"|Mark task as done | `done TASK_INDEX` [ i.e. `done 2` ]|","lastModifiedDate":"2021-09-28"},{"lineNumber":109,"author":{"gitId":"markuslyq"},"content":"|View | `list`|","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"markuslyq":94,"-":15}},{"path":"src/main/java/Duke/Commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    String[] splittedInput;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"     * Checks if there are characters present after the \"bye\" command.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there are characters present after the \"bye\" command.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    public ByeCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"        splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"        if (splittedInput.length \u003e 1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! Sorry but bye command shouldn\u0027t consist of anything\" + System.lineSeparator()","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"                    + \"\\telse other than \\\"bye\\\" itself.\");","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    public void execute() {}","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":26}},{"path":"src/main/java/Duke/Commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":" * Represents a command type depending on the user\u0027s input.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"public class Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    protected TaskList taskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    public Command() {}","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"     * Initialise the tasks list to be used by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     * @param tasksList Current task list that is in use.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    public void setData(TaskList tasksList) {","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"        taskList \u003d tasksList;","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     * Execute different set of instructions in the subclass based on the user\u0027s command.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there is an error upon executing the instructions.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    public void execute() throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"     * Execute different set of instructions in the subclass based on the taskList.txt file.","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there is an error upon executing the instructions.","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"    public void executeFromFile() throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"     *  Returns the due date in a String format.","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"     * @param slashIndex The index of the slash from the user\u0027s input.","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the due date in String.","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there are no characters present after the slashIndex.","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"    protected static String getDueDate(String input, int slashIndex) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"        if (slashIndex + 1 \u003e\u003d input.length()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The description of this task type requires a specific time\");","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"        String dueDate \u003d input.substring(slashIndex + 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"        checkForValidDateFormat(dueDate);","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"        return dueDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"     * Checks if the format of the due date inputted is valid.","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"     * @param dueDate Due date inputted by the user in String.","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the date is not in the format of \"dd-mm-yyyy\".","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"    private static void checkForValidDateFormat(String dueDate) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"            String[] splittedDueDate \u003d dueDate.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"            LocalDate date \u003d LocalDate.parse(splittedDueDate[1], DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! Invalid date format.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"                    + \"\\tPlease enter your date in the following format: dd-mm-yyyy\");","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"     * Checks if the task list is empty and throws an error message","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"     * if it is or if an invalid index of the task list is inputted.","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"     * @param taskList Current task list that is in use.","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the list is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"    protected void handleInvalidIndexErrors(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The list is empty!\");","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"        } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"            System.out.println(\"\\tâ˜¹ OOPS!!! Please enter a valid task index.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":88}},{"path":"src/main/java/Duke/Commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Deadline;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import Duke.UI;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    private final String taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    private final String dueDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     * Initialises the name and the due date of the task from the input command.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there is an error when getting the name or due date of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    public DeadlineCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"        int slashIndex \u003d input.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        this.taskName \u003d getDeadlineTaskName(input, slashIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"        this.dueDate \u003d getDueDate(input, slashIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     * Returns the name of the task from the input given by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"     * @param slashIndex The index of the slash from the user\u0027s input.","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"     * @return Returns name of the task in String format.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the slash is not present in the input or if the task name is empty or filled with whitespaces.","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    private static String getDeadlineTaskName(String input, int slashIndex) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        final int DEADLINE_WORD_LENGTH \u003d 9;","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"        int taskNameLastIndex \u003d slashIndex - 1; //the last index of the task name","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        //if the slash is not present in the input","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"        if (slashIndex \u003d\u003d -1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The description of an deadline task requires a task name\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"                    + \"\\tfollowed by a front slash, and then a specific date/time after.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"                    + \"\\ti.e. deadline submit report /by 11-10-2019 5pm\");","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"        } else if (taskNameLastIndex \u003c\u003d DEADLINE_WORD_LENGTH) { //if the slash exists but the task name is empty","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The name of an deadline task cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"        String taskName \u003d input.substring(DEADLINE_WORD_LENGTH, taskNameLastIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"        //if taskName is just filled with whitespaces","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"        if (taskName.replace(\" \", \"\").isEmpty()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The name of a deadline task cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"        return taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"     * Adds a deadline task to the tasks list.","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of the new deadline task added.","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"    public void execute() {","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"        taskList.addTask(new Deadline(taskName, dueDate));","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"        UI.printNewTaskMsg(taskList.getEntireList());","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"     * Adds a deadline task to the tasks list without notifying the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"    public void executeFromFile() {","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"        taskList.addTask(new Deadline(taskName, dueDate));","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":69}},{"path":"src/main/java/Duke/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import Duke.UI;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    String[] splittedInput;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * Splits the input given the regular expression of a whitespace and","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * initialise it to a String array named splittedInput.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"        splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     * Delete a particular task from the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the index that the user wants to delete is out of bounds, cease to exist or is not of an integer format.","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"    public void execute() throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"            deleteTask(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"            handleInvalidIndexErrors(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"        UI.printBorder();","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"     * Removes the task of the index entered by the user from the task list and notify the user of the deletion.","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"     * @param taskList Current task list that is in use.","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    private void deleteTask(TaskList taskList) {","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"        int taskIndex \u003d Integer.parseInt(splittedInput[1]) - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tAlright, I\u0027ve deleted this task: \" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"                + \"\\t\" + taskList.getTask(taskIndex).toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"        taskList.removeTask(taskIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tYou now have \" + taskList.getSize() + \" tasks on your task list.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":48}},{"path":"src/main/java/Duke/Commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.TaskList;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import Duke.UI;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    String[] splittedInput;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * Splits the input given the regular expression of a whitespace and","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * initialise it to a String array named splittedInput.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    public DoneCommand(String input) {","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"        splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     * Marks a particular task from the task list as done and notify the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the index that the user wants to mark as done is out of bounds, cease to exist or is not of an integer format.","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"    public void execute() throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"            int taskIndex \u003d markTaskAsDone(taskList);","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"            UI.printMarkedAsDoneMessage(taskList, taskIndex);","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"            handleInvalidIndexErrors(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        UI.printBorder();","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"     * Marks a particular task from the task list as done without notifying the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the index that the user wants to mark as done is out of bounds, cease to exist or is not of an integer format.","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"    public void executeFromFile() throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"            markTaskAsDone(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"            handleInvalidIndexErrors(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"     * Marks the task of the index entered by the user as done and","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"     * returns the particular index.","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"     * @param taskList Current task list that is in use.","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"     * @return Index of task to be marked as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"    private int markTaskAsDone(TaskList taskList) {","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"        int taskIndex \u003d Integer.parseInt(splittedInput[1]) - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"        taskList.getTask(taskIndex).markAsDone();","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"        return taskIndex;","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":63}},{"path":"src/main/java/Duke/Commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Event;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import Duke.UI;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    private final String taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    private final String dueDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * Initialises the name and the due date of the task from the input command.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there is an error when getting the name or due date of the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    public EventCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"        int slashIndex \u003d input.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"        this.taskName \u003d getEventTaskName(input, slashIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        this.dueDate \u003d getDueDate(input, slashIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * Returns the name of the task from the input given by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     * @param slashIndex The index of the slash from the user\u0027s input.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"     * @return Returns name of the task in String format.","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the slash is not present in the input or if the task name is empty or filled with whitespaces.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"    private static String getEventTaskName(String input, int slashIndex) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"        final int EVENT_WORD_LENGTH \u003d 6;","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        int taskNameLastIndex \u003d slashIndex - 1; //the last index of the task name","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"        //if the slash is not present in the input","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        if (slashIndex \u003d\u003d -1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The description of an event task requires a task name\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"                    + \"\\tfollowed by a front slash, and then a specific time after.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"                    + \"\\ti.e. event team project meeting /on 02-10-2019 2-4pm\");","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"        } else if (taskNameLastIndex \u003c\u003d EVENT_WORD_LENGTH) { //if the slash exists but the task name is empty","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The name of an event task cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"        String taskName \u003d input.substring(EVENT_WORD_LENGTH, taskNameLastIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"        //if taskName are just filled with whitespaces","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"        if (taskName.replace(\" \", \"\").isEmpty()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The name of an event task cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"        return taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"     * Adds an event task to the tasks list.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of the new event task added.","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"    public void execute() {","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"        taskList.addTask(new Event(taskName, dueDate));","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"        UI.printNewTaskMsg(taskList.getEntireList());","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"     * Adds an event task to the tasks list without notifying the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"    public void executeFromFile() {","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"        taskList.addTask(new Event(taskName, dueDate));","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":68}},{"path":"src/main/java/Duke/Commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    public String searchParams;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"     * Initialises the search parameters from the input entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the search parameters is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    public FindCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"            searchParams \u003d getSearchParams(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"            if (searchParams.replace(\" \", \"\").isEmpty()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! The search parameters of a find command cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"            throw new IndexOutOfBoundsException(\"â˜¹ OOPS!!! The search parameters of a find command cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     *  Returns the search parameters given the input entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the search parameters in String format.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If search parameters is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    private String getSearchParams(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        int spaceIndex \u003d input.indexOf(\u0027 \u0027);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"        if (spaceIndex \u003d\u003d -1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The search parameters of a find command cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"        return input.substring(spaceIndex + 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"     * Search the list given the search parameters","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"     * and prints all tasks that satisfy the search parameters.","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"    public void execute() {","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"        taskList.searchList(searchParams);","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":48}},{"path":"src/main/java/Duke/Commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"public class InvalidCommand extends Command{","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    private static final String INVALID_INPUT_MESSAGE \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"            + \"\\tPlease enter a valid input!\" + System.lineSeparator()","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"            + \"\\ti.e. todo, deadline, event, list, done or bye.\";","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * Throws an invalid input message.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException When this command type is being initialised.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    public InvalidCommand() throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"        throw new DukeException(INVALID_INPUT_MESSAGE);","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":18}},{"path":"src/main/java/Duke/Commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.UI;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    String[] splittedInput;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"     * Checks if there are characters present after the \"list\" command.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there are characters present after the \"list\" command.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"    public ListCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"        splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"        if (splittedInput.length \u003e 1) {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! Sorry but list command shouldn\u0027t consist of anything\" + System.lineSeparator()","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"                    + \"\\telse other than \\\"list\\\" itself.\");","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * Prints the entire task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"    public void execute() {","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        UI.printListMessage(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":31}},{"path":"src/main/java/Duke/Commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Todo;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import Duke.UI;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    private static String taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * Initialises the name of the task from the input command.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the name of the task is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    public TodoCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"        taskName \u003d getTodoTaskName(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     * Returns the name of the task from the input given by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     * @return Returns name of the task in String format.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the name of the task if empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    private static String getTodoTaskName(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        int spaceIndex \u003d input.indexOf(\u0027 \u0027);","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"        String taskName \u003d input.substring(spaceIndex + 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"        if (taskName.equals(\"todo\")) {","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The description of a todo task cannot be empty.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"        return taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"     * Adds a todo task to the tasks list.","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of the new todo task added.","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"    public void execute() {","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"        taskList.addTask(new Todo(taskName));","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"        UI.printNewTaskMsg(taskList.getEntireList());","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"     * Adds a todo task to the tasks list without notifying the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"    public void executeFromFile() {","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"        taskList.addTask(new Todo(taskName));","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":56}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.Commands.ByeCommand;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.Commands.Command;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"public class Duke {","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * This is the main function of the Duke program.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     * @param args Arguments","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"        taskList \u003d Storage.initialiseFile();","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"        UI.printHeaderMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"        handleInputs();","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"        UI.printByeMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     * Handles the commands inputted by the user until an exit command is given.","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * Exits the function upon exit command.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"    public static void handleInputs() {","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        Command command;","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        while (!isExit) {","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"            try {","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"                String input \u003d UI.getInput();","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"                command \u003d Parser.parseCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"                command.setData(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"                command.execute();","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"                Storage.updateFile(taskList);","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"                if (command instanceof ByeCommand) {","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"                    isExit \u003d true;","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"                }","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"markuslyq":45}},{"path":"src/main/java/Duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"    public DukeException (String errorMsg) {","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"        super(\"\\t\" + errorMsg + System.lineSeparator()","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"        + \"\\t----------------------------------------------------------------------\");","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"markuslyq":8}},{"path":"src/main/java/Duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.Commands.*;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"public class Parser {","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"     * Interprets the input given by the user and returns a command type based on the first word from the input.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"     * If the first word is not a recognised command, an invalid command message would be thrown.","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * @return Returns a particular command type depending on the first word of the input.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If the first word of the input is not a recognised command.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    public static Command parseCommand(String input) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"        String[] splittedInput \u003d input.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"        final String COMMAND \u003d splittedInput[0];","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"        switch (COMMAND.toLowerCase()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"            return new TodoCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"            return new DeadlineCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"            return new EventCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"            return new ListCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        case DoneCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"            return new DoneCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"            return new FindCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        case ByeCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"            return new ByeCommand(input);","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        default:","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"            return new InvalidCommand();","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":40}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.Commands.Command;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Deadline;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Todo;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"import java.io.File;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"public class Storage {","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    private static final String CURRENT_DIRECTORY \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"    private static final java.nio.file.Path FILE_PATH \u003d java.nio.file.Paths.get(CURRENT_DIRECTORY);","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    private static final TaskList FILE_TASK_LIST \u003d new TaskList();","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"     * Initialises the task list according to the contents of the file.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"     * Returns the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the task list initialised based on the contents of the file.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"    public static TaskList initialiseFile() {","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"            //get the file, else create file if it does not exist.","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"            File taskFile \u003d getTaskFile();","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"            Scanner fileList \u003d new Scanner(taskFile);","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"            //read and extract the data in the file to store it in the task array list.","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"            readAndExtractFile(fileList);","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        clearOutput();","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"        return FILE_TASK_LIST;","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"     * Clears the output and start a fresh command line screen.","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"    private static void clearOutput() {","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"        System.out.print(\"\\033[H\\033[2J\");","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"        System.out.flush();","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"     * Reads the file if it exists or creates the file if it does not.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"     * Returns a File type of the file containing the existing task lists.","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"     * @return Returns a File type of the file containing the existing task lists.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"     * @throws IOException If the file cannot be read or created.","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"    private static File getTaskFile() throws IOException {","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"        File taskFile \u003d new File(FILE_PATH + \"/taskLists.txt\");","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"        if (taskFile.createNewFile()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"            System.out.println(\"A new file has been created at \" + FILE_PATH);","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"        } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"            System.out.println(taskFile + \" accessed.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"        return taskFile;","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"     * Reads and initialises the task list based on the content of the file.","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"     * @param fileList The content of the file.","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"     * @throws DukeException If there is an error initialising the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"    private static void readAndExtractFile(Scanner fileList) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"        while (fileList.hasNextLine()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"            String data \u003d fileList.nextLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"            String[] splittedData \u003d data.split(\"\\\\|\");","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"            String taskType \u003d splittedData[0];","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"            boolean isMarkedDone \u003d Integer.parseInt(splittedData[1]) \u003d\u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"            String taskDescription \u003d splittedData[2];","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"            String taskCommand;","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"            Command command;","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"            case \"D\":","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"                taskCommand \u003d \"deadline \" + taskDescription;","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"            case \"E\":","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"                taskCommand \u003d \"event \" + taskDescription;","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"            default:","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"                taskCommand \u003d \"todo \" + taskDescription;","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"markuslyq"},"content":"            command \u003d Parser.parseCommand(taskCommand);","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"markuslyq"},"content":"            command.setData(FILE_TASK_LIST);","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"markuslyq"},"content":"            command.executeFromFile();","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"            if (isMarkedDone) {","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"markuslyq"},"content":"                taskCommand \u003d \"done \" + FILE_TASK_LIST.getSize();","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"                command \u003d Parser.parseCommand(taskCommand);","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":"                command.setData(FILE_TASK_LIST);","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"                command.executeFromFile();","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"markuslyq"},"content":"     * Updates and overwrite the existing file with a new task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"     * @param taskList A new updated task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"markuslyq"},"content":"     * @throws IOException If the write operation to the file fails.","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"markuslyq"},"content":"    public static void updateFile(TaskList taskList) throws IOException {","lastModifiedDate":"2021-09-21"},{"lineNumber":109,"author":{"gitId":"markuslyq"},"content":"        FileWriter taskWriter \u003d new FileWriter(FILE_PATH + \"/taskLists.txt\", false);","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"markuslyq"},"content":"        for (Task task : taskList.getEntireList()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"markuslyq"},"content":"            String taskAbbreviation \u003d getTaskAbbreviation(task);","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"markuslyq"},"content":"            String taskStatus \u003d getTaskStatus(task);","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"markuslyq"},"content":"            String dataWritten \u003d taskAbbreviation + \"|\" + taskStatus + \"|\" + task.getDescription() + System.lineSeparator();","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"markuslyq"},"content":"            taskWriter.write(dataWritten);","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"markuslyq"},"content":"        taskWriter.close();","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"markuslyq"},"content":"     * Returns the task status in a string.","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"markuslyq"},"content":"     * \"1\" if the task is marked as done and \"0\" otherwise.","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"markuslyq"},"content":"     * @param task Task whose status is queried.","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the task status in a string format.","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"markuslyq"},"content":"    private static String getTaskStatus(Task task) {","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"markuslyq"},"content":"        if (task.getStatusIcon().equals(\"[X] \")) {","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"markuslyq"},"content":"            return \"1\";","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"markuslyq"},"content":"        return \"0\";","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":133,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"markuslyq"},"content":"     * Returns the abbreviation of the task type.","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"markuslyq"},"content":"     * @param task Task whose task type is queried.","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the abbreviation of the task according to its task type.","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"markuslyq"},"content":"    private static String getTaskAbbreviation(Task task) {","lastModifiedDate":"2021-09-21"},{"lineNumber":140,"author":{"gitId":"markuslyq"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2021-09-21"},{"lineNumber":141,"author":{"gitId":"markuslyq"},"content":"            return \"T\";","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"markuslyq"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"markuslyq"},"content":"            return \"D\";","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"markuslyq"},"content":"        return \"E\";","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":147}},{"path":"src/main/java/Duke/Task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * Returns a single string of the deadline task","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     * with its icon, status, task name, preposition used and date and time of the deadline.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"     * @return The icon, status, task name, preposition used and date and time of the deadline, all in a single string.","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"        //get the preposition used","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"        int spaceIndex \u003d by.indexOf(\u0027 \u0027);","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"        String preposition \u003d by.substring(0, spaceIndex);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"        String dueDate \u003d by.substring(spaceIndex + 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        String[] splittedDueDate \u003d dueDate.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        LocalDate date \u003d LocalDate.parse(splittedDueDate[0],DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        String time \u003d splittedDueDate[1];","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"        //output message","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"        return \"[D]\" + super.getStatusIcon() + super.toString() + \" (\" + preposition + \": \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \" \" + time + \")\";","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     * Returns the task name followed by a slash and its due date after.","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"     * @return The task name followed by a slash and then, its due date, in a single string.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"        return description + \" /\" + by;","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"markuslyq":44}},{"path":"src/main/java/Duke/Task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    public Event(String description, String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     * Returns a single string of the event task","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     * with its icon, status, task name, preposition used and date and time of the event.","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     * @return The icon, status, task name, preposition used and date and time of the event, all in a single string.","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"        //get the preposition used","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"        int spaceIndex \u003d by.indexOf(\u0027 \u0027);","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"        String preposition \u003d by.substring(0, spaceIndex);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"        String dueDate \u003d by.substring(spaceIndex + 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        String[] splittedDueDate \u003d dueDate.split(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        LocalDate date \u003d LocalDate.parse(splittedDueDate[0], DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        String time \u003d splittedDueDate[1];","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"        //output message","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"        return \"[E]\" + super.getStatusIcon() + super.toString() + \" (\" + preposition + \": \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \" \" + time + \")\";","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     * Returns the task name followed by a slash and its due date after.","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"     * @return The task name followed by a slash and then, its due date, in a single string.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"        return description + \" /\" + by;","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"markuslyq":44}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"public class Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"    protected String description;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     * Returns the string of the status icon.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     * \"X\" if the task is marked as done and \" \" if it is not.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the status icon in a string.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"        return (isDone ? \"[X] \" : \"[ ] \"); // mark done task with X","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     * Returns the description of the task,","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     * including the task icon, status, task name and  date and time of the event or deadline task","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * in a single string for printing purposes.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the task icon, status and task name of the task in a single string.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        return description;","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"     * Returns the description which only includes the task name and date and time of the event or deadline task.","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the task name and date and time of the event or deadline task in a string format.","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"        return description;","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"     * Set the boolean value of isDone to true.","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"markuslyq":48}},{"path":"src/main/java/Duke/Task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"     * Returns the icon, status and task name of the Todo task in a single string.","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     * @return the icon, status and task name of the Todo task in a single string.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"        return \"[T]\" + super.getStatusIcon() + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"markuslyq":18}},{"path":"src/main/java/Duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"public class TaskList {","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    private static final ArrayList\u003cTask\u003e TASKS_ARRAY_LIST \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    public TaskList() {};","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     * @param task Task to be added to the list.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"        TASKS_ARRAY_LIST.add(task);","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     * Returns the whole array list.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the entire task list as an array list.","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"    public ArrayList\u003cTask\u003e getEntireList() {","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        return TASKS_ARRAY_LIST;","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"     * Returns the task given its index.","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"     * @param taskIndex The index of the task to retrieve.","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"     * @return Returns a Task type of the particular task given its index.","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"    public Task getTask(int taskIndex) {","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"        return TASKS_ARRAY_LIST.get(taskIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"     * Remove the a particular task from the array list given its index.","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"     * @param taskIndex The index of the task to retrieve.","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    public void removeTask(int taskIndex) {","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"        TASKS_ARRAY_LIST.remove(taskIndex);","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"     *  Returns the size of the array list.","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the size of the array list.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"        return TASKS_ARRAY_LIST.size();","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"     * Search the array list for task that satisfies the search parameters.","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"     * Prints the new array list of tasks that satisfy the query.","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"     * @param searchParams The parameters to search for in the array list.","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"    public void searchList(String searchParams) {","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"        ArrayList\u003cTask\u003e taskFoundList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"        for (Task task: TASKS_ARRAY_LIST) {","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"            if (task.toString().contains(searchParams)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"                taskFoundList.add(task);","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"        UI.printTasksFound(taskFoundList);","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"markuslyq":74}},{"path":"src/main/java/Duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package Duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import Duke.Task.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"public class UI {","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"     * Prints the opening message.","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"    public static void printHeaderMessage() {","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"        System.out.println(logo);","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tHey, how are you?\");","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tWhat can I do for you today?\");","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     * Prints the program exit message.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    public static void printByeMessage() {","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tGoodbye! Hope to see you again soon!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"     * Prints the border surrounding each output message.","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"    public static void printBorder() {","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\t----------------------------------------------------------------------\");","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"     * Gets the input entered by the user and returns it in a string.","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the input entered by the user in a string format.","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    public static String getInput() {","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"        String input;","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"        input \u003d scanner.nextLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"        return input;","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"     * Prints the entire tasks list out.","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"     * @param taskList Current task list that is in use.","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"    public static void printListMessage(TaskList taskList) {","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"            System.out.println(\"\\tThe list is empty!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"        } else {","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"            System.out.println(\"\\tHere\u0027s the list of your tasks: \");","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"            for (int j \u003d 0; j \u003c taskList.getSize(); j++) {","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"                int itemNumber \u003d j + 1;","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"                System.out.println(\"\\t\" + itemNumber + \".\" + taskList.getTask(j).toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of the new task being added.","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"     * @param tasksArrayList Arraylist containing all the task.","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"    public static void printNewTaskMsg(ArrayList\u003cTask\u003e tasksArrayList) {","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"        int taskCount \u003d tasksArrayList.size();","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"        int taskIndex \u003d taskCount - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tAlright! I\u0027ve just added this task:\");","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\t\" + tasksArrayList.get(taskIndex).toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tYou now have \" + taskCount + \" tasks on your task list.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"     * Prints the list of tasks that satisfied the query.","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"     * @param tasksFoundArrayList Arraylist of tasks that satisfied the query.","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"markuslyq"},"content":"    public static void printTasksFound(ArrayList\u003cTask\u003e tasksFoundArrayList) {","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"markuslyq"},"content":"        if (tasksFoundArrayList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"markuslyq"},"content":"            System.out.println(\"\\tThere are no matching tasks in your list!\");","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"        } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"markuslyq"},"content":"            System.out.println(\"\\tThe following are the tasks found: \");","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"            int itemNumber \u003d 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":"            for (Task task : tasksFoundArrayList) {","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"                System.out.println(\"\\t\" + itemNumber + \".\" + task.toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"markuslyq"},"content":"                itemNumber++;","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user after a task is marked as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"markuslyq"},"content":"     * @param taskList Current task list that is in use.","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"markuslyq"},"content":"     * @param taskIndex Index of task to be marked as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"markuslyq"},"content":"    public static void printMarkedAsDoneMessage(TaskList taskList, int taskIndex){","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\tGood job! I\u0027ve marked this task as done: \");","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"markuslyq"},"content":"        System.out.println(\"\\t\" + taskList.getTask(taskIndex));","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"markuslyq":116}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"markuslyq":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke/*.java ../src/main/java/Duke/task/*.java","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"markuslyq":2,"-":32}}]
