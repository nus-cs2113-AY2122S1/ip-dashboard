[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"##  ","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"##    ","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"## Overview","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"### Duke is a Personal Assistant ChatBot that helps users keep track of various tasks. It works like a Notebook/Memorandum/Planner in which you can add/remove/update tasks you need to keep track of. With Duke, you can save your daily plan or things to do efficiently and update the task status once you have done the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"### Duke can parse users\u0027 input command (add/remove/update/modify/display) and update correspondingly inside the program. Duke will respond to users once it parses users\u0027 input command. Duke keeps track of your TaskList to enables users to update and modify the tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"##     ","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"##      ","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"##    ","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"##   ","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"### 1. list","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"### 2. todo","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"### 3. deadline","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"### 4. event","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"### 5. done","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"### 6. delete","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"### 7. save","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"### 8. load","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"### 9. terminate","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"###  ","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"# Features description","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"KairuiHu"},"content":"### 1. list","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"KairuiHu"},"content":"### Usage: Print the list of tasks stored in Duke","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"KairuiHu"},"content":"### User Input: \u0027list\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"KairuiHu"},"content":"### Expected Output:  ","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"KairuiHu"},"content":"### Here are the tasks in your list:","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"KairuiHu"},"content":"### 1.[T][ ] read a book","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"KairuiHu"},"content":"### 2.[T][ ] borrow a book","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"KairuiHu"},"content":"### Description: The output contains all tasks in Duke. The first number denotes the index of the task. The first square bracket denotes the type of tasks: T for todo, D for deadline, E for event. The second square bracket denotes the task status: X for done and WHITESPACE for undone. The task name is shown after the two square bracket.","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"KairuiHu"},"content":"### 2. todo","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"KairuiHu"},"content":"### Usage: Add a task with \u0027todo\u0027 type in Duke. Tasks with \u0027todo\u0027 type do not have a specific deadline or time to occur.","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"KairuiHu"},"content":"### User Input: \u0027todo read a book\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"KairuiHu"},"content":"### Expected Output:","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"KairuiHu"},"content":"### Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"KairuiHu"},"content":"###     [T][ ] read a book","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"KairuiHu"},"content":"### Now you have 1 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"KairuiHu"},"content":"###   ","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"KairuiHu"},"content":"### Description: Duke will display the added task with \u0027todo\u0027 type if added successfully. Duke will then print the number of tasks in the list. Ensure there is a whitespace between \u0027todo\u0027 and the task name. Duke will remind the user if the command is invalid, i.e., Commands fail to follow the template","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"KairuiHu"},"content":"### 3. deadline","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"KairuiHu"},"content":"### Usage: Add a task with \u0027deadline\u0027 type in Duke. Tasks with \u0027deadline\u0027 type have a specific deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"KairuiHu"},"content":"### User Input: \u0027deadline return the book /by Sunday 11am\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"KairuiHu"},"content":"### Expected Output:","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"KairuiHu"},"content":"### Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"KairuiHu"},"content":"###     [D][ ] return the book (by: Sunday 11am)","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"KairuiHu"},"content":"### Now you have 3 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":74,"author":{"gitId":"KairuiHu"},"content":"### Description: Duke will display the added task with \u0027deadline\u0027 type if added successfully. Duke will then print the number of tasks in the list. To add a task with \u0027deadline\u0027 type, users must input command with \u0027/by\u0027 string inside. The \u0027/by\u0027 string is typed in before the actual deadline, i.e., /by Sunday 11am. Input without \u0027/by\u0027 string will be considered as invalid input for a \u0027deadline\u0027 command. Duke will remind the user if the command is invalid, i.e., Commands fail to follow the template","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"KairuiHu"},"content":"### 4. event","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"KairuiHu"},"content":"### Usage: Add a task with \u0027event\u0027 type in Duke. Tasks with \u0027event\u0027 type have a specific time to occur.","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"KairuiHu"},"content":"### User Input: \u0027event I should attend the lecture /at Friday 17 Sep 2021 from 4-6pm\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"KairuiHu"},"content":"### Expected Output:","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"KairuiHu"},"content":"### Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"KairuiHu"},"content":"###     [E][ ] I should attend the lecture (at: Friday 17 Sep 2021 from 4-6pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"KairuiHu"},"content":"### Now you have 4 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"KairuiHu"},"content":"### Description: Duke will display the added task with \u0027event\u0027 type if added successfully. Duke will then print the number of tasks in the list. To add a task with \u0027event\u0027 type, users must input command with \u0027/at\u0027 string inside or at least containing a \u0027/\u0027. The \u0027/at\u0027 string is typed in before the actual time, i.e., /at Friday 17 Sep 2021 from 4-6pm. Duke will remind the user if the command is invalid, i.e., Commands fail to follow the template","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":95,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"KairuiHu"},"content":"### 5. done","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"KairuiHu"},"content":"### Usage: Mark a task as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"KairuiHu"},"content":"### User Input: \u0027done 4\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"KairuiHu"},"content":"### Expected Output:","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"KairuiHu"},"content":"### Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"KairuiHu"},"content":"###     [E][X] I should attend the lecture (at: Friday 17 Sep 2021 from 4-6pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"KairuiHu"},"content":"### Description: Duke will print the task once it is marked as done. Once the task is marked as done, the second square bracket will have a \u0027X\u0027 symbol inside. The \u0027X\u0027 denotes the done status, and the \u0027 \u0027 denotes the undone status. The \u0027done\u0027 command should contain an integer denoting the index of the task. You can find the index of a task by inputting the \u0027list\u0027 command.","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"KairuiHu"},"content":"### Command without valid index will be considered invalid by Duke, i.e., index out of bound, or without an integer index. Duke will remind the user if the command is invalid, i.e., Commands fail to follow the template","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"KairuiHu"},"content":"### 6. delete","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"KairuiHu"},"content":"### Usage: Delete a task from Duke, i.e. delete from the task list","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"KairuiHu"},"content":"### User Input: \u0027delete 3\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"KairuiHu"},"content":"### Expected Output:","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"KairuiHu"},"content":"### Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"KairuiHu"},"content":"###     [D][ ] return the book (by: Sunday 11am)","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"KairuiHu"},"content":"### Now you have 3 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"KairuiHu"},"content":"### Description: Duke will print the task that is removed by the \u0027delete\u0027 command. Duke will display the current number of tasks in the task list after you delete the task. The \u0027delete\u0027 command should contain an integer denoting the index of the task. You can find the index of a task by inputting the \u0027list\u0027 command. ","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"KairuiHu"},"content":"### Command without valid index will be considered invalid by Duke, i.e., index out of bound, or without an integer index. Duke will remind the user if the command is invalid, i.e., Commands fail to follow the template","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"KairuiHu"},"content":"### 7. save","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"KairuiHu"},"content":"### Usage: Save tasks so that tasks are stored in Duke, i.e., in the text file","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"KairuiHu"},"content":"### Description: No command needed for saving tasks to file. Once users input a valid command, the task list will update correspondingly. All updates can be saved to file, i.e., add/delete/modify/mark as done. Duke will remind the user if \u0027save\u0027 fails.","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"KairuiHu"},"content":"### 8. load","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"KairuiHu"},"content":"### Usage: Load tasks from hard disk when Duke starts up, i.e., load from the last updated file","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"KairuiHu"},"content":"### Description: No command needed for loading tasks from hard disk. Once Duke starts up, it will read the text file you saved before, and load the tasks in the file to your current Duke program.","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"KairuiHu"},"content":"### 9. terminate","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"KairuiHu"},"content":"### Usage: Terminate the program","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"KairuiHu"},"content":"### Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"KairuiHu"},"content":"### User Input: \u0027bye\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"KairuiHu"},"content":"### Expected Output:","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"KairuiHu"},"content":"### Bye. Hope to see you again soon!","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"KairuiHu"},"content":"### Description: To terminate Duke, users must input \u0027bye\u0027 to terminate the running program. All the tasks and updates will be saved before users terminate the program. When users restart Duke, it will automatically load the stored tasks and updates, i.e, as explained in \u0027load\u0027","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"KairuiHu"},"content":"###    ","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"KairuiHu"},"content":"###","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"KairuiHu":140,"-":20}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"    protected String taskName;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"    protected int index;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"    //Constructor for Deadline object","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"    public Deadline(String description, String by, int index) {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"    //Getter of by var","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"    public String getBy() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"        return this.by;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"    //Setter of by var","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"    public void setBy(String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"    // toString method","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"        taskName \u003d description.substring(9, index - 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"KairuiHu"},"content":"        return \"[D][ ] \" + taskName + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"KairuiHu":28}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"import java.io.*;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"import java.util.*;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"import java.io.FileWriter;   // Import the FileWriter class","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"import java.io.IOException;  // Import the IOException class to handle errors","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"    private UI ui;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    public String filePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"    File file \u003d new File(filePath);","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"    //Constructor of Duke object","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"        UI ui \u003d new UI();","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"    //Main method","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"    //The actual run process that user can input and get the corresponding output from Duke","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"    public void run() {","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"KairuiHu"},"content":"        ui.printWelcome();","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e taskName \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cInteger\u003e taskStatus \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e taskType \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"KairuiHu"},"content":"        LoadFromText loadFromText \u003d new LoadFromText(file, output, taskName, taskStatus, taskType);","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"KairuiHu"},"content":"        output \u003d loadFromText.loadOutput(output);","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"KairuiHu"},"content":"        taskName \u003d loadFromText.loadTaskName(taskName);","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"KairuiHu"},"content":"        taskStatus \u003d loadFromText.loadTaskStatus(taskStatus);","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"KairuiHu"},"content":"        taskType \u003d loadFromText.loadTaskType(taskType);","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"KairuiHu"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"KairuiHu"},"content":"        parser.checkCommand(output, taskStatus, taskName, taskType, file);","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"KairuiHu":39,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"    public DukeException(){}","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"KairuiHu":3}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"    protected String at;","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"    protected String taskName;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"    protected int index;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"    //Constructor of Event object","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"    public Event(String description, String at, int index) {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"    //Getter of at var","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"    public String getAt() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"        return this.at;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"    //Setter of at var","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"    public void setAt(String at) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"    //toString method","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"        taskName \u003d description.substring(6, index - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"KairuiHu"},"content":"        return \"[E][ ] \" + taskName + \" (at: \" + at.substring(3) + \")\";","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"KairuiHu":28}},{"path":"src/main/java/GlobalVars.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"public class GlobalVars {","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e taskName \u003d new ArrayList\u003c\u003e();  // ArrayList that stores names of tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cInteger\u003e taskStatus \u003d new ArrayList\u003c\u003e();   // ArrayList that stores status of tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();    // ArrayList that stores the whole displayed output of tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e taskType \u003d new ArrayList\u003c\u003e();  // ArrayList that stores types of tasks","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"KairuiHu":8}},{"path":"src/main/java/LoadFromText.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"import java.io.*;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"public class LoadFromText {","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"    File file;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cString\u003e output;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cString\u003e taskName;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cInteger\u003e taskStatus;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cString\u003e taskType;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"    // Constructor of LoadFromText","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"    public LoadFromText(File file1, ArrayList\u003cString\u003e Output, ArrayList\u003cString\u003e TaskName, ArrayList\u003cInteger\u003e TaskStatus","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"            , ArrayList\u003cString\u003e TaskType) {","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e(Output);","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e taskName \u003d new ArrayList\u003c\u003e(TaskName);","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cInteger\u003e taskStatus \u003d new ArrayList\u003cInteger\u003e(TaskStatus);","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e taskType \u003d new ArrayList\u003cString\u003e(TaskType);","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"        file \u003d file1;","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"    // Load the corresponding text from txt file to the ArrayList output","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e loadOutput(ArrayList\u003cString\u003e output) {","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"            String st;","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"            Scanner tasks \u003d new Scanner(file);  // Create a Scanner object","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"KairuiHu"},"content":"            while (tasks.hasNext()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"KairuiHu"},"content":"                st \u003d tasks.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"KairuiHu"},"content":"                output.add(st);","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"KairuiHu"},"content":"            return output;","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"KairuiHu"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An error occurred, please try again!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"KairuiHu"},"content":"            return null;","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"KairuiHu"},"content":"    // Load the corresponding text from txt file to the ArrayList taskName","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e loadTaskName(ArrayList\u003cString\u003e taskName) {","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"KairuiHu"},"content":"            String st;","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"KairuiHu"},"content":"            Scanner tasks \u003d new Scanner(file);  // Create a Scanner object","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"KairuiHu"},"content":"            while (tasks.hasNext()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"KairuiHu"},"content":"                st \u003d tasks.nextLine();","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"KairuiHu"},"content":"                taskName.add(st.substring(9));","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"KairuiHu"},"content":"            return taskName;","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"KairuiHu"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"A FileNotFound error occurred, please try again!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"KairuiHu"},"content":"            return null;","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"KairuiHu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An IO Exception error occurred, please try again!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"KairuiHu"},"content":"            return null;","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"KairuiHu"},"content":"    // Load the corresponding text from txt file to the ArrayList taskStatus","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cInteger\u003e loadTaskStatus(ArrayList\u003cInteger\u003e taskStatus) {","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"KairuiHu"},"content":"            String st;","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"KairuiHu"},"content":"            Scanner tasks \u003d new Scanner(file);  // Create a Scanner object","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"KairuiHu"},"content":"            while (tasks.hasNext()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"KairuiHu"},"content":"                st \u003d tasks.nextLine();","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"KairuiHu"},"content":"                if (st.substring(6, 7).equals(\"X\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"KairuiHu"},"content":"                    taskStatus.add(1);","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"KairuiHu"},"content":"                } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"KairuiHu"},"content":"                    taskStatus.add(0);","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"KairuiHu"},"content":"            return taskStatus;","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"KairuiHu"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"A FileNotFound error occurred, please try again!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"KairuiHu"},"content":"            return null;","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"KairuiHu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An IO Exception error occurred, please try again!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"KairuiHu"},"content":"            return null;","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"KairuiHu"},"content":"    // Load the corresponding text from txt file to the ArrayList taskType","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e loadTaskType(ArrayList\u003cString\u003e taskType) {","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"KairuiHu"},"content":"            String st;","lastModifiedDate":"2021-09-30"},{"lineNumber":86,"author":{"gitId":"KairuiHu"},"content":"            Scanner tasks \u003d new Scanner(file);  // Create a Scanner object","lastModifiedDate":"2021-09-30"},{"lineNumber":87,"author":{"gitId":"KairuiHu"},"content":"            while (tasks.hasNext()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"KairuiHu"},"content":"                st \u003d tasks.nextLine();","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"KairuiHu"},"content":"                taskType.add(st.substring(3, 4));","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"KairuiHu"},"content":"            return taskType;","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"KairuiHu"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"A FileNotFound error occurred, please try again!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"KairuiHu"},"content":"            return null;","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"KairuiHu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An IO Exception error occurred, please try again!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"KairuiHu"},"content":"            return null;","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"KairuiHu":100}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"import java.io.File;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"public class Parser {","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"    UI ui \u003d new UI();","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    // Check if the \u0027todo\u0027 command is valid","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"    public void checkTodo(String userCommand) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"        if (userCommand.length() \u003c\u003d 5) {     //generate error when receiving invalid Todo input","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"    // Check if the \u0027deadline\u0027 command is valid","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"    public void checkDeadline(String userCommand) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"        if (userCommand.length() \u003c\u003d 9) {     //generate error when receiving invalid Deadline input","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"        } else if (!userCommand.contains(\"/by\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"KairuiHu"},"content":"    // Check if the \u0027event\u0027 command is valid","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"KairuiHu"},"content":"    public void checkEvent(String userCommand) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"KairuiHu"},"content":"        if (userCommand.length() \u003c\u003d 6) {     //generate error when receiving invalid Event input","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"KairuiHu"},"content":"        } else if (!userCommand.contains(\"/at\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"KairuiHu"},"content":"    // Check if the \u0027done\u0027 command is valid","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"KairuiHu"},"content":"    public void checkDone(String userCommand) throws DukeException {","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"KairuiHu"},"content":"        if (userCommand.length() \u003c\u003d 5) {     //generate error when receiving invalid Delete input","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"KairuiHu"},"content":"        } else if (!isInt(userCommand.substring(5))) {","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"KairuiHu"},"content":"        } else if (Integer.parseInt(userCommand.substring(5)) \u003c\u003d 0) {","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"KairuiHu"},"content":"    // Check if the \u0027delete\u0027 command is valid","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"KairuiHu"},"content":"    public void checkDelete(String userCommand) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"KairuiHu"},"content":"        if (userCommand.length() \u003c\u003d 7) {     //generate error when receiving invalid Delete input","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"KairuiHu"},"content":"        } else if (!isInt(userCommand.substring(7))) {","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"KairuiHu"},"content":"        } else if (Integer.parseInt(userCommand.substring(7)) \u003c\u003d 0) {","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"KairuiHu"},"content":"    // Check if the \u0027find\u0027 command is valid","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"KairuiHu"},"content":"    public void checkFind(String userCommand) throws DukeException {","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"KairuiHu"},"content":"        if (userCommand.length() \u003c\u003d 5) {     //generate error when receiving invalid Delete input","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"KairuiHu"},"content":"        } else if (userCommand.substring(5).equals(\" \")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"KairuiHu"},"content":"            DukeException e \u003d new DukeException();","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"KairuiHu"},"content":"            throw e;","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"KairuiHu"},"content":"    // Check if the target char in inputString is an integer","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"KairuiHu"},"content":"    public boolean isInt(String input) {","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"KairuiHu"},"content":"        try {                               //generate error when receiving non-integer input","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"KairuiHu"},"content":"            Integer.parseInt(input);        //for the delete command","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"KairuiHu"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"KairuiHu"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"KairuiHu"},"content":"        return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"KairuiHu"},"content":"    // Check and process the \u0027userCommand\u0027 (userInput)","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"KairuiHu"},"content":"    public void checkCommand(ArrayList\u003cString\u003e output, ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"KairuiHu"},"content":"                             ArrayList\u003cString\u003e taskName, ArrayList\u003cString\u003e taskType, File file) {","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"KairuiHu"},"content":"        Scanner userInput \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"KairuiHu"},"content":"        String userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"KairuiHu"},"content":"        int inputCount \u003d output.size();","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"KairuiHu"},"content":"        TaskLists taskLists \u003d new TaskLists(output, taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"KairuiHu"},"content":"                taskName, file, taskType, inputCount, userCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"KairuiHu"},"content":"        while (!userCommand.equals(\"bye\")) {","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"KairuiHu"},"content":"            if (userCommand.equals(\"list\")) {","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"KairuiHu"},"content":"                if (inputCount \u003d\u003d 0) {","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"KairuiHu"},"content":"                    taskLists.printEmptyList();","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"KairuiHu"},"content":"                } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"KairuiHu"},"content":"                    taskLists.printList(taskType, taskStatus, taskName, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"KairuiHu"},"content":"            } else if (userCommand.contains(\"done\")) {","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"KairuiHu"},"content":"                if (taskLists.isValidDone(userCommand, inputCount)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"KairuiHu"},"content":"                    output \u003d taskLists.getUpdateDone(output, taskStatus, taskName, file, userCommand,","lastModifiedDate":"2021-09-30"},{"lineNumber":114,"author":{"gitId":"KairuiHu"},"content":"                            taskType, inputCount);","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":116,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"KairuiHu"},"content":"            } else if (userCommand.contains(\"todo\")) {","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"KairuiHu"},"content":"                if (taskLists.isValidTodo(userCommand)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"KairuiHu"},"content":"                    inputCount \u003d taskLists.printTodo(taskName, userCommand, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":121,"author":{"gitId":"KairuiHu"},"content":"                    output \u003d taskLists.getUpdateTodo(output, taskStatus, taskName, file, taskType, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":123,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"KairuiHu"},"content":"            } else if (userCommand.contains(\"deadline\")) {","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"KairuiHu"},"content":"                if (taskLists.isValidDeadline(userCommand)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"KairuiHu"},"content":"                    inputCount \u003d taskLists.printDeadline(taskName, userCommand, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":128,"author":{"gitId":"KairuiHu"},"content":"                    output \u003d taskLists.getUpdateDeadline(output, taskStatus, taskName, file, taskType, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":129,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":130,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"KairuiHu"},"content":"            } else if (userCommand.contains(\"event\")) {","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"KairuiHu"},"content":"                if (taskLists.isValidEvent(userCommand)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":134,"author":{"gitId":"KairuiHu"},"content":"                    inputCount \u003d taskLists.printEvent(taskName, userCommand, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":135,"author":{"gitId":"KairuiHu"},"content":"                    output \u003d taskLists.getUpdateEvent(output, taskStatus, taskName, file, taskType, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":136,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"KairuiHu"},"content":"            } else if (userCommand.contains(\"delete\")) {        //add the delete function","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"KairuiHu"},"content":"                if (taskLists.isValidDelete(userCommand, inputCount)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":141,"author":{"gitId":"KairuiHu"},"content":"                    inputCount \u003d taskLists.printDelete(taskType, taskStatus, taskName, inputCount, userCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":142,"author":{"gitId":"KairuiHu"},"content":"                    output \u003d taskLists.getUpdateDelete(output, taskStatus, taskName, file, taskType, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":143,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":144,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"KairuiHu"},"content":"            } else if (userCommand.contains(\"find\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"KairuiHu"},"content":"                if (taskLists.isValidFind(userCommand)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":148,"author":{"gitId":"KairuiHu"},"content":"                    taskLists.printFind(output, userCommand, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":149,"author":{"gitId":"KairuiHu"},"content":"                }","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"KairuiHu"},"content":"            } else if (!userCommand.equals(\"bye\")) {        //invalid input detected","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"KairuiHu"},"content":"                taskLists.printInvalid();","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"KairuiHu"},"content":"                System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"KairuiHu"},"content":"                userCommand \u003d userInput.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"KairuiHu"},"content":"                continue;","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"KairuiHu"},"content":"        if (userCommand.equals(\"bye\")) {        //terminate the loop","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"KairuiHu"},"content":"            taskLists.printBye();","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":162,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"KairuiHu":163}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"import java.io.File;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"public class Storage {","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"    private UI ui;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"    private String filePath;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"    private ArrayList\u003cString\u003e output;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    File file;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"    // Constructor of Storage","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"    public Storage(String FilePath, ArrayList\u003cString\u003e Output, File file1) {","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"        filePath \u003d FilePath;","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003cString\u003e(Output);","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"        file \u003d file1;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"    // write the tasks to file","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"    public void writeTasksToFile(File file, ArrayList\u003cString\u003e output) {","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"        File directory \u003d new File(\"D:/data\");","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"            directory.mkdir();","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"KairuiHu"},"content":"                System.out.println(\"File created: \" + file.getName());","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"KairuiHu"},"content":"            } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"KairuiHu"},"content":"                System.out.println(\"File already exists.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"KairuiHu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An error occurred, please try again!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"KairuiHu"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"KairuiHu"},"content":"            FileWriter myWriter \u003d new FileWriter(\"D:/data/duke.txt\");","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"KairuiHu"},"content":"            for (int i \u003d 0; i \u003c output.size(); i++) {","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"KairuiHu"},"content":"                myWriter.write(output.get(i));","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"KairuiHu"},"content":"                myWriter.write(\"\\n\");","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"KairuiHu"},"content":"            myWriter.close();","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"Successfully wrote to the file.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"KairuiHu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An error occurred, please try again!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"KairuiHu"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"KairuiHu":52}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"public class Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"    protected String description;","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"    //Constructor of Task object","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"    //Getter of description var","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"        return description;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"    //toString method","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"        return \"[ ] \" + description.substring(5);","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"KairuiHu":18}},{"path":"src/main/java/TaskLists.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"import java.io.File;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"public class TaskLists {","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cString\u003e output;","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cInteger\u003e taskStatus;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cString\u003e taskName;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    File file;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"    ArrayList\u003cString\u003e taskType;","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"    int inputCount;","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"    String userCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"    UI ui \u003d new UI();","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"    //Default constructor","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"    public TaskLists() {","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"    //Constructor of TaskLists object","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"    public TaskLists(ArrayList\u003cString\u003e Output, ArrayList\u003cInteger\u003e TaskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"                     ArrayList\u003cString\u003e TaskName, File file1, ArrayList\u003cString\u003e TaskType,","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"KairuiHu"},"content":"                     int InputCount, String UserCommand) {","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003cString\u003e(Output);","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cInteger\u003e taskStatus \u003d new ArrayList\u003cInteger\u003e(TaskStatus);","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e taskName \u003d new ArrayList\u003cString\u003e(TaskName);","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"KairuiHu"},"content":"        file \u003d file1;","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"KairuiHu"},"content":"        ArrayList\u003cString\u003e taskType \u003d new ArrayList\u003cString\u003e(TaskType);","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"KairuiHu"},"content":"        inputCount \u003d InputCount;","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"KairuiHu"},"content":"        userCommand \u003d UserCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"KairuiHu"},"content":"    //update arrayLists after user input a \u0027delete\u0027 command","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e getUpdateDelete(ArrayList\u003cString\u003e output,","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"KairuiHu"},"content":"                                             ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"KairuiHu"},"content":"                                             ArrayList\u003cString\u003e taskName, File file,","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"KairuiHu"},"content":"                                             ArrayList\u003cString\u003e taskType, int inputCount) {","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"KairuiHu"},"content":"        output \u003d convertToArrayList(output, taskType, taskStatus, taskName, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"KairuiHu"},"content":"        saveTasks(file, output);","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"KairuiHu"},"content":"        return output;","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"KairuiHu"},"content":"    //update arrayLists after user input a \u0027event\u0027 to the list","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e getUpdateEvent(ArrayList\u003cString\u003e output,","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"KairuiHu"},"content":"                                            ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"KairuiHu"},"content":"                                            ArrayList\u003cString\u003e taskName, File file,","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"KairuiHu"},"content":"                                            ArrayList\u003cString\u003e taskType, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"KairuiHu"},"content":"        taskType.add(\"E\");","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"KairuiHu"},"content":"        taskStatus.add(0);","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"KairuiHu"},"content":"        output \u003d convertToArrayList(output, taskType, taskStatus, taskName, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"KairuiHu"},"content":"        saveTasks(file, output);","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"KairuiHu"},"content":"        return output;","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"KairuiHu"},"content":"    //update arrayLists after user input a \u0027deadline\u0027 to the list","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e getUpdateDeadline(ArrayList\u003cString\u003e output,","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"KairuiHu"},"content":"                                               ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"KairuiHu"},"content":"                                               ArrayList\u003cString\u003e taskName, File file,","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"KairuiHu"},"content":"                                               ArrayList\u003cString\u003e taskType, int inputCount) {","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"KairuiHu"},"content":"        taskType.add(\"D\");","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"KairuiHu"},"content":"        taskStatus.add(0);","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"KairuiHu"},"content":"        output \u003d convertToArrayList(output, taskType, taskStatus, taskName, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"KairuiHu"},"content":"        saveTasks(file, output);","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"KairuiHu"},"content":"        return output;","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"KairuiHu"},"content":"    //update arrayLists after user input a \u0027todo\u0027 to the list","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e getUpdateTodo(ArrayList\u003cString\u003e output,","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"KairuiHu"},"content":"                                           ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"KairuiHu"},"content":"                                           ArrayList\u003cString\u003e taskName, File file,","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"KairuiHu"},"content":"                                           ArrayList\u003cString\u003e taskType, int inputCount) {","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"KairuiHu"},"content":"        taskType.add(\"T\");","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"KairuiHu"},"content":"        taskStatus.add(0);","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"KairuiHu"},"content":"        output \u003d convertToArrayList(output, taskType, taskStatus, taskName, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"KairuiHu"},"content":"        saveTasks(file, output);","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"KairuiHu"},"content":"        return output;","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"KairuiHu"},"content":"    //update arrayLists after user input a \u0027done\u0027 command","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e getUpdateDone(ArrayList\u003cString\u003e output,","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"KairuiHu"},"content":"                                           ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"KairuiHu"},"content":"                                           ArrayList\u003cString\u003e taskName, File file,","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"KairuiHu"},"content":"                                           String userCommand,","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"KairuiHu"},"content":"                                           ArrayList\u003cString\u003e taskType, int inputCount) {","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"KairuiHu"},"content":"        printDone(taskStatus, taskType, taskName, userCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"KairuiHu"},"content":"        output \u003d convertToArrayList(output, taskType, taskStatus, taskName, inputCount);","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"KairuiHu"},"content":"        saveTasks(file, output);","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"KairuiHu"},"content":"        return output;","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"KairuiHu"},"content":"    //check if the ’todo‘ userInput is valid and remind user if the command is invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"KairuiHu"},"content":"    public boolean isValidTodo(String userCommand) {","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"KairuiHu"},"content":"            parser.checkTodo(userCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"KairuiHu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"KairuiHu"},"content":"        return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"KairuiHu"},"content":"    //check if the \u0027deadline\u0027 userInput is valid and remind user if the command is invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"KairuiHu"},"content":"    public boolean isValidDeadline(String userCommand) {","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"KairuiHu"},"content":"            parser.checkDeadline(userCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"KairuiHu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"KairuiHu"},"content":"        return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"KairuiHu"},"content":"    //check if the \u0027event\u0027 userInput is valid and remind user if the command is invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"KairuiHu"},"content":"    public boolean isValidEvent(String userCommand) {","lastModifiedDate":"2021-09-29"},{"lineNumber":120,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"KairuiHu"},"content":"            parser.checkEvent(userCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"KairuiHu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"KairuiHu"},"content":"        return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"KairuiHu"},"content":"    //check if the \u0027delete\u0027 command is valid and remind user if the command is invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"KairuiHu"},"content":"    public boolean isValidDelete(String userCommand, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":132,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"KairuiHu"},"content":"            parser.checkDelete(userCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"KairuiHu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":136,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The \u0027delete\u0027 command is invalid.\");","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":138,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":139,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":140,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":141,"author":{"gitId":"KairuiHu"},"content":"        if (Integer.parseInt(userCommand.substring(7)) \u003e inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":142,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":143,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The \u0027delete\u0027 command is out of bound.\");","lastModifiedDate":"2021-09-30"},{"lineNumber":144,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":145,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":146,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"KairuiHu"},"content":"        return true;","lastModifiedDate":"2021-09-30"},{"lineNumber":148,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":150,"author":{"gitId":"KairuiHu"},"content":"    //check if the \u0027done\u0027 command is valid and remind user if the command is invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"KairuiHu"},"content":"    public boolean isValidDone(String userCommand, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":152,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":153,"author":{"gitId":"KairuiHu"},"content":"            parser.checkDone(userCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":154,"author":{"gitId":"KairuiHu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":155,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":156,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The \u0027done\u0027 command is invalid.\");","lastModifiedDate":"2021-09-30"},{"lineNumber":157,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":158,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":159,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":160,"author":{"gitId":"KairuiHu"},"content":"        if (Integer.parseInt(userCommand.substring(5)) \u003e inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":161,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":162,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The \u0027done\u0027 command is out of bound.\");","lastModifiedDate":"2021-09-30"},{"lineNumber":163,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":164,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":165,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":166,"author":{"gitId":"KairuiHu"},"content":"        return true;","lastModifiedDate":"2021-09-30"},{"lineNumber":167,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":168,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":169,"author":{"gitId":"KairuiHu"},"content":"    //check if the \u0027find\u0027 command is valid and remind user if the command is invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":170,"author":{"gitId":"KairuiHu"},"content":"    public boolean isValidFind(String userCommand) {","lastModifiedDate":"2021-09-30"},{"lineNumber":171,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":172,"author":{"gitId":"KairuiHu"},"content":"            parser.checkFind(userCommand);","lastModifiedDate":"2021-09-30"},{"lineNumber":173,"author":{"gitId":"KairuiHu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":174,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":175,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"☹ OOPS!!! The \u0027find\u0027 command is invalid.\");","lastModifiedDate":"2021-09-30"},{"lineNumber":176,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":177,"author":{"gitId":"KairuiHu"},"content":"            return false;","lastModifiedDate":"2021-09-29"},{"lineNumber":178,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"KairuiHu"},"content":"        return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":180,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":181,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":182,"author":{"gitId":"KairuiHu"},"content":"    //print the result of the \u0027delete\u0027 command","lastModifiedDate":"2021-10-01"},{"lineNumber":183,"author":{"gitId":"KairuiHu"},"content":"    public int printDelete(ArrayList\u003cString\u003e taskType, ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":184,"author":{"gitId":"KairuiHu"},"content":"                           ArrayList\u003cString\u003e taskName, int inputCount, String userCommand) {","lastModifiedDate":"2021-09-30"},{"lineNumber":185,"author":{"gitId":"KairuiHu"},"content":"        int position \u003d Integer.parseInt(userCommand.substring(7)) - 1;","lastModifiedDate":"2021-09-29"},{"lineNumber":186,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":187,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":188,"author":{"gitId":"KairuiHu"},"content":"        if (taskStatus.get(position) \u003d\u003d 1) {","lastModifiedDate":"2021-09-29"},{"lineNumber":189,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"  \" + \"[\" + taskType.get(position) + \"]\"","lastModifiedDate":"2021-09-29"},{"lineNumber":190,"author":{"gitId":"KairuiHu"},"content":"                    + \"[X] \" + taskName.get(position));","lastModifiedDate":"2021-09-30"},{"lineNumber":191,"author":{"gitId":"KairuiHu"},"content":"        } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":192,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"  \" + \"[\" + taskType.get(position) + \"]\"","lastModifiedDate":"2021-09-29"},{"lineNumber":193,"author":{"gitId":"KairuiHu"},"content":"                    + \"[ ] \" + taskName.get(position));","lastModifiedDate":"2021-09-30"},{"lineNumber":194,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":195,"author":{"gitId":"KairuiHu"},"content":"        inputCount--;","lastModifiedDate":"2021-09-29"},{"lineNumber":196,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Now you have \" + inputCount + \" tasks in the list.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":197,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":198,"author":{"gitId":"KairuiHu"},"content":"        taskName.remove(position);","lastModifiedDate":"2021-09-30"},{"lineNumber":199,"author":{"gitId":"KairuiHu"},"content":"        taskStatus.remove(position);","lastModifiedDate":"2021-09-29"},{"lineNumber":200,"author":{"gitId":"KairuiHu"},"content":"        taskType.remove(position);","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"KairuiHu"},"content":"        return inputCount;","lastModifiedDate":"2021-09-29"},{"lineNumber":202,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":203,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":204,"author":{"gitId":"KairuiHu"},"content":"    //print the result of a meaningless input","lastModifiedDate":"2021-10-01"},{"lineNumber":205,"author":{"gitId":"KairuiHu"},"content":"    public void printInvalid() {","lastModifiedDate":"2021-09-29"},{"lineNumber":206,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":207,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-29"},{"lineNumber":208,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":209,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":210,"author":{"gitId":"KairuiHu"},"content":"    //print the result of adding an \u0027event\u0027 task","lastModifiedDate":"2021-10-01"},{"lineNumber":211,"author":{"gitId":"KairuiHu"},"content":"    public int printEvent(ArrayList\u003cString\u003e taskName, String userCommand, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":212,"author":{"gitId":"KairuiHu"},"content":"        String at;","lastModifiedDate":"2021-09-29"},{"lineNumber":213,"author":{"gitId":"KairuiHu"},"content":"        int index \u003d userCommand.indexOf(\"/\");","lastModifiedDate":"2021-09-30"},{"lineNumber":214,"author":{"gitId":"KairuiHu"},"content":"        at \u003d userCommand.substring(index + 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":215,"author":{"gitId":"KairuiHu"},"content":"        Event event \u003d new Event(userCommand, at, index);","lastModifiedDate":"2021-09-29"},{"lineNumber":216,"author":{"gitId":"KairuiHu"},"content":"        inputCount++;","lastModifiedDate":"2021-09-29"},{"lineNumber":217,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":218,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":219,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(event);","lastModifiedDate":"2021-09-29"},{"lineNumber":220,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Now you have \" + inputCount + \" tasks in the list.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":221,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":222,"author":{"gitId":"KairuiHu"},"content":"        String task \u003d event.description.substring(6, index - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":223,"author":{"gitId":"KairuiHu"},"content":"        String eventName \u003d task + \" (at: \" + at.substring(3) + \")\";","lastModifiedDate":"2021-09-30"},{"lineNumber":224,"author":{"gitId":"KairuiHu"},"content":"        taskName.add(eventName);","lastModifiedDate":"2021-09-30"},{"lineNumber":225,"author":{"gitId":"KairuiHu"},"content":"        return inputCount;","lastModifiedDate":"2021-09-29"},{"lineNumber":226,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":227,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":228,"author":{"gitId":"KairuiHu"},"content":"    //print the result of adding a \u0027deadline\u0027 task","lastModifiedDate":"2021-10-01"},{"lineNumber":229,"author":{"gitId":"KairuiHu"},"content":"    public int printDeadline(ArrayList\u003cString\u003e taskName, String userCommand, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":230,"author":{"gitId":"KairuiHu"},"content":"        String by;","lastModifiedDate":"2021-09-29"},{"lineNumber":231,"author":{"gitId":"KairuiHu"},"content":"        int index \u003d userCommand.indexOf(\"by\");","lastModifiedDate":"2021-09-29"},{"lineNumber":232,"author":{"gitId":"KairuiHu"},"content":"        by \u003d userCommand.substring(index + 3);","lastModifiedDate":"2021-09-29"},{"lineNumber":233,"author":{"gitId":"KairuiHu"},"content":"        Deadline deadline \u003d new Deadline(userCommand, by, index);","lastModifiedDate":"2021-09-29"},{"lineNumber":234,"author":{"gitId":"KairuiHu"},"content":"        inputCount++;","lastModifiedDate":"2021-09-29"},{"lineNumber":235,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":236,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":237,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(deadline);","lastModifiedDate":"2021-09-29"},{"lineNumber":238,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Now you have \" + inputCount + \" tasks in the list.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":239,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":240,"author":{"gitId":"KairuiHu"},"content":"        String task \u003d deadline.description.substring(9, index - 2);","lastModifiedDate":"2021-09-30"},{"lineNumber":241,"author":{"gitId":"KairuiHu"},"content":"        String deadlineName \u003d task + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-30"},{"lineNumber":242,"author":{"gitId":"KairuiHu"},"content":"        taskName.add(deadlineName);","lastModifiedDate":"2021-09-30"},{"lineNumber":243,"author":{"gitId":"KairuiHu"},"content":"        return inputCount;","lastModifiedDate":"2021-09-29"},{"lineNumber":244,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":245,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":246,"author":{"gitId":"KairuiHu"},"content":"    //print the result of adding a \u0027todo\u0027 task","lastModifiedDate":"2021-10-01"},{"lineNumber":247,"author":{"gitId":"KairuiHu"},"content":"    public int printTodo(ArrayList\u003cString\u003e taskName, String userCommand, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":248,"author":{"gitId":"KairuiHu"},"content":"        Todo todo \u003d new Todo(userCommand);","lastModifiedDate":"2021-09-29"},{"lineNumber":249,"author":{"gitId":"KairuiHu"},"content":"        inputCount++;","lastModifiedDate":"2021-09-29"},{"lineNumber":250,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":251,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":252,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(todo);","lastModifiedDate":"2021-09-29"},{"lineNumber":253,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Now you have \" + inputCount + \" tasks in the list.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":254,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":255,"author":{"gitId":"KairuiHu"},"content":"        String todoName \u003d todo.description.substring(5);","lastModifiedDate":"2021-09-29"},{"lineNumber":256,"author":{"gitId":"KairuiHu"},"content":"        taskName.add(todoName);","lastModifiedDate":"2021-09-30"},{"lineNumber":257,"author":{"gitId":"KairuiHu"},"content":"        return inputCount;","lastModifiedDate":"2021-09-29"},{"lineNumber":258,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":259,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":260,"author":{"gitId":"KairuiHu"},"content":"    //print the result of terminating command","lastModifiedDate":"2021-10-01"},{"lineNumber":261,"author":{"gitId":"KairuiHu"},"content":"    public void printBye() {","lastModifiedDate":"2021-09-29"},{"lineNumber":262,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":263,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":264,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":265,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":266,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":267,"author":{"gitId":"KairuiHu"},"content":"    //print the result of \u0027done\u0027 command","lastModifiedDate":"2021-10-01"},{"lineNumber":268,"author":{"gitId":"KairuiHu"},"content":"    public void printDone(ArrayList\u003cInteger\u003e taskStatus, ArrayList\u003cString\u003e taskType,","lastModifiedDate":"2021-09-29"},{"lineNumber":269,"author":{"gitId":"KairuiHu"},"content":"                          ArrayList\u003cString\u003e taskName, String userCommand) {","lastModifiedDate":"2021-09-30"},{"lineNumber":270,"author":{"gitId":"KairuiHu"},"content":"        char taskID;","lastModifiedDate":"2021-09-29"},{"lineNumber":271,"author":{"gitId":"KairuiHu"},"content":"        int taskIDInt;","lastModifiedDate":"2021-09-29"},{"lineNumber":272,"author":{"gitId":"KairuiHu"},"content":"        int len \u003d userCommand.length();","lastModifiedDate":"2021-09-29"},{"lineNumber":273,"author":{"gitId":"KairuiHu"},"content":"        taskID \u003d userCommand.charAt(len - 1);","lastModifiedDate":"2021-09-29"},{"lineNumber":274,"author":{"gitId":"KairuiHu"},"content":"        taskIDInt \u003d taskID - 49;","lastModifiedDate":"2021-09-29"},{"lineNumber":275,"author":{"gitId":"KairuiHu"},"content":"        taskStatus.set(taskIDInt, 1);","lastModifiedDate":"2021-09-29"},{"lineNumber":276,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":277,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":278,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"\t\" + \"[\" + taskType.get(taskIDInt) + \"]\" +","lastModifiedDate":"2021-09-29"},{"lineNumber":279,"author":{"gitId":"KairuiHu"},"content":"                \"[X] \" + taskName.get(taskIDInt));","lastModifiedDate":"2021-09-30"},{"lineNumber":280,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":281,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":282,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":283,"author":{"gitId":"KairuiHu"},"content":"    //print the result of \u0027find\u0027 command","lastModifiedDate":"2021-10-01"},{"lineNumber":284,"author":{"gitId":"KairuiHu"},"content":"    public void printFind(ArrayList\u003cString\u003e output, String userCommand, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":285,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":286,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-30"},{"lineNumber":287,"author":{"gitId":"KairuiHu"},"content":"        int taskNumber \u003d 1;","lastModifiedDate":"2021-09-30"},{"lineNumber":288,"author":{"gitId":"KairuiHu"},"content":"        String tempOutput;","lastModifiedDate":"2021-09-30"},{"lineNumber":289,"author":{"gitId":"KairuiHu"},"content":"        for (int i \u003d 0; i \u003c inputCount; i++) {","lastModifiedDate":"2021-09-30"},{"lineNumber":290,"author":{"gitId":"KairuiHu"},"content":"            if (output.get(i).contains(userCommand.substring(5))) {","lastModifiedDate":"2021-09-30"},{"lineNumber":291,"author":{"gitId":"KairuiHu"},"content":"                tempOutput \u003d taskNumber + output.get(i).substring(1);","lastModifiedDate":"2021-09-30"},{"lineNumber":292,"author":{"gitId":"KairuiHu"},"content":"                System.out.println(tempOutput);","lastModifiedDate":"2021-09-30"},{"lineNumber":293,"author":{"gitId":"KairuiHu"},"content":"                taskNumber++;","lastModifiedDate":"2021-09-30"},{"lineNumber":294,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-30"},{"lineNumber":295,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":296,"author":{"gitId":"KairuiHu"},"content":"        if (taskNumber \u003d\u003d 1) {","lastModifiedDate":"2021-09-30"},{"lineNumber":297,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"Sorry! No matching tasks found.\");","lastModifiedDate":"2021-09-30"},{"lineNumber":298,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":299,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":300,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":301,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":302,"author":{"gitId":"KairuiHu"},"content":"    //print the result of \u0027list\u0027 command by printing all the tasks in the current list","lastModifiedDate":"2021-10-01"},{"lineNumber":303,"author":{"gitId":"KairuiHu"},"content":"    public void printList(ArrayList\u003cString\u003e taskType, ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":304,"author":{"gitId":"KairuiHu"},"content":"                          ArrayList\u003cString\u003e taskName, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":305,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":306,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.MESSAGE);","lastModifiedDate":"2021-09-29"},{"lineNumber":307,"author":{"gitId":"KairuiHu"},"content":"        if (inputCount \u003d\u003d 0) {","lastModifiedDate":"2021-09-30"},{"lineNumber":308,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"The list is empty!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":309,"author":{"gitId":"KairuiHu"},"content":"            return;","lastModifiedDate":"2021-09-30"},{"lineNumber":310,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":311,"author":{"gitId":"KairuiHu"},"content":"        for (int i \u003d 1; i \u003c\u003d inputCount; i++) {","lastModifiedDate":"2021-09-29"},{"lineNumber":312,"author":{"gitId":"KairuiHu"},"content":"            if (taskStatus.get(i - 1) \u003d\u003d 1) {","lastModifiedDate":"2021-09-29"},{"lineNumber":313,"author":{"gitId":"KairuiHu"},"content":"                System.out.println(i + \".[\" + taskType.get(i - 1) + \"]\" + \"[X] \" + taskName.get(i - 1));","lastModifiedDate":"2021-09-30"},{"lineNumber":314,"author":{"gitId":"KairuiHu"},"content":"            } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":315,"author":{"gitId":"KairuiHu"},"content":"                System.out.println(i + \".[\" + taskType.get(i - 1) + \"]\" + \"[ ] \" + taskName.get(i - 1));","lastModifiedDate":"2021-09-30"},{"lineNumber":316,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":317,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":318,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":319,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":320,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":321,"author":{"gitId":"KairuiHu"},"content":"    //update the \u0027output\u0027 ArrayList with corresponding taskNames","lastModifiedDate":"2021-10-01"},{"lineNumber":322,"author":{"gitId":"KairuiHu"},"content":"    public ArrayList\u003cString\u003e convertToArrayList(ArrayList\u003cString\u003e output, ArrayList\u003cString\u003e taskType,","lastModifiedDate":"2021-09-29"},{"lineNumber":323,"author":{"gitId":"KairuiHu"},"content":"                                                ArrayList\u003cInteger\u003e taskStatus,","lastModifiedDate":"2021-09-29"},{"lineNumber":324,"author":{"gitId":"KairuiHu"},"content":"                                                ArrayList\u003cString\u003e taskName, int inputCount) {","lastModifiedDate":"2021-09-30"},{"lineNumber":325,"author":{"gitId":"KairuiHu"},"content":"        String tempTask;","lastModifiedDate":"2021-09-29"},{"lineNumber":326,"author":{"gitId":"KairuiHu"},"content":"        output.clear();","lastModifiedDate":"2021-09-29"},{"lineNumber":327,"author":{"gitId":"KairuiHu"},"content":"        for (int i \u003d 1; i \u003c\u003d inputCount; i++) {","lastModifiedDate":"2021-09-29"},{"lineNumber":328,"author":{"gitId":"KairuiHu"},"content":"            if (taskStatus.get(i - 1) \u003d\u003d 1) {","lastModifiedDate":"2021-09-29"},{"lineNumber":329,"author":{"gitId":"KairuiHu"},"content":"                tempTask \u003d i + \".[\" + taskType.get(i - 1) + \"]\" + \"[X] \" + taskName.get(i - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":330,"author":{"gitId":"KairuiHu"},"content":"                output.add(tempTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":331,"author":{"gitId":"KairuiHu"},"content":"            } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":332,"author":{"gitId":"KairuiHu"},"content":"                tempTask \u003d i + \".[\" + taskType.get(i - 1) + \"]\" + \"[ ] \" + taskName.get(i - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":333,"author":{"gitId":"KairuiHu"},"content":"                output.add(tempTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":334,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":335,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":336,"author":{"gitId":"KairuiHu"},"content":"        return output;","lastModifiedDate":"2021-09-29"},{"lineNumber":337,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":338,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":339,"author":{"gitId":"KairuiHu"},"content":"    //print the result of \u0027list\u0027 command if the current list is empty","lastModifiedDate":"2021-10-01"},{"lineNumber":340,"author":{"gitId":"KairuiHu"},"content":"    public void printEmptyList() {","lastModifiedDate":"2021-09-30"},{"lineNumber":341,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":342,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Empty list!\");","lastModifiedDate":"2021-09-30"},{"lineNumber":343,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(ui.LINE);","lastModifiedDate":"2021-09-30"},{"lineNumber":344,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":345,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":346,"author":{"gitId":"KairuiHu"},"content":"    //perform the \"save\" function to save the current list to the output file","lastModifiedDate":"2021-10-01"},{"lineNumber":347,"author":{"gitId":"KairuiHu"},"content":"    public void saveTasks(File file, ArrayList\u003cString\u003e output) {","lastModifiedDate":"2021-09-29"},{"lineNumber":348,"author":{"gitId":"KairuiHu"},"content":"        File directory \u003d new File(\"./data/\");","lastModifiedDate":"2021-09-29"},{"lineNumber":349,"author":{"gitId":"KairuiHu"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":350,"author":{"gitId":"KairuiHu"},"content":"            directory.mkdir();","lastModifiedDate":"2021-09-29"},{"lineNumber":351,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":352,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":353,"author":{"gitId":"KairuiHu"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":354,"author":{"gitId":"KairuiHu"},"content":"                System.out.println(\"File created: \" + file.getName());","lastModifiedDate":"2021-09-29"},{"lineNumber":355,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":356,"author":{"gitId":"KairuiHu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":357,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An error occurred, please try again!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":358,"author":{"gitId":"KairuiHu"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-29"},{"lineNumber":359,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":360,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":361,"author":{"gitId":"KairuiHu"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":362,"author":{"gitId":"KairuiHu"},"content":"            FileWriter myWriter \u003d new FileWriter(\"./data/duke.txt\");","lastModifiedDate":"2021-09-29"},{"lineNumber":363,"author":{"gitId":"KairuiHu"},"content":"            for (int i \u003d 0; i \u003c output.size(); i++) {","lastModifiedDate":"2021-09-29"},{"lineNumber":364,"author":{"gitId":"KairuiHu"},"content":"                myWriter.write(output.get(i));","lastModifiedDate":"2021-09-29"},{"lineNumber":365,"author":{"gitId":"KairuiHu"},"content":"                myWriter.write(\"\\n\");","lastModifiedDate":"2021-09-29"},{"lineNumber":366,"author":{"gitId":"KairuiHu"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":367,"author":{"gitId":"KairuiHu"},"content":"            myWriter.close();","lastModifiedDate":"2021-09-29"},{"lineNumber":368,"author":{"gitId":"KairuiHu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"KairuiHu"},"content":"            System.out.println(\"An error occurred, please try again!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":370,"author":{"gitId":"KairuiHu"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-29"},{"lineNumber":371,"author":{"gitId":"KairuiHu"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":372,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":373,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"KairuiHu":373}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"    //Constructor of todo object","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"    //Setter of isDone var","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"    //Getter of isDone var","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"KairuiHu"},"content":"    //toString method","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"KairuiHu"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"KairuiHu"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"KairuiHu":24}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KairuiHu"},"content":"public class UI {","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"KairuiHu"},"content":"    public static final String MESSAGE \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"KairuiHu"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"KairuiHu"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"KairuiHu"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"KairuiHu"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"KairuiHu"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"KairuiHu"},"content":"    public static final String LINE \u003d \"___________________________________________________\";","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"KairuiHu"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"KairuiHu"},"content":"    //print the welcome message at the beginning","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"KairuiHu"},"content":"    public static void printWelcome() {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"KairuiHu"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"KairuiHu"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"KairuiHu"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"KairuiHu":18}}]
