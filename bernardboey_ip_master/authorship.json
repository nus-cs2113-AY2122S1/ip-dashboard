[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"Duke is a desktop app for managing tasks, optimized for use via a Command Line Interface. If you can type fast, Duke can","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"manage your tasks faster than traditional Graphical User Interface apps.","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"- [Features](#features)","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"- [Usage](#usage)","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"- [FAQ](#faq)","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"- [Command summary](#command-summary)","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"## Features","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"### Task Management","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"You can add and delete three kinds of tasks - todo, deadline, and event tasks. You can list all tasks and find certain","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"tasks based on a keyword or date. You can also mark tasks as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"### `todo` - Adding a todo task","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"Adds a todo task to the task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"Example of usage: `todo borrow book`","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"     Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"       [T][ ] borrow book","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"     Now you have 1 task(s) in the list","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"### `deadline` - Adding a deadline task","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"Adds a task with a deadline (i.e. needs to be done before a specific date/time) to the task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"Format: `deadline DESCRIPTION /by yyyy-MM-dd HHmm`","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"Example of usage: `deadline return book /by 2021-09-26 1800`","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"     Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"       [D][ ] return book (by: Sep 26 2021 6.00pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"     Now you have 2 task(s) in the list","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"### `event` - Adding an event","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"Adds an event (i.e. a task that starts at a specific time).","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"Format: `event DESCRIPTION /at yyyy-MM-dd HHmm`","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"Example of usage: `event project meeting /at 2021-10-04 1400`","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"bernardboey"},"content":"     Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"bernardboey"},"content":"       [E][ ] project meeting (at: Oct 4 2021 2.00pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"bernardboey"},"content":"     Now you have 3 task(s) in the list","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"bernardboey"},"content":"### `list` - Listing all tasks","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"bernardboey"},"content":"Shows a list of all tasks along with their details.","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"bernardboey"},"content":"Example of usage: `list`","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"bernardboey"},"content":"     Here are the tasks in your list:","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"bernardboey"},"content":"     1.[T][ ] borrow book","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"bernardboey"},"content":"     2.[D][ ] return book (by: Sep 26 2021 6.00pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"bernardboey"},"content":"     3.[E][ ] project meeting (at: Oct 4 2021 2.00pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"bernardboey"},"content":"### `find` - Finding all tasks with a keyword","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"bernardboey"},"content":"Shows a list of tasks that match the given keyword.","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"bernardboey"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":97,"author":{"gitId":"bernardboey"},"content":"Example of usage: `find project`","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":99,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":101,"author":{"gitId":"bernardboey"},"content":"\u003csmall\u003eNote that the indices shown are based on the indices of the task in the whole task list rather than based only on","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"bernardboey"},"content":"the list of tasks that are displayed.\u003c/small\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":104,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"bernardboey"},"content":"     Here are the matching tasks in your list:","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"bernardboey"},"content":"     3.[E][ ] project meeting (at: Oct 4 2021 2.00pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"bernardboey"},"content":"### `date` - Finding all events/deadlines occurring on a date","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"bernardboey"},"content":"Shows a list of events and deadlines that occur on the given date.","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"bernardboey"},"content":"Format: `date yyyy-MM-dd`","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"bernardboey"},"content":"Example of usage: `date 2021-09-26`","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"bernardboey"},"content":"\u003csmall\u003eAs before, note that the indices shown are based on the indices of the task in the whole task list rather than","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"bernardboey"},"content":"based only on the list of tasks that are displayed.\u003c/small\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":124,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":125,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"bernardboey"},"content":"     Here are the tasks in your list that fall on Sep 26 2021:","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"bernardboey"},"content":"     2.[D][ ] return book (by: Sep 26 2021 6.00pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":130,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"bernardboey"},"content":"### `delete` - Deleting a task","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"bernardboey"},"content":"Deletes the task at the specified index from the task list. Note that the index is based on the index of the task in the","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"bernardboey"},"content":"whole task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"bernardboey"},"content":"Format: `delete INDEX`","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"bernardboey"},"content":"Example of usage: `delete 3`","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"bernardboey"},"content":"     Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"bernardboey"},"content":"       [E][ ] project meeting (at: Oct 4 2021 2.00pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"bernardboey"},"content":"     Now you have 2 task(s) in the list","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"bernardboey"},"content":"### `done` - Marking a task as done","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"bernardboey"},"content":"Marks the task at the specified index as completed. Note that the index is based on the index of the task in the whole","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"bernardboey"},"content":"task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"bernardboey"},"content":"Format: `done INDEX`","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"bernardboey"},"content":"Example of usage: `done 1`","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"bernardboey"},"content":"     Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"bernardboey"},"content":"       [T][X] borrow book","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":166,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":167,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":168,"author":{"gitId":"bernardboey"},"content":"### `bye` - Exiting the program","lastModifiedDate":"2021-10-01"},{"lineNumber":169,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":170,"author":{"gitId":"bernardboey"},"content":"Exits the program.","lastModifiedDate":"2021-10-01"},{"lineNumber":171,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"bernardboey"},"content":"Example of usage: `bye`","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"bernardboey"},"content":"Expected output:","lastModifiedDate":"2021-10-01"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":177,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"bernardboey"},"content":"     Bye. Hope to see you again soon!","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"bernardboey"},"content":"    ____________________________________________________________","lastModifiedDate":"2021-10-01"},{"lineNumber":180,"author":{"gitId":"bernardboey"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":182,"author":{"gitId":"bernardboey"},"content":"## FAQ","lastModifiedDate":"2021-10-01"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":184,"author":{"gitId":"bernardboey"},"content":"**Q**: Where is the data stored and how do I transfer data to a different computer?\u003cbr\u003e","lastModifiedDate":"2021-10-01"},{"lineNumber":185,"author":{"gitId":"bernardboey"},"content":"**A**: The data is stored in `data/duke.txt`, relative to your current working directory. You can copy the file to a","lastModifiedDate":"2021-10-01"},{"lineNumber":186,"author":{"gitId":"bernardboey"},"content":"different computer and run Duke to get access to the same data.","lastModifiedDate":"2021-10-01"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":188,"author":{"gitId":"bernardboey"},"content":"## Command summary","lastModifiedDate":"2021-10-01"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":190,"author":{"gitId":"bernardboey"},"content":"Action | Format, Examples","lastModifiedDate":"2021-10-01"},{"lineNumber":191,"author":{"gitId":"bernardboey"},"content":"--------|------------------","lastModifiedDate":"2021-10-01"},{"lineNumber":192,"author":{"gitId":"bernardboey"},"content":"**Add todo** | `todo DESCRIPTION`\u003cbr\u003ee.g. `todo borrow book`","lastModifiedDate":"2021-10-01"},{"lineNumber":193,"author":{"gitId":"bernardboey"},"content":"**Add deadline** | `deadline DESCRIPTION /by yyyy-MM-dd HHmm`\u003cbr\u003ee.g. `deadline return book /by 2021-09-26 1800`","lastModifiedDate":"2021-10-01"},{"lineNumber":194,"author":{"gitId":"bernardboey"},"content":"**Add event** | `event DESCRIPTION /at yyyy-MM-dd HHmm`\u003cbr\u003ee.g. `event project meeting /at 2021-10-04 1400`","lastModifiedDate":"2021-10-01"},{"lineNumber":195,"author":{"gitId":"bernardboey"},"content":"**List** | `list`","lastModifiedDate":"2021-10-01"},{"lineNumber":196,"author":{"gitId":"bernardboey"},"content":"**Find** | `find KEYWORD`\u003cbr\u003ee.g. `find project`","lastModifiedDate":"2021-10-01"},{"lineNumber":197,"author":{"gitId":"bernardboey"},"content":"**Date** | `date yyyy-MM-dd`\u003cbr\u003ee.g. `date 2021-09-26`","lastModifiedDate":"2021-10-01"},{"lineNumber":198,"author":{"gitId":"bernardboey"},"content":"**Delete** | `delete INDEX`\u003cbr\u003ee.g. `delete 3`","lastModifiedDate":"2021-10-01"},{"lineNumber":199,"author":{"gitId":"bernardboey"},"content":"**Done** | `done INDEX`\u003cbr\u003ee.g. `done 1`","lastModifiedDate":"2021-10-01"},{"lineNumber":200,"author":{"gitId":"bernardboey"},"content":"**Exit** | `bye`","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"bernardboey":178,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"import duke.storage.Storage.StorageException;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":" * Entry point of the Duke chatbot application.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":" * Initializes the application and starts the interaction with the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_ERROR \u003d \"☹ OOPS!!! %1$s\";","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    private static Storage storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    private static TaskList tasks;","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    private static Ui ui;","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"     * Creates an instance of the Duke chatbot application, and loads data from the given {@code filePath}.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"     * @param filePath Path of the file where the data is stored in.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"        // Code below inspired by https://nus-cs2113-ay2122s1.github.io/website/schedule/week7/project.html","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"            tasks \u003d storage.loadData();","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"        } catch (StorageException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"            ui.showToUser(e.getMessage());","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"     * Runs the program until termination.","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"     * Shows the greeting message, and then keeps reading user commands and executing them until the exit command is","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"     * given.","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"    public void run() {","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"        // Code below inspired by https://nus-cs2113-ay2122s1.github.io/website/schedule/week7/project.html","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"        ui.showGreeting(storage.getPath(), storage.isUsingNewFile());","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"        while (!isExit) {","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"            try {","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"                final String userInput \u003d ui.getUserInput();","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"                final Command command \u003d Parser.parseCommand(userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"                isExit \u003d command.isExit();","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"                final String feedback \u003d command.execute(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"                storage.saveData(tasks);","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"                ui.showToUser(feedback);","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"            } catch (StorageException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"                ui.showToUser(e.getMessage());","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"                ui.showToUser(String.format(MESSAGE_ERROR, e.getMessage()));","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"    /** Main entry point of Duke. */","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"bernardboey"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"bernardboey"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"bernardboey":66,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"/** Signals that some error occurred specific to the functionality of Duke. */","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"        super(message);","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"bernardboey":8}},{"path":"src/main/java/duke/commands/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":" * Represents a command that adds tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"public abstract class AddTaskCommand extends Command {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"    /** Message to be displayed upon successful adding of task. */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    protected static final String MESSAGE_TASK_ADDED \u003d \"Got it. I\u0027ve added this task:\\n\" + \"  %1$s\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"            + \"Now you have %2$s task(s) in the list\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    /** Task to be added. */","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    protected Task toAdd;","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"        tasks.addTask(toAdd);","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"        return String.format(MESSAGE_TASK_ADDED, toAdd, tasks.getSize());","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":22}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":" * Terminates the program.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_FAREWELL \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"        return MESSAGE_FAREWELL;","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"        return true;","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":23}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":" * Represents an executable command.","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"     * Executes the appropriate actions.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"     * @param tasks Task list.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"     * @return Feedback about what was executed.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If there was a problem executing the command.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    public abstract String execute(TaskList tasks) throws DukeException;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"     * Indicates whether the command is an exit command.","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"     * @return {@code true} if and only if the command is an exit command; {@code false} otherwise.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"        return false;","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":27}},{"path":"src/main/java/duke/commands/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":" * Filters {@link Event} and {@link Deadline} tasks based on date.","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"date\";","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_MATCHING_TASK_LIST \u003d \"Here are the tasks in your list that fall on %1$s:\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"            + \"%2$s\";","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"    private final LocalDate dateToFilterBy;","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"     * Instantiates command and stores date.","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"     * @param dateToFilterBy Date to filter tasks by.","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"    public DateCommand(LocalDate dateToFilterBy) {","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"        this.dateToFilterBy \u003d dateToFilterBy;","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"        final ArrayList\u003cString\u003e formattedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"            final Task task \u003d tasks.getTask(i);","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"            if (hasSameDate(task)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"                formattedTasks.add(Ui.formatTaskForTaskList(i + 1, task));","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"            }","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"        String taskListOutput \u003d String.join(\"\\n\", formattedTasks);","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"        return String.format(MESSAGE_MATCHING_TASK_LIST, dateToFilterBy.format(Ui.DATE_OUTPUT_FORMATTER), taskListOutput);","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"     * Checks whether the given {@code task} has the same date as the date to filter by ({@link #dateToFilterBy}).","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"     * @param task The task","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"     * @return True if the task is an {@link Event} or {@link Deadline} task and has the same date as {@link","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"     *         #dateToFilterBy}; false otherwise.","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"    private Boolean hasSameDate(Task task) {","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"            final LocalDateTime deadline \u003d ((Deadline) task).getBy();","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"            return deadline.toLocalDate().equals(dateToFilterBy);","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"            final LocalDateTime eventDateTime \u003d ((Event) task).getAt();","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"            return eventDateTime.toLocalDate().equals(dateToFilterBy);","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"        return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"bernardboey":64}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" * Adds a {@link Deadline} item to the task list.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"public class DeadlineCommand extends AddTaskCommand {","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"     * Instantiates a {@link Deadline} item with the specified {@code description} and deadline.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"     * @param by Deadline for the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    public DeadlineCommand(String description, LocalDateTime by) {","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"        toAdd \u003d new Deadline(description, by);","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":23}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" * Deletes a task.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_TASK_DELETED \u003d \"Noted. I\u0027ve removed this task:\\n\" + \"  %1$s\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"            + \"Now you have %2$s task(s) in the list\";","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_NONEXISTENT_TASK_NUMBER \u003d \"That task number does not exist!\";","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    private final int index;","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"     * Initialises command and stores index.","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"     * @param index Index of the task to be deleted (starting from 0).","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"    public String execute(TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"            final Task task \u003d tasks.getTask(index);","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"            tasks.removeTask(task);","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"            return String.format(MESSAGE_TASK_DELETED, task, tasks.getSize());","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_NONEXISTENT_TASK_NUMBER);","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":39}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" * Marks a task as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_TASK_MARKED_AS_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"  %1$s\";","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_NONEXISTENT_TASK_NUMBER \u003d \"That task number does not exist!\";","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    private final int index;","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"     * Initialises command and stores index.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"     * @param index Index of the task to be marked as completed (starting from 0).","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"    public DoneCommand(int index) {","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"    public String execute(TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"            final Task task \u003d tasks.getTask(index);","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"            task.setAsDone();","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"            return String.format(MESSAGE_TASK_MARKED_AS_DONE, task);","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_NONEXISTENT_TASK_NUMBER);","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":38}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" * Adds an {@link Event} item to the task list.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"public class EventCommand extends AddTaskCommand {","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"     * Instantiates an {@link Event} item with the specified {@code description} and event date/time.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"     * @param at Date and time of the event.","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    public EventCommand(String description, LocalDateTime at) {","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"        toAdd \u003d new Event(description, at);","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":23}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":" * Finds tasks that match the given keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_MATCHING_TASK_LIST \u003d \"Here are the matching tasks in your list:\\n\" + \"%1$s\";","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    private final String keyword;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"     * Instantiates command and stores keyword.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"     * @param keyword Keyword that will be used to search for a task.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"        final ArrayList\u003cString\u003e formattedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"            final Task task \u003d tasks.getTask(i);","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"                formattedTasks.add(Ui.formatTaskForTaskList(i + 1, task));","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"        String taskListOutput \u003d String.join(\"\\n\", formattedTasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"        return String.format(MESSAGE_MATCHING_TASK_LIST, taskListOutput);","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"bernardboey":41}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":" * Lists all tasks in the task list.","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_TASK_LIST \u003d \"Here are the tasks in your list:\\n\" + \"%1$s\";","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"        // Returns the list of tasks (numbered) together with their information","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"        final String[] formattedTasks \u003d new String[tasks.getSize()];","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"            formattedTasks[i] \u003d Ui.formatTaskForTaskList(i + 1, tasks.getTask(i));","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"        String taskListOutput \u003d String.join(\"\\n\", formattedTasks);","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"        return String.format(MESSAGE_TASK_LIST, taskListOutput);","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":25}},{"path":"src/main/java/duke/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.commands;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":" * Adds a {@link ToDo} item to the task list.","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"public class ToDoCommand extends AddTaskCommand {","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"    /** Unique word associated with the command. */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"     * Instantiates a {@link ToDo} item with the specified {@code description}.","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    public ToDoCommand(String description) {","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"        toAdd \u003d new ToDo(description);","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":20}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.parser;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"import duke.commands.DateCommand;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"import duke.commands.DeadlineCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"import duke.commands.EventCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"import duke.commands.ToDoCommand;","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"// Code below inspired by","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"// https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/parser/Parser.java","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":" * Parses user input.","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"public class Parser {","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"    // Capturing group variables store the name of the named capturing group.","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"    private static final String CAPTURING_GROUP_COMMAND \u003d \"command\";","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"    private static final String CAPTURING_GROUP_ARGS \u003d \"args\";","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"    /** Used for initial separation of command word and args. */","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"            \"(?\u003c\" + CAPTURING_GROUP_COMMAND + \"\u003e\\\\S+)\"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"                    + \"(?\u003c\" + CAPTURING_GROUP_ARGS + \"\u003e.*)\");","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"    /** Name of the capturing group for task description. */","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"    public static final String CAPTURING_GROUP_DESCRIPTION \u003d \"description\";","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"    /** Delimiter used to indicate that the subsequent arg specifies the {@code by} deadline of a deadline task. */","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"    public static final String DELIMITER_BY \u003d \"/by\";","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"    /** Delimiter used to indicate that the subsequent arg specifies the {@code at} datetime of an event. */","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"    public static final String DELIMITER_AT \u003d \"/at\";","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"    /** Name of the capturing group for the {@code by} deadline of a deadline task. */","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"    public static final String CAPTURING_GROUP_BY \u003d \"by\";","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"    /** Name of the capturing group for the {@code at} datetime of an event. */","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"    public static final String CAPTURING_GROUP_AT \u003d \"at\";","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"     * Used for separation of task description and other optional parameters (e.g. {@code by} for deadline, {@code at}","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"     * for events).","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"    public static final Pattern TASK_ARGS_FORMAT \u003d Pattern.compile(","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"            \"(?\u003c\" + CAPTURING_GROUP_DESCRIPTION + \"\u003e[^/]+)\"","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"                    + \"( \" + DELIMITER_BY + \" (?\u003c\" + CAPTURING_GROUP_BY + \"\u003e[^/]+))?\"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"                    + \"( \" + DELIMITER_AT + \" (?\u003c\" + CAPTURING_GROUP_AT + \"\u003e[^/]+))?\");","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"    private static final String DATE_INPUT_FORMAT \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"    private static final String TIME_INPUT_FORMAT \u003d \"HHmm\";","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"    private static final String DATE_TIME_INPUT_FORMAT \u003d DATE_INPUT_FORMAT + \" \" + TIME_INPUT_FORMAT;","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"    private static final DateTimeFormatter DATE_INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_INPUT_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"    public static final DateTimeFormatter DATE_TIME_INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_TODO_DESCRIPTION_EMPTY \u003d \"The description of a todo cannot be empty.\";","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_UNRECOGNISED_EVENT_FORMAT \u003d \"Unrecognised event format.\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"            + \"Please ensure you provide the date/time of the event.\";","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_UNRECOGNISED_DEADLINE_FORMAT \u003d \"Unrecognised deadline format.\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"bernardboey"},"content":"            + \"Please ensure you provide the date/time of the deadline.\";","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_INVALID_TASK_NUMBER \u003d \"Please use a valid integer for the task number.\";","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_UNRECOGNISED_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\";","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format.\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"bernardboey"},"content":"            + \"Please ensure you use this format: \" + DATE_INPUT_FORMAT;","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_INVALID_DATE_TIME_FORMAT \u003d \"Invalid datetime format.\\n\"","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"bernardboey"},"content":"            + \"Please ensure you use this format: \" + DATE_TIME_INPUT_FORMAT;","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"bernardboey"},"content":"     * Parses user input as a command.","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"bernardboey"},"content":"     * @param userInput Input command together with any arguments.","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"bernardboey"},"content":"     * @return Command that corresponds to the user input, if valid.","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If input is of an invalid command format.","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"bernardboey"},"content":"    public static Command parseCommand(String userInput) throws DukeException {","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"bernardboey"},"content":"        Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput);","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"bernardboey"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"bernardboey"},"content":"        final String command \u003d matcher.group(CAPTURING_GROUP_COMMAND);","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"bernardboey"},"content":"        final String args \u003d matcher.group(CAPTURING_GROUP_ARGS).trim();","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"bernardboey"},"content":"        switch (command) {","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"bernardboey"},"content":"        case ToDoCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"bernardboey"},"content":"            return prepareToDo(args);","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"bernardboey"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"bernardboey"},"content":"            return prepareDeadline(args);","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"bernardboey"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"bernardboey"},"content":"            return prepareEvent(args);","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"bernardboey"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"bernardboey"},"content":"            return new ListCommand();","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"bernardboey"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"bernardboey"},"content":"            return new FindCommand(args);","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"bernardboey"},"content":"        case DateCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"bernardboey"},"content":"            return new DateCommand(parseDate(args));","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"bernardboey"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"bernardboey"},"content":"            return new DeleteCommand(parseTaskId(args));","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"bernardboey"},"content":"        case DoneCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"bernardboey"},"content":"            return new DoneCommand(parseTaskId(args));","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"bernardboey"},"content":"        case ByeCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"bernardboey"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"bernardboey"},"content":"        default:","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"bernardboey"},"content":"            return handleUnrecognisedCommand();","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"bernardboey"},"content":"     * Parses arguments in the context of the ToDo command ({@link ToDoCommand}).","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"bernardboey"},"content":"     * @param args Args string containing information about the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"bernardboey"},"content":"     * @return The prepared command.","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If the arguments are of an invalid format (e.g. if the description is missing).","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"bernardboey"},"content":"    private static Command prepareToDo(String args) throws DukeException {","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"bernardboey"},"content":"        final Matcher matcher;","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"bernardboey"},"content":"            matcher \u003d parseTask(args);","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"bernardboey"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_TODO_DESCRIPTION_EMPTY);","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"bernardboey"},"content":"        final String description \u003d matcher.group(CAPTURING_GROUP_DESCRIPTION);","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"bernardboey"},"content":"        if (description \u003d\u003d null || description.isBlank()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"bernardboey"},"content":"        return new ToDoCommand(description);","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"bernardboey"},"content":"     * Parses arguments in the context of the Deadline command ({@link DeadlineCommand}).","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"bernardboey"},"content":"     * @param args Args string containing information about the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"bernardboey"},"content":"     * @return The prepared command.","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If the arguments are of an invalid format (e.g. if the description or deadline is","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"bernardboey"},"content":"     *         missing).","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"bernardboey"},"content":"    private static Command prepareDeadline(String args) throws DukeException {","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"bernardboey"},"content":"        final Matcher matcher \u003d parseTask(args);","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"bernardboey"},"content":"        final String description \u003d matcher.group(CAPTURING_GROUP_DESCRIPTION);","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"bernardboey"},"content":"        final String by \u003d matcher.group(CAPTURING_GROUP_BY);","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"bernardboey"},"content":"        if (description \u003d\u003d null || description.isBlank() || by \u003d\u003d null || by.isBlank()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_UNRECOGNISED_DEADLINE_FORMAT);","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"bernardboey"},"content":"        return new DeadlineCommand(description, parseDateTime(by.trim()));","lastModifiedDate":"2021-09-30"},{"lineNumber":151,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"bernardboey"},"content":"     * Parses arguments in the context of the Event command ({@link EventCommand}).","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"bernardboey"},"content":"     * @param args Args string containing information about the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"bernardboey"},"content":"     * @return The prepared command.","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If the arguments are of an invalid format (e.g. if the description or datetime is","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"bernardboey"},"content":"     *         missing).","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"bernardboey"},"content":"    private static Command prepareEvent(String args) throws DukeException {","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"bernardboey"},"content":"        final Matcher matcher \u003d parseTask(args);","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"bernardboey"},"content":"        final String description \u003d matcher.group(CAPTURING_GROUP_DESCRIPTION);","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"bernardboey"},"content":"        final String at \u003d matcher.group(CAPTURING_GROUP_AT);","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"bernardboey"},"content":"        if (description \u003d\u003d null || description.isBlank() || at \u003d\u003d null || at.isBlank()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":166,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_UNRECOGNISED_EVENT_FORMAT);","lastModifiedDate":"2021-09-27"},{"lineNumber":167,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":168,"author":{"gitId":"bernardboey"},"content":"        return new EventCommand(description, parseDateTime(at.trim()));","lastModifiedDate":"2021-09-30"},{"lineNumber":169,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":171,"author":{"gitId":"bernardboey"},"content":"    private static LocalDate parseDate(String dateString) throws DukeException {","lastModifiedDate":"2021-09-30"},{"lineNumber":172,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":173,"author":{"gitId":"bernardboey"},"content":"            return LocalDate.parse(dateString, DATE_INPUT_FORMATTER);","lastModifiedDate":"2021-09-30"},{"lineNumber":174,"author":{"gitId":"bernardboey"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":175,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":176,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":177,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":178,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":179,"author":{"gitId":"bernardboey"},"content":"    public static LocalDateTime parseDateTime(String dateTimeString) throws DukeException {","lastModifiedDate":"2021-09-30"},{"lineNumber":180,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":181,"author":{"gitId":"bernardboey"},"content":"            return LocalDateTime.parse(dateTimeString, DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2021-09-30"},{"lineNumber":182,"author":{"gitId":"bernardboey"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":183,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_INVALID_DATE_TIME_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":184,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":185,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":188,"author":{"gitId":"bernardboey"},"content":"     * Parses task arguments string.","lastModifiedDate":"2021-10-01"},{"lineNumber":189,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":190,"author":{"gitId":"bernardboey"},"content":"     * @param args Args string containing information about the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":191,"author":{"gitId":"bernardboey"},"content":"     * @return Matcher object that matches the task args string according to the specified format.","lastModifiedDate":"2021-10-01"},{"lineNumber":192,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If the task args string does not match the specified format.","lastModifiedDate":"2021-10-01"},{"lineNumber":193,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":194,"author":{"gitId":"bernardboey"},"content":"    private static Matcher parseTask(String args) throws DukeException {","lastModifiedDate":"2021-09-27"},{"lineNumber":195,"author":{"gitId":"bernardboey"},"content":"        final Matcher matcher \u003d TASK_ARGS_FORMAT.matcher(args);","lastModifiedDate":"2021-09-27"},{"lineNumber":196,"author":{"gitId":"bernardboey"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":197,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);","lastModifiedDate":"2021-09-29"},{"lineNumber":198,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":199,"author":{"gitId":"bernardboey"},"content":"        return matcher;","lastModifiedDate":"2021-09-27"},{"lineNumber":200,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":201,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":202,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":203,"author":{"gitId":"bernardboey"},"content":"     * Parses task id string as an integer.","lastModifiedDate":"2021-09-29"},{"lineNumber":204,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":205,"author":{"gitId":"bernardboey"},"content":"     * @param taskIdString Task id string to be converted to an integer.","lastModifiedDate":"2021-09-29"},{"lineNumber":206,"author":{"gitId":"bernardboey"},"content":"     * @return Task id parsed as an integer.","lastModifiedDate":"2021-09-29"},{"lineNumber":207,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If string is not of a proper integer format.","lastModifiedDate":"2021-09-29"},{"lineNumber":208,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":209,"author":{"gitId":"bernardboey"},"content":"    private static int parseTaskId(String taskIdString) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":210,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":211,"author":{"gitId":"bernardboey"},"content":"            return Integer.parseInt(taskIdString) - 1;","lastModifiedDate":"2021-09-29"},{"lineNumber":212,"author":{"gitId":"bernardboey"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":213,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_INVALID_TASK_NUMBER);","lastModifiedDate":"2021-09-27"},{"lineNumber":214,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":215,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":216,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":217,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":218,"author":{"gitId":"bernardboey"},"content":"     * Handles unrecognised commands by throwing an exception together with a descriptive message of the error.","lastModifiedDate":"2021-10-01"},{"lineNumber":219,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":220,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException Always thrown.","lastModifiedDate":"2021-10-01"},{"lineNumber":221,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":222,"author":{"gitId":"bernardboey"},"content":"    private static Command handleUnrecognisedCommand() throws DukeException {","lastModifiedDate":"2021-09-27"},{"lineNumber":223,"author":{"gitId":"bernardboey"},"content":"        throw new DukeException(MESSAGE_UNRECOGNISED_COMMAND);","lastModifiedDate":"2021-09-27"},{"lineNumber":224,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":225,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":225}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.storage;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"import java.util.List;","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"// Code below inspired by","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"// https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/storage/StorageFile.java","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":" * Represents the file that stores the task list data, and contains the methods that parses the file and encodes the","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":" * data into the file.","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"public class Storage {","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"    // Capturing group variables store the name of the named capturing group.","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"    private static final String CAPTURING_GROUP_TASK_TYPE_ICON \u003d \"taskTypeIcon\";","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"    private static final String CAPTURING_GROUP_IS_DONE \u003d \"isDone\";","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"    private static final String CAPTURING_GROUP_TASK_DETAILS \u003d \"taskDetails\";","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"    /** Used for initial separation of task type icon, whether task is done, and the rest of the task details. */","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"    private static final Pattern BASIC_TASK_FORMAT \u003d Pattern.compile(","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"            \"(?\u003c\" + CAPTURING_GROUP_TASK_TYPE_ICON + \"\u003e\\\\S+) \"","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"                    + \"(?\u003c\" + CAPTURING_GROUP_IS_DONE + \"\u003e\\\\S+) \"","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"                    + \"(?\u003c\" + CAPTURING_GROUP_TASK_DETAILS + \"\u003e.+)\");","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"    private static final String SYMBOL_TASK_DONE \u003d \"1\";","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"    private static final String SYMBOL_TASK_NOT_DONE \u003d \"0\";","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_DATA_FILE_ACCESS_ERROR \u003d \"There was an error accessing the data file \u0027%1$s\u0027\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"            + \"%2$s\";","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_DATA_FILE_PARSE_ERROR \u003d \"There was an error parsing the data file:\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"            + \"%1$s\";","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_TASK_FORMAT_ERROR \u003d \"Unrecognised task format.\";","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_UNRECOGNISED_TASK_TYPE_ICON \u003d \"Unrecognised task type icon: \u0027%1$s\u0027\";","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_UNRECOGNISED_TASK_STATUS_ICON \u003d \"Unrecognised task status icon: \u0027%1$s\u0027\";","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_UNRECOGNISED_EVENT_FORMAT \u003d \"Unrecognised event format.\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"            + \"Please ensure you provide the date/time of the event.\";","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_UNRECOGNISED_DEADLINE_FORMAT \u003d \"Unrecognised deadline format.\\n\"","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"            + \"Please ensure you provide the date/time of the deadline.\";","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"    private final Path path;","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"    private boolean isUsingNewFile \u003d false;","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"     * Initialises storage and stores {@code filePath}.","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"     * @param filePath Path of the file that stores the data.","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"        path \u003d Paths.get(filePath);","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"bernardboey"},"content":"     * Returns path of the file that stores the data.","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"bernardboey"},"content":"     * @return Path of the data file as a string.","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"bernardboey"},"content":"    public String getPath() {","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"bernardboey"},"content":"        return path.toString();","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"bernardboey"},"content":"     * Returns whether a new data file is being used.","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"bernardboey"},"content":"     * @return {@code true} if there is no existing data file and a new file is being used; false otherwise;","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"bernardboey"},"content":"    public boolean isUsingNewFile() {","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"bernardboey"},"content":"        return isUsingNewFile;","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"bernardboey"},"content":"     * Loads task data from the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"bernardboey"},"content":"     * @return Task list parsed from the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"bernardboey"},"content":"     * @throws StorageException If there is an error parsing the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"bernardboey"},"content":"    public TaskList loadData() throws StorageException {","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"bernardboey"},"content":"        if (!Files.exists(path) || !Files.isRegularFile(path)) {","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"bernardboey"},"content":"            isUsingNewFile \u003d true;","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"bernardboey"},"content":"            return new TaskList();","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"bernardboey"},"content":"            List\u003cString\u003e taskDataStrings \u003d Files.readAllLines(path);","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"bernardboey"},"content":"            return parseData(taskDataStrings);","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"bernardboey"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"bernardboey"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"bernardboey"},"content":"            throw new StorageException(String.format(MESSAGE_DATA_FILE_PARSE_ERROR, e.getMessage()));","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"bernardboey"},"content":"     * Parses task data as a task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"bernardboey"},"content":"     * @param taskDataStrings Task data to be parsed.","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"bernardboey"},"content":"     * @return Parsed task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If there is an error parsing the data.","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"bernardboey"},"content":"    private TaskList parseData(List\u003cString\u003e taskDataStrings) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"bernardboey"},"content":"        final TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"bernardboey"},"content":"        for (String taskString : taskDataStrings) {","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"bernardboey"},"content":"            tasks.addTask(decodeTaskFromString(taskString));","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"bernardboey"},"content":"        return tasks;","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"bernardboey"},"content":"     * Parses task string as a task.","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"bernardboey"},"content":"     * @param taskString Task string to be parsed.","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"bernardboey"},"content":"     * @return Parsed task.","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"bernardboey"},"content":"     * @throws DukeException If there is an error parsing the task string (i.e. not in the right format).","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"bernardboey"},"content":"    private Task decodeTaskFromString(String taskString) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"bernardboey"},"content":"        final Matcher basicTaskMatcher \u003d BASIC_TASK_FORMAT.matcher(taskString);","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"bernardboey"},"content":"        if (!basicTaskMatcher.matches()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_TASK_FORMAT_ERROR);","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"bernardboey"},"content":"        final String taskTypeIcon \u003d basicTaskMatcher.group(CAPTURING_GROUP_TASK_TYPE_ICON);","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"bernardboey"},"content":"        final String isDone \u003d basicTaskMatcher.group(CAPTURING_GROUP_IS_DONE);","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"bernardboey"},"content":"        final String taskDetails \u003d basicTaskMatcher.group(CAPTURING_GROUP_TASK_DETAILS);","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"bernardboey"},"content":"        final Matcher taskDetailsMatcher \u003d Parser.TASK_ARGS_FORMAT.matcher(taskDetails);","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"bernardboey"},"content":"        if (!taskDetailsMatcher.matches()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(MESSAGE_TASK_FORMAT_ERROR);","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"bernardboey"},"content":"        final String description \u003d taskDetailsMatcher.group(Parser.CAPTURING_GROUP_DESCRIPTION);","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"bernardboey"},"content":"        Task task;","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"bernardboey"},"content":"        switch (taskTypeIcon) {","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"bernardboey"},"content":"        case ToDo.TASK_TYPE_ICON:","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"bernardboey"},"content":"            task \u003d new ToDo(description);","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"bernardboey"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"bernardboey"},"content":"        case Event.TASK_TYPE_ICON:","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"bernardboey"},"content":"            final String at \u003d taskDetailsMatcher.group(Parser.CAPTURING_GROUP_AT);","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"bernardboey"},"content":"            if (description \u003d\u003d null || description.isBlank() || at \u003d\u003d null || at.isBlank()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"bernardboey"},"content":"                throw new DukeException(MESSAGE_UNRECOGNISED_EVENT_FORMAT);","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"bernardboey"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"bernardboey"},"content":"            task \u003d new Event(description, Parser.parseDateTime(at.trim()));","lastModifiedDate":"2021-09-30"},{"lineNumber":154,"author":{"gitId":"bernardboey"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":155,"author":{"gitId":"bernardboey"},"content":"        case Deadline.TASK_TYPE_ICON:","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"bernardboey"},"content":"            final String by \u003d taskDetailsMatcher.group(Parser.CAPTURING_GROUP_BY);","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"bernardboey"},"content":"            if (description \u003d\u003d null || description.isBlank() || by \u003d\u003d null || by.isBlank()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"bernardboey"},"content":"                throw new DukeException(MESSAGE_UNRECOGNISED_DEADLINE_FORMAT);","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"bernardboey"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"bernardboey"},"content":"            task \u003d new Deadline(description, Parser.parseDateTime(by.trim()));","lastModifiedDate":"2021-09-30"},{"lineNumber":161,"author":{"gitId":"bernardboey"},"content":"            break;","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"bernardboey"},"content":"        default:","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(String.format(MESSAGE_UNRECOGNISED_TASK_TYPE_ICON, taskTypeIcon));","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"bernardboey"},"content":"        if (isDone.equals(SYMBOL_TASK_DONE)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"bernardboey"},"content":"            task.setAsDone();","lastModifiedDate":"2021-09-27"},{"lineNumber":167,"author":{"gitId":"bernardboey"},"content":"        } else if (!isDone.equals(SYMBOL_TASK_NOT_DONE)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"bernardboey"},"content":"            throw new DukeException(String.format(MESSAGE_UNRECOGNISED_TASK_STATUS_ICON, isDone));","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":170,"author":{"gitId":"bernardboey"},"content":"        return task;","lastModifiedDate":"2021-09-27"},{"lineNumber":171,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":172,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":173,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"bernardboey"},"content":"     * Saves task data into the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":175,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"bernardboey"},"content":"     * @param tasks Task list to be saved.","lastModifiedDate":"2021-10-01"},{"lineNumber":177,"author":{"gitId":"bernardboey"},"content":"     * @throws StorageException If there is an error accessing the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"bernardboey"},"content":"    public void saveData(TaskList tasks) throws StorageException {","lastModifiedDate":"2021-09-27"},{"lineNumber":180,"author":{"gitId":"bernardboey"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":181,"author":{"gitId":"bernardboey"},"content":"            Files.createDirectories(path.getParent());","lastModifiedDate":"2021-09-27"},{"lineNumber":182,"author":{"gitId":"bernardboey"},"content":"            Files.write(path, formatTasksAsDataOutput(tasks));","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"bernardboey"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":184,"author":{"gitId":"bernardboey"},"content":"            throw new StorageException(String.format(MESSAGE_DATA_FILE_ACCESS_ERROR, path, e.getMessage()));","lastModifiedDate":"2021-10-01"},{"lineNumber":185,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":188,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":189,"author":{"gitId":"bernardboey"},"content":"     * Formats a task list as per how it should be saved in the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":190,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":191,"author":{"gitId":"bernardboey"},"content":"     * @param taskList Task list to be formatted.","lastModifiedDate":"2021-10-01"},{"lineNumber":192,"author":{"gitId":"bernardboey"},"content":"     * @return Formatted task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":193,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":194,"author":{"gitId":"bernardboey"},"content":"    private List\u003cString\u003e formatTasksAsDataOutput(TaskList taskList) {","lastModifiedDate":"2021-09-29"},{"lineNumber":195,"author":{"gitId":"bernardboey"},"content":"        final ArrayList\u003cTask\u003e tasks \u003d taskList.getAllTasks();","lastModifiedDate":"2021-09-29"},{"lineNumber":196,"author":{"gitId":"bernardboey"},"content":"        return tasks.stream()","lastModifiedDate":"2021-09-29"},{"lineNumber":197,"author":{"gitId":"bernardboey"},"content":"                .map(this::formatTaskAsDataOutput)","lastModifiedDate":"2021-09-29"},{"lineNumber":198,"author":{"gitId":"bernardboey"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-29"},{"lineNumber":199,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":200,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":202,"author":{"gitId":"bernardboey"},"content":"     * Formats a task as per how it should be saved in the data file.","lastModifiedDate":"2021-10-01"},{"lineNumber":203,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":204,"author":{"gitId":"bernardboey"},"content":"     * @param task Task to be formatted.","lastModifiedDate":"2021-10-01"},{"lineNumber":205,"author":{"gitId":"bernardboey"},"content":"     * @return Formatted task string.","lastModifiedDate":"2021-10-01"},{"lineNumber":206,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":207,"author":{"gitId":"bernardboey"},"content":"    private String formatTaskAsDataOutput(Task task) {","lastModifiedDate":"2021-09-29"},{"lineNumber":208,"author":{"gitId":"bernardboey"},"content":"        final StringBuilder taskStringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-09-29"},{"lineNumber":209,"author":{"gitId":"bernardboey"},"content":"        taskStringBuilder.append(task.getTaskTypeIcon()).append(\" \");","lastModifiedDate":"2021-09-29"},{"lineNumber":210,"author":{"gitId":"bernardboey"},"content":"        taskStringBuilder.append(task.isDone() ? SYMBOL_TASK_DONE : SYMBOL_TASK_NOT_DONE).append(\" \");","lastModifiedDate":"2021-09-29"},{"lineNumber":211,"author":{"gitId":"bernardboey"},"content":"        taskStringBuilder.append(task.getDescription()).append(\" \");","lastModifiedDate":"2021-09-29"},{"lineNumber":212,"author":{"gitId":"bernardboey"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2021-09-29"},{"lineNumber":213,"author":{"gitId":"bernardboey"},"content":"            final String deadline \u003d ((Deadline) task).getBy().format(Parser.DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2021-09-30"},{"lineNumber":214,"author":{"gitId":"bernardboey"},"content":"            taskStringBuilder.append(Parser.DELIMITER_BY).append(\" \").append(deadline);","lastModifiedDate":"2021-09-29"},{"lineNumber":215,"author":{"gitId":"bernardboey"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2021-09-29"},{"lineNumber":216,"author":{"gitId":"bernardboey"},"content":"            final String eventDateTime \u003d ((Event) task).getAt().format(Parser.DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2021-09-30"},{"lineNumber":217,"author":{"gitId":"bernardboey"},"content":"            taskStringBuilder.append(Parser.DELIMITER_AT).append(\" \").append(eventDateTime);","lastModifiedDate":"2021-09-29"},{"lineNumber":218,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":219,"author":{"gitId":"bernardboey"},"content":"        return taskStringBuilder.toString();","lastModifiedDate":"2021-09-29"},{"lineNumber":220,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":221,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":222,"author":{"gitId":"bernardboey"},"content":"    /** Signals that some error occurred while trying to load or store the data file. */","lastModifiedDate":"2021-09-27"},{"lineNumber":223,"author":{"gitId":"bernardboey"},"content":"    public static class StorageException extends Exception {","lastModifiedDate":"2021-09-27"},{"lineNumber":224,"author":{"gitId":"bernardboey"},"content":"        public StorageException(String message) {","lastModifiedDate":"2021-09-27"},{"lineNumber":225,"author":{"gitId":"bernardboey"},"content":"            super(message);","lastModifiedDate":"2021-09-27"},{"lineNumber":226,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":227,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":228,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":228}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" * Represents a task that needs to be done before a specific date/time.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    public static final String TASK_TYPE_ICON \u003d \"D\";","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    /** Deadline for the task (date/time) */","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     * Creates a task with the specified description and deadline.","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"     * @param by Deadline for the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"        super(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"     * Returns the deadline for the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"     * @return Deadline for the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"        return by;","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"    public String getTaskTypeIcon() {","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"        return TASK_TYPE_ICON;","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"     * Returns a string representation of the task (consisting of the deadline, as well as the string representation","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"     * from the parent class).","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"     * @return A string representation of the deadline task.","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"        return super.toString() + \" (by: \" + by.format(Ui.DATE_TIME_OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"bernardboey":50}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" * Represents a task that starts at a specific time.","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    public static final String TASK_TYPE_ICON \u003d \"E\";","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    /** Date and time of the event */","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"    private final LocalDateTime at;","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     * Creates a task with the specified description and event date/time.","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"     * @param description Description of the event.","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"     * @param at Date and time of the event.","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"    public Event(String description, LocalDateTime at) {","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"        super(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"     * Returns the event date and time.","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"     * @return Event date and time.","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"    public LocalDateTime getAt() {","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"        return at;","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"    public String getTaskTypeIcon() {","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"        return TASK_TYPE_ICON;","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"     * Returns a string representation of the event (consisting of the event date and time, as well as the string","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"     * representation from the parent class).","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"     * @return A string representation of the event.","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"        return super.toString() + \" (at: \" + at.format(Ui.DATE_TIME_OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"bernardboey":50}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":" * Represents a task.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"    private final String description;","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"    /** Whether the task has been completed */","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"    private boolean isDone;","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"     * Creates a task with the specified description.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"     * By default, task is not yet completed.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"        this.description \u003d description.trim();","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"     * Returns the status icon for the task (based on whether it is completed).","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"     * The icon is a string of length 1 (\"X\" if completed, or \" \" if not).","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"     * @return Status icon for the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"     * Returns the icon for the type of task.","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"     * @return Icon for the type of task.","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"    public abstract String getTaskTypeIcon();","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"     * Returns the description of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"     * @return Description of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"        return description;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"     * Returns whether the task is completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"     * @return True if the task has been marked as completed; false otherwise.","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"        return isDone;","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"    /** Marks task as completed */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"    public void setAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"     * Returns a string representation of the task (consisting of the task type icon, status icon and description).","lastModifiedDate":"2021-09-15"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"bernardboey"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"bernardboey"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"bernardboey"},"content":"        return String.format(\"[%s][%s] %s\", getTaskTypeIcon(), getStatusIcon(), getDescription());","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"bernardboey":71}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.task;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":" * Represents a task that does not have any date/time attached to it.","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"    public static final String TASK_TYPE_ICON \u003d \"T\";","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"     * Creates a task with the specified description.","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"        super(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    public String getTaskTypeIcon() {","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"        return TASK_TYPE_ICON;","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"bernardboey":22}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":" * Represents the task list and contains methods to add and remove tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"public class TaskList {","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"    /** List of Task objects */","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"     * Constructs TaskList object with no tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"     * Adds task to the internal tasklist.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"     * Removes task from the internal tasklist.","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"     * @param task Task to be removed.","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"    public void removeTask(Task task) {","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"        tasks.remove(task);","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"     * Gets task based on the given {@code index}.","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"     * @param index Index of the task to be retrieved (starting from 0).","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"     * @return Task at the given index.","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"     * @throws IndexOutOfBoundsException If given index is out of bounds.","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"    public Task getTask(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"     * Gets all tasks from the internal tasklist.","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"     * @return A copy of the list of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"    public ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"        return new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"     * Returns number of tasks in the internal tasklist.","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"     * @return Number of tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"bernardboey"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":67}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"package duke.ui;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"/**","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":" * Text UI of the application.","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":" */","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"public class Ui {","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"    private static final String INDENTED_HORIZONTAL_LINE \u003d \" \".repeat(4) + \"_\".repeat(60);","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"    private static final String LINE_PREFIX \u003d \" \".repeat(5);","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"    /** Platform independent line separator. */","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_GREETING \u003d \"Hello! I\u0027m Duke\\n\" + \"%1$s\\n\" + \"What can I do for you?\";","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_DATA_FILE_NEW \u003d \"No data file found. Will store data in new file: \u0027%1$s\u0027\";","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"    private static final String MESSAGE_DATA_FILE_EXISTING \u003d \"Data file found. Using data from: \u0027%1$s\u0027\";","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"    private static final String DATE_OUTPUT_FORMAT \u003d \"MMM d yyyy\";","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"    private static final String TIME_OUTPUT_FORMAT \u003d \"h.mma\";","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"    private static final String DATE_TIME_OUTPUT_FORMAT \u003d DATE_OUTPUT_FORMAT + \" \" + TIME_OUTPUT_FORMAT;","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"    public static final DateTimeFormatter DATE_OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_OUTPUT_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"    public static final DateTimeFormatter DATE_TIME_OUTPUT_FORMATTER \u003d","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"            DateTimeFormatter.ofPattern(DATE_TIME_OUTPUT_FORMAT);","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"     * Reads input commands from the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"     * Ignores blank lines and trims input command.","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"     * @return Trimmed input command.","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"    public String getUserInput() {","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"        String line \u003d SCANNER.nextLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"        // Ignore blank lines","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"bernardboey"},"content":"        while (line.trim().isEmpty()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"bernardboey"},"content":"            line \u003d SCANNER.nextLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"bernardboey"},"content":"        return line.trim();","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"bernardboey"},"content":"     * Prints out the specified text formatted as a block.","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"bernardboey"},"content":"     * Horizontal lines will be printed before and after the","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"bernardboey"},"content":"     * specified text, and the text will be indented.","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"bernardboey"},"content":"     * @param text Text to be printed out.","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"bernardboey"},"content":"    public void showToUser(String text) {","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"bernardboey"},"content":"        System.out.println(INDENTED_HORIZONTAL_LINE);","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"bernardboey"},"content":"        System.out.println(addPrefixAndReplaceNewline(text));","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"bernardboey"},"content":"        System.out.println(INDENTED_HORIZONTAL_LINE);","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"bernardboey"},"content":"        System.out.println();","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"bernardboey"},"content":"     * Prints out greeting message.","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"bernardboey"},"content":"     * Indicates where the data file is located, and whether a new file is being used.","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"bernardboey"},"content":"     * @param path Path of the file where the data is stored in.","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"bernardboey"},"content":"     * @param isUsingNewFile Whether a new file is being used (because an existing file cannot be found).","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"bernardboey"},"content":"    public void showGreeting(String path, boolean isUsingNewFile) {","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"bernardboey"},"content":"        final String dataFileMessage \u003d String.format(","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"bernardboey"},"content":"                (isUsingNewFile ? MESSAGE_DATA_FILE_NEW : MESSAGE_DATA_FILE_EXISTING), path);","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"bernardboey"},"content":"        showToUser(String.format(MESSAGE_GREETING, dataFileMessage));","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"bernardboey"},"content":"     * Adds {@link #LINE_PREFIX} to the start of each line of {@code text}, and replaces newline characters with the","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"bernardboey"},"content":"     * platform independent line separator ({@link #LINE_SEPARATOR}).","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"bernardboey"},"content":"     * @param text Text to be processed.","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"bernardboey"},"content":"     * @return Processed text.","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"bernardboey"},"content":"    private String addPrefixAndReplaceNewline(String text) {","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"bernardboey"},"content":"        String[] lines \u003d text.split(\"\\n\");","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"bernardboey"},"content":"        for (int i \u003d 0; i \u003c lines.length; i++) {","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"bernardboey"},"content":"            lines[i] \u003d LINE_PREFIX + lines[i];","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"bernardboey"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"bernardboey"},"content":"        return String.join(LINE_SEPARATOR, lines);","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"bernardboey"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"bernardboey"},"content":"     * Formats a task as an indexed list item.","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"bernardboey"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"bernardboey"},"content":"     * @param index Index for the given task.","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"bernardboey"},"content":"     * @param task Task item to be formatted.","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"bernardboey"},"content":"     * @return Formatted indexed list item.","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"bernardboey"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"bernardboey"},"content":"    public static String formatTaskForTaskList(int index, Task task) {","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"bernardboey"},"content":"        return String.format(\"%d.%s\", index, task);","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"bernardboey"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"bernardboey"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"bernardboey":96}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"bernardboey"},"content":"todo borrow book","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"bernardboey"},"content":"deadline return book /by 2021-09-26 1800","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"bernardboey"},"content":"event project meeting /at 2021-10-04 1400","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"bernardboey"},"content":"todo clean my room","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"deadline complete project assignment /by 2021-08-05 2359","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"bernardboey"},"content":"event dinner with friends /at 2021-10-01 1900","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"bernardboey"},"content":"done 1","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"done 6","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"done 3","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"done 4","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"bernardboey"},"content":"delete 3","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"bernardboey"},"content":"list","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"bernardboey"},"content":"find book","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"bernardboey"},"content":"find room","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"bernardboey"},"content":"todo","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"bernardboey"},"content":"event event without date and time","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"bernardboey"},"content":"deadline task without deadline","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"bernardboey"},"content":"event /at 2021-10-04 1400","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"bernardboey"},"content":"deadline /by 2021-10-04 1400","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"bernardboey"},"content":"event event with wrong datetime format /at Sun 2pm","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"bernardboey"},"content":"deadline deadline with wrong datetime format /by Sun 2pm","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"bernardboey"},"content":"date 2021-10-01","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"bernardboey"},"content":"date 2021-01-01","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"bernardboey"},"content":"date Sunday","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"bernardboey"},"content":"blah","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"bernardboey"},"content":"bye","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"bernardboey":37}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"bernardboey"},"content":"REM delete data from previous run","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"bernardboey"},"content":"if exist data rmdir /s /q data","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"bernardboey"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bernardboey":5,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"bernardboey"},"content":"# delete data from previous run","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"bernardboey"},"content":"if [ -e \"./data\" ]","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"bernardboey"},"content":"then","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"bernardboey"},"content":"    rm -rf data","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"bernardboey"},"content":"fi","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"bernardboey"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bernardboey":7,"-":38}}]
