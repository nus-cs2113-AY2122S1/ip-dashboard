[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"# Duke User Guide","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"## Introduction","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"Duke is a Personal Assistant Chatbot that helps a person keep track of various things!","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"### Feature: Add task as \"to do\"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"**Description of feature:** Add daily tasks that do not have a specified time to be done by.","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"**Format of command:** `to do [task]`","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"* `task` can be any string of characters.","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"**Examples:** ","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"`to do run`| I can do that! I have added [run] to your task list!","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"`to do laundry`| I can do that! I have added [laundry] to your task list!","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"\u003e Current Task list:","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"\u003e 1. [T][ ] run ","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"\u003e 2. [T][ ] laundry","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"### Feature: Add task as \"Deadline\"","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"**Description of the feature:** Add tasks that have a deadline it should be completed by.","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"**Format of command:** `deadline [deadlineName] /by [date]`","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"* `deadlineName` can be any string of characters.","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"* `date` is in the format [dd MM yyyy hh:mm].","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"**Examples:**","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"`deadline assignment /by 02 06 2021 14:02`| I can do that! I have added [assignment] to your task list!","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"`deadline cg2027 /by 03 09 2021 00:00`| I can do that! I have added [cg2027] to your task list!","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"\u003e Current Task list:","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"\u003e 1. [T][ ] run","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"\u003e 2. [T][ ] laundry","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"\u003e 3. [D][ ] assignment (by:02 Jun 2021 02:02 PM)","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"\u003e 4. [D][ ] cg2027 (by:03 Sep 2021 12:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"### Feature: Add task as \"Event\"","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"**Description of the feature:** Add events to the to do list.","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"**Format of command:** `event [eventName] /at [date]`","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"* `eventName` can be any string of characters.","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"* `date` is in the format [dd MM yyyy hh:mm].","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"**Examples:**","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"`event 24km run /at 19 02 2021 06:00`| I can do that! I have added [running a marathon] to your task list!","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"`event conference /at 09 04 2021 08:00`| I can do that! I have added [conference] to your task list!","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"Yitching"},"content":"\u003e Current Task list:","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"Yitching"},"content":"\u003e 1. [T][ ] run","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"Yitching"},"content":"\u003e 2. [T][ ] laundry","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"Yitching"},"content":"\u003e 3. [D][ ] assignment (by:02 Jun 2021 02:02 PM)","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"Yitching"},"content":"\u003e 4. [D][ ] cg2027 (by:03 Sep 2021 12:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"Yitching"},"content":"\u003e 5. [E][ ] 24km run (at:19 Feb 2021 06:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"Yitching"},"content":"\u003e 6. [E][ ] conference (at:09 Apr 2021 08:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"Yitching"},"content":"### Feature: Mark tasks as done","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"Yitching"},"content":"**Description of the feature:** Mark completed tasks as done.","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"Yitching"},"content":"**Format of command:** `done [taskNumber]`","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"Yitching"},"content":"**Examples:**","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"Yitching"},"content":"`done 1 2`| Nice! I\u0027ve marked this task as done: \u003cbr\u003e 1.[T][X] run \u003cbr\u003eNice! I\u0027ve marked this task as done: \u003cbr\u003e 2.[T][X] Laundry","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"Yitching"},"content":"`done 6`| Nice! I\u0027ve marked this task as done: \u003cbr\u003e 6.[E][X] conference (at:09 Apr 2021 08:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"Yitching"},"content":"\u003e Current Task list:","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"Yitching"},"content":"\u003e 1. [T][X] run","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"Yitching"},"content":"\u003e 2. [T][X] laundry","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"Yitching"},"content":"\u003e 3. [D][ ] assignment (by:02 Jun 2021 02:02 PM)","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"Yitching"},"content":"\u003e 4. [D][ ] cg2027 (by:03 Sep 2021 12:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"Yitching"},"content":"\u003e 5. [E][ ] 24km run (at:19 Feb 2021 06:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"Yitching"},"content":"\u003e 6. [E][ ] conference (at:09 Apr 2021 08:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"Yitching"},"content":"### Feature: Delete task","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"Yitching"},"content":"**Description of the feature:** Delete tasks from the to do list.","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"Yitching"},"content":"**Format of command:** `delete [taskNumber]`","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"Yitching"},"content":"* `taskNumber` should be a number within the number of tasks in the task list.","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"Yitching"},"content":"**Examples:**","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"Yitching"},"content":"`delete 3 5`| I got you! I\u0027ve deleted this task: \u003cbr\u003e 3.[D][ ] assignment (by:02 Jun 2021 02:02 PM) \u003cbr\u003e I got you! I\u0027ve deleted this task: \u003cbr\u003e 5.[E][ ] 24km run (at:19 Feb 2021 06:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"Yitching"},"content":"`delete 1`| I got you! I\u0027ve deleted this task: \u003cbr\u003e 1.[T][X] run","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"Yitching"},"content":"\u003e Current Task list:","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"Yitching"},"content":"\u003e 1. [T][X] laundry","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"Yitching"},"content":"\u003e 2. [D][ ] cg2027 (by:03 Sep 2021 12:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"Yitching"},"content":"\u003e 3. [E][ ] conference (at:09 Apr 2021 08:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"Yitching"},"content":"### Feature: View tasks in the to do list","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"Yitching"},"content":"**Description of the feature:** View all the tasks that have been added to the to do list.","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"Yitching"},"content":"**Format of command:** `list`","lastModifiedDate":"2021-09-22"},{"lineNumber":113,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"Yitching"},"content":"**Examples:**","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":118,"author":{"gitId":"Yitching"},"content":"`list`| 1. [T][X] laundry \u003cbr\u003e 2. [D][ ] cg2027 (by:03 Sep 2021 12:00 AM) \u003cbr\u003e 3. [E][ ] conference (at:09 Apr 2021 08:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":119,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"Yitching"},"content":"### Feature: Search for tasks in the to do list","lastModifiedDate":"2021-09-22"},{"lineNumber":121,"author":{"gitId":"Yitching"},"content":"**Description of the feature:** Search through tasks on the task list.","lastModifiedDate":"2021-09-22"},{"lineNumber":122,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":123,"author":{"gitId":"Yitching"},"content":"**Format of command:** `find [keywords]`","lastModifiedDate":"2021-09-22"},{"lineNumber":124,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":125,"author":{"gitId":"Yitching"},"content":"* `keywords` can be any string of characters.","lastModifiedDate":"2021-09-22"},{"lineNumber":126,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":127,"author":{"gitId":"Yitching"},"content":"**Examples:**","lastModifiedDate":"2021-09-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":129,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":130,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"Yitching"},"content":"`find cg2027`| Search found! \u003cbr\u003e 1.[D][ ] cg2027 (by:03 Sep 2021 12:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":132,"author":{"gitId":"Yitching"},"content":"`find conf`| Search found! \u003cbr\u003e 1.[E][ ] conference (at:09 Apr 2021 08:00 AM)","lastModifiedDate":"2021-09-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"Yitching"},"content":"### Feature: End programme","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"Yitching"},"content":"**Format of command:** `bye`","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"Yitching"},"content":"**Description of the feature:** Terminate Duke.","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"Yitching"},"content":"**Examples:**","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"Yitching"},"content":"**Command** | **Expected Output**","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"Yitching"},"content":"`bye`| Bye! Hope to see you again soon!","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"Yitching"},"content":"## Summary of Commands ","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":147,"author":{"gitId":"Yitching"},"content":"**Command** | **Examples**","lastModifiedDate":"2021-09-22"},{"lineNumber":148,"author":{"gitId":"Yitching"},"content":"------------|----------------------","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"Yitching"},"content":"`to do [task]`| `to do run` \u003cbr\u003e `to do laundry`","lastModifiedDate":"2021-09-22"},{"lineNumber":150,"author":{"gitId":"Yitching"},"content":"`deadline [deadlineName] /by [date]` | `deadline assignment /by 02 06 2021 14:02` \u003cbr\u003e `deadline cg2027 /by 03 09 2021 00:00`","lastModifiedDate":"2021-09-22"},{"lineNumber":151,"author":{"gitId":"Yitching"},"content":"`event [eventName] /at [date]` | `event 24km run /at 19 02 2021 06:00` \u003cbr\u003e `event conference /at 09 04 2021 08:00`|","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"Yitching"},"content":"`done [taskNumber]` | `done 1 2` \u003cbr\u003e `done 6`","lastModifiedDate":"2021-09-22"},{"lineNumber":153,"author":{"gitId":"Yitching"},"content":"`delete [taskNumber]` |`delete 3 5` \u003cbr\u003e `delete 1`|","lastModifiedDate":"2021-09-22"},{"lineNumber":154,"author":{"gitId":"Yitching"},"content":"`list` | `list`","lastModifiedDate":"2021-09-22"},{"lineNumber":155,"author":{"gitId":"Yitching"},"content":"`find [keywords]` | `find cg2027` \u003cbr\u003e `find conf`","lastModifiedDate":"2021-09-22"},{"lineNumber":156,"author":{"gitId":"Yitching"},"content":"`bye` | `bye`","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"Yitching":135,"-":21}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import duke.tasklist.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"import duke.storage.DataManager;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"public class Duke {","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"    public static final String FILE_PATH \u003d \"duke.txt\";","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"        Duke.run();","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"    /** Runs the program until termination */","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"    public static void run() {","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"        start();","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"        parseCommandsToDuke(in, taskList, userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"        end();","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"    /** Prints the welcome message. */","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"    public static void start() {","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"        Ui.printIntro();","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"     * Reads the user command and executes it, until the user issues the exit command","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"     * @param in object of scanner","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"    private static void parseCommandsToDuke(Scanner in, ArrayList\u003cTask\u003e taskList, String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"        DataManager.printPreviousFileContents(FILE_PATH, taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"        Parser.parseCommand(in, taskList, userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"        DataManager.storeCurrentList(FILE_PATH, taskList);","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"    /** Prints the exit message. */","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"    public static void end() {","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"        Ui.printOutro();","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Yitching":48,"-":2}},{"path":"src/main/java/duke/Time.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import java.text.DateFormat;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"import java.util.Date;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"import java.util.Locale;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"/** Converter for Duke that deals with converting the date and time entered by user to a specified, more readable format */","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"public class Time {","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"     * Converts the date from user input from \"dd MM yyyy hh:mm\" format to \"dd MMM yyyy hh:mm a\"","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"     * @param time date/time entered by the user in the format \"dd MM yyyy hh:mm\" to be converted","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"     * @return date/time in specified format of \"dd MMM yyyy hh:mm a\"","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"    public static String convertDate(String time) {","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"        DateFormat originalFormat \u003d new SimpleDateFormat(\"dd MM yyyy hh:mm\", Locale.ENGLISH);","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"        DateFormat targetFormat \u003d new SimpleDateFormat(\"dd MMM yyyy hh:mm a\");","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"            Date date \u003d originalFormat.parse(time);","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"            return targetFormat.format(date);","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"            return \"Invalid date entered! Please enter the date in the following format: [dd MM yyyy hh:mm]. You have entered: \\\"\" +","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"                    time + \"\\\"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"     * Validates the entered date","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"     * @param time date/time entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"     * @return true if date/time is valid and entered in the correct format","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"    public static Boolean isDateValid(String time) {","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"        DateFormat originalFormat \u003d new SimpleDateFormat(\"dd MM yyyy hh:mm\", Locale.ENGLISH);","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"            Date date \u003d originalFormat.parse(time);","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"            return true;","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"            System.out.println(\"Invalid date entered! Please enter the date in the following format: [dd MM yyyy hh:mm]. You have entered: \\\"\" +","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"                    time + \"\\\"\");","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"            return false;","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"Yitching":48}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"     * Throws duke exception if user inputs invalid command","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"     * @param message message to be printed depending on the type of task and type of error for the user to","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"     *                rectify and input a valid command that duke can understand.","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"    public DukeException (String message) {","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"        super(message);","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"Yitching":14}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.parser;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import duke.tasklist.TaskManager;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"import duke.tasklist.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"public class Parser extends TaskManager {","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_HELP \u003d \"help\";","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_TO_DO \u003d \"to do \";","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_DEADLINE \u003d \"deadline \";","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_EVENT \u003d \"event \";","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_LIST \u003d \"list\";","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_DONE \u003d \"done \";","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_FIND \u003d \"find \";","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"     * Parses user input into the different task list actions for execution.","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"     * @param in object of scanner","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"    public static void parseCommand(Scanner in, ArrayList\u003cTask\u003e taskList, String userInput) {","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"        while (!userInput.startsWith(STRING_BYE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"            userInput \u003d in.nextLine().toLowerCase();","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"            try {","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"                if (userInput.contains(STRING_HELP)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"                    printHelpList();","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_TO_DO)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"                    addTaskAsToDo(taskList, userInput, false);","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_DEADLINE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"                    addTaskAsDeadline(taskList, userInput, false);","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_EVENT)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"                    addTaskAsEvent(taskList, userInput, false);","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_LIST)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"                    printTaskList(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_DELETE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"                    deleteTaskFromToDo(taskList, userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_DONE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"                    markTaskAsDone(taskList, userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_BYE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"                } else if (userInput.startsWith(STRING_FIND)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"                    find(taskList,userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"                } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"                    printErrorForInvalidCommand(userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"                }","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"            } catch (DukeException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"Yitching":60}},{"path":"src/main/java/duke/storage/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import duke.tasklist.TaskManager;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"import duke.tasklist.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"import java.io.File;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"public class DataManager {","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"     * Save tasks to a text file","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"     * @param filePath name of the text file that tasks are saved in","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"     * @throws IOException if the file does not exist","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"    public static void appendToFile(String filePath, ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath, true);","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"        // Format of duke.txt file: D|run|2pm|","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"            fileWriter.write(task.getTaskType() + \"|\" + task.getDescription() + \"|\" + task.getDeadline() + \"|\" + task.getStatusIcon() + System.lineSeparator());","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"        fileWriter.close();","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"     * Read tasks from the text file if it exists and adds the tasks into the current working task list","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"     * @param filePath name of the text file that tasks are saved in","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"     * @throws FileNotFoundException if the file does not exist","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if the task cannot be added into the task list due to formatting issues","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"    public static void readFileContents(String filePath, ArrayList\u003cTask\u003e taskList) throws FileNotFoundException, DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"        File dukeTaskList \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"        Scanner scanner \u003d new Scanner(dukeTaskList); // create a Scanner using the File as the source","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"        int currentIndex \u003d 0;","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"            String fieldsInTextFile \u003d scanner.nextLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"            String[] params \u003d fieldsInTextFile.split(\"\\\\|\");","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"            switch (params[0]) {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"            case \"T\":","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"                TaskManager.addTaskAsToDo(taskList, params[1], true);","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"            case \"D\":","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"                TaskManager.addTaskAsDeadline(taskList, \"deadline \" + params[1] + \"/by\" + params[2], true);","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"            case \"E\":","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"                TaskManager.addTaskAsEvent(taskList, \"event \" + params[1] + \"/at\" + params[2], true);","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"                break;","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"            if (params[3].equals(\"X\")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"                taskList.get(currentIndex).updateIsDone();","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"Yitching"},"content":"            currentIndex++;","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"Yitching"},"content":"     * Checks if the file exists and for tasks to be added","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"Yitching"},"content":"     * @param filePath name of the text file that tasks are saved in","lastModifiedDate":"2021-09-19"},{"lineNumber":69,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"Yitching"},"content":"    public static void printPreviousFileContents(String filePath, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"Yitching"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"Yitching"},"content":"            DataManager.readFileContents(filePath, taskList);","lastModifiedDate":"2021-09-14"},{"lineNumber":74,"author":{"gitId":"Yitching"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"Yitching"},"content":"            System.out.println(\"No data detected! I see you are a new user...Starting afresh!\");","lastModifiedDate":"2021-09-14"},{"lineNumber":76,"author":{"gitId":"Yitching"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"Yitching"},"content":"            System.out.println(\"Duke Exception thrown!\");","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":80,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"Yitching"},"content":"     * At the end of the program, updates and saves the current task list into the text file to be retrieved","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"Yitching"},"content":"     * when program is ran again","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"Yitching"},"content":"     * @param filePath name of the text file that tasks are saved in","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"Yitching"},"content":"    public static void storeCurrentList(String filePath, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"Yitching"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"Yitching"},"content":"            PrintWriter printWriter \u003d new PrintWriter(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"Yitching"},"content":"            printWriter.write(\"\");","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"Yitching"},"content":"            printWriter.flush();","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"Yitching"},"content":"            printWriter.close();","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"Yitching"},"content":"            DataManager.appendToFile(filePath, taskList);","lastModifiedDate":"2021-09-14"},{"lineNumber":95,"author":{"gitId":"Yitching"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"Yitching"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-14"},{"lineNumber":97,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":98,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"Yitching":99}},{"path":"src/main/java/duke/tasklist/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import duke.Time;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"    public static final int INDEX_OF_DEADLINE \u003d 8;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"    protected String deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"     * Constructor that takes in only the description of the Deadline to be added to to do list and removes the","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"     * task type as well as other white spaces.","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"     * @param description Deadline to be added to to do list","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"    public Deadline(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"        super(description.substring(description.indexOf(\"deadline\") + INDEX_OF_DEADLINE, description.indexOf(\"/\")).trim());","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"        deadline \u003d description.substring(description.indexOf(\"/\")).replace(\"/by\", \"\").trim();","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"     * Returns the task type \"D\" to represent task as a Deadline","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"     * @return task type as \"D\"","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"        return (\"D\");","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"     * Returns the date and time of the Deadline specified by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"     * @return date and time of the Deadline","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"    public String getDeadline() {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"        return (deadline);","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"     * Converts the date from user input from \"dd MM yyyy hh:mm\" format to \"dd MMM yyyy hh:mm a\"","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"     * @return time of the Deadline in a specified format of \"dd MMM yyyy hh:mm a\"","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"    public String convertDeadline() {","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"        return Time.convertDate(deadline);","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"     * Prints a message to allow the user to know that a Deadline has been successfully marked as done","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"     * @param taskNumber index of which the Deadline has been marked as done in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"    public void printMarkAsDoneMessage(int taskNumber) {","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"            + (taskNumber + 1) + \".[\" + getTaskType() + \"]\"","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"            + \"[\" + getStatusIcon() + \"] \" + description + \" (by:\" + convertDeadline() + \")\");","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"Yitching"},"content":"     * Prints each Deadline in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"Yitching"},"content":"     * @param listIndex position of the Deadline that is being printed in the task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Yitching"},"content":"    public void printIndividualTask(int listIndex) {","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"Yitching"},"content":"        System.out.println(listIndex + \".[\" + getTaskType() + \"]\"","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"Yitching"},"content":"            + \"[\" + getStatusIcon() + \"] \" + description + \" (by:\" + convertDeadline() + \")\");","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Yitching":72}},{"path":"src/main/java/duke/tasklist/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import duke.Time;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"    public static final int INDEX_OF_EVENT \u003d 5;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"    protected String deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"     * Constructor that takes in only the description of the Event to be added to to do list and removes the","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"     * task type as well as other white spaces.","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"     * @param description Event to be added to to do list","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"    public Event(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"        super(description.substring(description.indexOf(\"event\") + INDEX_OF_EVENT, description.indexOf(\"/\")).trim());","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"        deadline \u003d description.substring(description.indexOf(\"/\")).replace(\"/at\", \"\").trim();","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"     * Returns the task type \"E\" to represent task as an Event","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"     * @return task type as \"E\"","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"        return (\"E\");","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"     * Returns the time of the Event specified by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"     * @return time of an Event","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"    public String getDeadline() {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"        return (deadline);","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"     * Converts the date from user input from \"dd MM yyyy hh:mm\" format to \"dd MMM yyyy hh:mm a\"","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"     * @return time of the event in a specified format of \"dd MMM yyyy hh:mm a\"","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"    public String convertDeadline() {","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"        return Time.convertDate(deadline);","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"     * Prints a message to allow the user to know that an Event has been successfully marked as done","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"     * @param taskNumber index of which the Event has been marked as done in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"    public void printMarkAsDoneMessage(int taskNumber) {","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"            + (taskNumber + 1) + \".[\" + getTaskType() + \"]\"","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"            + \"[\" + getStatusIcon() + \"] \" + description + \" (at:\" + convertDeadline() + \")\");","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"Yitching"},"content":"     * Prints each Event in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"Yitching"},"content":"     * @param listIndex position of the Event that is being printed in the task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Yitching"},"content":"    public void printIndividualTask(int listIndex) {","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"Yitching"},"content":"        System.out.println(listIndex + \".[\" + getTaskType() + \"]\"","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"Yitching"},"content":"            + \"[\" + getStatusIcon() + \"] \" + description + \" (at:\" + convertDeadline() + \")\");","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Yitching":72}},{"path":"src/main/java/duke/tasklist/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"public class Task {","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"    protected String description;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"     * Constructor that takes in the description of the task to be added to to do list","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"     * @param description task to be added to to do list","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"    /** Update status of task if user chooses to mark task as done */","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"    public void updateIsDone() {","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"     * If status of task is done, then the function marks done task with an \u0027X\u0027","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"     * @return \u0027X\u0027 if task is done","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"     * Returns the task type if it exists","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"     * @return task type","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"        return (\"\");","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"     * Returns a date/time specified by the user if it exists","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"     * @return date/time of an event/deadline","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"    public String getDeadline() {","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"        return (\"\");","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"     * Returns the task description to be added to the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"     * @return description of task","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"    public String getDescription(){","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"        return description;","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"     * Prints a message to allow the user to know that a task has been successfully marked as done","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"Yitching"},"content":"     * @param taskNumber index of which the task has been marked as done in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"Yitching"},"content":"    public void printMarkAsDoneMessage(int taskNumber) {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"Yitching"},"content":"            + (taskNumber + 1) + \".[\" + getTaskType() + \"]\"","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"Yitching"},"content":"            + \"[\" + getStatusIcon() + \"] \" + description);","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"Yitching"},"content":"     * Prints each task in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"Yitching"},"content":"     * @param listIndex position of the task that is being printed in the task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"Yitching"},"content":"    public void printIndividualTask(int listIndex) {","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"Yitching"},"content":"        System.out.println(listIndex + \".[\" + getTaskType() + \"]\"","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"Yitching"},"content":"            + \"[\" + getStatusIcon() + \"] \" + description);","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Yitching"},"content":"    /** Prints a message to allow the user to know that a task has been successfully added to the task list. */","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"Yitching"},"content":"    public void printTaskAddedMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"I can do that! I have added [\" + description + \"] to your task list!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"Yitching"},"content":"     * Prints a message to allow the user to know that the task specified by the user has been successfully deleted from","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"Yitching"},"content":"     * the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"Yitching"},"content":"     * @param taskNumber index of the task which has been deleted from the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"Yitching"},"content":"    public void printTaskDeletedMessage(int taskNumber) {","lastModifiedDate":"2021-09-14"},{"lineNumber":92,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"I got you! I\u0027ve deleted this task:\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"Yitching"},"content":"            + (taskNumber + 1) + \".[\" + getTaskType() + \"]\"","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"Yitching"},"content":"            + \"[\" + getStatusIcon() + \"] \" + description);","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":97,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":98,"author":{"gitId":"Yitching"},"content":"     * Overriding the toString() function as a class function","lastModifiedDate":"2021-09-19"},{"lineNumber":99,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":100,"author":{"gitId":"Yitching"},"content":"     * @return description of the task to be added to the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":101,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":102,"author":{"gitId":"Yitching"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":103,"author":{"gitId":"Yitching"},"content":"        return description;","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":105,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"Yitching":105}},{"path":"src/main/java/duke/tasklist/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import duke.Time;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"import duke.utilities.Utilities;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"public class TaskManager extends Ui {","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"    public static final String INCORRECT_TASK_COMMAND \u003d \"Please specify a valid task to be added!\";","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"    public static final String INCORRECT_DEADLINE_COMMAND \u003d \"Please specify a valid task/deadline of completion!\";","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"    public static final String INCORRECT_EVENT_COMMAND \u003d \"Please specify a valid event/time of the event!\";","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"    public static final String INCORRECT_DONE_COMMAND \u003d \"Please specify the number of the task to be marked as done!\";","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"    public static final String INCORRECT_DELETE_COMMAND \u003d \"Please specify a valid number of the task to be deleted!\";","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"    public static final String INVALID_INDEX \u003d \"No number or Invalid number specified! Please specify the number on the list of the task you have completed!\";","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"    public TaskManager() {","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"     * Adds a task to the task list as an \"Event\" type task","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"     * @param isPrintingPreviousList boolean to check whether it is printing from the stored list to determine whether","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"     *                               to print the message that task has been successfully added. If true, then no","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"     *                               message would be printed as task was already previously added","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if there is an invalid time of event/task entered in the user input","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"    public static void addTaskAsEvent(ArrayList\u003cTask\u003e taskList, String userInput, Boolean isPrintingPreviousList) throws DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"        if (userInput.contains(\"/at\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"            Task taskAdded \u003d new Event(userInput);","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"            if (!taskAdded.toString().equals(\"\") \u0026\u0026 !taskAdded.getDeadline().equals(\"\") \u0026\u0026 Time.isDateValid(taskAdded.getDeadline())) {","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"                taskList.add(taskAdded);","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"                checkToPrintTaskAddedMessage(isPrintingPreviousList, taskAdded);","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"            } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"                throw new DukeException(INCORRECT_EVENT_COMMAND);","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"            throw new DukeException(INCORRECT_EVENT_COMMAND);","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"     * Adds a task to the task list as a \"Deadline\" type task","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"     * @param isPrintingPreviousList boolean to check whether it is printing from the stored list to determine whether","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"     *                               to print the message that task has been successfully added. If true, then no","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"     *                               message would be printed as task was already previously added","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if there is an invalid deadline/task entered in the user input","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"    public static void addTaskAsDeadline(ArrayList\u003cTask\u003e taskList, String userInput, Boolean isPrintingPreviousList) throws DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"        if (userInput.contains(\"/by\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"            Task taskAdded \u003d new Deadline(userInput);","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"            if (!taskAdded.toString().equals(\"\") \u0026\u0026 !taskAdded.getDeadline().equals(\"\") \u0026\u0026 Time.isDateValid(taskAdded.getDeadline())) {","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"Yitching"},"content":"                taskList.add(taskAdded);","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"Yitching"},"content":"                checkToPrintTaskAddedMessage(isPrintingPreviousList, taskAdded);","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"Yitching"},"content":"            } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"Yitching"},"content":"                throw new DukeException(INCORRECT_DEADLINE_COMMAND);","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"Yitching"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"Yitching"},"content":"            throw new DukeException(INCORRECT_DEADLINE_COMMAND);","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":71,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"Yitching"},"content":"     * Adds a task to the task list as a \"To do\" type task","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"Yitching"},"content":"     * @param isPrintingPreviousList boolean to check whether it is printing from the stored list to determine whether","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"Yitching"},"content":"     *                               to print the message that task has been successfully added. If true, then no","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"Yitching"},"content":"     *                               message would be printed as task was already previously added","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if there is an invalid/no task entered in the user input","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"Yitching"},"content":"    public static void addTaskAsToDo(ArrayList\u003cTask\u003e taskList, String userInput, Boolean isPrintingPreviousList) throws DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":82,"author":{"gitId":"Yitching"},"content":"        String task \u003d userInput.replace(\"to do \", \"\").trim();","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"Yitching"},"content":"        Task taskAdded \u003d new Todo(task);","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"Yitching"},"content":"        if (!task.equals(\"\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"Yitching"},"content":"            taskList.add(taskAdded);","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"Yitching"},"content":"            checkToPrintTaskAddedMessage(isPrintingPreviousList, taskAdded);","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"Yitching"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":88,"author":{"gitId":"Yitching"},"content":"            throw new DukeException(INCORRECT_TASK_COMMAND);","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":91,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"Yitching"},"content":"     * Checks whether it is the first round of iteration for which tasks from the previously saved","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"Yitching"},"content":"     * list. If it is, no task added message printed","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"Yitching"},"content":"     * @param isPrintingPreviousList Boolean to determine if it is the first round of iteration","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"Yitching"},"content":"     * @param taskAdded task added to the task list","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"Yitching"},"content":"    private static void checkToPrintTaskAddedMessage(Boolean isPrintingPreviousList, Task taskAdded) {","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"Yitching"},"content":"        if(!isPrintingPreviousList) {","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"Yitching"},"content":"            printTaskAddedConfirmation(taskAdded);","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"Yitching"},"content":"     * Deletes a task from the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":110,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if there is an invalid task number entered in the user input","lastModifiedDate":"2021-09-19"},{"lineNumber":111,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":112,"author":{"gitId":"Yitching"},"content":"    public static void deleteTaskFromToDo(ArrayList\u003cTask\u003e taskList, String userInput) throws DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"Yitching"},"content":"        int initialWordIndex \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":114,"author":{"gitId":"Yitching"},"content":"        int updateWordIndex \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"Yitching"},"content":"        boolean numberExists \u003d false;","lastModifiedDate":"2021-09-14"},{"lineNumber":116,"author":{"gitId":"Yitching"},"content":"        String[] splitTask \u003d Utilities.getStrings(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":118,"author":{"gitId":"Yitching"},"content":"        for (String word : splitTask) {","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"Yitching"},"content":"            if (Utilities.isValidNumber(word)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"Yitching"},"content":"                numberExists \u003d true;","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"Yitching"},"content":"                int finalWordIndex \u003d initialWordIndex - updateWordIndex;","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"Yitching"},"content":"                int taskNumber \u003d (Integer.parseInt(splitTask[finalWordIndex])) - 1;","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"Yitching"},"content":"                updateWordIndex \u003d updateWordIndexAfterDelete(taskList, updateWordIndex, taskNumber);","lastModifiedDate":"2021-09-22"},{"lineNumber":124,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"Yitching"},"content":"            initialWordIndex++;","lastModifiedDate":"2021-09-19"},{"lineNumber":126,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":127,"author":{"gitId":"Yitching"},"content":"        if (!numberExists) {","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"Yitching"},"content":"            throw new DukeException(INCORRECT_DELETE_COMMAND);","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":131,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":132,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":133,"author":{"gitId":"Yitching"},"content":"     * Updates index to check if user input another task to be deleted after current task has been deleted.","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"Yitching"},"content":"     * @param updateWordIndex Index of current word we are accessing from split user input","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"Yitching"},"content":"     * @param taskNumber index of task in the task list","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"Yitching"},"content":"     * @return index of next word to be deleted","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"Yitching"},"content":"    private static int updateWordIndexAfterDelete(ArrayList\u003cTask\u003e taskList, int updateWordIndex, int taskNumber) {","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"Yitching"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"Yitching"},"content":"            removeTaskFromTaskList(taskList, updateWordIndex, taskNumber);","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"Yitching"},"content":"            updateWordIndex++;","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"Yitching"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"Yitching"},"content":"            System.out.println(INCORRECT_DELETE_COMMAND);","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":147,"author":{"gitId":"Yitching"},"content":"        return updateWordIndex;","lastModifiedDate":"2021-09-22"},{"lineNumber":148,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":150,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":151,"author":{"gitId":"Yitching"},"content":"     * Performs the deletion of the task specified by the user from the task list","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":153,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-22"},{"lineNumber":154,"author":{"gitId":"Yitching"},"content":"     * @param updateWordIndex Index of current word we are accessing from split user input","lastModifiedDate":"2021-09-22"},{"lineNumber":155,"author":{"gitId":"Yitching"},"content":"     * @param taskNumber index of task in the task list","lastModifiedDate":"2021-09-22"},{"lineNumber":156,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":157,"author":{"gitId":"Yitching"},"content":"    private static void removeTaskFromTaskList(ArrayList\u003cTask\u003e taskList, int updateWordIndex, int taskNumber) {","lastModifiedDate":"2021-09-22"},{"lineNumber":158,"author":{"gitId":"Yitching"},"content":"        int originalTaskNumber \u003d taskNumber + updateWordIndex;","lastModifiedDate":"2021-09-22"},{"lineNumber":159,"author":{"gitId":"Yitching"},"content":"        printTaskDeletedConfirmation(taskList.get(taskNumber), originalTaskNumber);","lastModifiedDate":"2021-09-22"},{"lineNumber":160,"author":{"gitId":"Yitching"},"content":"        taskList.remove(taskNumber);","lastModifiedDate":"2021-09-22"},{"lineNumber":161,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":162,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":163,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":164,"author":{"gitId":"Yitching"},"content":"     * Marks a task in the task list as done","lastModifiedDate":"2021-09-19"},{"lineNumber":165,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":166,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":167,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":168,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if there is an invalid task number entered in the user input","lastModifiedDate":"2021-09-19"},{"lineNumber":169,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":170,"author":{"gitId":"Yitching"},"content":"    public static void markTaskAsDone(ArrayList\u003cTask\u003e taskList, String userInput) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":171,"author":{"gitId":"Yitching"},"content":"        int wordIndex \u003d 0;","lastModifiedDate":"2021-09-06"},{"lineNumber":172,"author":{"gitId":"Yitching"},"content":"        boolean numberExists \u003d false;","lastModifiedDate":"2021-09-06"},{"lineNumber":173,"author":{"gitId":"Yitching"},"content":"        String[] splitTask \u003d Utilities.getStrings(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":174,"author":{"gitId":"Yitching"},"content":"        for (String word : splitTask) {","lastModifiedDate":"2021-09-06"},{"lineNumber":175,"author":{"gitId":"Yitching"},"content":"            if (Utilities.isValidNumber(word)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":176,"author":{"gitId":"Yitching"},"content":"                numberExists \u003d true;","lastModifiedDate":"2021-09-06"},{"lineNumber":177,"author":{"gitId":"Yitching"},"content":"                int taskNumber \u003d (Integer.parseInt(splitTask[wordIndex])) - 1;","lastModifiedDate":"2021-09-06"},{"lineNumber":178,"author":{"gitId":"Yitching"},"content":"                try {","lastModifiedDate":"2021-09-06"},{"lineNumber":179,"author":{"gitId":"Yitching"},"content":"                    printTaskMarkAsDone(taskList, taskNumber);","lastModifiedDate":"2021-09-06"},{"lineNumber":180,"author":{"gitId":"Yitching"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-06"},{"lineNumber":181,"author":{"gitId":"Yitching"},"content":"                    System.out.println(INVALID_INDEX);","lastModifiedDate":"2021-09-06"},{"lineNumber":182,"author":{"gitId":"Yitching"},"content":"                }","lastModifiedDate":"2021-09-06"},{"lineNumber":183,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":184,"author":{"gitId":"Yitching"},"content":"            wordIndex++;","lastModifiedDate":"2021-09-06"},{"lineNumber":185,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":186,"author":{"gitId":"Yitching"},"content":"        if (!numberExists) {","lastModifiedDate":"2021-09-06"},{"lineNumber":187,"author":{"gitId":"Yitching"},"content":"            throw new DukeException(INCORRECT_DONE_COMMAND);","lastModifiedDate":"2021-09-06"},{"lineNumber":188,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":189,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":190,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":191,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":192,"author":{"gitId":"Yitching"},"content":"     * Performs search function","lastModifiedDate":"2021-09-19"},{"lineNumber":193,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":194,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":195,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":196,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if task containing keyword has been found but cannot be added into the search list","lastModifiedDate":"2021-09-19"},{"lineNumber":197,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":198,"author":{"gitId":"Yitching"},"content":"    public static void find(ArrayList\u003cTask\u003e taskList, String userInput) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":199,"author":{"gitId":"Yitching"},"content":"        String searchedTask \u003d userInput.replace(\"find \", \" \").trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":200,"author":{"gitId":"Yitching"},"content":"        ArrayList\u003cTask\u003e searchList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-19"},{"lineNumber":201,"author":{"gitId":"Yitching"},"content":"        int taskListIndex \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":202,"author":{"gitId":"Yitching"},"content":"        int searchListIndex \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":203,"author":{"gitId":"Yitching"},"content":"        boolean isFound \u003d isTaskFound(taskList, searchedTask);","lastModifiedDate":"2021-09-19"},{"lineNumber":204,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":205,"author":{"gitId":"Yitching"},"content":"        addTaskToSearchList(taskList, searchedTask, searchList, taskListIndex, searchListIndex);","lastModifiedDate":"2021-09-19"},{"lineNumber":206,"author":{"gitId":"Yitching"},"content":"        printValidSearchMessage(isFound);","lastModifiedDate":"2021-09-19"},{"lineNumber":207,"author":{"gitId":"Yitching"},"content":"        printSearchList(searchList);","lastModifiedDate":"2021-09-19"},{"lineNumber":208,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":209,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":210,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":211,"author":{"gitId":"Yitching"},"content":"     * Adds tasks that contain a specified keyword by the user in the task list into the search list.","lastModifiedDate":"2021-09-19"},{"lineNumber":212,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":213,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":214,"author":{"gitId":"Yitching"},"content":"     * @param searchedTask takes keyword from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":215,"author":{"gitId":"Yitching"},"content":"     * @param searchList Task type arraylist to store all the tasks containing keywords entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":216,"author":{"gitId":"Yitching"},"content":"     * @param searchListIndex index where task should be added in search list","lastModifiedDate":"2021-09-19"},{"lineNumber":217,"author":{"gitId":"Yitching"},"content":"     * @param taskListIndex index of task in task list to be checked for whether it contains keywords entered by user","lastModifiedDate":"2021-09-19"},{"lineNumber":218,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":219,"author":{"gitId":"Yitching"},"content":"     * @throws DukeException if task containing keyword has been found but cannot be added into the search list","lastModifiedDate":"2021-09-19"},{"lineNumber":220,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":221,"author":{"gitId":"Yitching"},"content":"    private static void addTaskToSearchList(ArrayList\u003cTask\u003e taskList, String searchedTask, ArrayList\u003cTask\u003e searchList, int taskListIndex, int searchListIndex) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":222,"author":{"gitId":"Yitching"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":223,"author":{"gitId":"Yitching"},"content":"            if ((task.getDescription().contains(searchedTask))) {","lastModifiedDate":"2021-09-19"},{"lineNumber":224,"author":{"gitId":"Yitching"},"content":"                String taskType \u003d taskList.get(taskListIndex).getTaskType();","lastModifiedDate":"2021-09-19"},{"lineNumber":225,"author":{"gitId":"Yitching"},"content":"                switch (taskType) {","lastModifiedDate":"2021-09-19"},{"lineNumber":226,"author":{"gitId":"Yitching"},"content":"                case \"E\":","lastModifiedDate":"2021-09-19"},{"lineNumber":227,"author":{"gitId":"Yitching"},"content":"                    addTaskAsEvent(searchList, \"event \" + task.description + \" /at\" + task.getDeadline(), true);","lastModifiedDate":"2021-09-19"},{"lineNumber":228,"author":{"gitId":"Yitching"},"content":"                    if(task.getStatusIcon().equals(\"X\")){","lastModifiedDate":"2021-09-19"},{"lineNumber":229,"author":{"gitId":"Yitching"},"content":"                       searchList.get(searchListIndex).updateIsDone();","lastModifiedDate":"2021-09-19"},{"lineNumber":230,"author":{"gitId":"Yitching"},"content":"                    }","lastModifiedDate":"2021-09-19"},{"lineNumber":231,"author":{"gitId":"Yitching"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":232,"author":{"gitId":"Yitching"},"content":"                case \"D\":","lastModifiedDate":"2021-09-19"},{"lineNumber":233,"author":{"gitId":"Yitching"},"content":"                    addTaskAsDeadline(searchList,\"deadline \" + task.description + \" /by\" + task.getDeadline(), true);","lastModifiedDate":"2021-09-19"},{"lineNumber":234,"author":{"gitId":"Yitching"},"content":"                    if(task.getStatusIcon().equals(\"X\")){","lastModifiedDate":"2021-09-19"},{"lineNumber":235,"author":{"gitId":"Yitching"},"content":"                        searchList.get(searchListIndex).updateIsDone();","lastModifiedDate":"2021-09-19"},{"lineNumber":236,"author":{"gitId":"Yitching"},"content":"                    }","lastModifiedDate":"2021-09-19"},{"lineNumber":237,"author":{"gitId":"Yitching"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":238,"author":{"gitId":"Yitching"},"content":"                case \"T\":","lastModifiedDate":"2021-09-19"},{"lineNumber":239,"author":{"gitId":"Yitching"},"content":"                    addTaskAsToDo(searchList, task.description, true);","lastModifiedDate":"2021-09-19"},{"lineNumber":240,"author":{"gitId":"Yitching"},"content":"                    if(task.getStatusIcon().equals(\"X\")){","lastModifiedDate":"2021-09-19"},{"lineNumber":241,"author":{"gitId":"Yitching"},"content":"                        searchList.get(searchListIndex).updateIsDone();","lastModifiedDate":"2021-09-19"},{"lineNumber":242,"author":{"gitId":"Yitching"},"content":"                    }","lastModifiedDate":"2021-09-19"},{"lineNumber":243,"author":{"gitId":"Yitching"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":244,"author":{"gitId":"Yitching"},"content":"                }","lastModifiedDate":"2021-09-19"},{"lineNumber":245,"author":{"gitId":"Yitching"},"content":"                searchListIndex++;","lastModifiedDate":"2021-09-19"},{"lineNumber":246,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":247,"author":{"gitId":"Yitching"},"content":"            taskListIndex++;","lastModifiedDate":"2021-09-19"},{"lineNumber":248,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":249,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":250,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":251,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":252,"author":{"gitId":"Yitching"},"content":"     * Checks if keywords entered by user can be found in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":253,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":254,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":255,"author":{"gitId":"Yitching"},"content":"     * @param searchedTask takes keyword from the keyboard","lastModifiedDate":"2021-09-19"},{"lineNumber":256,"author":{"gitId":"Yitching"},"content":"     * @return true if task list has a task that contains the keywords entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":257,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":258,"author":{"gitId":"Yitching"},"content":"    private static Boolean isTaskFound(ArrayList\u003cTask\u003e taskList, String searchedTask) {","lastModifiedDate":"2021-09-19"},{"lineNumber":259,"author":{"gitId":"Yitching"},"content":"        for (Task task: taskList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":260,"author":{"gitId":"Yitching"},"content":"            if(task.getDescription().contains(searchedTask)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":261,"author":{"gitId":"Yitching"},"content":"                return true;","lastModifiedDate":"2021-09-19"},{"lineNumber":262,"author":{"gitId":"Yitching"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":263,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":264,"author":{"gitId":"Yitching"},"content":"        return false;","lastModifiedDate":"2021-09-19"},{"lineNumber":265,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":266,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"Yitching":266}},{"path":"src/main/java/duke/tasklist/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"     * Constructor that takes in the description of the task to be added to to do list","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"     * @param description task to be added to to do list","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"     * Returns the String that represents the task type","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"     * @return task type T for \u0027to do\u0027","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"        return (\"T\");","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Yitching":23}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"import duke.tasklist.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"/** UI of Duke that deals with interactions with the user */","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"public class Ui {","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"    public static final String HORIZONTAL_LINE \u003d \"------------------------------------------------------\";","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"    public static final String HELP_LIST \u003d","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"            \"Use the following commands!\\n\" +","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"            \"To add a task without deadline: to do [taskName]\\n\" +","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"            \"To add a task with a deadline: deadline [deadlineName] /by [deadline in the format: \\\"dd MM yyyy hh:mm\\\"]\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"            \"To add an event: event [eventName] /at [eventTime in the format: \\\"dd MM yyyy hh:mm\\\"]\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"            \"To mark a task as done: done [taskNumber]\\n\" +","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"            \"To delete a task from your task list: delete [taskNumber]\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"            \"To perform a search on your current task list: find [keyword]\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"            \"To view your current task list, simply type: list\\n\" +","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"            \"To end your chat with me, simply type: bye\\n\" +","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"            HORIZONTAL_LINE;","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"    public static final String STRING_LOGO \u003d","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"            \" ____        _\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"            + \"|  _ \\\\ _   _| | _____\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"    public static final String INTRODUCTION_MESSAGE \u003d","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"            \"Hello! I\u0027m Duke!\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"            + \"So far, I can create a simple task list for you.\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"            + \"What can I do for you?\\n\";","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Yitching"},"content":"    /** Prints introduction message */","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"Yitching"},"content":"    public static void printIntro() {","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"Hello from\\n\" + STRING_LOGO);","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Yitching"},"content":"        System.out.println(INTRODUCTION_MESSAGE);","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Yitching"},"content":"    /** Prints exit message */","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"Yitching"},"content":"    public static void printOutro(){","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"Bye! Hope to see you again soon!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"Yitching"},"content":"     * Prints message that allows user to know that task has been successfully marked as done","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"Yitching"},"content":"     * @param taskNumber index of task in taskList to be marked as done","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"Yitching"},"content":"    public static void printTaskMarkAsDone(ArrayList\u003cTask\u003e taskList, int taskNumber) {","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"Yitching"},"content":"        Task taskUpdated \u003d taskList.get(taskNumber);","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"Yitching"},"content":"        taskUpdated.updateIsDone();","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"Yitching"},"content":"        taskUpdated.printMarkAsDoneMessage(taskNumber);","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"Yitching"},"content":"     * Prints task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"Yitching"},"content":"     * @param taskList Task type arraylist to store all the tasks entered by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"Yitching"},"content":"    public static void printTaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"Yitching"},"content":"        int listIndex \u003d 1;","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"Yitching"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"Yitching"},"content":"            task.printIndividualTask(listIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"Yitching"},"content":"            listIndex++;","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-06"},{"lineNumber":71,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"Yitching"},"content":"     * Prints the list of tasks that contains keywords specified by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"Yitching"},"content":"     * @param searchList Task type arraylist to store the list of tasks that contains keywords specified by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"Yitching"},"content":"    public static void printSearchList(ArrayList\u003cTask\u003e searchList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"Yitching"},"content":"        int listIndex \u003d 1;","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"Yitching"},"content":"        for (Task task : searchList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"Yitching"},"content":"            task.printIndividualTask(listIndex);","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"Yitching"},"content":"            listIndex++;","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"Yitching"},"content":"     * Checks if the task list has tasks that contain keywords specified by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"Yitching"},"content":"     * If a task is found, this function prints a message to let the user know that the user\u0027s search is valid","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"Yitching"},"content":"     * @param isFound returns true if there is at least one task that contains the keyword specified by the user","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":93,"author":{"gitId":"Yitching"},"content":"    public static void printValidSearchMessage(boolean isFound) {","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"Yitching"},"content":"        if (isFound) {","lastModifiedDate":"2021-09-19"},{"lineNumber":95,"author":{"gitId":"Yitching"},"content":"            System.out.println(\"Search found!\");","lastModifiedDate":"2021-09-19"},{"lineNumber":96,"author":{"gitId":"Yitching"},"content":"        } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":97,"author":{"gitId":"Yitching"},"content":"            System.out.println(\"Task not found in the task list!\");","lastModifiedDate":"2021-09-19"},{"lineNumber":98,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":99,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":100,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":101,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":102,"author":{"gitId":"Yitching"},"content":"     * Prints message that allows the user to know that a task has been successfully added to the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":103,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":104,"author":{"gitId":"Yitching"},"content":"     * @param taskAdded Task type object to be added to the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":105,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"Yitching"},"content":"    public static void printTaskAddedConfirmation(Task taskAdded) {","lastModifiedDate":"2021-09-06"},{"lineNumber":107,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-06"},{"lineNumber":108,"author":{"gitId":"Yitching"},"content":"        taskAdded.printTaskAddedMessage();","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":111,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":112,"author":{"gitId":"Yitching"},"content":"    /** Prints help list */","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"Yitching"},"content":"    public static void printHelpList() {","lastModifiedDate":"2021-09-06"},{"lineNumber":114,"author":{"gitId":"Yitching"},"content":"        System.out.println(HELP_LIST);","lastModifiedDate":"2021-09-06"},{"lineNumber":115,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":116,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"Yitching"},"content":"    /** Prints message that allows the user to know that the command entered is invalid */","lastModifiedDate":"2021-09-19"},{"lineNumber":118,"author":{"gitId":"Yitching"},"content":"    public static void printErrorForInvalidCommand(String userInput) {","lastModifiedDate":"2021-09-06"},{"lineNumber":119,"author":{"gitId":"Yitching"},"content":"        System.out.println(\"Aw man! I am unable to \" + userInput + \" yet! Please specify a different function! :D\");","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"Yitching"},"content":"    /** Prints message that allows the user to know that a task has been successfully deleted from the task list */","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"Yitching"},"content":"    public static void printTaskDeletedConfirmation(Task taskAdded, int index) {","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"Yitching"},"content":"        taskAdded.printTaskDeletedMessage(index);","lastModifiedDate":"2021-09-14"},{"lineNumber":126,"author":{"gitId":"Yitching"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-14"},{"lineNumber":127,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"Yitching":128}},{"path":"src/main/java/duke/utilities/Utilities.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"package duke.utilities;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"public class Utilities {","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"     * Checks if word entered in user input is a valid number","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"     * @param strNum a word extracted from user input","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"     * @return true if extracted word is a valid number","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"    public static boolean isValidNumber(String strNum) {","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"        if (strNum \u003d\u003d null) {","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"            return false;","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"            int d \u003d Integer.parseInt(strNum);","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"            return false;","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"        return true;","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"Yitching"},"content":"     * Replaces all characters except for the numerical values (if any) from the user input.","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"Yitching"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"Yitching"},"content":"     * @param userInput takes input from the keyboard","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"Yitching"},"content":"     * @return numerical values present in the user input.","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"Yitching"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"Yitching"},"content":"    public static String[] getStrings(String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"Yitching"},"content":"        return userInput.replaceAll(\"[\\\\p{Alpha}, [\\\\p{Punct}\u0026\u0026[^-]]+]\", \" \").trim().split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"Yitching"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"Yitching"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"Yitching":32}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yitching"},"content":"help","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"Yitching"},"content":"to do 1","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Yitching"},"content":"to do 2","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"Yitching"},"content":"to do 3","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Yitching"},"content":"to do 4","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"Yitching"},"content":"list","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"event run /at 2pm","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"Yitching"},"content":"deadline assignment /by 4pm","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"Yitching"},"content":"deadline assignment /by 02 06 2021 14:02","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"event 12km marathon /at 02 04 2021 15:00","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"Yitching"},"content":"list","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"Yitching"},"content":"deadline cg2027 /by 03 09 2021 00:00","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"Yitching"},"content":"event conference /at 09 04 2021 08:00","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"Yitching"},"content":"delete 1","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"Yitching"},"content":"delete 2","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"Yitching"},"content":"done 1 2 3","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"Yitching"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"find cg2027","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"Yitching"},"content":"event 24km run /at 09 04 2021 08:00","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"Yitching"},"content":"deadline 2113T assignment /by 09 12 2021 16:30","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"Yitching"},"content":"find run","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"Yitching"},"content":"list","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"Yitching"},"content":"bye","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"Yitching":23}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"Yitching"},"content":"del ACTUAL.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"Yitching"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\tasklist\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\ui\\*.java ..\\src\\main\\java\\duke\\parser\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\utilities\\*.java","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Yitching"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yitching":3,"-":18}}]
