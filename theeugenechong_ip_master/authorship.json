[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.command.CommandExecutor;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"import duke.datasaver.DataManager;","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":" * Entry point of Duke program.","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":" * Initializes the program and starts interaction with the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"public class Duke {","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"    private final DataManager dataManager;","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"    /** Sets up the required objects needed for the program to work. */","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"    public Duke() {","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"        this.commandExecutor \u003d new CommandExecutor();","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"        this.dataManager \u003d new DataManager();","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"        new Duke().run();","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"    /** Runs the Duke program until termination. */","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"    private void run() {","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"        start();","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"        runLoopUntilExitCommand(commandExecutor);","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"    /** Loads data from storage file and prints a greeting upon entry of program. */","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"    private void start() {","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"        dataManager.loadData(taskList.getTaskList());","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"        Ui.printHeyMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"    /** Reads user command and executes the command until a {@code bye} command is entered. */","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"    private void runLoopUntilExitCommand(CommandExecutor commandExecutor) {","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"        String userInput;","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"        boolean isExit;","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"        do {","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"            userInput \u003d Ui.readUserInput();","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"            commandExecutor.execute(userInput, taskList, dataManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"            isExit \u003d commandExecutor.isExit(userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"        } while (!isExit);","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"theeugenechong":51,"-":1}},{"path":"src/main/java/duke/command/CommandExecutor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.command;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.datasaver.DataManager;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.QueryNotFoundException;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.EmptyListException;","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidCommandFormatException;","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":" * Processes user input to determine the full user input string.","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":" * The command is then executed by calling the appropriate method.","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"public class CommandExecutor {","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"     * Uses the help of {@code Parser} to determine the {@code CommandWord} from user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"     * Based on the {@code CommandWord} returned, the appropriate method is called to execute the command.","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList {@code TaskList} on which the commands are executed","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which handles the changes made to the tasks","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"    public void execute(String userInput, TaskList taskList, DataManager dataManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"        CommandWord commandWord \u003d Parser.parseCommandWord(userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"        case LIST:","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"            executeList(taskList);","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"        case DONE:","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"            executeDone(userInput, taskList, dataManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"        case TODO:","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"            executeAddTodo(userInput, taskList, dataManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"        case DEADLINE:","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"            executeAddDeadline(userInput, taskList, dataManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"        case EVENT:","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"            executeAddEvent(userInput, taskList, dataManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"        case DELETE:","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"            executeDelete(userInput, taskList, dataManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"        case HELP:","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"            Ui.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"theeugenechong"},"content":"        case FIND:","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"theeugenechong"},"content":"            executeFind(userInput, taskList);","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"theeugenechong"},"content":"        case EXIT:","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"theeugenechong"},"content":"            Ui.printByeMessage();","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"theeugenechong"},"content":"        case INVALID:","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"theeugenechong"},"content":"            Ui.printUnrecognizedCommandMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"theeugenechong"},"content":"        default:","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"theeugenechong"},"content":"            throw new IllegalStateException(\"Unexpected value: \" + commandWord);","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":65,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"theeugenechong"},"content":"     * Determines if the user input is a {@code bye} command.","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"theeugenechong"},"content":"     * If it is a {@code bye} command, the loop in the main class terminates, resulting in termination of the program.","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"theeugenechong"},"content":"     * @return true if the user input is a {@code bye} command, false otherwise","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"theeugenechong"},"content":"     public boolean isExit(String userInput) {","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"theeugenechong"},"content":"        CommandWord commandWord \u003d Parser.parseCommandWord(userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"theeugenechong"},"content":"        return commandWord.equals(CommandWord.EXIT);","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"theeugenechong"},"content":"     * Executes the {@code list} command and prints out the entire each task in a list along with its","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"theeugenechong"},"content":"     * type, description and done status.","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList {@code TaskList} containing the tasks to be printed","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"theeugenechong"},"content":"    public void executeList(TaskList taskList) {","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"theeugenechong"},"content":"            checkListSize(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskList(taskList.getTaskList());","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"theeugenechong"},"content":"        } catch (EmptyListException ele) {","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"theeugenechong"},"content":"            Ui.printEmptyListMessage();","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":93,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":94,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"theeugenechong"},"content":"     * Executes the marking of a task as done by passing the user input to the task list to be marked done.","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"theeugenechong"},"content":"     * An error message is printed if the task ID entered by the user is non-numeric, lacking from the command","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"theeugenechong"},"content":"     * or not in the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList  {@code TaskList} containing the task to be mark done","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the updated done status of the task to Duke\u0027s storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"theeugenechong"},"content":"    public void executeDone(String userInput, TaskList taskList, DataManager dataManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"theeugenechong"},"content":"            taskList.markTaskDone(userInput, dataManager);","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException | NumberFormatException icfe) {","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidCommandFormatMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":108,"author":{"gitId":"theeugenechong"},"content":"        } catch (IndexOutOfBoundsException ioobe) {","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskNotInListMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":110,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":111,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":112,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":113,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"theeugenechong"},"content":"     * Executes the addition of a {@code Todo} to {@code taskList} by passing the user input to it.","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"theeugenechong"},"content":"     * An error message is printed if the user input lacks the description of the {@code Todo}","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList {@code TaskList} where the todo is to be added to","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the new {@code Todo} to Duke\u0027s storage","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"theeugenechong"},"content":"    public void executeAddTodo(String userInput, TaskList taskList, DataManager dataManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"theeugenechong"},"content":"            taskList.addTodo(userInput, dataManager);","lastModifiedDate":"2021-09-19"},{"lineNumber":124,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-19"},{"lineNumber":125,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidCommandFormatMessage();","lastModifiedDate":"2021-09-19"},{"lineNumber":126,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":127,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":128,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":129,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"theeugenechong"},"content":"     * Executes the addition of a {@code Deadline} to {@code taskList} by passing the user input to it.","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"theeugenechong"},"content":"     * An error message is printed if {@code userInput} lacks the deadline description or the deadline.","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"theeugenechong"},"content":"     * An error message is also printed if the date and time entered do not follow the format dd-MM-yyyy HH:mm or","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"theeugenechong"},"content":"     * if an invalid date and time is entered.","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList {@code TaskList} where the deadline is to be added to","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the new deadline to Duke\u0027s storage","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"theeugenechong"},"content":"    public void executeAddDeadline(String userInput, TaskList taskList, DataManager dataManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":141,"author":{"gitId":"theeugenechong"},"content":"            taskList.addDeadline(userInput, dataManager);","lastModifiedDate":"2021-09-19"},{"lineNumber":142,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-19"},{"lineNumber":143,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidCommandFormatMessage();","lastModifiedDate":"2021-09-19"},{"lineNumber":144,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidDateTimeException idte) {","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidDateTimeMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":147,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":148,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":149,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"theeugenechong"},"content":"     * Executes the addition of an {@code Event} to the {@code taskList} by passing the user input to it.","lastModifiedDate":"2021-09-20"},{"lineNumber":151,"author":{"gitId":"theeugenechong"},"content":"     * An error message is printed if {@code userInput} lacks the event description or the event time.","lastModifiedDate":"2021-09-20"},{"lineNumber":152,"author":{"gitId":"theeugenechong"},"content":"     * An error message is also printed if the date and time entered do not follow the format dd-MM-yyyy HH:mm or","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"theeugenechong"},"content":"     * if an invalid date and time is entered.","lastModifiedDate":"2021-09-20"},{"lineNumber":154,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":155,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":156,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList {@code TaskList} where the event is to be added to","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the new event to Duke\u0027s storage","lastModifiedDate":"2021-09-20"},{"lineNumber":158,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":159,"author":{"gitId":"theeugenechong"},"content":"    public void executeAddEvent(String userInput, TaskList taskList, DataManager dataManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":160,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":161,"author":{"gitId":"theeugenechong"},"content":"            taskList.addEvent(userInput, dataManager);","lastModifiedDate":"2021-09-19"},{"lineNumber":162,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidCommandFormatMessage();","lastModifiedDate":"2021-09-19"},{"lineNumber":164,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidDateTimeException idte) {","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidDateTimeMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":167,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":168,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":169,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":170,"author":{"gitId":"theeugenechong"},"content":"     * Executes the deletion of a task py passing {@code userInput} to the {@code TaskList}.","lastModifiedDate":"2021-09-20"},{"lineNumber":171,"author":{"gitId":"theeugenechong"},"content":"     * An error message is printed if the task ID entered by the user is non-numeric, lacking from the command","lastModifiedDate":"2021-09-20"},{"lineNumber":172,"author":{"gitId":"theeugenechong"},"content":"     * or not in the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":173,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":174,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":175,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList {@code TaskList} containing the task to be deleted","lastModifiedDate":"2021-09-20"},{"lineNumber":176,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which removes the deleted task from Duke\u0027s storage","lastModifiedDate":"2021-09-20"},{"lineNumber":177,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":178,"author":{"gitId":"theeugenechong"},"content":"    public void executeDelete(String userInput, TaskList taskList, DataManager dataManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":179,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":180,"author":{"gitId":"theeugenechong"},"content":"            taskList.deleteTask(userInput, dataManager);","lastModifiedDate":"2021-09-19"},{"lineNumber":181,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException | NumberFormatException fe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":182,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidCommandFormatMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":183,"author":{"gitId":"theeugenechong"},"content":"        } catch (IndexOutOfBoundsException ioobe) {","lastModifiedDate":"2021-09-19"},{"lineNumber":184,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskNotInListMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":185,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":186,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":187,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":188,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":189,"author":{"gitId":"theeugenechong"},"content":"     * Executes find by creating a list with the tasks containing the keyword and printing the list.","lastModifiedDate":"2021-09-20"},{"lineNumber":190,"author":{"gitId":"theeugenechong"},"content":"     * {@code userInput} is parsed to extract the keyword (or query) and the query is searched for in {@code taskList}.","lastModifiedDate":"2021-09-20"},{"lineNumber":191,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":192,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":193,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list to be searched","lastModifiedDate":"2021-09-20"},{"lineNumber":194,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":195,"author":{"gitId":"theeugenechong"},"content":"    public void executeFind(String userInput, TaskList taskList) {","lastModifiedDate":"2021-09-20"},{"lineNumber":196,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":197,"author":{"gitId":"theeugenechong"},"content":"            String query \u003d Parser.parseFindCommand(userInput);","lastModifiedDate":"2021-09-20"},{"lineNumber":198,"author":{"gitId":"theeugenechong"},"content":"            ArrayList\u003cTask\u003e tasksContainingQuery \u003d search(taskList.getTaskList(), query);","lastModifiedDate":"2021-09-20"},{"lineNumber":199,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskListContainingQuery(tasksContainingQuery, query);","lastModifiedDate":"2021-09-20"},{"lineNumber":200,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":201,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidCommandFormatMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":202,"author":{"gitId":"theeugenechong"},"content":"        } catch (QueryNotFoundException qnfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":203,"author":{"gitId":"theeugenechong"},"content":"            Ui.printQueryNotFoundMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":204,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":205,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":206,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":207,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":208,"author":{"gitId":"theeugenechong"},"content":"     * Helper function which searches for a query in {@code taskList} A query is said to be found in a {@code Task} if","lastModifiedDate":"2021-09-20"},{"lineNumber":209,"author":{"gitId":"theeugenechong"},"content":"     * it is a continuous substring/contained in the task description.","lastModifiedDate":"2021-09-20"},{"lineNumber":210,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":211,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list to be searched","lastModifiedDate":"2021-09-20"},{"lineNumber":212,"author":{"gitId":"theeugenechong"},"content":"     * @param query keyword to be searched for in the task list","lastModifiedDate":"2021-09-20"},{"lineNumber":213,"author":{"gitId":"theeugenechong"},"content":"     * @return a list of tasks containing the query","lastModifiedDate":"2021-09-20"},{"lineNumber":214,"author":{"gitId":"theeugenechong"},"content":"     * @throws QueryNotFoundException if the query could not be found in any of the tasks in the task list","lastModifiedDate":"2021-09-20"},{"lineNumber":215,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":216,"author":{"gitId":"theeugenechong"},"content":"    private static ArrayList\u003cTask\u003e search(ArrayList\u003cTask\u003e taskList, String query) throws QueryNotFoundException {","lastModifiedDate":"2021-09-20"},{"lineNumber":217,"author":{"gitId":"theeugenechong"},"content":"        ArrayList\u003cTask\u003e taskListContainingQuery \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-20"},{"lineNumber":218,"author":{"gitId":"theeugenechong"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2021-09-20"},{"lineNumber":219,"author":{"gitId":"theeugenechong"},"content":"            if (t.getDescription().toLowerCase().contains(query.toLowerCase())) {","lastModifiedDate":"2021-09-20"},{"lineNumber":220,"author":{"gitId":"theeugenechong"},"content":"                taskListContainingQuery.add(t);","lastModifiedDate":"2021-09-20"},{"lineNumber":221,"author":{"gitId":"theeugenechong"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":222,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":223,"author":{"gitId":"theeugenechong"},"content":"        if (taskListContainingQuery.isEmpty()) {","lastModifiedDate":"2021-09-20"},{"lineNumber":224,"author":{"gitId":"theeugenechong"},"content":"            throw new QueryNotFoundException();","lastModifiedDate":"2021-09-20"},{"lineNumber":225,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":226,"author":{"gitId":"theeugenechong"},"content":"        return taskListContainingQuery;","lastModifiedDate":"2021-09-20"},{"lineNumber":227,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":228,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":229,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":230,"author":{"gitId":"theeugenechong"},"content":"     * Helper function which checks if {@code taskList} is empty. This method throws an exception to allow for the","lastModifiedDate":"2021-09-20"},{"lineNumber":231,"author":{"gitId":"theeugenechong"},"content":"     * printing of an error message in {@code executeList}.","lastModifiedDate":"2021-09-20"},{"lineNumber":232,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":233,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list to be checked","lastModifiedDate":"2021-09-20"},{"lineNumber":234,"author":{"gitId":"theeugenechong"},"content":"     * @throws EmptyListException if the task list is empty","lastModifiedDate":"2021-09-20"},{"lineNumber":235,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":236,"author":{"gitId":"theeugenechong"},"content":"    private static void checkListSize(TaskList taskList) throws EmptyListException {","lastModifiedDate":"2021-09-19"},{"lineNumber":237,"author":{"gitId":"theeugenechong"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-19"},{"lineNumber":238,"author":{"gitId":"theeugenechong"},"content":"            throw new EmptyListException();","lastModifiedDate":"2021-09-19"},{"lineNumber":239,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":240,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":241,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"theeugenechong":241}},{"path":"src/main/java/duke/command/CommandWord.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.command;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Enumeration which represents each of Duke\u0027s recognized commands","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"public enum CommandWord {","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"    LIST,","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"    DONE,","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"    TODO,","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"    DEADLINE,","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"    EVENT,","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"    DELETE,","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"    HELP,","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"    FIND,","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"    EXIT,","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"    INVALID","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"theeugenechong":17}},{"path":"src/main/java/duke/constants/DukeCommandStrings.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.constants;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"public class DukeCommandStrings extends DukeConstants {","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"    /** Commands recognized by Duke */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"    public static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"    public static final String DONE_COMMAND \u003d \"done\";","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"    public static final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"    public static final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"    public static final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"    public static final String HELP_COMMAND \u003d \"help\";","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"    public static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"    public static final String EXIT_COMMAND \u003d \"bye\";","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"    /** Prefixes and regex that help with the parsing of user input */","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"    public static final String WHITESPACE_SEQUENCE \u003d \"\\\\s+\";","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"    public static final String DEADLINE_PREFIX \u003d \"/by\";","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"    public static final String EVENT_PREFIX \u003d \"/at\";","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"    /** Date and time formats recognized by Duke */","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"    public static final String DATE_TIME_INPUT_FORMAT \u003d \"dd-MM-yyyy HH:mm\";","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"    public static final String DATE_TIME_OUTPUT_FORMAT \u003d \"LLL dd yyyy hh:mm a\";","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":24}},{"path":"src/main/java/duke/constants/DukeConstants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.constants;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"public class DukeConstants {","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"    /** Constants used by Duke throughout the entire program */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"    public static final String WHITESPACE \u003d \" \";","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"    public static final String STRAIGHT_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"    public static final String INDENT \u003d \"   \";","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":9}},{"path":"src/main/java/duke/constants/DukeDataStorageConstants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.constants;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"public class DukeDataStorageConstants extends DukeConstants {","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"    /** Default file path for file containing Duke\u0027s data */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"    public static final String DIRECTORY_NAME \u003d \"dukeData\";","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"    public static final String FILE_NAME \u003d \"tasks.txt\";","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"    public static final String DEFAULT_STORAGE_FILEPATH \u003d DIRECTORY_NAME + \"\\\\\" + FILE_NAME;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"    /** Strings which help in encoding and decoding Duke\u0027s data */","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"    public static final String ENCODER_ATTRIBUTE_SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"    public static final String DECODER_ATTRIBUTE_SEPARATOR \u003d \"\\\\|\";","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"    public static final String DONE \u003d \"X\";","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"    public static final String NOT_DONE \u003d \"O\";","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"    /** Valid file type for Duke must be readable, hence .txt file */","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"    public static final String VALID_FILE_TYPE \u003d \".txt\";","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"    /** Messages to inform user of erroneous file I/O, decoding and encoding */","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"    public static final String FILE_WRONG_FORMAT_MESSAGE \u003d WHITESPACE + \"Task in \" + DEFAULT_STORAGE_FILEPATH + \" is of the wrong format!\";","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"    public static final String FILE_DATE_TIME_WRONG_FORMAT_MESSAGE \u003d WHITESPACE + \"Date and time read from \" + DEFAULT_STORAGE_FILEPATH + \" are invalid!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"    public static final String INVALID_FILE_TYPE_MESSAGE \u003d WHITESPACE + \"Invalid file type! I can only store data in a \\\".txt\\\" file.\";","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"    public static final String FILE_WRITE_ERROR_MESSAGE \u003d WHITESPACE + \"Something went wrong when writing to this file:\" + WHITESPACE;","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"    public static final String FILE_CREATION_ERROR_MESSAGE \u003d WHITESPACE + \"Something went wrong when creating this file:\" + WHITESPACE;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":25}},{"path":"src/main/java/duke/constants/DukeOutputMessages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.constants;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeCommandStrings.DATE_TIME_INPUT_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"public class DukeOutputMessages extends DukeConstants {","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"    /** Messages to greet user upon entry and exit of program */","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"    public static final String HEY_MESSAGE \u003d WHITESPACE + \"Hey there! I\u0027m Duke.\" + System.lineSeparator() + \" How may I help you?\";","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"    public static final String BYE_MESSAGE \u003d WHITESPACE + \"Goodbye! Hope to see you again soon.\";","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"    public static final String HELLO_FROM \u003d \"Hello from\" + System.lineSeparator();","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"    public static final String DUKE_LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"                                         + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"                                         + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"                                         + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"                                         + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"    /** Messages informing user of erroneous commands */","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"    public static final String UNRECOGNIZED_COMMAND_MESSAGE \u003d WHITESPACE + \"I don\u0027t know what that means!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"    public static final String COMMAND_WRONG_FORMAT_MESSAGE \u003d WHITESPACE + \"Your command is of the wrong format!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"    public static final String TASK_NOT_IN_LIST_MESSAGE \u003d WHITESPACE + \"Sorry, the task is not in the list! Try again.\";","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"    public static final String QUERY_NOT_FOUND_MESSAGE \u003d WHITESPACE + \"I could not find any task with that keyword! Try again.\";","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"    public static final String DATE_TIME_INVALID_MESSAGE \u003d WHITESPACE + \"The date and time entered are invalid!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"    /** Messages informing user that a non-erroneous command has been executed */","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"    public static final String HERE_IS_TASK_LIST_MESSAGE \u003d WHITESPACE + \"Here are the tasks in your list:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"    public static final String HERE_ARE_TASKS_CONTAINING_MESSAGE \u003d WHITESPACE + \"Here are tasks containing\" + WHITESPACE;","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"    public static final String TASK_LIST_EMPTY_MESSAGE \u003d WHITESPACE + \"The list is empty! Add a task first.\";","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"    public static final String TASK_ADDED_MESSAGE \u003d WHITESPACE + \"I have added a task:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"    public static final String TASK_DELETED_MESSAGE \u003d WHITESPACE + \"Got it! I have deleted this task:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"    public static final String TASK_MARKED_DONE_MESSAGE \u003d WHITESPACE + \"Great job! The following task is done:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"    /** Messages for {@code help} command */","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"    public static final String ENTER_HELP \u003d WHITESPACE + \"Enter \\\"help\\\" for a list of valid commands and their respective formats!\";","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"    public static final String HELP_INTRO_MESSAGE      \u003d WHITESPACE + \"Here are the commands I recognize along with their formats:\";","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"    public static final String LIST_COMMAND_FORMAT     \u003d WHITESPACE + \"list     | Format: list\";","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"    public static final String DONE_COMMAND_FORMAT     \u003d WHITESPACE + \"done     | Format: done [task ID (int)]\";","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"    public static final String TODO_COMMAND_FORMAT     \u003d WHITESPACE + \"todo     | Format: todo [description]\";","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"    public static final String DEADLINE_COMMAND_FORMAT \u003d WHITESPACE + \"deadline | Format: deadline [description] /by [deadline (in \" + DATE_TIME_INPUT_FORMAT + \" format)]\";","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"    public static final String EVENT_COMMAND_FORMAT    \u003d WHITESPACE + \"event    | Format: event [description] /at [time (in \" + DATE_TIME_INPUT_FORMAT + \" format)]\";","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"    public static final String FIND_COMMAND_FORMAT     \u003d WHITESPACE + \"find     | Format: find [keyword]\";","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"    public static final String DELETE_COMMAND_FORMAT   \u003d WHITESPACE + \"delete   | Format: delete [task ID (int)]\";","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"    public static final String BYE_COMMAND_FORMAT      \u003d WHITESPACE + \"bye      | Format: bye\";","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":43}},{"path":"src/main/java/duke/datasaver/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.datasaver;","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidFileDataException;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidFileTypeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"import java.io.File;","lastModifiedDate":"2021-09-12"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-12"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-12"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.DEFAULT_STORAGE_FILEPATH;","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.FILE_CREATION_ERROR_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.FILE_WRITE_ERROR_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.VALID_FILE_TYPE;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":" * Handles storage of data in Duke\u0027s task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":" * This includes reading and writing to a {@code \".txt\"} file in the user\u0027s device.","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"public class DataManager {","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"    /** {@code Path} object representing the path of storage file*/","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"    private Path filePath;","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"     * Parameterless constructor will set the storage file path to the default, {@code \"dukeData\\tasks.txt\"}","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"    public DataManager() {","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"        this(DEFAULT_STORAGE_FILEPATH);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"     * Constructor which allows for a specific file path to be created for data storage.","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"     * Prints an error message if the file specified is not a {@code \".txt\"} file","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"     * @param filePath string representing the file path","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"    public DataManager(String filePath) {","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"            checkFileType(filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"            this.filePath \u003d Paths.get(filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidFileTypeException ifte) {","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"theeugenechong"},"content":"            Ui.printInvalidFileTypeMessage();","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"theeugenechong"},"content":"     * Returns storage file path in string format","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"theeugenechong"},"content":"     * @return string representing file path","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"theeugenechong"},"content":"    public String getFilePath() {","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"theeugenechong"},"content":"        return filePath.toString();","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"theeugenechong"},"content":"     * Loads data from storage file into {@code taskList} upon entering the program","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list into which the tasks are to be loaded","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"theeugenechong"},"content":"    public void loadData(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"theeugenechong"},"content":"        Scanner fileScanner \u003d getScanner(filePath.toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"theeugenechong"},"content":"        readData(fileScanner, taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"theeugenechong"},"content":"     * Saves {@code taskList} into storage file upon any change to the tasks in the list.","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"theeugenechong"},"content":"     * Such changes include addition of a task, deletion of a task, and marking a task as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"theeugenechong"},"content":"     * Prints an error message if there is an error writing to the file.","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list containing data of tasks to be saved","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"theeugenechong"},"content":"    public void saveData(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"theeugenechong"},"content":"            writeData(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"theeugenechong"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"theeugenechong"},"content":"            System.out.println(FILE_WRITE_ERROR_MESSAGE + ioe.getMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":90,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":91,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"theeugenechong"},"content":"     * Obtains a {@code Scanner} to read from the storage file specified by {@code filePath}.","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"theeugenechong"},"content":"     * If the file does not exist, the file is created. An error message is printed if there is an error creating","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"theeugenechong"},"content":"     * the file.","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"theeugenechong"},"content":"     * @param filePath string representing the file path","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"theeugenechong"},"content":"     * @return scanner which is able to read lines from storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"theeugenechong"},"content":"    private static Scanner getScanner(String filePath) {","lastModifiedDate":"2021-09-19"},{"lineNumber":100,"author":{"gitId":"theeugenechong"},"content":"        File taskFile \u003d new File(filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":101,"author":{"gitId":"theeugenechong"},"content":"        Scanner fileScanner \u003d null;","lastModifiedDate":"2021-09-12"},{"lineNumber":102,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-12"},{"lineNumber":103,"author":{"gitId":"theeugenechong"},"content":"            fileScanner \u003d new Scanner(taskFile);","lastModifiedDate":"2021-09-12"},{"lineNumber":104,"author":{"gitId":"theeugenechong"},"content":"        } catch (FileNotFoundException fileNotFoundException) {","lastModifiedDate":"2021-09-12"},{"lineNumber":105,"author":{"gitId":"theeugenechong"},"content":"            try {","lastModifiedDate":"2021-09-12"},{"lineNumber":106,"author":{"gitId":"theeugenechong"},"content":"                createFileInDirectory(filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"theeugenechong"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"theeugenechong"},"content":"                System.out.println(FILE_CREATION_ERROR_MESSAGE + ioe.getMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"theeugenechong"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":110,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":111,"author":{"gitId":"theeugenechong"},"content":"        return fileScanner;","lastModifiedDate":"2021-09-19"},{"lineNumber":112,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":114,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"theeugenechong"},"content":"     * Reads lines representing tasks from {@code fileScanner} to be decoded and added to the task list. Prints an","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"theeugenechong"},"content":"     * error message if the data in the file is of an invalid format. An error message is also printed if the date and","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"theeugenechong"},"content":"     * time for {@code Event}/{@code Deadline} objects are of the wrong format.","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"theeugenechong"},"content":"     * @param fileScanner scanner which reads lines from storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list into which the decoded tasks are added","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"theeugenechong"},"content":"    private static void readData(Scanner fileScanner, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"theeugenechong"},"content":"        if (fileScanner !\u003d null) {","lastModifiedDate":"2021-09-12"},{"lineNumber":124,"author":{"gitId":"theeugenechong"},"content":"            while (fileScanner.hasNext()) {","lastModifiedDate":"2021-09-12"},{"lineNumber":125,"author":{"gitId":"theeugenechong"},"content":"                String task \u003d fileScanner.nextLine();","lastModifiedDate":"2021-09-12"},{"lineNumber":126,"author":{"gitId":"theeugenechong"},"content":"                try {","lastModifiedDate":"2021-09-12"},{"lineNumber":127,"author":{"gitId":"theeugenechong"},"content":"                    Task decodedTask \u003d TaskListDecoder.decodeTask(task);","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"theeugenechong"},"content":"                    taskList.add(decodedTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"theeugenechong"},"content":"                } catch (InvalidFileDataException ifde) {","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"theeugenechong"},"content":"                    Ui.printFileTaskInvalidFormatMessage();","lastModifiedDate":"2021-09-18"},{"lineNumber":131,"author":{"gitId":"theeugenechong"},"content":"                } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"theeugenechong"},"content":"                    Ui.printFileInvalidDateTimeMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"theeugenechong"},"content":"                }","lastModifiedDate":"2021-09-12"},{"lineNumber":134,"author":{"gitId":"theeugenechong"},"content":"            }","lastModifiedDate":"2021-09-12"},{"lineNumber":135,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":136,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":137,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":138,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"theeugenechong"},"content":"     * Encodes each task in {@code taskList} into a string which is written to the storage file.","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list containing tasks to be encoded and written to storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":142,"author":{"gitId":"theeugenechong"},"content":"     * @throws IOException if there is an error writing to the file","lastModifiedDate":"2021-09-20"},{"lineNumber":143,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"theeugenechong"},"content":"    private static void writeData(ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":145,"author":{"gitId":"theeugenechong"},"content":"        FileWriter fileWriter \u003d new FileWriter(DEFAULT_STORAGE_FILEPATH, false);","lastModifiedDate":"2021-09-19"},{"lineNumber":146,"author":{"gitId":"theeugenechong"},"content":"        StringBuilder formattedTask \u003d new StringBuilder();","lastModifiedDate":"2021-09-12"},{"lineNumber":147,"author":{"gitId":"theeugenechong"},"content":"        TaskListEncoder.encodeTask(taskList, fileWriter, formattedTask);","lastModifiedDate":"2021-09-19"},{"lineNumber":148,"author":{"gitId":"theeugenechong"},"content":"        fileWriter.close();","lastModifiedDate":"2021-09-12"},{"lineNumber":149,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":150,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":151,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":152,"author":{"gitId":"theeugenechong"},"content":"     * Creates a file with the path specified by {@code filePath}.","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":154,"author":{"gitId":"theeugenechong"},"content":"     * @param filePath string representing the file path","lastModifiedDate":"2021-09-20"},{"lineNumber":155,"author":{"gitId":"theeugenechong"},"content":"     * @throws IOException if there is an error creating the file","lastModifiedDate":"2021-09-20"},{"lineNumber":156,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"theeugenechong"},"content":"    private static void createFileInDirectory(String filePath) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":158,"author":{"gitId":"theeugenechong"},"content":"        Files.createFile(Paths.get(filePath));","lastModifiedDate":"2021-09-19"},{"lineNumber":159,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":160,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":161,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":162,"author":{"gitId":"theeugenechong"},"content":"     * Helper function to check if file specified is valid.","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"theeugenechong"},"content":"     * File is considered valid if it ends in {@code \".txt\"}.","lastModifiedDate":"2021-09-20"},{"lineNumber":164,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"theeugenechong"},"content":"     * @param filePath string representing the file path","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidFileTypeException if file specified is not a {@code \".txt\"} file","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":168,"author":{"gitId":"theeugenechong"},"content":"    private static void checkFileType(String filePath) throws InvalidFileTypeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":169,"author":{"gitId":"theeugenechong"},"content":"        if (!filePath.endsWith(VALID_FILE_TYPE)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":170,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidFileTypeException();","lastModifiedDate":"2021-09-19"},{"lineNumber":171,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":172,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":173,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"theeugenechong":173}},{"path":"src/main/java/duke/datasaver/TaskListDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.datasaver;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidFileDataException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeCommandStrings.DATE_TIME_INPUT_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.DECODER_ATTRIBUTE_SEPARATOR;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.DONE;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.NOT_DONE;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":" * Decodes data in storage file into a {@code Task} object.","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"public class TaskListDecoder {","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"     * Decodes a task in the form of a string into a {@code Task} object.","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"     * @param task a formatted string containing the attributes of a {@code Task} object","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"     * @return a decoded {@code Task} with the same attributes of those in the storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidFileDataException if any of the task strings contain invalid attributes or are in an invalid format","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"     * @throws DateTimeParseException if date and time of {@code Event}/{@code Deadline} objects are of invalid format","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"    public static Task decodeTask(String task) throws InvalidFileDataException, DateTimeParseException {","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"        String[] taskAttributes \u003d task.split(DECODER_ATTRIBUTE_SEPARATOR);","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"        String taskType \u003d taskAttributes[0].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"        String doneStatus \u003d taskAttributes[1].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"        /* An encoded {@code Todo} has 3 fields while an encoded {@code Deadline}/{@code Event} has 4 fields */","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"        boolean hasInvalidTaskAttributes \u003d (taskAttributes.length \u003c 3 || taskAttributes.length \u003e 4);","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"        boolean hasInvalidDoneStatus \u003d (!doneStatus.equals(DONE) \u0026\u0026 !doneStatus.equals(NOT_DONE));","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"        if (hasInvalidTaskAttributes || hasInvalidDoneStatus) {","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidFileDataException();","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"        String taskDescription \u003d taskAttributes[2].trim();","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"        boolean isDone \u003d doneStatus.equals(DONE);","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"        Task newTask;","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"        case \"T\":","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"            newTask \u003d new Todo(taskDescription);","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"        case \"D\":","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"theeugenechong"},"content":"            String deadlineDeadline \u003d taskAttributes[3].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"theeugenechong"},"content":"            LocalDateTime deadlineDateTime \u003d Parser.parseDateTime(deadlineDeadline, DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"theeugenechong"},"content":"            newTask \u003d new Deadline(taskDescription, deadlineDateTime);","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"theeugenechong"},"content":"        case \"E\":","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"theeugenechong"},"content":"            String eventTime \u003d taskAttributes[3].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"theeugenechong"},"content":"            LocalDateTime eventDateTime \u003d Parser.parseDateTime(eventTime, DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"theeugenechong"},"content":"            newTask \u003d new Event(taskDescription, eventDateTime);","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"theeugenechong"},"content":"            break;","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"theeugenechong"},"content":"        default:","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidFileDataException();","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"theeugenechong"},"content":"        newTask.setDone(isDone);","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"theeugenechong"},"content":"        return newTask;","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"theeugenechong":67}},{"path":"src/main/java/duke/datasaver/TaskListEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.datasaver;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeCommandStrings.DATE_TIME_INPUT_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.DONE;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.ENCODER_ATTRIBUTE_SEPARATOR;","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.NOT_DONE;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":" * Encodes {@code Task} objects in a task list into strings to be saved in storage file.","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"public class TaskListEncoder {","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"     * Encodes the {@code Task}s in {@code taskList} into a list of strings which can be decoded and written to the","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"     * storage file.","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList task list containing tasks to be encoded","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"     * @param fileWriter writes the string representing the decoded task to the storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"     * @param formattedTask a formatted string which represents the encoded task","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"     * @throws IOException if there is an error writing to the file","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"    public static void encodeTask(ArrayList\u003cTask\u003e taskList, FileWriter fileWriter, StringBuilder formattedTask) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"            appendTaskType(formattedTask, task.getTaskType());","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"            appendDoneStatus(formattedTask, task.isDone());","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"            appendTaskDescription(formattedTask, task);","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"            fileWriter.write(formattedTask + System.lineSeparator());","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"            formattedTask \u003d new StringBuilder();","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"     * Appends the type of task to the formatted string. A {@code Todo} is represented by \"T\".","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"     * A {@code Deadline} is represented by an \"D\" while an {@code Event} is represented by an \"E\".","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"     * @param formattedTask a formatted string which represents the encoded task","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"     * @param taskType a string representing the task type","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"    public static void appendTaskType(StringBuilder formattedTask, String taskType) {","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"        formattedTask.append(taskType).append(ENCODER_ATTRIBUTE_SEPARATOR);","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"theeugenechong"},"content":"     * Appends the done status of the task to the formatted string. A done task is represented by \"X\" while a task not","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"theeugenechong"},"content":"     * done is represented by an \"O\".","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"theeugenechong"},"content":"     * @param formattedTask a formatted string which represents the encoded task","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"theeugenechong"},"content":"     * @param isDone a boolean representing the done status of a task","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"theeugenechong"},"content":"    public static void appendDoneStatus(StringBuilder formattedTask, boolean isDone) {","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"theeugenechong"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"theeugenechong"},"content":"            formattedTask.append(DONE).append(ENCODER_ATTRIBUTE_SEPARATOR);","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"theeugenechong"},"content":"        } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"theeugenechong"},"content":"            formattedTask.append(NOT_DONE).append(ENCODER_ATTRIBUTE_SEPARATOR);","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"theeugenechong"},"content":"     * Appends the task description the task to the formatted string. Appends date and time in the format","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"theeugenechong"},"content":"     * dd-MM-yyyy HH:mm for {@code Event}s and {@code Deadline}s.","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"theeugenechong"},"content":"     * @param formattedTask a formatted string which represents the encoded task","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"theeugenechong"},"content":"     * @param task {@code Task} object to provide description, date and time","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"theeugenechong"},"content":"    public static void appendTaskDescription(StringBuilder formattedTask, Task task) {","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"theeugenechong"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"theeugenechong"},"content":"            formattedTask.append(task.getDescription());","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"theeugenechong"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"theeugenechong"},"content":"            formattedTask.append(task.getDescription()).append(ENCODER_ATTRIBUTE_SEPARATOR);","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"theeugenechong"},"content":"            /* by attribute of Deadline is of LocalDateTime type, hence need to be converted to a string */","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"theeugenechong"},"content":"            String by \u003d Parser.dateTimeToString(((Deadline) task).getBy(), DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"theeugenechong"},"content":"            formattedTask.append(by);","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"theeugenechong"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"theeugenechong"},"content":"            formattedTask.append(task.getDescription()).append(ENCODER_ATTRIBUTE_SEPARATOR);","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"theeugenechong"},"content":"            /* when attribute of Event is of LocalDateTime type, hence need to be converted to a string */","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"theeugenechong"},"content":"            String when \u003d Parser.dateTimeToString(((Event) task).getWhen(), DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"theeugenechong"},"content":"            formattedTask.append(when);","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"theeugenechong":92}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.exception;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Represents exceptions which are specific to the Duke program","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":8}},{"path":"src/main/java/duke/exception/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.exception;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Signals that the task list is empty","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"public class EmptyListException extends Exception {","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"theeugenechong":8}},{"path":"src/main/java/duke/exception/InvalidCommandFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.exception;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Signals that an command with an invalid format has been entered by the user","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" * and is unable to be interpreted by Duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"public class InvalidCommandFormatException extends DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":9}},{"path":"src/main/java/duke/exception/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.exception;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Signals that a date and time entered by the user for {@code Event}/{@code Deadline}s are invalid","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" * or are in the wrong format.","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"public class InvalidDateTimeException extends DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"theeugenechong":9}},{"path":"src/main/java/duke/exception/InvalidFileDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.exception;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Signals that the data contained in the storage file is of an invalid format.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"public class InvalidFileDataException extends DukeException {","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":8}},{"path":"src/main/java/duke/exception/InvalidFileTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.exception;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Signals that a file specified by the user for storage is not of a valid type.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" * A valid file type ends with {@code \".txt\"}.","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"public class InvalidFileTypeException extends DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"theeugenechong":9}},{"path":"src/main/java/duke/exception/QueryNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.exception;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Signals that a keyword being searched for by the user with {@code find} could not","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" * be found in the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"public class QueryNotFoundException extends DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"theeugenechong":9}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.parser;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.command.CommandWord;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidCommandFormatException;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeCommandStrings.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":" * Parses user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"public class Parser {","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"    ","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} into a {@code CommandWord} for execution of command.","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"     * ","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"     * @return {@code CommandWord} based on the user input","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"    public static CommandWord parseCommandWord(String userInput) {","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"        if (beginsWith(userInput, LIST_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.LIST;","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, DONE_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.DONE;","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, TODO_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.TODO;","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, DEADLINE_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.DEADLINE;","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, EVENT_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.EVENT;","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, DELETE_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.DELETE;","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, HELP_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.HELP;","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, FIND_COMMAND)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.FIND;","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"        } else if (beginsWith(userInput, EXIT_COMMAND)) {","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.EXIT;","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"        } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"            return CommandWord.INVALID;","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} based on the format of the {@code done} command and returns the task ID of the task to","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"theeugenechong"},"content":"     * mark done.","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"theeugenechong"},"content":"     * @return task ID of the task to mark done","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if task ID is non-numeric, lacking from command","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"theeugenechong"},"content":"     * @throws NumberFormatException if task ID is not in the task list","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"theeugenechong"},"content":"    public static int parseDoneCommand(String userInput) throws InvalidCommandFormatException, NumberFormatException {","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"theeugenechong"},"content":"        String[] doneCommandAsArray \u003d userInput.split(WHITESPACE_SEQUENCE, 2);","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"theeugenechong"},"content":"        if(doneCommandAsArray.length !\u003d 2) {","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because task ID is lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"theeugenechong"},"content":"        int indexOfTaskToMarkDone;","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"theeugenechong"},"content":"            /* \u0027- 1\u0027 to convert from 1-based to 0-based indexing */","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"theeugenechong"},"content":"            indexOfTaskToMarkDone \u003d Integer.parseInt(doneCommandAsArray[1]) - 1;","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"theeugenechong"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"theeugenechong"},"content":"            throw new NumberFormatException();","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"theeugenechong"},"content":"        return indexOfTaskToMarkDone;","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} based on the format of the {@code todo} command and returns a {@code Todo} object","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"theeugenechong"},"content":"     * with a description as entered by the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"theeugenechong"},"content":"     * @return a {@code Todo} with the description as entered by the user","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if the todo is lacking a description","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"theeugenechong"},"content":"    public static Todo parseAddTodoCommand(String userInput) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"theeugenechong"},"content":"        String[] todoAsArray \u003d userInput.split(WHITESPACE_SEQUENCE, 2);","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"theeugenechong"},"content":"        if(todoAsArray.length !\u003d 2) {","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because description is lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"theeugenechong"},"content":"        String todoDescription \u003d todoAsArray[1].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"theeugenechong"},"content":"        return new Todo(todoDescription);","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":93,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} based on the format of the {@code deadline} command and returns a {@code Deadline} object","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"theeugenechong"},"content":"     * with description and deadline as entered by the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"theeugenechong"},"content":"     * @return a {@code Deadline} with a description and deadline as entered by the user","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if the deadline is lacking either a description or a date and time","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"theeugenechong"},"content":"     * @throws DateTimeParseException if the date and time do not follow the correct format or if an invalid date","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"theeugenechong"},"content":"     *                                date and time is entered","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"theeugenechong"},"content":"    public static Deadline parseAddDeadlineCommand(String userInput) throws InvalidCommandFormatException, DateTimeParseException {","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"theeugenechong"},"content":"        String[] deadlineAsArray \u003d userInput.split(WHITESPACE_SEQUENCE, 2);","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"theeugenechong"},"content":"        if(deadlineAsArray.length !\u003d 2) {","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because both description and deadline are lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":110,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":111,"author":{"gitId":"theeugenechong"},"content":"        String[] deadlineDescriptionAndBy \u003d deadlineAsArray[1].split(DEADLINE_PREFIX, 2);","lastModifiedDate":"2021-09-19"},{"lineNumber":112,"author":{"gitId":"theeugenechong"},"content":"        if (deadlineDescriptionAndBy.length !\u003d 2) {","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because either description or deadline is lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":116,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":117,"author":{"gitId":"theeugenechong"},"content":"        String deadlineDescription \u003d deadlineDescriptionAndBy[0].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":118,"author":{"gitId":"theeugenechong"},"content":"        String deadlineBy \u003d deadlineDescriptionAndBy[1].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":119,"author":{"gitId":"theeugenechong"},"content":"        boolean isInvalidDeadline \u003d deadlineDescription.isEmpty() || deadlineBy.isEmpty();","lastModifiedDate":"2021-09-19"},{"lineNumber":120,"author":{"gitId":"theeugenechong"},"content":"        if (isInvalidDeadline) {","lastModifiedDate":"2021-09-19"},{"lineNumber":121,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"theeugenechong"},"content":"        LocalDateTime deadlineDateTime \u003d parseDateTime(deadlineBy, DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"theeugenechong"},"content":"        return new Deadline(deadlineDescription, deadlineDateTime);","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":126,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":127,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} based on the format of the {@code event} command and returns an {@code Event} object","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"theeugenechong"},"content":"     * with description and event time as entered by the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"theeugenechong"},"content":"     * @return an {@code Event} with a description and event time as entered by the user","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if the event is lacking either a description or a date and time","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"theeugenechong"},"content":"     * @throws DateTimeParseException if the date and time do not follow the correct format or if an invalid date","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"theeugenechong"},"content":"     *                                date and time is entered","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"theeugenechong"},"content":"    public static Event parseAddEventCommand(String userInput) throws InvalidCommandFormatException, DateTimeParseException {","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"theeugenechong"},"content":"        String[] eventAsArray \u003d userInput.split(WHITESPACE_SEQUENCE, 2);","lastModifiedDate":"2021-09-19"},{"lineNumber":139,"author":{"gitId":"theeugenechong"},"content":"        if(eventAsArray.length !\u003d 2) {","lastModifiedDate":"2021-09-19"},{"lineNumber":140,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because both description and event time are lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":142,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":143,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":144,"author":{"gitId":"theeugenechong"},"content":"        String[] eventDescriptionAndWhen \u003d eventAsArray[1].split(EVENT_PREFIX, 2);","lastModifiedDate":"2021-09-19"},{"lineNumber":145,"author":{"gitId":"theeugenechong"},"content":"        if(eventDescriptionAndWhen.length !\u003d 2) {","lastModifiedDate":"2021-09-19"},{"lineNumber":146,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because either description or event time are lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":148,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":149,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":150,"author":{"gitId":"theeugenechong"},"content":"        String eventDescription \u003d eventDescriptionAndWhen[0].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":151,"author":{"gitId":"theeugenechong"},"content":"        String eventWhen \u003d eventDescriptionAndWhen[1].trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":152,"author":{"gitId":"theeugenechong"},"content":"        boolean isInvalidEvent \u003d eventDescription.isEmpty() || eventWhen.isEmpty();","lastModifiedDate":"2021-09-19"},{"lineNumber":153,"author":{"gitId":"theeugenechong"},"content":"        if (isInvalidEvent) {","lastModifiedDate":"2021-09-19"},{"lineNumber":154,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":155,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":156,"author":{"gitId":"theeugenechong"},"content":"        LocalDateTime eventDateTime \u003d parseDateTime(eventWhen, DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"theeugenechong"},"content":"        return new Event(eventDescription, eventDateTime);","lastModifiedDate":"2021-09-20"},{"lineNumber":158,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":159,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":160,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":161,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} based on the format of the {@code delete} command and returns the task ID of the task to","lastModifiedDate":"2021-09-20"},{"lineNumber":162,"author":{"gitId":"theeugenechong"},"content":"     * delete.","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":164,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"theeugenechong"},"content":"     * @return task ID of the task to delete","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if task ID is non-numeric, lacking from command","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"theeugenechong"},"content":"     * @throws NumberFormatException if task ID is not in the task list","lastModifiedDate":"2021-09-20"},{"lineNumber":168,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":169,"author":{"gitId":"theeugenechong"},"content":"    public static int parseDeleteCommand(String userInput) throws InvalidCommandFormatException, NumberFormatException {","lastModifiedDate":"2021-09-20"},{"lineNumber":170,"author":{"gitId":"theeugenechong"},"content":"        String[] deleteCommandAsArray \u003d userInput.split(WHITESPACE_SEQUENCE, 2);","lastModifiedDate":"2021-09-19"},{"lineNumber":171,"author":{"gitId":"theeugenechong"},"content":"        if(deleteCommandAsArray.length !\u003d 2) {","lastModifiedDate":"2021-09-19"},{"lineNumber":172,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because task ID is lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":173,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":174,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":175,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":176,"author":{"gitId":"theeugenechong"},"content":"        int indexOfTaskToDelete;","lastModifiedDate":"2021-09-20"},{"lineNumber":177,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":178,"author":{"gitId":"theeugenechong"},"content":"            /* \u0027- 1\u0027 to convert from 1-based to 0-based indexing */","lastModifiedDate":"2021-09-20"},{"lineNumber":179,"author":{"gitId":"theeugenechong"},"content":"            indexOfTaskToDelete \u003d Integer.parseInt(deleteCommandAsArray[1]) - 1;","lastModifiedDate":"2021-09-20"},{"lineNumber":180,"author":{"gitId":"theeugenechong"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":181,"author":{"gitId":"theeugenechong"},"content":"            throw new NumberFormatException();","lastModifiedDate":"2021-09-20"},{"lineNumber":182,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":183,"author":{"gitId":"theeugenechong"},"content":"        return indexOfTaskToDelete;","lastModifiedDate":"2021-09-20"},{"lineNumber":184,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":185,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":186,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":187,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} based on the format of the {@code find} command and returns the keyword to search for","lastModifiedDate":"2021-09-20"},{"lineNumber":188,"author":{"gitId":"theeugenechong"},"content":"     * as a {@code String}.","lastModifiedDate":"2021-09-20"},{"lineNumber":189,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":190,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":191,"author":{"gitId":"theeugenechong"},"content":"     * @return a {@code String} representing the keyword to search for","lastModifiedDate":"2021-09-20"},{"lineNumber":192,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if the keyword is lacking from the user input","lastModifiedDate":"2021-09-20"},{"lineNumber":193,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":194,"author":{"gitId":"theeugenechong"},"content":"    public static String parseFindCommand(String userInput) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-20"},{"lineNumber":195,"author":{"gitId":"theeugenechong"},"content":"        String[] findCommandAsArray \u003d userInput.split(WHITESPACE_SEQUENCE, 2);","lastModifiedDate":"2021-09-20"},{"lineNumber":196,"author":{"gitId":"theeugenechong"},"content":"        if (findCommandAsArray.length !\u003d 2) {","lastModifiedDate":"2021-09-20"},{"lineNumber":197,"author":{"gitId":"theeugenechong"},"content":"            /* throws exception because keyword is lacking */","lastModifiedDate":"2021-09-20"},{"lineNumber":198,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-20"},{"lineNumber":199,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":200,"author":{"gitId":"theeugenechong"},"content":"        return findCommandAsArray[1].trim();","lastModifiedDate":"2021-09-20"},{"lineNumber":201,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":202,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":203,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":204,"author":{"gitId":"theeugenechong"},"content":"     * Parses a {@code String} representing a date and time based on a format specified by {@code format}.","lastModifiedDate":"2021-09-20"},{"lineNumber":205,"author":{"gitId":"theeugenechong"},"content":"     * ","lastModifiedDate":"2021-09-20"},{"lineNumber":206,"author":{"gitId":"theeugenechong"},"content":"     * @param taskDateTime a {@code String} representing the date and time entered by the user","lastModifiedDate":"2021-09-20"},{"lineNumber":207,"author":{"gitId":"theeugenechong"},"content":"     * @param format date and time format to follow when parsing {@code taskDateTime}","lastModifiedDate":"2021-09-20"},{"lineNumber":208,"author":{"gitId":"theeugenechong"},"content":"     * @return a {@code LocalDateTime} object which represents the date and time shown by {@code taskDateTime}","lastModifiedDate":"2021-09-20"},{"lineNumber":209,"author":{"gitId":"theeugenechong"},"content":"     * @throws DateTimeParseException if {@code taskDateTime} does not follow format specified by {@code format}","lastModifiedDate":"2021-09-20"},{"lineNumber":210,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":211,"author":{"gitId":"theeugenechong"},"content":"    public static LocalDateTime parseDateTime(String taskDateTime, String format) throws DateTimeParseException {","lastModifiedDate":"2021-09-20"},{"lineNumber":212,"author":{"gitId":"theeugenechong"},"content":"        DateTimeFormatter formatToParse \u003d DateTimeFormatter.ofPattern(format);","lastModifiedDate":"2021-09-20"},{"lineNumber":213,"author":{"gitId":"theeugenechong"},"content":"        return LocalDateTime.parse(taskDateTime, formatToParse);","lastModifiedDate":"2021-09-20"},{"lineNumber":214,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":215,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":216,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":217,"author":{"gitId":"theeugenechong"},"content":"     * Converts a {@code LocalDateTime} object to a {@code String} with a format specified by {@code format}.","lastModifiedDate":"2021-09-20"},{"lineNumber":218,"author":{"gitId":"theeugenechong"},"content":"     * ","lastModifiedDate":"2021-09-20"},{"lineNumber":219,"author":{"gitId":"theeugenechong"},"content":"     * @param taskDateTime {@code LocalDateTime} object to be formatted","lastModifiedDate":"2021-09-20"},{"lineNumber":220,"author":{"gitId":"theeugenechong"},"content":"     * @param format date and time format to follow when converting {@code taskDateTime} to {@code String}","lastModifiedDate":"2021-09-20"},{"lineNumber":221,"author":{"gitId":"theeugenechong"},"content":"     * @return formatted {@code String} which represents {@code taskDateTime}","lastModifiedDate":"2021-09-20"},{"lineNumber":222,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":223,"author":{"gitId":"theeugenechong"},"content":"    public static String dateTimeToString(LocalDateTime taskDateTime, String format) {","lastModifiedDate":"2021-09-20"},{"lineNumber":224,"author":{"gitId":"theeugenechong"},"content":"        DateTimeFormatter formatToConvertTo \u003d DateTimeFormatter.ofPattern(format);","lastModifiedDate":"2021-09-20"},{"lineNumber":225,"author":{"gitId":"theeugenechong"},"content":"        return taskDateTime.format(formatToConvertTo);","lastModifiedDate":"2021-09-20"},{"lineNumber":226,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":227,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":228,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":229,"author":{"gitId":"theeugenechong"},"content":"     * Helper function to improve readability of {@code parseCommandWord} method.","lastModifiedDate":"2021-09-20"},{"lineNumber":230,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":231,"author":{"gitId":"theeugenechong"},"content":"    private static boolean beginsWith(String userInput, String command) {","lastModifiedDate":"2021-09-19"},{"lineNumber":232,"author":{"gitId":"theeugenechong"},"content":"        return userInput.trim().toLowerCase().startsWith(command);","lastModifiedDate":"2021-09-19"},{"lineNumber":233,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":234,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"theeugenechong":234}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeCommandStrings.DATE_TIME_OUTPUT_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":" * Subclass of {@code Task} which has an extra attribute {@code by} which represents","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":" * the deadline of the task.","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"    protected final String TASK_TYPE \u003d \"D\";","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"        setBy(by);","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"        return TASK_TYPE;","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"        return by;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"    public void setBy(LocalDateTime by) {","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"     * Converts {@code LocalDateTime} attribute to a formatted date and time {@code String} which looks nice.","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString() + \" (by: \" + Parser.dateTimeToString(by, DATE_TIME_OUTPUT_FORMAT) + \")\";","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"theeugenechong":41}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeCommandStrings.DATE_TIME_OUTPUT_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":" * Subclass of {@code Task} which has an extra attribute {@code when} which represents","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":" * when the event is happening.","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"    protected final String TASK_TYPE \u003d \"E\";","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"    protected LocalDateTime when;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"    public Event(String description, LocalDateTime when) {","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"        setWhen(when);","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"        return TASK_TYPE;","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"    public LocalDateTime getWhen() {","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"        return when;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"    public void setWhen(LocalDateTime when) {","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"        this.when \u003d when;","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"     * Converts {@code LocalDateTime} attribute to a formatted date and time {@code String} which looks nice.","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString() + \" (at: \" + Parser.dateTimeToString(when, DATE_TIME_OUTPUT_FORMAT) + \")\";","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"theeugenechong":41}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Parent class of {@code Todo}, {@code Event} and {@code Deadline}.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"    protected String description;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"        return description;","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"        return isDone;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"        isDone \u003d done;","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"            return \"X\";","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"            return \" \";","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"theeugenechong":45}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.task;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.datasaver.DataManager;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidCommandFormatException;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":" * Represents the list containing Duke\u0027s {@code Task}s.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":" * Tasks can be added, deleted, and marked done from the list in this class.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"public class TaskList {","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"        return taskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"    public int size() {","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"        return taskList.size();","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} to obtain the task ID of the task to mark done.","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"     * Marks the task with the task ID in {@code taskList} as done. An error message is printed if task ID entered by","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"     * the user is non-numeric, lacking from the command or not in the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the updated done status of the task to Duke\u0027s storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if task ID is non-numeric, lacking from command","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"     * @throws IndexOutOfBoundsException if task ID is not in the task list","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":"    public void markTaskDone(String userInput, DataManager dataManager) throws InvalidCommandFormatException, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":"            int indexOfTaskToMarkDone \u003d Parser.parseDoneCommand(userInput);","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"            taskList.get(indexOfTaskToMarkDone).setDone(true);","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskMarkedDoneMessage(taskList.get(indexOfTaskToMarkDone));","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"            dataManager.saveData(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException | NumberFormatException fe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"        } catch (IndexOutOfBoundsException ioobe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} to obtain a {@code Todo} object to add to the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"theeugenechong"},"content":"     * The {@code Todo} is added to the task list. An error message is printed if the todo is lacking a description.","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the new {@code Todo} to Duke\u0027s storage","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if todo is lacking description","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"theeugenechong"},"content":"    public void addTodo(String userInput, DataManager dataManager) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"theeugenechong"},"content":"            Todo newTodo \u003d Parser.parseAddTodoCommand(userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"theeugenechong"},"content":"            taskList.add(newTodo);","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskAddedMessage(newTodo, taskList.size());","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"theeugenechong"},"content":"            dataManager.saveData(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":69,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} to obtain a {@code Deadline} object to add to the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"theeugenechong"},"content":"     * The {@code Deadline} is added to the task list. An error message is printed if the deadline is lacking either a","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"theeugenechong"},"content":"     * description or a date and time. An error message is also printed if the date and time do not follow the format","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"theeugenechong"},"content":"     * dd-MM-yyyy HH:mm or if an invalid date and time is entered.","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the new {@code Deadline} to Duke\u0027s storage","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if the deadline is lacking either a description or a date and time","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidDateTimeException if the date and time do not follow the correct format or if an invalid date","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"theeugenechong"},"content":"     *                                  date and time is entered","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"theeugenechong"},"content":"    public void addDeadline(String userInput, DataManager dataManager) throws InvalidCommandFormatException, InvalidDateTimeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"theeugenechong"},"content":"            Deadline newDeadline \u003d Parser.parseAddDeadlineCommand(userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"theeugenechong"},"content":"            taskList.add(newDeadline);","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskAddedMessage(newDeadline, taskList.size());","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"theeugenechong"},"content":"            dataManager.saveData(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"theeugenechong"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidDateTimeException();","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":97,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":98,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":99,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} to obtain a {@code Event} object to add to the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"theeugenechong"},"content":"     * The {@code Event} is added to the task list. An error message is printed if the event is lacking either a","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"theeugenechong"},"content":"     * description or a date and time. An error message is also printed if the date and time do not follow the format","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"theeugenechong"},"content":"     * dd-MM-yyyy HH:mm or if an invalid date and time is entered.","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the new {@code Event} to Duke\u0027s storage","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if the event is lacking either a description or a date and time","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidDateTimeException if the date and time do not follow the correct format or if an invalid date","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"theeugenechong"},"content":"     *                                  date and time is entered","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"theeugenechong"},"content":"    public void addEvent(String userInput, DataManager dataManager) throws InvalidCommandFormatException, InvalidDateTimeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"theeugenechong"},"content":"            Event newEvent \u003d Parser.parseAddEventCommand(userInput);","lastModifiedDate":"2021-09-19"},{"lineNumber":114,"author":{"gitId":"theeugenechong"},"content":"            taskList.add(newEvent);","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskAddedMessage(newEvent, taskList.size());","lastModifiedDate":"2021-09-19"},{"lineNumber":116,"author":{"gitId":"theeugenechong"},"content":"            dataManager.saveData(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":117,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":119,"author":{"gitId":"theeugenechong"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidDateTimeException();","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":124,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"theeugenechong"},"content":"     * Parses {@code userInput} to obtain the task ID of the task to delete.","lastModifiedDate":"2021-09-20"},{"lineNumber":126,"author":{"gitId":"theeugenechong"},"content":"     * Deletes the task with the task ID in {@code taskList}. An error message is printed if task ID entered by","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"theeugenechong"},"content":"     * the user is non-numeric, lacking from the command or not in the task list.","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"theeugenechong"},"content":"     * @param userInput full user input string","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"theeugenechong"},"content":"     * @param dataManager {@code DataManager} which saves the updated task list to Duke\u0027s storage file","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"theeugenechong"},"content":"     * @throws InvalidCommandFormatException if task ID is non-numeric, lacking from command","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"theeugenechong"},"content":"     * @throws IndexOutOfBoundsException if task ID is not in the task list","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"theeugenechong"},"content":"    public void deleteTask(String userInput, DataManager dataManager) throws InvalidCommandFormatException, IndexOutOfBoundsException {","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"theeugenechong"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":136,"author":{"gitId":"theeugenechong"},"content":"            int indexOfTaskToDelete \u003d Parser.parseDeleteCommand(userInput);","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"theeugenechong"},"content":"            Ui.printTaskDeletedMessage(taskList.get(indexOfTaskToDelete), taskList.size());","lastModifiedDate":"2021-09-19"},{"lineNumber":138,"author":{"gitId":"theeugenechong"},"content":"            taskList.remove(taskList.get(indexOfTaskToDelete));","lastModifiedDate":"2021-09-19"},{"lineNumber":139,"author":{"gitId":"theeugenechong"},"content":"            dataManager.saveData(taskList);","lastModifiedDate":"2021-09-19"},{"lineNumber":140,"author":{"gitId":"theeugenechong"},"content":"        } catch (InvalidCommandFormatException | NumberFormatException fe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"theeugenechong"},"content":"            throw new InvalidCommandFormatException();","lastModifiedDate":"2021-09-19"},{"lineNumber":142,"author":{"gitId":"theeugenechong"},"content":"        } catch (IndexOutOfBoundsException ioobe) {","lastModifiedDate":"2021-09-20"},{"lineNumber":143,"author":{"gitId":"theeugenechong"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-09-19"},{"lineNumber":144,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":145,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":146,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"theeugenechong":146}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.task;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":" * Subclass of {@code Task} which represents a daily todo with no extra attributes.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"    protected final String TASK_TYPE \u003d \"T\";","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"        super(description);","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"        return TASK_TYPE;","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString();","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"theeugenechong":22}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theeugenechong"},"content":"package duke.ui;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"theeugenechong"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"theeugenechong"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"theeugenechong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"theeugenechong"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeConstants.INDENT;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeConstants.STRAIGHT_LINE;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeConstants.WHITESPACE;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.FILE_DATE_TIME_WRONG_FORMAT_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.FILE_WRONG_FORMAT_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeDataStorageConstants.INVALID_FILE_TYPE_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.BYE_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.BYE_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.COMMAND_WRONG_FORMAT_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.DATE_TIME_INVALID_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.DEADLINE_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.DELETE_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.DONE_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.DUKE_LOGO;","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.ENTER_HELP;","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.EVENT_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.FIND_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.HELLO_FROM;","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.HELP_INTRO_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.HERE_ARE_TASKS_CONTAINING_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.HERE_IS_TASK_LIST_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.HEY_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.LIST_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.QUERY_NOT_FOUND_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.TASK_ADDED_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.TASK_DELETED_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.TASK_LIST_EMPTY_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.TASK_MARKED_DONE_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.TASK_NOT_IN_LIST_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.TODO_COMMAND_FORMAT;","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"theeugenechong"},"content":"import static duke.constants.DukeOutputMessages.UNRECOGNIZED_COMMAND_MESSAGE;","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"theeugenechong"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"theeugenechong"},"content":" * Handles interaction with the user. Such interaction includes reading input","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"theeugenechong"},"content":" * from the user and printing output and error messages for the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"theeugenechong"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"theeugenechong"},"content":"public class Ui {","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"theeugenechong"},"content":"    /** Offset to  differentiate between 0-based and 1-based indexing */","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"theeugenechong"},"content":"    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"theeugenechong"},"content":"    /** Format of task to be printed in list */","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"theeugenechong"},"content":"    private static final String DISPLAYED_TASK_FORMAT \u003d \" %1$d. %2$s\";","lastModifiedDate":"2021-09-18"},{"lineNumber":52,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"theeugenechong"},"content":"    private static final Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"theeugenechong"},"content":"    private static final PrintStream out \u003d System.out;","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"theeugenechong"},"content":"    public static String readUserInput() {","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"theeugenechong"},"content":"        return in.nextLine();","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"theeugenechong"},"content":"     * Prints greeting to the user upon entry of the program along with a logo.","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"theeugenechong"},"content":"    public static void printHeyMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"theeugenechong"},"content":"        out.println(HELLO_FROM + DUKE_LOGO);","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"theeugenechong"},"content":"        out.println(HEY_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"theeugenechong"},"content":"     * Prints a numbered list of tasks when {@code list} command is entered by the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"theeugenechong"},"content":"     * @param taskList list of tasks to be printed","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"theeugenechong"},"content":"    public static void printTaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-18"},{"lineNumber":76,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"theeugenechong"},"content":"        out.println(HERE_IS_TASK_LIST_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"theeugenechong"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"theeugenechong"},"content":"            String formattedTask \u003d formatTaskToBeDisplayed(i + DISPLAYED_INDEX_OFFSET, taskList.get(i));","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"theeugenechong"},"content":"            out.println(formattedTask);","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"theeugenechong"},"content":"     * Prints a numbered list of tasks containing {@code query} when {@code find} command is entered by the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"theeugenechong"},"content":"     * @param taskListContainingQuery list of tasks containing {@code query}","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"theeugenechong"},"content":"     * @param query keyword searched for by user using the {@code find} command","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"theeugenechong"},"content":"    public static void printTaskListContainingQuery(ArrayList\u003cTask\u003e taskListContainingQuery, String query) {","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"theeugenechong"},"content":"        out.println(HERE_ARE_TASKS_CONTAINING_MESSAGE + \"\\\"\" + query + \"\\\"\");","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"theeugenechong"},"content":"        for (int i \u003d 0; i \u003c taskListContainingQuery.size(); i++) {","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"theeugenechong"},"content":"            String formattedTask \u003d formatTaskToBeDisplayed(i + DISPLAYED_INDEX_OFFSET, taskListContainingQuery.get(i));","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"theeugenechong"},"content":"            out.println(formattedTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"theeugenechong"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user about a task that has been successfully marked done along with the task.","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"theeugenechong"},"content":"     * @param doneTask {@code Task} which has been marked done","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"theeugenechong"},"content":"    public static void printTaskMarkedDoneMessage(Task doneTask) {","lastModifiedDate":"2021-09-18"},{"lineNumber":107,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"theeugenechong"},"content":"        out.println(TASK_MARKED_DONE_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"theeugenechong"},"content":"        out.println(INDENT + doneTask);","lastModifiedDate":"2021-09-19"},{"lineNumber":110,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":111,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":112,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that a task has been added successfully along with the task, and number of","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"theeugenechong"},"content":"     * tasks currently in the list.","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"theeugenechong"},"content":"     * @param addedTask {@code Task} which was added successfully","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"theeugenechong"},"content":"     * @param taskListSize size of {@code TaskList} after addition of the new task to inform user of the current","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"theeugenechong"},"content":"     *                     number of tasks in the list","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"theeugenechong"},"content":"    public static void printTaskAddedMessage(Task addedTask, int taskListSize) {","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"theeugenechong"},"content":"        out.println(TASK_ADDED_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":124,"author":{"gitId":"theeugenechong"},"content":"        out.println(INDENT + addedTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"theeugenechong"},"content":"        out.println(WHITESPACE + \"You now have \" + taskListSize + \" task(s) in the list.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":126,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":127,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":128,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":129,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that a task has been deleted successfully along with the task, and number of","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"theeugenechong"},"content":"     * tasks left in the list.","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"theeugenechong"},"content":"     * @param deletedTask {@code Task} which was deleted successfully","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"theeugenechong"},"content":"     * @param taskListSize size of {@code TaskList} after deletion of the task to inform user of the current","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"theeugenechong"},"content":"     *                     number of tasks in the list","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"theeugenechong"},"content":"    public static void printTaskDeletedMessage(Task deletedTask, int taskListSize) {","lastModifiedDate":"2021-09-18"},{"lineNumber":138,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":139,"author":{"gitId":"theeugenechong"},"content":"        out.println(TASK_DELETED_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":140,"author":{"gitId":"theeugenechong"},"content":"        out.println(INDENT + deletedTask);","lastModifiedDate":"2021-09-19"},{"lineNumber":141,"author":{"gitId":"theeugenechong"},"content":"        out.println(WHITESPACE + \"You now have \" + (taskListSize - 1) + \" task(s) in the list.\" );","lastModifiedDate":"2021-09-19"},{"lineNumber":142,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":143,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":144,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":145,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that the {@code TaskList} is empty.","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":148,"author":{"gitId":"theeugenechong"},"content":"    public static void printEmptyListMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":149,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":150,"author":{"gitId":"theeugenechong"},"content":"        out.println(TASK_LIST_EMPTY_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":151,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":152,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":153,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":154,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":155,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that the command entered is of the wrong format.","lastModifiedDate":"2021-09-20"},{"lineNumber":156,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message suggesting the user to enter the {@code help} command for help.","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":158,"author":{"gitId":"theeugenechong"},"content":"    public static void printInvalidCommandFormatMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":159,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":160,"author":{"gitId":"theeugenechong"},"content":"        out.println(COMMAND_WRONG_FORMAT_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":161,"author":{"gitId":"theeugenechong"},"content":"        out.println(ENTER_HELP);","lastModifiedDate":"2021-09-19"},{"lineNumber":162,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":163,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":164,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":165,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that the task they are trying to mark done or delete is not in the","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"theeugenechong"},"content":"     * list.","lastModifiedDate":"2021-09-20"},{"lineNumber":168,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":169,"author":{"gitId":"theeugenechong"},"content":"    public static void printTaskNotInListMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":170,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":171,"author":{"gitId":"theeugenechong"},"content":"        out.println(TASK_NOT_IN_LIST_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":172,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":173,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":174,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":175,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":176,"author":{"gitId":"theeugenechong"},"content":"     * Prints a list of commands and their correct formats to aid the user in usage of Duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":177,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":178,"author":{"gitId":"theeugenechong"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-18"},{"lineNumber":179,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":180,"author":{"gitId":"theeugenechong"},"content":"        out.println(HELP_INTRO_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":181,"author":{"gitId":"theeugenechong"},"content":"        out.println(LIST_COMMAND_FORMAT);","lastModifiedDate":"2021-09-19"},{"lineNumber":182,"author":{"gitId":"theeugenechong"},"content":"        out.println(DONE_COMMAND_FORMAT);","lastModifiedDate":"2021-09-19"},{"lineNumber":183,"author":{"gitId":"theeugenechong"},"content":"        out.println(TODO_COMMAND_FORMAT);","lastModifiedDate":"2021-09-19"},{"lineNumber":184,"author":{"gitId":"theeugenechong"},"content":"        out.println(DEADLINE_COMMAND_FORMAT);","lastModifiedDate":"2021-09-19"},{"lineNumber":185,"author":{"gitId":"theeugenechong"},"content":"        out.println(EVENT_COMMAND_FORMAT);","lastModifiedDate":"2021-09-19"},{"lineNumber":186,"author":{"gitId":"theeugenechong"},"content":"        out.println(FIND_COMMAND_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":187,"author":{"gitId":"theeugenechong"},"content":"        out.println(DELETE_COMMAND_FORMAT);","lastModifiedDate":"2021-09-19"},{"lineNumber":188,"author":{"gitId":"theeugenechong"},"content":"        out.println(BYE_COMMAND_FORMAT);","lastModifiedDate":"2021-09-20"},{"lineNumber":189,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":190,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":191,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":192,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":193,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that the keyword being searched for with {@code find} could not be","lastModifiedDate":"2021-09-20"},{"lineNumber":194,"author":{"gitId":"theeugenechong"},"content":"     * found in the list of tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":195,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":196,"author":{"gitId":"theeugenechong"},"content":"    public static void printQueryNotFoundMessage() {","lastModifiedDate":"2021-09-20"},{"lineNumber":197,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":198,"author":{"gitId":"theeugenechong"},"content":"        out.println(QUERY_NOT_FOUND_MESSAGE);","lastModifiedDate":"2021-09-20"},{"lineNumber":199,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":200,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":201,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":202,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":203,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that data in the storage file is of the wrong format.","lastModifiedDate":"2021-09-20"},{"lineNumber":204,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":205,"author":{"gitId":"theeugenechong"},"content":"    public static void printFileTaskInvalidFormatMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":206,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":207,"author":{"gitId":"theeugenechong"},"content":"        out.println(FILE_WRONG_FORMAT_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":208,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":209,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":210,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":211,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":212,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that the type of file used as a storage file is invalid.","lastModifiedDate":"2021-09-20"},{"lineNumber":213,"author":{"gitId":"theeugenechong"},"content":"     * A valid file ends with {@code \".txt\"}.","lastModifiedDate":"2021-09-20"},{"lineNumber":214,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":215,"author":{"gitId":"theeugenechong"},"content":"    public static void printInvalidFileTypeMessage() {","lastModifiedDate":"2021-09-19"},{"lineNumber":216,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":217,"author":{"gitId":"theeugenechong"},"content":"        out.println(INVALID_FILE_TYPE_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":218,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":219,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":220,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":221,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":222,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that date and time read from storage file is invalid or of the wrong format","lastModifiedDate":"2021-09-20"},{"lineNumber":223,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":224,"author":{"gitId":"theeugenechong"},"content":"    public static void printFileInvalidDateTimeMessage() {","lastModifiedDate":"2021-09-20"},{"lineNumber":225,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":226,"author":{"gitId":"theeugenechong"},"content":"        out.println(FILE_DATE_TIME_WRONG_FORMAT_MESSAGE);","lastModifiedDate":"2021-09-20"},{"lineNumber":227,"author":{"gitId":"theeugenechong"},"content":"        out.println(ENTER_HELP);","lastModifiedDate":"2021-09-20"},{"lineNumber":228,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":229,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":230,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":231,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":232,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that date and time entered is invalid or of the wrong format.","lastModifiedDate":"2021-09-20"},{"lineNumber":233,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":234,"author":{"gitId":"theeugenechong"},"content":"    public static void printInvalidDateTimeMessage() {","lastModifiedDate":"2021-09-20"},{"lineNumber":235,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":236,"author":{"gitId":"theeugenechong"},"content":"        out.println(DATE_TIME_INVALID_MESSAGE);","lastModifiedDate":"2021-09-20"},{"lineNumber":237,"author":{"gitId":"theeugenechong"},"content":"        out.println(ENTER_HELP);","lastModifiedDate":"2021-09-20"},{"lineNumber":238,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-20"},{"lineNumber":239,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":240,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":241,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":242,"author":{"gitId":"theeugenechong"},"content":"     * Prints a message informing the user that an unrecognized command has been entered.","lastModifiedDate":"2021-09-20"},{"lineNumber":243,"author":{"gitId":"theeugenechong"},"content":"     * Commands recognized can be found in the {@code CommandWord} enumeration.","lastModifiedDate":"2021-09-20"},{"lineNumber":244,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":245,"author":{"gitId":"theeugenechong"},"content":"    public static void printUnrecognizedCommandMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":246,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":247,"author":{"gitId":"theeugenechong"},"content":"        out.println(UNRECOGNIZED_COMMAND_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":248,"author":{"gitId":"theeugenechong"},"content":"        out.println(ENTER_HELP);","lastModifiedDate":"2021-09-19"},{"lineNumber":249,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":250,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":251,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":252,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":253,"author":{"gitId":"theeugenechong"},"content":"     * Prints a greeting message for the user before the program exits.","lastModifiedDate":"2021-09-20"},{"lineNumber":254,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":255,"author":{"gitId":"theeugenechong"},"content":"    public static void printByeMessage() {","lastModifiedDate":"2021-09-18"},{"lineNumber":256,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":257,"author":{"gitId":"theeugenechong"},"content":"        out.println(BYE_MESSAGE);","lastModifiedDate":"2021-09-19"},{"lineNumber":258,"author":{"gitId":"theeugenechong"},"content":"        out.println(STRAIGHT_LINE);","lastModifiedDate":"2021-09-19"},{"lineNumber":259,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":260,"author":{"gitId":"theeugenechong"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":261,"author":{"gitId":"theeugenechong"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":262,"author":{"gitId":"theeugenechong"},"content":"     * Formats a {@code Task} object into a {@code String} which is printed when listing the task","lastModifiedDate":"2021-09-20"},{"lineNumber":263,"author":{"gitId":"theeugenechong"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":264,"author":{"gitId":"theeugenechong"},"content":"     * @param displayedIndex index of {@code Task} in the printed list","lastModifiedDate":"2021-09-20"},{"lineNumber":265,"author":{"gitId":"theeugenechong"},"content":"     * @param task {@code Task} to be printed","lastModifiedDate":"2021-09-20"},{"lineNumber":266,"author":{"gitId":"theeugenechong"},"content":"     * @return formatted {@code String} which appends {@code task} to a number","lastModifiedDate":"2021-09-20"},{"lineNumber":267,"author":{"gitId":"theeugenechong"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":268,"author":{"gitId":"theeugenechong"},"content":"    private static String formatTaskToBeDisplayed(int displayedIndex, Task task) {","lastModifiedDate":"2021-09-18"},{"lineNumber":269,"author":{"gitId":"theeugenechong"},"content":"        return String.format(DISPLAYED_TASK_FORMAT, displayedIndex, task.toString());","lastModifiedDate":"2021-09-18"},{"lineNumber":270,"author":{"gitId":"theeugenechong"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":271,"author":{"gitId":"theeugenechong"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"theeugenechong":271}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"theeugenechong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"theeugenechong"},"content":"java -classpath ..\\bin duke.command.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"theeugenechong":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"theeugenechong"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin  ../src/main/java/duke/exception/*.java ../src/main/java/duke/command/*.java ../src/main/java/duke/task/*.java","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"theeugenechong":1,"-":37}}]
