[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"    public static final int MAX_NUMBER_OF_TASKS \u003d 100;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"    public static final String BY_DIVIDER \u003d \"/by\";","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"    public static final String AT_DIVIDER \u003d \"/at\";","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    public static final String LINE_SEPARATOR \u003d \"_____________________________\";","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_EXIT \u003d \"bye\";","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"    public static boolean canRunDuke \u003d true;","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"     * Splits the input string and returns the command at the start of the string","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"     * @param args the input string","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"     * @return the command the user entered","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"    public static String getCommand(String args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"        String[] words \u003d args.split(\" \");","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"        String[] commandArray \u003d Arrays.copyOf(words, 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"        String command \u003d getFormattedString(Arrays.toString(commandArray));","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"        return command;","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"     * Splits the input string and returns the item after the command","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"     * @param args the input string","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"     * @return the item after the command the user entered","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"    public static String getItem(String args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"        String[] words \u003d args.split(\" \");","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"        String[] itemArray \u003d Arrays.copyOfRange(words, 1, words.length);","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"        String item \u003d getFormattedString(Arrays.toString(itemArray));","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"        return item;","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"     * Formats the string that was converted from an array. Delete brackets and commas","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"     * @param args the input string that was converted from an array","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"     * @return the formatted string without brackets and commas","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"    public static String getFormattedString(String args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"        String formattedString \u003d args.replace(\",\", \"\")","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"                .replace(\"]\", \"\")","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"                .replace(\"[\", \"\")","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"                .trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"        return formattedString;","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"     * Checks if the input string has an empty item after a command","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"     * @param args the input string the user entered","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"     * @return true if the item after the command is empty, false otherwise","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"    public static boolean isEmptyItem(String args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"        if (getItem(args).equals(\"\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"     * returns if there is a time entered for a deadline or event task","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"     * @param args the input string the user entered","lastModifiedDate":"2021-09-06"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"     * @return true if there is a time entered, false otherwise","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"    public static boolean canGetTime(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"        String description \u003d getItem(args);","lastModifiedDate":"2021-09-06"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"        String[] time \u003d description.substring(description.indexOf(\"/\")).split(\" \");","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"        if (time.length \u003c 2) {","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"            return false;","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"        return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"     * Checks if the item from the user input is invalid for deadline and event tasks","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"     * @param args the item to be checked","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"     * @return true if the item does not contain a \u0027/by\u0027 or does not have time after /by, false otherwise","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"    public static boolean isInvalidDeadline(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"        if (!getItem(args).contains(BY_DIVIDER)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"        if (!canGetTime(args)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-08-31"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"     * Checks if the item from the user input is invalid for deadline and event tasks","lastModifiedDate":"2021-09-06"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"     * @param args the item to be checked","lastModifiedDate":"2021-09-06"},{"lineNumber":110,"author":{"gitId":"fansxx"},"content":"     * @return true if the item does not contain a \u0027/at\u0027 or does not have time after /at, false otherwise","lastModifiedDate":"2021-09-06"},{"lineNumber":111,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":112,"author":{"gitId":"fansxx"},"content":"    public static boolean isInvalidEvent(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":113,"author":{"gitId":"fansxx"},"content":"        if (!getItem(args).contains(AT_DIVIDER)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":114,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-08-31"},{"lineNumber":115,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"fansxx"},"content":"        if (!canGetTime(args)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":117,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":118,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":119,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":123,"author":{"gitId":"fansxx"},"content":"     * Reads the input and command entered by the user and execute task according to user command","lastModifiedDate":"2021-09-06"},{"lineNumber":124,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":125,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the full input the user entered","lastModifiedDate":"2021-09-06"},{"lineNumber":126,"author":{"gitId":"fansxx"},"content":"     * @param command the command parsed from the input","lastModifiedDate":"2021-09-06"},{"lineNumber":127,"author":{"gitId":"fansxx"},"content":"     * @param manager the task manager instance handling the tasks","lastModifiedDate":"2021-09-06"},{"lineNumber":128,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":129,"author":{"gitId":"fansxx"},"content":"    public static void executeCommand(String inputStr, String command, TaskManager manager) throws DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":130,"author":{"gitId":"fansxx"},"content":"        switch (command) {","lastModifiedDate":"2021-09-06"},{"lineNumber":131,"author":{"gitId":"fansxx"},"content":"        case COMMAND_EXIT:","lastModifiedDate":"2021-09-06"},{"lineNumber":132,"author":{"gitId":"fansxx"},"content":"            System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":133,"author":{"gitId":"fansxx"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"fansxx"},"content":"            System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":135,"author":{"gitId":"fansxx"},"content":"            canRunDuke \u003d false;","lastModifiedDate":"2021-09-06"},{"lineNumber":136,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":137,"author":{"gitId":"fansxx"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-09-06"},{"lineNumber":138,"author":{"gitId":"fansxx"},"content":"            manager.printTaskList();","lastModifiedDate":"2021-09-06"},{"lineNumber":139,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":140,"author":{"gitId":"fansxx"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-09-06"},{"lineNumber":141,"author":{"gitId":"fansxx"},"content":"            if (isEmptyItem(inputStr)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":142,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, did you forget to enter the task to be marked as done?\");","lastModifiedDate":"2021-09-06"},{"lineNumber":143,"author":{"gitId":"fansxx"},"content":"            } else if (manager.getNumberOfTasksUndone() \u003d\u003d 0) {","lastModifiedDate":"2021-09-06"},{"lineNumber":144,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, there are no tasks to be marked done!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":145,"author":{"gitId":"fansxx"},"content":"            } else if (manager.getNumberOfTasksAdded() \u003c Integer.parseInt(getItem(inputStr))) {","lastModifiedDate":"2021-09-07"},{"lineNumber":146,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, there is no task \" + Integer.parseInt(getItem(inputStr)) + \"!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"fansxx"},"content":"            } else if (manager.isTaskDone(inputStr)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":148,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, this task is already marked as done!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":149,"author":{"gitId":"fansxx"},"content":"            } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":150,"author":{"gitId":"fansxx"},"content":"                manager.markTaskAsDone(inputStr);","lastModifiedDate":"2021-09-06"},{"lineNumber":151,"author":{"gitId":"fansxx"},"content":"                break;","lastModifiedDate":"2021-09-06"},{"lineNumber":152,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":153,"author":{"gitId":"fansxx"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"fansxx"},"content":"            if (isEmptyItem(inputStr)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":155,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, the description of a ToDo cannot be empty!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":156,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":157,"author":{"gitId":"fansxx"},"content":"            String item \u003d getItem(inputStr);","lastModifiedDate":"2021-08-31"},{"lineNumber":158,"author":{"gitId":"fansxx"},"content":"            manager.addToDoTaskToList(item);","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":160,"author":{"gitId":"fansxx"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"fansxx"},"content":"            if (isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":162,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, the description of a deadline cannot be empty!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":163,"author":{"gitId":"fansxx"},"content":"            } else if (isInvalidDeadline(inputStr)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":164,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, the time of a deadline cannot be empty!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":165,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":166,"author":{"gitId":"fansxx"},"content":"            item \u003d getItem(inputStr);","lastModifiedDate":"2021-09-06"},{"lineNumber":167,"author":{"gitId":"fansxx"},"content":"            manager.addDeadlineTaskToList(item);","lastModifiedDate":"2021-09-06"},{"lineNumber":168,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":169,"author":{"gitId":"fansxx"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-09-06"},{"lineNumber":170,"author":{"gitId":"fansxx"},"content":"            if (isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":171,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, the description of an event cannot be empty!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":172,"author":{"gitId":"fansxx"},"content":"            } else if (isInvalidEvent(inputStr)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":173,"author":{"gitId":"fansxx"},"content":"                throw new DukeException(\"Oops, the time of an event cannot be empty!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":174,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":175,"author":{"gitId":"fansxx"},"content":"            item \u003d getItem(inputStr);","lastModifiedDate":"2021-09-06"},{"lineNumber":176,"author":{"gitId":"fansxx"},"content":"            manager.addEventTaskToList(item);","lastModifiedDate":"2021-09-06"},{"lineNumber":177,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":178,"author":{"gitId":"fansxx"},"content":"        default:","lastModifiedDate":"2021-09-06"},{"lineNumber":179,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, command not recognised!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":180,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":181,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":182,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":183,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":184,"author":{"gitId":"fansxx"},"content":"     * prints welcome message","lastModifiedDate":"2021-09-07"},{"lineNumber":185,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":186,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":187,"author":{"gitId":"fansxx"},"content":"    private static void printWelcomeMessage() {","lastModifiedDate":"2021-09-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-06"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-06"},{"lineNumber":193,"author":{"gitId":"fansxx"},"content":"        System.out.println(logo);","lastModifiedDate":"2021-09-06"},{"lineNumber":194,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":195,"author":{"gitId":"fansxx"},"content":"        // greet","lastModifiedDate":"2021-09-06"},{"lineNumber":196,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2021-09-06"},{"lineNumber":197,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-09-06"},{"lineNumber":198,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":199,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":200,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":201,"author":{"gitId":"fansxx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-07"},{"lineNumber":202,"author":{"gitId":"fansxx"},"content":"        printWelcomeMessage();","lastModifiedDate":"2021-09-07"},{"lineNumber":203,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":204,"author":{"gitId":"fansxx"},"content":"        // to read input on each new line, Duke constantly scans input in this loop","lastModifiedDate":"2021-09-06"},{"lineNumber":205,"author":{"gitId":"fansxx"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-06"},{"lineNumber":206,"author":{"gitId":"fansxx"},"content":"        TaskManager manager \u003d new TaskManager(MAX_NUMBER_OF_TASKS);","lastModifiedDate":"2021-09-06"},{"lineNumber":207,"author":{"gitId":"fansxx"},"content":"        while(canRunDuke) {","lastModifiedDate":"2021-09-06"},{"lineNumber":208,"author":{"gitId":"fansxx"},"content":"            String inputStr \u003d sc.nextLine();","lastModifiedDate":"2021-09-06"},{"lineNumber":209,"author":{"gitId":"fansxx"},"content":"            String command \u003d getCommand(inputStr);","lastModifiedDate":"2021-09-06"},{"lineNumber":210,"author":{"gitId":"fansxx"},"content":"            try {","lastModifiedDate":"2021-09-06"},{"lineNumber":211,"author":{"gitId":"fansxx"},"content":"                executeCommand(inputStr, command, manager);","lastModifiedDate":"2021-09-06"},{"lineNumber":212,"author":{"gitId":"fansxx"},"content":"            } catch (DukeException dukeException) {","lastModifiedDate":"2021-09-06"},{"lineNumber":213,"author":{"gitId":"fansxx"},"content":"                System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":214,"author":{"gitId":"fansxx"},"content":"                System.out.println(dukeException.getMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":215,"author":{"gitId":"fansxx"},"content":"                System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":216,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":217,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":219,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"fansxx":212,"-":8}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"        super(message);","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"fansxx":8}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":15}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"    protected String at;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":15}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"        return (isDone? \"X\" : \" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"    /* mark as done */","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"fansxx":25}},{"path":"src/main/java/duke/tasks/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"    public static final String BY_DIVIDER \u003d \"/by\";","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"    public static final String AT_DIVIDER \u003d \"/at\";","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"    public static final String LINE_SEPARATOR \u003d \"_____________________________\";","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"    private static int numberOfTasksUndone;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"    private static int numberOfTasksAdded;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"    private static Task[] taskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    public static int getNumberOfTasksUndone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"        return numberOfTasksUndone;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"    public static int getNumberOfTasksAdded() {","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"        return numberOfTasksAdded;","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"    public TaskManager(int maxNumberOfTasks) {","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"        this.numberOfTasksUndone \u003d 0;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"        this.numberOfTasksAdded \u003d 0;","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"        this.taskList \u003d new Task[maxNumberOfTasks];","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"     * Prints the task list","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"    public static void printTaskList() {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"        for (int i \u003d 0; i \u003c numberOfTasksAdded; i++) {","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"            System.out.print((i + 1) + \". \");","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"            System.out.println(taskList[i].toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Total tasks undone: \" + numberOfTasksUndone);","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"     * Store to do tasks in a list.","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"     * @param args  the item after the command the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"    public static void addToDoTaskToList(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"        Task t \u003d new ToDo(args);","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"        taskList[numberOfTasksAdded] \u003d t;","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"        numberOfTasksAdded++;","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone++;","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"added: \" + args);","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Now you have \" + numberOfTasksUndone + \" tasks in the list\");","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"     * Store deadline tasks in a list.","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"     * @param args  the item after the command the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"    public static void addDeadlineTaskToList(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"        String description \u003d args.substring(0, args.indexOf(BY_DIVIDER)).trim();","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"        String time \u003d args.substring(args.indexOf(BY_DIVIDER) + 4);","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"        Task t \u003d new Deadline(description, time);","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"        taskList[numberOfTasksAdded] \u003d t;","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"        numberOfTasksAdded++;","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone++;","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"added: \" + description);","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Now you have \" + numberOfTasksUndone + \" tasks in the list\");","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"     * Store event tasks in a list.","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"     * @param args  the item after the command the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"    public static void addEventTaskToList(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"        String description \u003d args.substring(0, args.indexOf(AT_DIVIDER)).trim();","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"        String time \u003d args.substring(args.indexOf(AT_DIVIDER) + 4);","lastModifiedDate":"2021-09-06"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"        Task t \u003d new Event(description, time);","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"        taskList[numberOfTasksAdded] \u003d t;","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"        numberOfTasksAdded++;","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone++;","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"added: \" + description);","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Now you have \" + numberOfTasksUndone + \" tasks in the list\");","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"     * Mark a task as done and prints done message","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"     * @param args the string the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"    public static void markTaskAsDone(String args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"        int stringLength \u003d args.length();","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"        int doneTaskNumber \u003d Integer.parseInt(args.substring(stringLength - 1));","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"        taskList[doneTaskNumber - 1].markAsDone();","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone--;","lastModifiedDate":"2021-08-31"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Good job! This task is marked as done:\");","lastModifiedDate":"2021-08-31"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"        System.out.println(taskList[doneTaskNumber - 1].toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Now you have \" + numberOfTasksUndone + \" tasks in the list\");","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"fansxx"},"content":"    public static boolean isTaskDone(String args) {","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"fansxx"},"content":"        int stringLength \u003d args.length();","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"fansxx"},"content":"        int taskNumber \u003d Integer.parseInt(args.substring(stringLength - 1));","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"fansxx"},"content":"        if (taskList[taskNumber - 1].getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-07"},{"lineNumber":115,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":118}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"todo read book","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"event meeting /at 3pm","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"deadline essay /by monday","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"event seminar /at sunday 4pm","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"done 2","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"done 2","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"todo homework","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"done 5","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"done 7","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"bye","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"fansxx":14}}]
