[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"# User Guide","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"This is a project named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"## Setting up","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"### Using Intellij","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"2. Open the project into Intellij as follows:","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"3. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"4. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE).","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"### Using JAR file","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"1. Download `Duke.jar` into the selected directory","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"2. Open up `Terminal` or `Command prompt` and `cd` to the directory `Duke.jar` file is in","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"3. Run the JAR file by typing `java -jar Duke.jar`. If you are setting up for the first time, a `data` folder will be created in the directory `Duke.jar` is in and a text file `Duke.txt` will be created in the `data` folder.","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"## Using Duke","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"Upon running the program, the user will be greeted with the following message:","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":" ____        _","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"|  _ \\ _   _| | _____","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"What can I do for you?","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"_____________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"After which, the user is able to explore the different features Duke has to offer:","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"\u003eNotes about command formatting:","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"\u003e- `parameters` are in **UPPERCASE** which are compulsory","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"\u003e- `additional items` are in **[square brackets]** which are needed in some commands","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"### Adding a ToDo Task: `todo`","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"Adds a ToDo task to the list of tasks. A ToDo task is a basic task type with only a `description` and no additional parameters.","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"Examples:","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"- `todo homework`","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"- `todo CS2113 lecture quiz`","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"### Adding a Deadline Task: `deadline`","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"Format: `deadline DESCRIPTION /by [time]`","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"Adds a Deadline task to the list of tasks. A Deadline task is a task with `description` and a `deadline` to complete it by.","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"\u003eAdditional formatting to save the deadline with a date/time:","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"\u003e- `deadline DESCRIPTION /by [dd-MM-yyyy]` saves the _**date**_ of the deadline as a Date object.","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"\u003e- `deadline DESCRIPTION /by [HH:mm]` saves the _**time**_ of the deadline as a Time object.","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"\u003e- `deadline DESCRIPTION /by [dd-MM-yyyy HH:mm]` saves the _**date**_ and _**time**_ of the deadline as a DateTime object.","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"Examples: ","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"- `deadline homework /by monday 3pm`","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"- `deadline CS2113 iP /by 01-10-2021 23:59`","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"### Adding an Event Task: `event`","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"Format: `event DESCRIPTION /at [time]`","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"Adds an Event task to the list of tasks. An Event task is a task happening at a specific date with `description` and a `timing`.","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"\u003eAdditional formatting to save the event with a date/time:","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"\u003e- `event DESCRIPTION /by [dd-MM-yyyy]` saves the _**date**_ of the event as a Date object.","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"\u003e- `event DESCRIPTION /by [HH:mm]` saves the _**time**_ of the event as a Time object.","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"\u003e- `event DESCRIPTION /by [dd-MM-yyyy HH:mm]` saves the _**date**_ and _**time**_ of the event as a DateTime object.","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"Examples: ","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"- `event meeting /at tuesday`","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"- `event CS2113 tP meeting /at 02-10-2021 22:00`","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"### Listing the task list: `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"Format: `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"Lists the task list so far with all the tasks and their completion status.","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"### Mark a task as done: `done`","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"Format: `done TASK_INDEX`","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"Marks a task with the specified index as done. The task that is done will appear in the list as `[TASK_TYPE][X] DESCRIPTION`.","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"### Delete a task: `delete`","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"Format: `delete TASK_INDEX`","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"Deletes a task from the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"### Find a task: `find`","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"Finds a task from the existing task list with the keyword specified. ","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"\u003e The search is case-sensitive. If there is no task found, an empty list will be returned.","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"fansxx"},"content":"Examples:","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"fansxx"},"content":"- `find book`","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"fansxx"},"content":"### Exit the program: `bye`","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"fansxx"},"content":"Format: `bye`","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"fansxx"},"content":"Exits Duke. A farewell message will be printed before Duke terminates.","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"fansxx":100,"-":17}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"Welcome to **_Duke_**! Below are instructions on how to use it.","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"## Setting up","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"### Using Intellij","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"2. Open the project into Intellij as follows:","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    1. Click `Open`.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"3. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"4. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE).","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"### Using JAR file","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"1. Download `Duke.jar` into the selected directory.","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"2. Open up `Terminal` or `Command prompt` and `cd` to the directory `Duke.jar` file is in.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"3. Run the JAR file by typing `java -jar Duke.jar`. If you are setting up for the first time, a `data` folder will be created in the directory `Duke.jar` is in containing a text file `Duke.txt`.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"## Using Duke","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"Upon running the program, you will be greeted with the following message:","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":" ____        _","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"|  _ \\ _   _| | _____","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"What can I do for you?","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"_____________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"After which, you will be able to explore the different features Duke has to offer:","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"\u003eNotes about command formatting:","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"\u003e- `parameters` are in **UPPERCASE** which are compulsory","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"\u003e- `time parameters` are in **[square brackets]** which are needed in some commands","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"### Adding a ToDo Task: `todo`","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"Adds a ToDo task to the list of tasks. A ToDo task is a basic task type with only a `description` and no additional parameters.","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"- `todo homework`","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"- `todo CS2113 lecture quiz`","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"### Adding a Deadline Task: `deadline`","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"Format: `deadline DESCRIPTION /by [time]`","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"Adds a Deadline task to the list of tasks. A Deadline task is a task with `description` and a `deadline` to complete it by.","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"\u003eAdditional formatting to save the deadline with a date/time:","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"\u003e- `deadline DESCRIPTION /by [dd-MM-yyyy]` saves the _**date**_ of the deadline as a Date object.","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"\u003e- `deadline DESCRIPTION /by [HH:mm]` saves the _**time**_ of the deadline as a Time object.","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"\u003e- `deadline DESCRIPTION /by [dd-MM-yyyy HH:mm]` saves the _**date**_ and _**time**_ of the deadline as a DateTime object.","lastModifiedDate":"2021-09-27"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"- `deadline homework /by monday 3pm`","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"- `deadline CS2113 iP /by 01-10-2021 23:59`","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"### Adding an Event Task: `event`","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"Format: `event DESCRIPTION /at [time]`","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"Adds an Event task to the list of tasks. An Event task is a task happening at a specific date with `description` and a `timing`.","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"\u003eAdditional formatting to save the event with a date/time:","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"\u003e- `event DESCRIPTION /by [dd-MM-yyyy]` saves the _**date**_ of the event as a Date object.","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"\u003e- `event DESCRIPTION /by [HH:mm]` saves the _**time**_ of the event as a Time object.","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"\u003e- `event DESCRIPTION /by [dd-MM-yyyy HH:mm]` saves the _**date**_ and _**time**_ of the event as a DateTime object.","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"- `event meeting /at tuesday`","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"- `event CS2113 tP meeting /at 02-10-2021 22:00`","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"### Listing the task list: `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"Format: `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"Lists the task list so far with all the tasks and their completion status.","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"### Mark a task as done: `done`","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"Format: `done TASK_INDEX`","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"Marks a task with the specified index as done. The task that is done will appear in the list as `[TASK_TYPE][X] DESCRIPTION`.","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"### Delete a task: `delete`","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"Format: `delete TASK_INDEX`","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"Deletes a task from the task list.","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"### Find a task: `find`","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"Finds a task from the existing task list with the keyword specified.","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"\u003e The search is case-sensitive. If there is no task found, an empty list will be returned.","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"fansxx"},"content":"Examples:","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"fansxx"},"content":"- `find book`","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"fansxx"},"content":"### Exit the program: `bye`","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"fansxx"},"content":"Format: `bye`","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"fansxx"},"content":"Exits Duke. A farewell message will be printed before Duke terminates.","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"fansxx":107,"-":10}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"import duke.tasks.FileManager;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"import duke.tasks.TaskManager;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    public static final String LINE_SEPARATOR \u003d \"_____________________________\";","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_EXIT \u003d \"bye\";","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"    public static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"    public static final String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"    public static final String DIRECTORY_PATH \u003d \"data\";","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"    public static boolean canRunDuke \u003d true;","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"     * Checks if the done command entered is in the correct format with the correct information","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the input string the user entered containing the command and the description","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"     * @param taskManager the taskManager class that handles all the task list functions","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"     * @return returns true if the done command is in the correct format, throws exception otherwise","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"     * @throws DukeException if there is no description after command, if there are no tasks undone in task list, if the task index entered does not exist, and if the task is already done","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"    private static boolean isValidDoneCommand(String inputStr, TaskManager taskManager) throws DukeException {","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"        if (Parser.isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, did you forget to enter the task to be marked as done?\");","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"        } else if (taskManager.getNumberOfTasksUndone() \u003d\u003d 0) {","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, there are no tasks to be marked done!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"        } else if (Parser.getItem(inputStr).equals(\"0\")) {","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, task number cannot be 0!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"        } else if (Parser.getItem(inputStr).contains(\"-\")) {","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, task number cannot be negative!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"        } else if (taskManager.getNumberOfTasksAdded() \u003c Integer.parseInt(Parser.getItem(inputStr))) {","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, there is no task \" + Integer.parseInt(Parser.getItem(inputStr)) + \"!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"        } else if (taskManager.isTaskDone(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, this task is already marked as done!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"     * Checks if the todo command entered is in the correct format with the correct description","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the input string the user entered containing the command and the description","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"     * @return returns true if the todo command is in the correct format, throws exception otherwise","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"     * @throws DukeException if there is no description after command","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"    private static boolean isValidToDoCommand(String inputStr) throws DukeException {","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"        if (Parser.isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, the description of a ToDo cannot be empty!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"     * Checks if the deadline command entered is in the correct format with the correct description","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the input string the suer entered containing the command and the description","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"     * @return returns true if the deadline command is in te correct format, throws exception otherwise","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"     * @throws DukeException if there is no description after command, and if the time of the deadline is empty","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"    private static boolean isValidDeadlineCommand(String inputStr) throws DukeException {","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"        if (Parser.isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, the description of a deadline cannot be empty!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"        } else if (Parser.isInvalidDeadline(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, the time of a deadline cannot be empty!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"     * Checks if the event command entered is in the correct format with the correct description","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the input string the user entered containing the command and the description","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"     * @return returns true if the event command is in the correct format, throws exception otherwise","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"     * @throws DukeException if there is no description after command, and if the time of the event is empty","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"    private static boolean isValidEventCommand(String inputStr) throws DukeException {","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"        if (Parser.isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, the description of an event cannot be empty!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"        } else if (Parser.isInvalidEvent(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, the time of an event cannot be empty!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"     * Checks if the delete command entered is in the correct format with the correct description","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the input string the user entered containing the command and the description","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"     * @param taskManager the taskManager class that handles all the task list functions","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"     * @return returns true if the delete command is in the correct format, throws exception otherwise","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"     * @throws DukeException if there is no task index entered after command, if there is no tasks in the list to be deleted, and if the task index entered does not exist","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"fansxx"},"content":"    private static boolean isValidDeleteCommand(String inputStr, TaskManager taskManager) throws DukeException {","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"fansxx"},"content":"        if (Parser.isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, did you forget to enter the task to be deleted?\");","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"fansxx"},"content":"        } else if (taskManager.getNumberOfTasksAdded() \u003d\u003d 0) {","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, there are no tasks in the list yet!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"fansxx"},"content":"        } else if (Parser.getItem(inputStr).equals(\"0\")) {","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, task number cannot be 0!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"fansxx"},"content":"        } else if (Parser.getItem(inputStr).contains(\"-\")) {","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, task number cannot be negative!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"fansxx"},"content":"        } else if (taskManager.getNumberOfTasksAdded() \u003c Integer.parseInt(Parser.getItem(inputStr))) {","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, there is no task \" + Integer.parseInt(Parser.getItem(inputStr)) + \"!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-26"},{"lineNumber":123,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":124,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":127,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":128,"author":{"gitId":"fansxx"},"content":"     * Checks if the find command entered is in the correct format with the correct description","lastModifiedDate":"2021-09-26"},{"lineNumber":129,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the input string the user entered containing the command and the description","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"fansxx"},"content":"     * @return returns true if the find command is in the correct format, throws exception otherwise","lastModifiedDate":"2021-09-26"},{"lineNumber":132,"author":{"gitId":"fansxx"},"content":"     * @throws DukeException if there is keyword entered after command","lastModifiedDate":"2021-09-26"},{"lineNumber":133,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":134,"author":{"gitId":"fansxx"},"content":"    private static boolean isValidFindCommand(String inputStr) throws DukeException {","lastModifiedDate":"2021-09-26"},{"lineNumber":135,"author":{"gitId":"fansxx"},"content":"        if (Parser.isEmptyItem(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, did you forget to enter a keyword?\");","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":143,"author":{"gitId":"fansxx"},"content":"     * Reads the input and command entered by the user and execute task according to user command","lastModifiedDate":"2021-09-06"},{"lineNumber":144,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":145,"author":{"gitId":"fansxx"},"content":"     * @param inputStr the full input the user entered","lastModifiedDate":"2021-09-06"},{"lineNumber":146,"author":{"gitId":"fansxx"},"content":"     * @param command the command parsed from the input","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"fansxx"},"content":"     * @param taskManager the task manager instance handling the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":148,"author":{"gitId":"fansxx"},"content":"     * @param fileManager the file manager handling the files","lastModifiedDate":"2021-09-15"},{"lineNumber":149,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":150,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-09-15"},{"lineNumber":151,"author":{"gitId":"fansxx"},"content":"    public static void executeCommand(String inputStr, String command, TaskManager taskManager, FileManager fileManager) throws DukeException {","lastModifiedDate":"2021-09-15"},{"lineNumber":152,"author":{"gitId":"fansxx"},"content":"        switch (command) {","lastModifiedDate":"2021-09-06"},{"lineNumber":153,"author":{"gitId":"fansxx"},"content":"        case COMMAND_EXIT:","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"fansxx"},"content":"            fileManager.writeArrayToFile(taskManager);","lastModifiedDate":"2021-09-15"},{"lineNumber":155,"author":{"gitId":"fansxx"},"content":"            Ui.printFarewellMessage();","lastModifiedDate":"2021-09-26"},{"lineNumber":156,"author":{"gitId":"fansxx"},"content":"            canRunDuke \u003d false;","lastModifiedDate":"2021-09-06"},{"lineNumber":157,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-08-23"},{"lineNumber":158,"author":{"gitId":"fansxx"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"fansxx"},"content":"            taskManager.printTaskList();","lastModifiedDate":"2021-09-15"},{"lineNumber":160,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"fansxx"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-09-06"},{"lineNumber":162,"author":{"gitId":"fansxx"},"content":"            if (isValidDoneCommand(inputStr, taskManager)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":163,"author":{"gitId":"fansxx"},"content":"                taskManager.markTaskAsDone(inputStr);","lastModifiedDate":"2021-09-15"},{"lineNumber":164,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":165,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"fansxx"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2021-09-06"},{"lineNumber":167,"author":{"gitId":"fansxx"},"content":"            if (isValidToDoCommand(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":168,"author":{"gitId":"fansxx"},"content":"                String item \u003d Parser.getItem(inputStr);","lastModifiedDate":"2021-09-25"},{"lineNumber":169,"author":{"gitId":"fansxx"},"content":"                taskManager.addToDoTaskToList(item);","lastModifiedDate":"2021-09-15"},{"lineNumber":170,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":171,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":172,"author":{"gitId":"fansxx"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-06"},{"lineNumber":173,"author":{"gitId":"fansxx"},"content":"            if (isValidDeadlineCommand(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":174,"author":{"gitId":"fansxx"},"content":"                String item \u003d Parser.getItem(inputStr);","lastModifiedDate":"2021-09-26"},{"lineNumber":175,"author":{"gitId":"fansxx"},"content":"                taskManager.addDeadlineTaskToList(item);","lastModifiedDate":"2021-09-15"},{"lineNumber":176,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":177,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":178,"author":{"gitId":"fansxx"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-09-06"},{"lineNumber":179,"author":{"gitId":"fansxx"},"content":"            if (isValidEventCommand(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":180,"author":{"gitId":"fansxx"},"content":"                String item \u003d Parser.getItem(inputStr);","lastModifiedDate":"2021-09-26"},{"lineNumber":181,"author":{"gitId":"fansxx"},"content":"                taskManager.addEventTaskToList(item);","lastModifiedDate":"2021-09-15"},{"lineNumber":182,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":183,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-06"},{"lineNumber":184,"author":{"gitId":"fansxx"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-09-13"},{"lineNumber":185,"author":{"gitId":"fansxx"},"content":"            if (isValidDeleteCommand(inputStr, taskManager)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":186,"author":{"gitId":"fansxx"},"content":"                taskManager.deleteTask(inputStr);","lastModifiedDate":"2021-09-15"},{"lineNumber":187,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":188,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":189,"author":{"gitId":"fansxx"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2021-09-22"},{"lineNumber":190,"author":{"gitId":"fansxx"},"content":"            if (isValidFindCommand(inputStr)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":191,"author":{"gitId":"fansxx"},"content":"                String keyword \u003d Parser.getItem(inputStr);","lastModifiedDate":"2021-09-25"},{"lineNumber":192,"author":{"gitId":"fansxx"},"content":"                printArrayList(taskManager.findTask(keyword));","lastModifiedDate":"2021-09-22"},{"lineNumber":193,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":194,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":195,"author":{"gitId":"fansxx"},"content":"        default:","lastModifiedDate":"2021-09-06"},{"lineNumber":196,"author":{"gitId":"fansxx"},"content":"            throw new DukeException(\"Oops, command not recognised!\");","lastModifiedDate":"2021-09-06"},{"lineNumber":197,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":198,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":199,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":200,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":201,"author":{"gitId":"fansxx"},"content":"     * Prints the arrayList using streams","lastModifiedDate":"2021-09-25"},{"lineNumber":202,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":203,"author":{"gitId":"fansxx"},"content":"     * @param arrayList the arrayList to be printed","lastModifiedDate":"2021-09-25"},{"lineNumber":204,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":205,"author":{"gitId":"fansxx"},"content":"    public static void printArrayList(ArrayList\u003cTask\u003e arrayList) {","lastModifiedDate":"2021-09-22"},{"lineNumber":206,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-22"},{"lineNumber":207,"author":{"gitId":"fansxx"},"content":"        arrayList.stream()","lastModifiedDate":"2021-09-22"},{"lineNumber":208,"author":{"gitId":"fansxx"},"content":"                .forEach(System.out::println);","lastModifiedDate":"2021-09-22"},{"lineNumber":209,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-22"},{"lineNumber":210,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":211,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-07"},{"lineNumber":213,"author":{"gitId":"fansxx"},"content":"        Ui.printWelcomeMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":214,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":215,"author":{"gitId":"fansxx"},"content":"        // to read input on each new line, Duke constantly scans input in this loop","lastModifiedDate":"2021-09-06"},{"lineNumber":216,"author":{"gitId":"fansxx"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-06"},{"lineNumber":217,"author":{"gitId":"fansxx"},"content":"        TaskManager taskManager \u003d new TaskManager();","lastModifiedDate":"2021-09-15"},{"lineNumber":218,"author":{"gitId":"fansxx"},"content":"        FileManager fileManager \u003d new FileManager();","lastModifiedDate":"2021-09-15"},{"lineNumber":219,"author":{"gitId":"fansxx"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":220,"author":{"gitId":"fansxx"},"content":"            File taskFile \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-15"},{"lineNumber":221,"author":{"gitId":"fansxx"},"content":"            fileManager.retrieveFile(taskFile, taskManager);","lastModifiedDate":"2021-09-15"},{"lineNumber":222,"author":{"gitId":"fansxx"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":223,"author":{"gitId":"fansxx"},"content":"            File directory \u003d new File(DIRECTORY_PATH);","lastModifiedDate":"2021-09-15"},{"lineNumber":224,"author":{"gitId":"fansxx"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":225,"author":{"gitId":"fansxx"},"content":"                directory.mkdir();","lastModifiedDate":"2021-09-15"},{"lineNumber":226,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":227,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":228,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":229,"author":{"gitId":"fansxx"},"content":"        while(canRunDuke) {","lastModifiedDate":"2021-09-06"},{"lineNumber":230,"author":{"gitId":"fansxx"},"content":"            String inputStr \u003d sc.nextLine();","lastModifiedDate":"2021-09-06"},{"lineNumber":231,"author":{"gitId":"fansxx"},"content":"            String command \u003d Parser.getCommand(inputStr);","lastModifiedDate":"2021-09-25"},{"lineNumber":232,"author":{"gitId":"fansxx"},"content":"            try {","lastModifiedDate":"2021-09-06"},{"lineNumber":233,"author":{"gitId":"fansxx"},"content":"                executeCommand(inputStr, command, taskManager, fileManager);","lastModifiedDate":"2021-09-15"},{"lineNumber":234,"author":{"gitId":"fansxx"},"content":"            } catch (DukeException dukeException) {","lastModifiedDate":"2021-09-06"},{"lineNumber":235,"author":{"gitId":"fansxx"},"content":"                System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":236,"author":{"gitId":"fansxx"},"content":"                System.out.println(dukeException.getMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":237,"author":{"gitId":"fansxx"},"content":"                System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":238,"author":{"gitId":"fansxx"},"content":"            } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":239,"author":{"gitId":"fansxx"},"content":"            System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":240,"author":{"gitId":"fansxx"},"content":"            System.out.println(\"Oops, please enter the task number!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":241,"author":{"gitId":"fansxx"},"content":"            System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":242,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":243,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":245,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"fansxx":242,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"        super(message);","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"fansxx":8}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"public class Parser {","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"    public static final String BY_DIVIDER \u003d \"/by\";","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"    public static final String AT_DIVIDER \u003d \"/at\";","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"     * Splits the input string and returns the command at the start of the string","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"     * @param args the input string","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"     * @return the command the user entered","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"    public static String getCommand(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"        String[] words \u003d args.split(\" \");","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"        String[] commandArray \u003d Arrays.copyOf(words, 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"        String command \u003d getFormattedString(Arrays.toString(commandArray));","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"        return command;","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"     * Splits the input string and returns the item after the command","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"     * @param args the input string","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"     * @return the item after the command the user entered","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    public static String getItem(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"        String[] words \u003d args.split(\" \");","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"        String[] itemArray \u003d Arrays.copyOfRange(words, 1, words.length);","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"        String item \u003d getFormattedString(Arrays.toString(itemArray));","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"        return item;","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"     * Formats the string that was converted from an array. Delete brackets and commas","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"     * @param args the input string that was converted from an array","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"     * @return the formatted string without brackets and commas","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"    public static String getFormattedString(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"        String formattedString \u003d args.replace(\",\", \"\")","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"                .replace(\"]\", \"\")","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"                .replace(\"[\", \"\")","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"                .trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"        return formattedString;","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"     * Checks if the input string has an empty item after a command","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"     * @param args the input string the user entered","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"     * @return true if the item after the command is empty, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"    public static boolean isEmptyItem(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"        if (getItem(args).equals(\"\")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"     * returns if there is a time entered for a deadline or event task","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"     * @param args the input string the user entered","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"     * @return true if there is a time entered, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"    public static boolean canGetTime(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"        String description \u003d getItem(args);","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"        String[] time \u003d description.substring(description.indexOf(\"/\")).split(\" \");","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"        if (time.length \u003c 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"        return true;","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"     * Checks if the item from the user input is invalid for deadline and event tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"     * @param args the item to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"     * @return true if the item does not contain a \u0027/by\u0027 or does not have time after /by, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"    public static boolean isInvalidDeadline(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"        if (!getItem(args).contains(BY_DIVIDER)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"        if (!canGetTime(args)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"     * Checks if the item from the user input is invalid for deadline and event tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"     * @param args the item to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"     * @return true if the item does not contain a \u0027/at\u0027 or does not have time after /at, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"    public static boolean isInvalidEvent(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"        if (!getItem(args).contains(AT_DIVIDER)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"        if (!canGetTime(args)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"fansxx":109}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"public class Ui {","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"    public static final String LINE_SEPARATOR \u003d \"_____________________________\";","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"     * Prints welcome message","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    public static void printWelcomeMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"        System.out.println(logo);","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"        // greet","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"     * Prints farewell message","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"    public static void printFarewellMessage() {","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"     * Prints the message containing how many tasks are in the list","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"     * @param size the size of the list, how many tasks are in the list","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"    public static void printTaskNumberMessage(int size) {","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list\");","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"     * Prints the total number of tasks undone","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"     * @param undoneTasks the total number of tasks not marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"    public static void printUndoneTaskMessage(int undoneTasks) {","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Total tasks undone: \" + undoneTasks);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"     * Prints the message when a user marks a task as done","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"     * @param taskList the list of tasks the user has","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"     * @param doneTaskNumber the index of the task to be marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"     * @param numberOfTasksUndone the total number of tasks not marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"    public static void printMarkAsDoneMessage(ArrayList\u003cTask\u003e taskList, int doneTaskNumber, int numberOfTasksUndone) {","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Good job! This task is marked as done:\");","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"        System.out.println(taskList.get(doneTaskNumber).toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Now you have \" + numberOfTasksUndone + \" tasks undone\");","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"     * Prints the message after a task is being added","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"     * @param args the description of the task to be printed","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"    public static void printAddedTaskMessage(String args) {","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"added: \" + args);","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"     * Prints the message after a task is deleted","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"     * @param taskList the list of tasks the user has","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"     * @param taskIndex the index of the task to be deleted","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"    public static void printDeletedTaskMessage(ArrayList\u003cTask\u003e taskList, int taskIndex) {","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"        System.out.println(\"Got it! This task was removed:\" + System.lineSeparator()","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"                + taskList.get(taskIndex).toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"fansxx":94}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"    public static final String DATETIME_FORMAT \u003d \"dd-MM-yyyy HH:mm\";","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    public static final String TIME_FORMAT \u003d \"HH:mm\";","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public static final String DATE_FORMAT \u003d \"dd-MM-yyyy\";","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    protected LocalDate deadlineDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"    protected LocalTime deadlineTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"    protected LocalDateTime deadlineDateTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"        if (isValidDateTimeFormat(by, DATE_FORMAT)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"            this.deadlineDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"        } else if (isValidDateTimeFormat(by, TIME_FORMAT)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"            this.deadlineTime \u003d LocalTime.parse(by, DateTimeFormatter.ofPattern(TIME_FORMAT));","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"        } else if (isValidDateTimeFormat(by, DATETIME_FORMAT)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"            this.deadlineDateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(DATETIME_FORMAT));","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"    public String getBy() {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"        return by;","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"        if (deadlineDate !\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + deadlineDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"        } else if (deadlineTime !\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + deadlineTime.format(DateTimeFormatter.ofPattern(\"HH.mm\")) + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"        } else if (deadlineDateTime !\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + deadlineDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH.mm\")) + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // @@author MadProgrammer-reused","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // Reused from https://stackoverflow.com/questions/20231539/java-check-the-date-format-of-current-string-is-according-to-required-format-or/20232680","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Checks if the format of the date, time, or dateTime the user entered is correct based on a specified format","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param value the date/time/dateTime input to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param format the specified format to be checked with","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return returns true if the format entered by the user matches the format specified, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private boolean isValidDateTimeFormat(String value, String format) {","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            LocalDateTime ldt \u003d LocalDateTime.parse(value, formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            String result \u003d ldt.format(formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return result.equals(value);","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                LocalDate ld \u003d LocalDate.parse(value, formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                String result \u003d ld.format(formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                return result.equals(value);","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            } catch (DateTimeParseException e2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                try {","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                    LocalTime lt \u003d LocalTime.parse(value, formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                    String result \u003d lt.format(formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                    return result.equals(value);","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                } catch (DateTimeParseException e3) {","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // @@author","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":47,"-":35}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"    public static final String DATETIME_FORMAT \u003d \"dd-MM-yyyy HH:mm\";","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    public static final String TIME_FORMAT \u003d \"HH:mm\";","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public static final String DATE_FORMAT \u003d \"dd-MM-yyyy\";","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"    protected String at;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    protected LocalDate eventDate;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"    protected LocalTime eventTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"    protected LocalDateTime eventDateTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"        if (isValidDateTimeFormat(at, DATE_FORMAT)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"            this.eventDate \u003d LocalDate.parse(at, DateTimeFormatter.ofPattern(DATE_FORMAT));","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"        } else if (isValidDateTimeFormat(at, TIME_FORMAT)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"            this.eventTime \u003d LocalTime.parse(at, DateTimeFormatter.ofPattern(TIME_FORMAT));","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"        } else if (isValidDateTimeFormat(at, DATETIME_FORMAT)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"            this.eventDateTime \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(DATETIME_FORMAT));","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"    public String getAt() {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"        return at;","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"        if (eventDate !\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + eventDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"        } else if (eventTime !\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + eventTime.format(DateTimeFormatter.ofPattern(\"HH.mm\")) + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"        } else if (eventDateTime !\u003d null) {","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + eventDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH.mm\")) + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // @@author MadProgrammer-reused","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // Reused from https://stackoverflow.com/questions/20231539/java-check-the-date-format-of-current-string-is-according-to-required-format-or/20232680","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Checks if the format of the date, time, or dateTime the user entered is correct based on a specified format","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param value the date/time/dateTime input to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param format the specified format to be checked with","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return returns true if the format entered by the user matches the format specified, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private boolean isValidDateTimeFormat(String value, String format) {","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            LocalDateTime ldt \u003d LocalDateTime.parse(value, formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            String result \u003d ldt.format(formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return result.equals(value);","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                LocalDate ld \u003d LocalDate.parse(value, formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                String result \u003d ld.format(formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                return result.equals(value);","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            } catch (DateTimeParseException e2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                try {","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                    LocalTime lt \u003d LocalTime.parse(value, formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                    String result \u003d lt.format(formatter);","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                    return result.equals(value);","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                } catch (DateTimeParseException e3) {","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // @@author","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":47,"-":35}},{"path":"src/main/java/duke/tasks/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"//import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"public class FileManager {","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public static final String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"    private File taskFile;","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"    public FileManager() {","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"        taskFile \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"    public void writeToDoToFile(Task task, int taskNumber, TaskManager taskManager) {","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"            appendToFile(\"T\" + \" | \" + task.getStatusIcon() + \" | \" + task.getDescription());","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"            if (taskNumber !\u003d taskManager.getNumberOfTasksAdded() - 1) {","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"                appendToFile(System.lineSeparator());","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"            System.out.println(\"Oops, something went wrong! \" + e.getMessage());","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"    public void writeDeadlineToFile(Deadline deadline, int taskNumber, TaskManager taskManager) {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"            appendToFile(\"D\" + \" | \" + deadline.getStatusIcon() + \" | \"","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"                    + deadline.getDescription() + \" | \" + deadline.getBy());","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"            if (taskNumber !\u003d taskManager.getNumberOfTasksAdded() - 1) {","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"                appendToFile(System.lineSeparator());","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"            System.out.println(\"Oops, something went wrong! \" + e.getMessage());","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"    public void writeEventToFile(Event event, int taskNumber, TaskManager taskManager) {","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"            appendToFile(\"E\" + \" | \" + event.getStatusIcon() + \" | \"","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"                    + event.getDescription() + \" | \" + event.getAt());","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"            if (taskNumber !\u003d taskManager.getNumberOfTasksAdded() - 1) {","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"                appendToFile(System.lineSeparator());","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"            System.out.println(\"Oops, something went wrong! \" + e.getMessage());","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"     * Inputs the whole task file to the task list","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"     * @param taskFile the task file to be read","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"     * @param taskManager the task manager class to access add task methods","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"     * @throws FileNotFoundException if the file is not found in the directory","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"    public void retrieveFile(File taskFile, TaskManager taskManager) throws FileNotFoundException {","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"        File f \u003d taskFile;","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-15"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"        int taskNumber \u003d 1;","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"            String input \u003d s.nextLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"            fillArrayFromFile(input, taskManager, taskNumber);","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"            taskNumber++;","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"     * Inputs the task from the task file to the task list one by one","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"     * @param input the task to be inputted to the task list","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"     * @param taskManager the task manager class to access add task methods","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"     * @param taskNumber the ith number of task from the top of the list","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"    public void fillArrayFromFile(String input, TaskManager taskManager, int taskNumber) {","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"        String[] taskItem \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"        String taskType \u003d taskItem[0].trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"        String statusIcon \u003d taskItem[1].trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"        String taskName \u003d taskItem[2].trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"        case (\"T\"):","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"            taskManager.addToDoTaskToList(taskName);","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"            if (statusIcon.contains(\"X\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"                taskManager.markTaskAsDone(\"done \" + taskNumber);","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"        case (\"D\"):","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"            String taskDeadline \u003d taskItem[3].trim();","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"            taskManager.addDeadlineTaskToList(taskName + \"/by \" + taskDeadline);","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"            if (statusIcon.contains(\"X\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"                taskManager.markTaskAsDone(\"done \" + taskNumber);","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"        case (\"E\"):","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"            String taskTime \u003d taskItem[3].trim();","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"            taskManager.addEventTaskToList(taskName + \"/at \" + taskTime);","lastModifiedDate":"2021-09-15"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"            if (statusIcon.contains(\"X\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"                taskManager.markTaskAsDone(\"done \" + taskNumber);","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"fansxx"},"content":"     * Writes the taskList array to the text file","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"fansxx"},"content":"     * @param taskManager the task manager class to access the task list","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"fansxx"},"content":"    public void writeArrayToFile(TaskManager taskManager) {","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"fansxx"},"content":"        ArrayList\u003cTask\u003e taskList \u003d taskManager.getTaskList();","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"fansxx"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"fansxx"},"content":"            writeToFile(\"\");","lastModifiedDate":"2021-09-15"},{"lineNumber":118,"author":{"gitId":"fansxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":119,"author":{"gitId":"fansxx"},"content":"            System.out.println(\"Oops!\" + e.getMessage());","lastModifiedDate":"2021-09-15"},{"lineNumber":120,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":121,"author":{"gitId":"fansxx"},"content":"        for (int i \u003d 0; i \u003c taskManager.getNumberOfTasksAdded(); i++) {","lastModifiedDate":"2021-09-15"},{"lineNumber":122,"author":{"gitId":"fansxx"},"content":"            String taskType \u003d taskList.get(i).toString().substring(1, 2);","lastModifiedDate":"2021-09-15"},{"lineNumber":123,"author":{"gitId":"fansxx"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-15"},{"lineNumber":124,"author":{"gitId":"fansxx"},"content":"            case (\"T\"):","lastModifiedDate":"2021-09-15"},{"lineNumber":125,"author":{"gitId":"fansxx"},"content":"                writeToDoToFile(taskList.get(i), i, taskManager);","lastModifiedDate":"2021-09-15"},{"lineNumber":126,"author":{"gitId":"fansxx"},"content":"                break;","lastModifiedDate":"2021-09-15"},{"lineNumber":127,"author":{"gitId":"fansxx"},"content":"            case (\"D\"):","lastModifiedDate":"2021-09-15"},{"lineNumber":128,"author":{"gitId":"fansxx"},"content":"                Deadline deadline \u003d (Deadline) taskList.get(i);","lastModifiedDate":"2021-09-15"},{"lineNumber":129,"author":{"gitId":"fansxx"},"content":"                writeDeadlineToFile(deadline, i, taskManager);","lastModifiedDate":"2021-09-15"},{"lineNumber":130,"author":{"gitId":"fansxx"},"content":"                break;","lastModifiedDate":"2021-09-15"},{"lineNumber":131,"author":{"gitId":"fansxx"},"content":"            case (\"E\"):","lastModifiedDate":"2021-09-15"},{"lineNumber":132,"author":{"gitId":"fansxx"},"content":"                Event event \u003d (Event) taskList.get(i);","lastModifiedDate":"2021-09-15"},{"lineNumber":133,"author":{"gitId":"fansxx"},"content":"                writeEventToFile(event, i , taskManager);","lastModifiedDate":"2021-09-15"},{"lineNumber":134,"author":{"gitId":"fansxx"},"content":"                break;","lastModifiedDate":"2021-09-15"},{"lineNumber":135,"author":{"gitId":"fansxx"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":136,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":137,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":138,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":139,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":140,"author":{"gitId":"fansxx"},"content":"     * Rewrite text to file","lastModifiedDate":"2021-09-15"},{"lineNumber":141,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":142,"author":{"gitId":"fansxx"},"content":"     * @param textToWrite the text to be written in the file","lastModifiedDate":"2021-09-15"},{"lineNumber":143,"author":{"gitId":"fansxx"},"content":"     * @throws IOException if the file cannot be written to","lastModifiedDate":"2021-09-15"},{"lineNumber":144,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":145,"author":{"gitId":"fansxx"},"content":"    public void writeToFile(String textToWrite) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":146,"author":{"gitId":"fansxx"},"content":"        FileWriter writer \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-15"},{"lineNumber":147,"author":{"gitId":"fansxx"},"content":"        writer.write(textToWrite);","lastModifiedDate":"2021-09-15"},{"lineNumber":148,"author":{"gitId":"fansxx"},"content":"        writer.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":149,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":150,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":151,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":152,"author":{"gitId":"fansxx"},"content":"     * Appends text to file","lastModifiedDate":"2021-09-15"},{"lineNumber":153,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":154,"author":{"gitId":"fansxx"},"content":"     * @param textToAppend the text to be appended to the file","lastModifiedDate":"2021-09-15"},{"lineNumber":155,"author":{"gitId":"fansxx"},"content":"     * @throws IOException if the file cannot be written to","lastModifiedDate":"2021-09-15"},{"lineNumber":156,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":157,"author":{"gitId":"fansxx"},"content":"    public void appendToFile(String textToAppend) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":158,"author":{"gitId":"fansxx"},"content":"        FileWriter writer \u003d new FileWriter(FILE_PATH, true);","lastModifiedDate":"2021-09-15"},{"lineNumber":159,"author":{"gitId":"fansxx"},"content":"        writer.write(textToAppend);","lastModifiedDate":"2021-09-15"},{"lineNumber":160,"author":{"gitId":"fansxx"},"content":"        writer.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":161,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":162,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"fansxx":162}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"        return (isDone? \"X\" : \" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"        return description;","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"    /* mark as done */","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"fansxx":29}},{"path":"src/main/java/duke/tasks/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"    public static final String BY_DIVIDER \u003d \"/by\";","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    public static final String AT_DIVIDER \u003d \"/at\";","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"    public static final String LINE_SEPARATOR \u003d \"_____________________________\";","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"    private static int numberOfTasksUndone;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"    private static ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"fansxx"},"content":"    public TaskManager() {","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"fansxx"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"fansxx"},"content":"    public static int getNumberOfTasksUndone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"fansxx"},"content":"        return numberOfTasksUndone;","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"fansxx"},"content":"    public static int getNumberOfTasksAdded() {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"fansxx"},"content":"        return taskList.size();","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"fansxx"},"content":"    public static ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"fansxx"},"content":"        return taskList;","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"fansxx"},"content":"     * Prints the task list","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"fansxx"},"content":"    public static void printTaskList() {","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"fansxx"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"fansxx"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"fansxx"},"content":"            System.out.print((i + 1) + \". \");","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"fansxx"},"content":"            System.out.println(taskList.get(i).toString());","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"fansxx"},"content":"        Ui.printUndoneTaskMessage(numberOfTasksUndone);","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"fansxx"},"content":"     * Deletes a task from the list","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"fansxx"},"content":"     * @param args the string the user inputs","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"fansxx"},"content":"    public static void deleteTask(String args) {","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"fansxx"},"content":"        int stringLength \u003d args.length();","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"fansxx"},"content":"        int taskIndex \u003d Integer.parseInt(args.substring(stringLength - 1));","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"fansxx"},"content":"        Ui.printDeletedTaskMessage(taskList, taskIndex - 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"fansxx"},"content":"        // if deleted task was not marked as done, decrease numberOfTasksUndone","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"fansxx"},"content":"        if (!taskList.get(taskIndex - 1).getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"fansxx"},"content":"            numberOfTasksUndone--;","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"fansxx"},"content":"        taskList.remove(taskIndex - 1);","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"fansxx"},"content":"        Ui.printTaskNumberMessage(taskList.size());","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"fansxx"},"content":"     * Store to do tasks in a list.","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"fansxx"},"content":"     * @param args  the item after the command the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"fansxx"},"content":"    public static void addToDoTaskToList(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"fansxx"},"content":"        ToDo t \u003d new ToDo(args);","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"fansxx"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone++;","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"fansxx"},"content":"        Ui.printAddedTaskMessage(args);","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"fansxx"},"content":"        Ui.printTaskNumberMessage(taskList.size());","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"fansxx"},"content":"     * Store deadline tasks in a list.","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"fansxx"},"content":"     * @param args the item after the command the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"fansxx"},"content":"    public static void addDeadlineTaskToList(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":86,"author":{"gitId":"fansxx"},"content":"        String description \u003d args.substring(0, args.indexOf(BY_DIVIDER)).trim();","lastModifiedDate":"2021-09-06"},{"lineNumber":87,"author":{"gitId":"fansxx"},"content":"        String time \u003d args.substring(args.indexOf(BY_DIVIDER) + 4).trim();","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"fansxx"},"content":"        Deadline t \u003d new Deadline(description, time);","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"fansxx"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone++;","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"fansxx"},"content":"        Ui.printAddedTaskMessage(description);","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"fansxx"},"content":"        Ui.printTaskNumberMessage(taskList.size());","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"fansxx"},"content":"     * Store event tasks in a list.","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"fansxx"},"content":"     * @param args  the item after the command the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":99,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"fansxx"},"content":"    public static void addEventTaskToList(String args) {","lastModifiedDate":"2021-09-06"},{"lineNumber":101,"author":{"gitId":"fansxx"},"content":"        String description \u003d args.substring(0, args.indexOf(AT_DIVIDER)).trim();","lastModifiedDate":"2021-09-06"},{"lineNumber":102,"author":{"gitId":"fansxx"},"content":"        String time \u003d args.substring(args.indexOf(AT_DIVIDER) + 4).trim();","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"fansxx"},"content":"        Event t \u003d new Event(description, time);","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"fansxx"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone++;","lastModifiedDate":"2021-08-31"},{"lineNumber":106,"author":{"gitId":"fansxx"},"content":"        Ui.printAddedTaskMessage(description);","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"fansxx"},"content":"        Ui.printTaskNumberMessage(taskList.size());","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"fansxx"},"content":"     * Mark a task as done and prints done message","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":113,"author":{"gitId":"fansxx"},"content":"     * @param args the string the user inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":114,"author":{"gitId":"fansxx"},"content":"     **/","lastModifiedDate":"2021-08-31"},{"lineNumber":115,"author":{"gitId":"fansxx"},"content":"    public static void markTaskAsDone(String args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":116,"author":{"gitId":"fansxx"},"content":"        int doneTaskNumber \u003d Integer.parseInt(args.substring(4).trim());","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"fansxx"},"content":"        taskList.get(doneTaskNumber - 1).markAsDone();","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"fansxx"},"content":"        numberOfTasksUndone--;","lastModifiedDate":"2021-08-31"},{"lineNumber":119,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":120,"author":{"gitId":"fansxx"},"content":"        Ui.printMarkAsDoneMessage(taskList, doneTaskNumber - 1, numberOfTasksUndone);","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":122,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":124,"author":{"gitId":"fansxx"},"content":"     * Checks if a task is done using the task number the user entered","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":126,"author":{"gitId":"fansxx"},"content":"     * @param args the command together with the task number to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":127,"author":{"gitId":"fansxx"},"content":"     * @return returns true if the task is already marked as done, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":128,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":129,"author":{"gitId":"fansxx"},"content":"    public static boolean isTaskDone(String args) {","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"fansxx"},"content":"        int taskNumber \u003d Integer.parseInt(args.substring(4).trim());","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"fansxx"},"content":"        if (taskList.get(taskNumber - 1).getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2021-09-13"},{"lineNumber":132,"author":{"gitId":"fansxx"},"content":"            return true;","lastModifiedDate":"2021-09-07"},{"lineNumber":133,"author":{"gitId":"fansxx"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"fansxx"},"content":"        return false;","lastModifiedDate":"2021-09-07"},{"lineNumber":135,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":136,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"fansxx"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"fansxx"},"content":"     * Finds the tasks in the arraylist that contains the keyword","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"fansxx"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"fansxx"},"content":"     * @param keyword the keyword to filter the tasks by","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"fansxx"},"content":"     * @return returns the filtered list of the tasks containing the keyword","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"fansxx"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"fansxx"},"content":"    public static ArrayList\u003cTask\u003e findTask(String keyword) {","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"fansxx"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d (ArrayList\u003cTask\u003e) taskList.stream()","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"fansxx"},"content":"                .filter((t) -\u003e t.getDescription().contains(keyword))","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"fansxx"},"content":"                .collect((Collectors.toList()));","lastModifiedDate":"2021-09-22"},{"lineNumber":147,"author":{"gitId":"fansxx"},"content":"        return filteredList;","lastModifiedDate":"2021-09-22"},{"lineNumber":148,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":149}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"fansxx":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"fansxx"},"content":"todo read book","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"fansxx"},"content":"event meeting /at 3pm","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"fansxx"},"content":"deadline essay /by monday","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"fansxx"},"content":"event seminar /at sunday 4pm","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"fansxx"},"content":"done 2","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"fansxx"},"content":"done 2","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"fansxx"},"content":"todo homework","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"fansxx"},"content":"done 5","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"fansxx"},"content":"list","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"fansxx"},"content":"done 7","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"fansxx"},"content":"bye","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"fansxx":14}}]
