[{"path":"shimaStorage.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"Welcome to my storage :P, this is how I memorize all your tasks!","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"Alert! Please do not delete anything inside this file, else I will get memory loss :(","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"tryyang2001":2}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import duke.design.Default;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import duke.task.AddTask;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import duke.task.DeleteTasks;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"import duke.task.TaskDone;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    public static Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    public static int longestTaskDescription \u003d 0; //The length of the longest task description","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    @SuppressWarnings(\"InfiniteLoopStatement\") //Disables the warning for infinite loop","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"        //Prints all the welcome screens","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"        Default.printLogo();","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"        Default.printWelcomeMessage();","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"        Default.printVersionDescription();","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"            Storage.readFromStorage(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"            System.out.println();","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Unfortunately somethings have messed up, I have received this information:\");","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"            ex.printStackTrace();","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        } catch (DukeException.StorageException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"            Storage.handleStorageError(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\nLet\u0027s start input your command:\");","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"        while (true) {","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"            try {","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"                readCommand(tasks);","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"            } catch (DukeException.CommandException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"                Default.showMessage(\"Sorry, the command is invalid, I cant understand :(\");","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"                System.out.println(\"\\tTo seek for help, you can type the command \\\"help\\\" or \\\"view -h\\\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"            } catch (IOException ex) {","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"                Default.showMessage(\"Unfortunately somethings have messed up, I have received this information:\");","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"                ex.printStackTrace();","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"     * Reads the input command entered by the user and handles each command","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array to store all the tasks required","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"    private static void readCommand(ArrayList\u003cTask\u003e tasks) throws DukeException.CommandException, IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"        String command \u003d in.nextLine().trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"        String[] words \u003d command.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"        if (Command.isCommandEmpty(command)) {","lastModifiedDate":"2021-09-09"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t(Empty) \u003c- will not save to the list\");","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"        } else if (Command.isCommandViewPersonality(command)) {","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"            Default.printPersonality();","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"        } else if (Command.isCommandExit(command)) {","lastModifiedDate":"2021-09-09"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Bye! Hope to see you again :D\");","lastModifiedDate":"2021-09-09"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"            Storage.updateStorage(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"            System.exit(0);","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"        } else if (Command.isCommandHelp(command)) {","lastModifiedDate":"2021-09-12"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"            Default.printHelpMenu();","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"        } else if (Command.isCommandDelete(command)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"            DeleteTasks.deleteTasks(tasks, words);","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"            if (Command.isCommandList(command)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"                Default.printToDoList(tasks, longestTaskDescription);","lastModifiedDate":"2021-09-14"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"            } else if (Command.isCommandDone(words[0])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"                TaskDone.handleTaskDone(tasks, words);","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"            } else if (Command.isCommandAddTask(words[0])) {","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"                AddTask.addTask(tasks, command, words);","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"                throw new DukeException.CommandException();","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"tryyang2001":82,"-":2}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.command;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the command is meant to delete the task(s)","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the command starts with \u0027delete\u0027 no matter it is uppercase or lowercase or mixed, false otherwise","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandDelete(String command) {","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"        return command.toLowerCase().startsWith(\"delete\");","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the command is meantto delete all the tasks stored","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"     * @param word The second word in the command","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the second word in the command is equivalent to \u0027all\u0027 or \u0027*\u0027 no matter it is uppercaseor lowercase or mixed, false otherwise","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandDeleteAll(String word) {","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"        return word.equalsIgnoreCase(\"all\") || word.equals(\"*\");","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the command is meant to see the help menu","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the command is equivalent to \u0027help\u0027 or \u0027view -h\u0027 no matter it is uppercase or lowercase or mixed, false otherwise","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandHelp(String command) {","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"        return command.equalsIgnoreCase(\"help\") || command.equalsIgnoreCase(\"view -h\");","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the command is meant to add task to the to-do list","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"     * @param word The array of words that compose the input command","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the command contains keywords \"deadline\", \"event\" or \"todo\"","lastModifiedDate":"2021-09-09"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandAddTask(String word) {","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"        return word.equalsIgnoreCase(\"DEADLINE\") || word.equalsIgnoreCase(\"EVENT\") || word.equalsIgnoreCase(\"TODO\");","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the input command starts with \"done\"","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"     * @param firstWord The first word in the command","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the first word is equivalent to \"done\" no matter it is uppercase or lowercase or mixed, false otherwise","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandDone(String firstWord) {","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"        return firstWord.equalsIgnoreCase(\"DONE\");","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the input command is equivalent to \u0027list\u0027 or \u0027ls\u0027","lastModifiedDate":"2021-09-09"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command","lastModifiedDate":"2021-09-09"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the command is equivalent to \u0027list\u0027 or \u0027ls\u0027 no matter it is uppercase or lowercase or mixed, false otherwise","lastModifiedDate":"2021-09-09"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandList(String command) {","lastModifiedDate":"2021-09-09"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"        return command.equalsIgnoreCase(\"LIST\") || command.equalsIgnoreCase(\"LS\");","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the input command is equivalent to \u0027view -p\u0027","lastModifiedDate":"2021-09-09"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command","lastModifiedDate":"2021-09-09"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the command is equivalent to \u0027view -p\u0027 no matter it is uppercase or lowercase or mixed, false otherwise","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandViewPersonality(String command) {","lastModifiedDate":"2021-09-09"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"        return command.equalsIgnoreCase(\"VIEW -P\");","lastModifiedDate":"2021-09-09"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the input command is empty","lastModifiedDate":"2021-09-09"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command","lastModifiedDate":"2021-09-09"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the command is empty, false otherwise","lastModifiedDate":"2021-09-09"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandEmpty(String command) {","lastModifiedDate":"2021-09-09"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"        return command.isEmpty();","lastModifiedDate":"2021-09-09"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the input command is equivalent to \u0027bye\u0027 or \u0027exit\u0027","lastModifiedDate":"2021-09-09"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command","lastModifiedDate":"2021-09-09"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the command is equivalent to \u0027bye\u0027 or \u0027exit\u0027 no matter it is uppercase or lowercase or mixed, false otherwise","lastModifiedDate":"2021-09-09"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCommandExit(String command) {","lastModifiedDate":"2021-09-09"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"        return command.equalsIgnoreCase(\"EXIT\") || command.equalsIgnoreCase(\"BYE\");","lastModifiedDate":"2021-09-09"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"tryyang2001":93}},{"path":"src/main/java/duke/design/Default.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.design;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import java.util.List;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import java.util.Random;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":" * Credit: The pictures are generated with the help of an online picture to ASCII symbols converter","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":" * The website available: \"https://manytools.org/hacker-tools/convert-images-to-ascii-art/\"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"public abstract class Default {","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    public static final String CURR_VERSION \u003d \"Version 7.0\";","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    //Corner symbols for to-do list frames","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    public static final String TOP_LEFT_CORNER \u003d \"/\";","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    public static final String TOP_RIGHT_CORNER \u003d \"\\\\\";","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    public static final String BOTTOM_LEFT_CORNER \u003d \"\\\\\";","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    public static final String BOTTOM_RIGHT_CORNER \u003d \"/\";","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    //Pictures for view -p","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    public static final String PICTURE_1 \u003d \"***********************************************************************************************************************\\n\" +","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"            \"**                                                                                                                   **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((((((((((((((*#//////*///////*#/////*///////**//*****//******/*****///*,//((((((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((((/##///////////////*#///,//*///////***//******/,*******/*****/***,(((((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((*#(///////*//////*/*#////*//*///////*****,**************************,(((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((*#(*///////*//////***###/#/*//*/(/////***************,********,********,((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((/##/////////*//#((/**/(##(///,//////////******.*********,*********,********/((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((((/#(////(((((*//////****#//////*///*//////******,**********,*********,*********(((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((######//////,//////****((///////*//*//////******************,******************,((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((###(////////,////*//****#//*//////*//*//*//*******,***********,**********,*******,(((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((/##//*///////*/////*/*****#//*///////*////*//***,***.***********************.*,******((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((##//*///*///**/////*/****,(//**///////*///**********,,***********,***********.*,****,((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((##///*//**//**,/////*******//,***////////*//*****,****,,,**********,****,******,,*****,(((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((*#///////**/***,/////********//****//////////,****%****.,,,**********.***,,******,.**,*,(((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((/#///////*******,/*///*******%//,****//////////****/%***,,,,,,*****,***.***,,******,**,,**((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((*(//*////********//////****,/%#//,****,/////////*,**%%,**,,,,,,*****,***,,**,,*********,*,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((//*,/////*******,/,///*****/%(@*/,******////////***/\u0026\u0026(*,,,,,,,,***,,***,,,,,,,*******.,,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((/***//,/,*******%%/#*//*,**,%%\u0026@%/*@(*****,//////***(%@\u0026,*@*,,.,,,**,,.**.,,.,,,******,,.((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((///**//,/*//******%%@**@#,.........@@*/@@@@\u0026/***,*///**,@\u0026.........,.,*,,,.*,,,,.,,,****.,,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((///*,/////*,*,***,,,....,/,......\u0026\u0026@@@@@@@@@@@@@@@@@@@\u0026%/,*...... ......,,,.,,.,,,,.,,***.,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((/**,/,/////,**,.,,\u0026\u0026\u0026\u0026\u0026\u0026,.......,\u0026@@@@@@@@@@@@@@@@@@@@@@\u0026.........,\u0026\u0026\u0026\u0026#,,.*****,,..,..,**,(((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((***/,/////////**%\u0026\u0026\u0026\u0026\u0026\u0026,.....,@@@@@@@@@@@@@@@@@@@@@@@@@@%......,@@@@\u0026\u0026\u0026\u0026\u0026/*********,*,*****(((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((,,,,/////////***\u0026\u0026\u0026\u0026\u0026\u0026\u0026*****.***//@@@@@@@@@@@@@@@@@@@@@@\u0026***/**/****\u0026\u0026\u0026\u0026\u0026%*******,**,******(((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((,**//*////*//***@@@\u0026\u0026\u0026\u0026*///(((///\u0026@@@@@@@@@@@@@@@@@@@@@@\u0026*/////////\u0026\u0026@@%%%*******.***,.****,((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((,*.//*/////*/***/@@@@@@@@/((((((/@@@@@@@@@@@@@@@@@@@@@@@@@\u0026/((((((/@\u0026%(%%%%(******.***,,*,,**/(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((/////*/*///*/***%@@@@@@@@@@@\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%*****,,****.*,,**,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##*/*//,//*///*/***\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%*****,******,,,**,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##,*//*//***//*/***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%%%****,,******.,,.*,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##,*/*/,/***//*****@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%*****,.*******,*,*,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##.////,/***///.**,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%%/%***,.*****,**.#,*(#*#        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"            \"**       //,/,//,/****///,**%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%*%#**,,,*****.**/,,#####        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"            \"**       //*/,./**/****//**,*/,@@@@@@@@@@@@@@@@@@@@@@@@@\u0026@@@@@@@@@@@@@@@@@@@\u0026%%%%%%%,,,,*,,,****,.**.,******,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///*,***,**,****/*,,,.,#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%#,,.,,,.*****,***.*********        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"            \"**       (///********,*****/.,,,,.\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%,,,,,,,,******.*,***********        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((,********,**************\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%,,.,,,.*****..,.**************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((#******,////*****////////////%\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%*,,,,,,*,,,**********************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((((((((((((((/////////////////////\u0026\u0026@@@@@@@@@\u0026@#*/////////////////////////***********///////        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((((((((((((((//////////////////%@\u0026@(*/////////////////////////////////*//////////////        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026##((((((((((((((((((((((((((((((///////////////*////////////////////////(((((((((((((//////////////        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026%%%\u0026#(((((((((((((((((((((((((((((((////////////*/////////(((((((((((((((((((((((((////////////(##        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%\u0026%\u0026%#(((((((((((((((((((((((((((((/////////**(((((((((((((((((((((((/////////////((########*        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%%%%%%%\u0026%%%%#((((((((((((((((((((((((((//////**,(((/////////////////(((#################(#*,,        **\";","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"    public static final String PICTURE_2 \u003d \"***********************************************************************************************************************\\n\" +","lastModifiedDate":"2021-09-02"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"            \"**                                                                                                                   **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////,***,*/,////////#/////**#/(///*****////*//////***************.,,,,,,,,,,,,,,,,,**#########(,,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////****,//*////////*##(///**/#////****.**//**/////*****************,,,,,,,,,,,,,,,,.**(#########,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////,**,(////////*//**##(#///*,///*//*,******/,**/////*****************.,,,,,,,,,,,,,,.**(########(,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////**/////*/(///*/***#//////**,//**/**.*,*****,***////****************,*,,,,,,,,,,,,,,.,*#########,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///**#(//////////*/***/////////**//**/**.**%**********//*******,*********.,,,,,,,,,,,,,,.,*#########        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///*###(#////////*/****#///*//////*/*****.*,%\u0026***********************,*****.,,,,,,,,,,,,,.,*########        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"            \"**       //*(#(////*//////***,**.//,/**///////,****,**\u0026\u0026(%****,************.*****.****,,,,,,,,,,,,,,,*#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"            \"**       //,#//////*///////**,**,(//,//**///////,*****,,%@@#\u0026,**,.,**********,*.*****.***.,,,,,,,,,.,*#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///#///*//**//////******(\u0026*//,/***///////*****@@#..   ........ ..,***,,**////**.,,,,,,,,,,,,,(######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"            \"**       //((///**/**,/,////******\u0026%@,/*@//****////////,.@@...........\u0026\u0026\u0026\u0026\u0026//****,////***.,,,,,,,,,,,,*######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"            \"**       //,/////**,**(/%%///******%%@@@*%@@@@@@@@@@@@@@@@@....  ...@@@\u0026\u0026@\u0026(//****/////***.,,,,,,,,,,,*######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////,///**.**\u0026*\u0026@@@/....... @@@@@@@@@@@@@@@@@@@@\u0026****/.////**\u0026\u0026\u0026%%*//***/////***,.,,,,,,,,.,,######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////*////*,*,%@## .  .......(@@@@@@@@@@@@@@@@@@@@////((((//,@%%%%\u0026//***/////*****%%%%,,,,.,*.#####        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////*/,/////*.,.#@\u0026@....  .@#*@@@@@@@@@@@@@@@@@@@@@@*((((/\u0026\u0026\u0026\u0026%%%%%*//**/////**.*.%%%%%,,,,,#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///////,//**///*,,\u0026\u0026....*..////\u0026@@@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%#//*,//////*,**%%*%%/,,,,#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///////////,/*@@@\u0026\u0026\u0026***///(((((@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%%//*//*/*/*****/(#%%%,.,######((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////////.//**#@@@@@@*//(((/@@@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%,///./*//*,**,*((%%%,.*##(,****        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////////,////***(@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@\u0026@@\u0026\u0026\u0026@@@@@\u0026%%%%*//./**/*,*,,*,%%%,,.,*********        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////////,/////***#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@/(((##########@@@@@@@@@@@%%%%%%/*/**/*,,,,,,#%.*********,**,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////////./////,*.*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@((((##############\u0026@@@@@@@\u0026%%%%%///*,/,,,,,.,,************,,,,*        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///////////*///****\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@/(((#################%@@@@@%%%%(/*,,,,,,,,,,,,******************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"            \"**       (/////,,////**//,**@\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@/((###################\u0026@\u0026@%%%//*,,,,,,,,,,,,********************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////*//////,****/*,@@@@@@@@@@@@@@@@@(####################*@@%%**,,,,.,,,,,,,,**//****/*************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////*//////////,*****/@@@@@@@@@@@@@@@\u0026####################(\u0026%*,.,,,,,,,,,,,//*/*********************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////(((///////////////////*@@@@@@@@@@@@##################((*,,,,,,,../((((((((///****************/((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///((((((///////////,//////////*,,/\u0026@@@@@(##########,****///////((((((((((((((((((***********(((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///(((((((((((((///////////////////////****.%@\u0026\u0026/*****/////((((((((((((((((((((((/****/((((((((((/((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///*#((((((((((((((((((///////////////////******,,**///((((((((((((((((((((((%%((((((((((((((,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////\u0026%((((((((((((((((((((((((((((///////////*******.((((((((((((((((#%%%%%%#(((((((((((*(((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////%%%#(((((((((((((((((((((((((((((((((//////******,,/(((((((%%%%%%%%%#((((((((((((((((((((((((,.        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////%%%%%(((((((((((((((((((((((((((((((((((((/********,,(%%%%%%##((((((((((((((((((((((,,........        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////(#%%%%%%%((((((((((((((((((((((((((((((((((((/***,,,,,,/((((((((((((((*,,,....................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////,%%###%%%%%%%%%%%%%#(((((((((((((((((((((((((((*******,,,,.((,,,,..............................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////,*%%%%#####%%%%%%%%%%%%%%%%%%%%%((((((((((((((((***********,..................................,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////.***%%%%%%%####%%%%%#######,#%%%%%%%%%%%%(((((((**************..................,,,,,,,,,,,,,,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"            \"**       (////*******%%%%%%%%%%%%%%%######(##(*(###%%%%%%%%%#(/****************,,,,,,,,,,,,,,,,,,,,,,,,,,....        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"            \"**       (/////./********(%%%%%%%%%%%%%%%#((((((((,(((((((((((((((((******************..,,,,,,...............        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((/////,**/******,,*****/#%%%%%%%#(//,,,,,,,*,(((((((((((((((((((********,...,,,,,,.................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"            \"**       ,(((((///,,****,*,,,,,,,,,,,,,,,,,,,,,,,,,,..........,(((((((((((((((......,,,,,,...................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"            \"**       #((((((((/(,*,,*,**,,,,,,,,,,,,,,..........,,,,,,,,,.******((((((.... ...,,,,,,.....................        **\";","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"    public static final String PICTURE_3 \u003d \"***********************************************************************************************************************\\n\" +","lastModifiedDate":"2021-09-02"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"            \"**                                                                                                                   **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((*//*///////,/////////////*//////,//*///////%.//////////////////#%(##################        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((,////*//////.//////////////,/(%(((/*/,/(#%/%%%%///#/%/////%%/#%//#%%%#################        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((#((#####.*////*/////*//////////////////////////,///////%*//////////*/////////#%(###########%#%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"            \"**       ############.,/////**/////*/////////////*/////*/////////////%.///////////*/////////%%*%%%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"            \"**       ###########./ *////,,*/*/*/////*////////,/////*/////////////#*////////////,*////////%%#%%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"            \"**       ########## ,* ,/////,, /**////*//*//////,////***/////*//////(#*////////////**////////%%%%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"            \"**       ####%%%%#*,,,.,,*////.//,*////,//*//////*////***//////*//////%***,*////////.**///////#%,%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%%,,,,,,,,*,////***//////***//////*///*.**////////.///(.,*///////////***///////#%#%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%#,,,, *,,,*,,//*,,//////***//////.///*****/////////.//(***//////////,***///////%#\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%% ,,,,**, *,, //,***/////****//////,//.******///////////,****///*/////,***///,///%*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%.,,,,,,,,,,, //*,**/////*****////////,*******///////,//*.****///.*////****///,///#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026, ,,,,,,.,,*,///**,*//*//,****/////.*/,*.******/////////,\u0026*,***//,*////******/////*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,,,,,,,,,,,**,//.,****////*****///.*%./.**,*******///////*@#    .* ***//.******* .//\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ,,,.,,,,,,,**///,,,**,////******///@\u0026\u0026/@***,********//%//       ...  . ,//,////\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ,,, ......,*,*//.,****,**// **,.*** \u0026./%#@@@.*.********.@@@        \u0026\u0026\u0026\u0026@@%**///%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026  ,,,,.,,,,*,,,,,/.***,***,.           (@@@@@@@@@@@@@@@@@@@@      .,\u0026\u0026\u0026\u0026@@.**///,\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026/\u0027 .,,,,,,,,,,,,,*/\u0027//  ,,**(\u0026         \u0026@@@@@@@@@@@@@@@@@@@\u0026,** ,***@\u0026@@\u0026@***/// \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026....,,,,,,, ,,,,*///////\u0026\u0026\u0026\u0026\u0026      \u0026@@%@@@@@@@@@@@@@@@@@@@@\u0026*/////#@@@@@,***/// \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026.... .., .,.,,,,*///////\u0026@@\u0026\u0026(,,******#@@@@@@@@@@@@@@@@@@@@@@////\u0026@@@@@@.***/// \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 .....*%%%\u0026,,,,*////// %%\u0026@@@@,//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,****// \u0026\u0026\u0026\u0026\u0026\u0026@\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ....%,\u0026%% ,,,,//*///#\u0026\u0026%%%@@@@@\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*****//#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ...%%%*.%,,,,//,,//\u0026%@%%%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*****//@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(..(%%%#, ,,,//, //(%\u0026@.%%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%\u0026@@@@#*,**//.\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026../%%%%%,,,**, /,%(%%\u0026@*%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,****//@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026. ..%%/,,,*, /.%%\u0026%%%@@\u0026%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,*,**//(\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ...%.,,*, /.%%%%%%%@@@\u0026/\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.#**,*//.\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 .. ,,,,/.#%%%%%%%%\u0026@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@(\u0026\u0026/*.*//.\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ,,,/.%%%%%%%%%%%%%\u0026@@@@@(@@@@@@@@@@@@@@@@@@@@,\u0026\u0026\u0026\u0026\u0026,**//,\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(,,*,%%%%%%%%%%%%%%%%%@@@@@,@@@@@@@@@@@@@@/\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,///\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,,/%%%%%%%%%%%%%%%%%%%%@@@\u0026%\u0026@@@@@@@(. %\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026//\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(  ... ....... . . #%%%%%%%%%%%%%%%%%%@@,\u0026%,.,//....,,,, \u0026\u0026\u0026#/%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026.......\u0026@\u0026............ ..... %%%%%%%%%%%%%%%\u0026@(%%%%%.%,...,,,,,,, ,,.*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026(%%%%%%%%....@@@..........,. . %%%%,%%%%%%%%%%%%%@\u0026\u0026@.%%%%%..,,,,,,,,,,,,,,,,,,..%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026(%%%%%%%%/%%% ...@@@............%%%%%%%%*\u0026%%%%%%%%%\u0026*%%\u0026\u0026\u0026@%%,.,,,,,,,,,,,,,,,,,,,,,\u0026@.,,\u0026%/*\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026%\u0026#%%%%%%%%\u0026\u0026\u0026\u0026(%% .. @@#........./%%%%%%%%%%\u0026\u0026/#%%%%%\u0026,%%%%\u0026\u0026\u0026\u0026,,,,,,,,,,,,,,,,,,,,,,%@ ,,.\u0026@\u0026@@\u0026,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026.%%...\u0026@@......(%%%%%%%*%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026/(\u0026%%%%%\u0026\u0026\u0026\u0026.,,,,,,,,,,,,,,,,,,,#@ ,,.\u0026\u0026@\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%,%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(%... @@/\u0027 %%%.%%%%%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026.,,,,,,,,,,,,,,,,,,%@ ,,,\u0026\u0026\u0026@\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%#%%%%%%\u0026\u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%...\u0026@%%%%%%*%%%%%%%%%%\u0026\u0026\u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@,,,,,,,,,,,,,,,,,,@@ ,,#%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%#%%%%%%\u0026%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026*% . %%%%%%%\u0026%%#%%%%%%%\u0026\u0026#,#\u0026(.*%\u0026\u0026\u0026\u0026\u0026#\u0026\u0026\u0026 ,.,,,,,,,,,,,,,,.@@,,.%%\u0026\u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%#%%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,%.%%%%%%%\u0026\u0026,%\u0026\u0026\u0026,%%****..,/\u0026@\u0026\u0026\u0026@@@@@*#@@%,   .,,,,,,,,,.@(,,.%%\u0026\u0026\u0026\u0026*\u0026\u0026\u0026\u0026\u0026\u0026        **\";","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":152,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":153,"author":{"gitId":"tryyang2001"},"content":"     * Print the logo and greeting message","lastModifiedDate":"2021-09-09"},{"lineNumber":154,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":155,"author":{"gitId":"tryyang2001"},"content":"    public static void printLogo() {","lastModifiedDate":"2021-09-09"},{"lineNumber":156,"author":{"gitId":"tryyang2001"},"content":"        //print the logo when the program starts","lastModifiedDate":"2021-09-09"},{"lineNumber":157,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t              ##*                                 \");","lastModifiedDate":"2021-09-09"},{"lineNumber":158,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t   .      . .\u0026####%                               \");","lastModifiedDate":"2021-09-09"},{"lineNumber":159,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t    #%%%%((\u0026%######%**.                           \");","lastModifiedDate":"2021-09-09"},{"lineNumber":160,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t    %#############%#%\u0026\u0026%%%%%##(*.                 \");","lastModifiedDate":"2021-09-09"},{"lineNumber":161,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t . .%%#######%%%%%##############%%%%#(.           \");","lastModifiedDate":"2021-09-09"},{"lineNumber":162,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t/##\u0026@%####\u0026%####\u0026#####%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%####\u0026/  .      \");","lastModifiedDate":"2021-09-09"},{"lineNumber":163,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t\u0026######%%######%\u0026%%%#################%%%%\u0026#       \");","lastModifiedDate":"2021-09-09"},{"lineNumber":164,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t(@####\u0026#####%\u0026%########################%###@(     \");","lastModifiedDate":"2021-09-09"},{"lineNumber":165,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t,\u0026%#%%%%##%%############%%%%%%%%%%%##########%.   \");","lastModifiedDate":"2021-09-09"},{"lineNumber":166,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t*\u0026#\u0026%%\u0026#%\u0026########\u0026%#(%#/((((((/****#\u0026%\u0026%#####%,  \");","lastModifiedDate":"2021-09-09"},{"lineNumber":167,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  ,\u0026#%%%%#####%%#(%(((\u0026#(\u0026(((((((((/%#(((%##%%#%. \");","lastModifiedDate":"2021-09-09"},{"lineNumber":168,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  (%##%%####%%(((/%\u0026((%\u0026#%##((((((((\u0026#(((%#(((\u0026\u0026, \");","lastModifiedDate":"2021-09-09"},{"lineNumber":169,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  (%#%\u0026####%#((##(#(/###.%#.*(##(((%, /##((%#(#( .\");","lastModifiedDate":"2021-09-09"},{"lineNumber":170,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  *\u0026(\u0026%###%#(((((#/@%%%\u0026,. ...     \u0026%%\u0026%  (\u0026###*  \");","lastModifiedDate":"2021-09-09"},{"lineNumber":171,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t . (%%%###%(((((#/#####\u0026, .. .... /\u0026(#(\u0026,.%(((#(  \");","lastModifiedDate":"2021-09-09"},{"lineNumber":172,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t    *\u0026\u0026##%%(((((%*(%###%. .. .. . *%(##\u0026, (%((#(  \");","lastModifiedDate":"2021-09-09"},{"lineNumber":173,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t      (\u0026#%%((((#%/ .**,. ..... . ...,,,. . (#(%(  \");","lastModifiedDate":"2021-09-09"},{"lineNumber":174,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t        .(%(((((\u0026/ .   .  ...... .. .. . .(%/#%,  \");","lastModifiedDate":"2021-09-09"},{"lineNumber":175,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t          .(%(((#\u0026*,,.           . .,*/*%#((#\u0026*   \");","lastModifiedDate":"2021-09-09"},{"lineNumber":176,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t              ,/(#(    .,,******,.     ####%*     \");","lastModifiedDate":"2021-09-09"},{"lineNumber":177,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":178,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":179,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":180,"author":{"gitId":"tryyang2001"},"content":"     * Print the welcome message and the ASCII art when the program starts","lastModifiedDate":"2021-09-09"},{"lineNumber":181,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":182,"author":{"gitId":"tryyang2001"},"content":"    public static void printWelcomeMessage() {","lastModifiedDate":"2021-09-09"},{"lineNumber":183,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   __          ________ _      _____ ____  __  __ ______    \");","lastModifiedDate":"2021-09-09"},{"lineNumber":184,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   \\\\ \\\\        / /  ____| |    / ____/ __ \\\\|  \\\\/  |  ____|  \");","lastModifiedDate":"2021-09-09"},{"lineNumber":185,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    \\\\ \\\\  /\\\\  / /| |__  | |   | |   | |  | | \\\\  / | |__     \");","lastModifiedDate":"2021-09-09"},{"lineNumber":186,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"     \\\\ \\\\/  \\\\/ / |  __| | |   | |   | |  | | |\\\\/| |  __|    \");","lastModifiedDate":"2021-09-09"},{"lineNumber":187,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"      \\\\  /\\\\  /  | |____| |___| |___| |__| | |  | | |____   \");","lastModifiedDate":"2021-09-09"},{"lineNumber":188,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"     __\\\\/_ \\\\/   |______|______\\\\_____\\\\____/|_|  |_|______|_ \");","lastModifiedDate":"2021-09-09"},{"lineNumber":189,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    / ____| |  | |_   _|  \\\\/  |   /\\\\   |  __ \\\\|_   _| \\\\ | |\");","lastModifiedDate":"2021-09-09"},{"lineNumber":190,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   | (___ | |__| | | | | \\\\  / |  /  \\\\  | |__) | | | |  \\\\| |\");","lastModifiedDate":"2021-09-09"},{"lineNumber":191,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    \\\\___ \\\\|  __  | | | | |\\\\/| | / /\\\\ \\\\ |  _  /  | | | . ` |\");","lastModifiedDate":"2021-09-09"},{"lineNumber":192,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    ____) | |  | |_| |_| |  | |/ ____ \\\\| | \\\\ \\\\ _| |_| |\\\\  |\");","lastModifiedDate":"2021-09-09"},{"lineNumber":193,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   |_____/|_|  |_|_____|_|  |_/_/    \\\\_\\\\_|  \\\\_\\\\_____|_| \\\\_|\");","lastModifiedDate":"2021-09-09"},{"lineNumber":194,"author":{"gitId":"tryyang2001"},"content":"        //greeting","lastModifiedDate":"2021-09-09"},{"lineNumber":195,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\nHi there! My name is Shima Rin and I am a chat robot that can help you do some wonderful jobs!\");","lastModifiedDate":"2021-09-09"},{"lineNumber":196,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":197,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":198,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":199,"author":{"gitId":"tryyang2001"},"content":"     * Show the current version\u0027s functionality of the bot","lastModifiedDate":"2021-09-09"},{"lineNumber":200,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":201,"author":{"gitId":"tryyang2001"},"content":"    public static void printVersionDescription() {","lastModifiedDate":"2021-09-09"},{"lineNumber":202,"author":{"gitId":"tryyang2001"},"content":"        //Uses list to store all the version information","lastModifiedDate":"2021-09-09"},{"lineNumber":203,"author":{"gitId":"tryyang2001"},"content":"        ArrayList\u003cString\u003e versionDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-12"},{"lineNumber":204,"author":{"gitId":"tryyang2001"},"content":"        int maxDescriptionsLength \u003d 0;","lastModifiedDate":"2021-09-09"},{"lineNumber":205,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* \" + CURR_VERSION);","lastModifiedDate":"2021-09-09"},{"lineNumber":206,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* To know more about me, you can view my profile by typing the command \\\"view -p\\\"\");","lastModifiedDate":"2021-09-09"},{"lineNumber":207,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* I can help you create a to-do list, you can perform tasks addition, deletion, and mark tasks as done\");","lastModifiedDate":"2021-09-15"},{"lineNumber":208,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* In addition, I will memorise all the tasks that you entered, so that you can refer back when you revisit me :)\");","lastModifiedDate":"2021-09-15"},{"lineNumber":209,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* You can type \\\"todo\\\" or \\\"deadline\\\" or \\\"event\\\" to create a task and I will help you save it automatically!\");","lastModifiedDate":"2021-09-09"},{"lineNumber":210,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* You can type \\\"list\\\" or \\\"ls\\\" to list all the tasks that are waiting to do\");","lastModifiedDate":"2021-09-09"},{"lineNumber":211,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* You can type \\\"done i\\\" where i is the index of the task to mark the specific task as done\");","lastModifiedDate":"2021-09-09"},{"lineNumber":212,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* You can type \\\"delete i\\\" where i is the index of the task to delete the task whenever necessary\");","lastModifiedDate":"2021-09-15"},{"lineNumber":213,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* You can type \\\"exit\\\" or \\\"bye\\\" to stop me and exit the program\");","lastModifiedDate":"2021-09-09"},{"lineNumber":214,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* You can type \\\"help\\\" or \\\"view -h\\\" for more information about how to use me (YES the bot), \");","lastModifiedDate":"2021-09-17"},{"lineNumber":215,"author":{"gitId":"tryyang2001"},"content":"        //Finds the length of the longest description to align all \u0027*\u0027 displayed","lastModifiedDate":"2021-09-09"},{"lineNumber":216,"author":{"gitId":"tryyang2001"},"content":"        for (String str : versionDescriptions) {","lastModifiedDate":"2021-09-09"},{"lineNumber":217,"author":{"gitId":"tryyang2001"},"content":"            if (str.length() \u003e maxDescriptionsLength) {","lastModifiedDate":"2021-09-09"},{"lineNumber":218,"author":{"gitId":"tryyang2001"},"content":"                maxDescriptionsLength \u003d str.length();","lastModifiedDate":"2021-09-09"},{"lineNumber":219,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":220,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":221,"author":{"gitId":"tryyang2001"},"content":"        //Draws the frame for the version description","lastModifiedDate":"2021-09-09"},{"lineNumber":222,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c maxDescriptionsLength + 2; i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":223,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-09"},{"lineNumber":224,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":225,"author":{"gitId":"tryyang2001"},"content":"        System.out.println();","lastModifiedDate":"2021-09-09"},{"lineNumber":226,"author":{"gitId":"tryyang2001"},"content":"        for (String str : versionDescriptions) {","lastModifiedDate":"2021-09-09"},{"lineNumber":227,"author":{"gitId":"tryyang2001"},"content":"            //Uses format string to print the \u0027*\u0027 at the correct position after each sentence is completed","lastModifiedDate":"2021-09-09"},{"lineNumber":228,"author":{"gitId":"tryyang2001"},"content":"            System.out.printf(\"%1$-\" + (maxDescriptionsLength + 1) + \"s\", str);","lastModifiedDate":"2021-09-09"},{"lineNumber":229,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"*\");","lastModifiedDate":"2021-09-09"},{"lineNumber":230,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":231,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c maxDescriptionsLength + 2; i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":232,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-09"},{"lineNumber":233,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":234,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":235,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":236,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":237,"author":{"gitId":"tryyang2001"},"content":"     * Prints the ASCII art image of the robot and the description of the personality of the robot","lastModifiedDate":"2021-09-08"},{"lineNumber":238,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":239,"author":{"gitId":"tryyang2001"},"content":"    public static void printPersonality() {","lastModifiedDate":"2021-09-08"},{"lineNumber":240,"author":{"gitId":"tryyang2001"},"content":"        Random random \u003d new Random();","lastModifiedDate":"2021-09-08"},{"lineNumber":241,"author":{"gitId":"tryyang2001"},"content":"        int randomNumber \u003d random.nextInt(3);","lastModifiedDate":"2021-09-08"},{"lineNumber":242,"author":{"gitId":"tryyang2001"},"content":"        switch (randomNumber) {","lastModifiedDate":"2021-09-08"},{"lineNumber":243,"author":{"gitId":"tryyang2001"},"content":"        case 0:","lastModifiedDate":"2021-09-08"},{"lineNumber":244,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(Default.PICTURE_1);","lastModifiedDate":"2021-09-09"},{"lineNumber":245,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":246,"author":{"gitId":"tryyang2001"},"content":"        case 1:","lastModifiedDate":"2021-09-08"},{"lineNumber":247,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(Default.PICTURE_2);","lastModifiedDate":"2021-09-09"},{"lineNumber":248,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":249,"author":{"gitId":"tryyang2001"},"content":"        case 2:","lastModifiedDate":"2021-09-08"},{"lineNumber":250,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(Default.PICTURE_3);","lastModifiedDate":"2021-09-09"},{"lineNumber":251,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":252,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":253,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**                                                                                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":254,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**       Greeting!                                                                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":255,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -My name is Shima Rin, I am a Japanese anime character that comes from the anime \\\"Yuru Camp\\\" :P              **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":256,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -I love physical camping, especially during the winter season!                                               **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":257,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -I also love food (especially hot pot!) and hot spring! :P                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":258,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -By the way, I am a dog lover!                                                                               **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":259,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**                                                                                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":260,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"***********************************************************************************************************************\");","lastModifiedDate":"2021-09-08"},{"lineNumber":261,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":262,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":263,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-12"},{"lineNumber":264,"author":{"gitId":"tryyang2001"},"content":"     * Prints the help menu to the console","lastModifiedDate":"2021-09-12"},{"lineNumber":265,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-12"},{"lineNumber":266,"author":{"gitId":"tryyang2001"},"content":"    public static void printHelpMenu() {","lastModifiedDate":"2021-09-08"},{"lineNumber":267,"author":{"gitId":"tryyang2001"},"content":"        ArrayList\u003cString\u003e helpLists \u003d createHelpMenu();","lastModifiedDate":"2021-09-09"},{"lineNumber":268,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"************************************************************************************************************************************************************************\");","lastModifiedDate":"2021-09-08"},{"lineNumber":269,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"Help Menu Version \" + CURR_VERSION + \"\\n\");","lastModifiedDate":"2021-09-08"},{"lineNumber":270,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c helpLists.size(); i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":271,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t\" + (i + 1) + \". \" + helpLists.get(i));","lastModifiedDate":"2021-09-09"},{"lineNumber":272,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":273,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"************************************************************************************************************************************************************************\");","lastModifiedDate":"2021-09-08"},{"lineNumber":274,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":275,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":276,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":277,"author":{"gitId":"tryyang2001"},"content":"     * Creates the help menu descriptions by adding the strings into the array list","lastModifiedDate":"2021-09-09"},{"lineNumber":278,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":279,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns an array list of string with all the help menu descriptions","lastModifiedDate":"2021-09-09"},{"lineNumber":280,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":281,"author":{"gitId":"tryyang2001"},"content":"    private static ArrayList\u003cString\u003e createHelpMenu() {","lastModifiedDate":"2021-09-09"},{"lineNumber":282,"author":{"gitId":"tryyang2001"},"content":"        ArrayList\u003cString\u003e helpLists \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-09"},{"lineNumber":283,"author":{"gitId":"tryyang2001"},"content":"        //To-do command","lastModifiedDate":"2021-09-09"},{"lineNumber":284,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To add a new to-do task, use the command \\\"todo\\\" with syntax:\\n\\t\\ttodo [YOUR_TASK_DESCRIPTION]\\n\\t\\t\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":285,"author":{"gitId":"tryyang2001"},"content":"                \"eg. todo read book\\t\u003c-- will add the task \\\"read book\\\" to your to-do list\\n\");","lastModifiedDate":"2021-09-09"},{"lineNumber":286,"author":{"gitId":"tryyang2001"},"content":"        //Deadline command","lastModifiedDate":"2021-09-09"},{"lineNumber":287,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To add a new task specified with deadline, use the command \\\"deadline\\\" with syntax:\\n\\t\\tdeadline [YOUR_TASK_DESCRIPTION] /[DEADLINE]\\n\\t\\t\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":288,"author":{"gitId":"tryyang2001"},"content":"                \"eg. deadline submit assignment /by Friday 6pm\\t\u003c-- will add the task \\\"submit assignment\\\" with deadline \\\"Friday 6pm\\n\");","lastModifiedDate":"2021-09-09"},{"lineNumber":289,"author":{"gitId":"tryyang2001"},"content":"        //Event command","lastModifiedDate":"2021-09-09"},{"lineNumber":290,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To add an event specified with start time and end time, use the command \\\"event\\\" with syntax:\\n\\t\\tevent [YOUR_TASK_DESCRIPTION] /[START_TIME]-[END_TIME]\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":291,"author":{"gitId":"tryyang2001"},"content":"                \"\\n\\t\\teg. event attend tutorial /at Friday 2 - 4pm\\t\u003c-- will add the event \\\"attend tutorial\\\" with the event day Friday and start time 2pm and end time 4pm\\n\");","lastModifiedDate":"2021-09-09"},{"lineNumber":292,"author":{"gitId":"tryyang2001"},"content":"        //List command","lastModifiedDate":"2021-09-09"},{"lineNumber":293,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To print the to-do list, use the command \\\"list\\\" or \\\"ls\\\", it will then show you the to-do list\\n\");","lastModifiedDate":"2021-09-09"},{"lineNumber":294,"author":{"gitId":"tryyang2001"},"content":"        //Done command","lastModifiedDate":"2021-09-09"},{"lineNumber":295,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To mark the task as done, use the command \\\"done\\\" with syntax:\\n\\t\\tdone [TASK_INDEX]\\n\\t\\teg. done 1\\t\u003c-- will mark the 1st task as completed\\n\\t\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":296,"author":{"gitId":"tryyang2001"},"content":"                \"\\t\\tdone 1 2 3\\t\u003c-- will mark the 1st, 2nd and 3rd tasks as completed\\n\");","lastModifiedDate":"2021-09-15"},{"lineNumber":297,"author":{"gitId":"tryyang2001"},"content":"        //Delete command","lastModifiedDate":"2021-09-15"},{"lineNumber":298,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To delete task, use the command \\\"delete\\\" with syntax:\\n\\t\\tdelete [TASK_INDEX]\\n\\t\\teg. delete 1\\t\u003c--will delete the 1st task\\n\\t\" +","lastModifiedDate":"2021-09-15"},{"lineNumber":299,"author":{"gitId":"tryyang2001"},"content":"                \"\\t\\tdelete 1 2 3\\t\u003c-- will delete the tasks with index 1, 2 and 3\\n\\t\\t\\tdelete all\\t\u003c-- will delete all the tasks in the list\\n\");","lastModifiedDate":"2021-09-17"},{"lineNumber":300,"author":{"gitId":"tryyang2001"},"content":"        //Exit command","lastModifiedDate":"2021-09-09"},{"lineNumber":301,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To exit the program, use the command \\\"exit\\\" or \\\"bye\\\"\\n\");","lastModifiedDate":"2021-09-09"},{"lineNumber":302,"author":{"gitId":"tryyang2001"},"content":"        return helpLists;","lastModifiedDate":"2021-09-09"},{"lineNumber":303,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":304,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":305,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":306,"author":{"gitId":"tryyang2001"},"content":"     * Prints the to-do list with frames","lastModifiedDate":"2021-09-09"},{"lineNumber":307,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":308,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks the array of class Task instance which stores all the tasks added by the user","lastModifiedDate":"2021-09-09"},{"lineNumber":309,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":310,"author":{"gitId":"tryyang2001"},"content":"    public static void printToDoList(ArrayList\u003cTask\u003e tasks, int longestTaskDescription) {","lastModifiedDate":"2021-09-12"},{"lineNumber":311,"author":{"gitId":"tryyang2001"},"content":"        final int MIN_LENGTH \u003d \" My to-do list: \".length();","lastModifiedDate":"2021-09-09"},{"lineNumber":312,"author":{"gitId":"tryyang2001"},"content":"        //if longestTaskDescription is shorter than the length of the string \"My to-do list: \", sets it to the length of the string","lastModifiedDate":"2021-09-09"},{"lineNumber":313,"author":{"gitId":"tryyang2001"},"content":"        if (longestTaskDescription \u003c MIN_LENGTH) {","lastModifiedDate":"2021-09-09"},{"lineNumber":314,"author":{"gitId":"tryyang2001"},"content":"            longestTaskDescription \u003d MIN_LENGTH;","lastModifiedDate":"2021-09-09"},{"lineNumber":315,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":316,"author":{"gitId":"tryyang2001"},"content":"        //Prints the to-do list","lastModifiedDate":"2021-09-09"},{"lineNumber":317,"author":{"gitId":"tryyang2001"},"content":"        drawUpperFrame(longestTaskDescription);","lastModifiedDate":"2021-09-09"},{"lineNumber":318,"author":{"gitId":"tryyang2001"},"content":"        printTasks(tasks, longestTaskDescription);","lastModifiedDate":"2021-09-12"},{"lineNumber":319,"author":{"gitId":"tryyang2001"},"content":"        drawLowerFrame(longestTaskDescription);","lastModifiedDate":"2021-09-09"},{"lineNumber":320,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":321,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":322,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":323,"author":{"gitId":"tryyang2001"},"content":"     * Prints the bottom frame of the to-do list and the guide for reading the to-do list","lastModifiedDate":"2021-09-09"},{"lineNumber":324,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":325,"author":{"gitId":"tryyang2001"},"content":"     * @param longestTaskDescription the length of the longest task description string stored in the tasks array","lastModifiedDate":"2021-09-09"},{"lineNumber":326,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":327,"author":{"gitId":"tryyang2001"},"content":"    private static void drawLowerFrame(int longestTaskDescription) {","lastModifiedDate":"2021-09-09"},{"lineNumber":328,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t\" + BOTTOM_LEFT_CORNER);","lastModifiedDate":"2021-09-09"},{"lineNumber":329,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c longestTaskDescription + \"| [ ][ ] 100. \".length(); i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":330,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-09"},{"lineNumber":331,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":332,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(BOTTOM_RIGHT_CORNER);","lastModifiedDate":"2021-09-09"},{"lineNumber":333,"author":{"gitId":"tryyang2001"},"content":"        //Shows the guide for understanding the to-do list","lastModifiedDate":"2021-09-09"},{"lineNumber":334,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\tFor your knowledge, \");","lastModifiedDate":"2021-09-09"},{"lineNumber":335,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\tthe first [ ] indicates the type of the task (\u0027T\u0027 for to-do, \u0027D\u0027 for deadline, \u0027E\u0027 for event)\");","lastModifiedDate":"2021-09-09"},{"lineNumber":336,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\tthe second [ ] indicates whether the task is completed:\\n\" +","lastModifiedDate":"2021-09-09"},{"lineNumber":337,"author":{"gitId":"tryyang2001"},"content":"                \"\\t[X] when the task is marked completed\\t[ ] when the task is not done.\");","lastModifiedDate":"2021-09-09"},{"lineNumber":338,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":339,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":340,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":341,"author":{"gitId":"tryyang2001"},"content":"     * Prints the tasks stored in the array, the frame starts with \u0027|\u0027 and ends with \u0027|\u0027, the ending frame is always located at the position of the longest task description","lastModifiedDate":"2021-09-09"},{"lineNumber":342,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":343,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks                  the array that stores all the tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":344,"author":{"gitId":"tryyang2001"},"content":"     * @param longestTaskDescription the length of the longest task description stored in the tasks array","lastModifiedDate":"2021-09-09"},{"lineNumber":345,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":346,"author":{"gitId":"tryyang2001"},"content":"    private static void printTasks(ArrayList\u003cTask\u003e tasks, int longestTaskDescription) {","lastModifiedDate":"2021-09-12"},{"lineNumber":347,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-12"},{"lineNumber":348,"author":{"gitId":"tryyang2001"},"content":"            //Fill the first [] with class type, and the second [] with a \u0027X\u0027 if the task is completed","lastModifiedDate":"2021-09-09"},{"lineNumber":349,"author":{"gitId":"tryyang2001"},"content":"            if (tasks.get(i).getDone()) {","lastModifiedDate":"2021-09-12"},{"lineNumber":350,"author":{"gitId":"tryyang2001"},"content":"                System.out.print(\"\\t| [\" + tasks.get(i).getClassType() + \"][X] \" + (i + 1) + \". \");","lastModifiedDate":"2021-09-12"},{"lineNumber":351,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-09"},{"lineNumber":352,"author":{"gitId":"tryyang2001"},"content":"                System.out.print(\"\\t| [\" + tasks.get(i).getClassType() + \"][ ] \" + (i + 1) + \". \");","lastModifiedDate":"2021-09-12"},{"lineNumber":353,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":354,"author":{"gitId":"tryyang2001"},"content":"            //Calculates the required spacing for the current task as compared to the longest task description to print \u0027|\u0027","lastModifiedDate":"2021-09-09"},{"lineNumber":355,"author":{"gitId":"tryyang2001"},"content":"            int distanceToClosingFrame \u003d longestTaskDescription + \"| [ ][ ] 100. \".length() - (\"| [ ][ ] \" + (i + 1) + \". \").length() + 1;","lastModifiedDate":"2021-09-09"},{"lineNumber":356,"author":{"gitId":"tryyang2001"},"content":"            System.out.printf(\"%1$-\" + distanceToClosingFrame + \"s\", tasks.get(i));","lastModifiedDate":"2021-09-12"},{"lineNumber":357,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"|\");","lastModifiedDate":"2021-09-09"},{"lineNumber":358,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":359,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":360,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":361,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":362,"author":{"gitId":"tryyang2001"},"content":"     * Prints the upper frame of the to-do list and its default display string","lastModifiedDate":"2021-09-09"},{"lineNumber":363,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":364,"author":{"gitId":"tryyang2001"},"content":"     * @param longestTaskDescription the length of the longest task description string stored in the tasks array","lastModifiedDate":"2021-09-09"},{"lineNumber":365,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":366,"author":{"gitId":"tryyang2001"},"content":"    private static void drawUpperFrame(int longestTaskDescription) {","lastModifiedDate":"2021-09-09"},{"lineNumber":367,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t\" + TOP_LEFT_CORNER); //the top left corner","lastModifiedDate":"2021-09-09"},{"lineNumber":368,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c longestTaskDescription + \"| [ ][ ] 100. \".length(); i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":369,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-09"},{"lineNumber":370,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":371,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(TOP_RIGHT_CORNER);","lastModifiedDate":"2021-09-09"},{"lineNumber":372,"author":{"gitId":"tryyang2001"},"content":"        //Print default string \" My to-do list: \"","lastModifiedDate":"2021-09-09"},{"lineNumber":373,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t| My to-do list: \");","lastModifiedDate":"2021-09-09"},{"lineNumber":374,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c longestTaskDescription + \"| [ ][ ] 100. \".length() - \"| My to-do list: \".length() + 1; i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":375,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\" \");","lastModifiedDate":"2021-09-09"},{"lineNumber":376,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":377,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"|\");","lastModifiedDate":"2021-09-09"},{"lineNumber":378,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":379,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":380,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":381,"author":{"gitId":"tryyang2001"},"content":"     * Shows the formatted message string","lastModifiedDate":"2021-09-09"},{"lineNumber":382,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":383,"author":{"gitId":"tryyang2001"},"content":"     * @param message The message to print","lastModifiedDate":"2021-09-09"},{"lineNumber":384,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":385,"author":{"gitId":"tryyang2001"},"content":"    public static void showMessage(String message) {","lastModifiedDate":"2021-09-09"},{"lineNumber":386,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t@\");","lastModifiedDate":"2021-09-09"},{"lineNumber":387,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c message.length() + 4; i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":388,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-09"},{"lineNumber":389,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":390,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"@\");","lastModifiedDate":"2021-09-09"},{"lineNumber":391,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t   \" + message);","lastModifiedDate":"2021-09-09"},{"lineNumber":392,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t@\");","lastModifiedDate":"2021-09-09"},{"lineNumber":393,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c message.length() + 4; i++) {","lastModifiedDate":"2021-09-09"},{"lineNumber":394,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-09"},{"lineNumber":395,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":396,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"@\");","lastModifiedDate":"2021-09-09"},{"lineNumber":397,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":398,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"tryyang2001":398}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.exception;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"    public static class CommandException extends Exception {","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"        //Throws this exception when the input command is invalid","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"    public static class StorageException extends Exception {","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"        //Throws this exception when the data stored in the storage file is invalid","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"tryyang2001":11}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import duke.design.Default;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"public class Storage {","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    public static final String FILEPATH \u003d \"./shimaStorage.txt\";","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    public static final String DELIMITER \u003d \"Ø\";","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public static File file \u003d new File(FILEPATH);","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    public static String STORAGE_MESSAGE \u003d \"Welcome to my storage :P, this is how I memorize all your tasks!\\n\" +","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"            \"Alert! Please do not delete anything inside this file, else I will get memory loss :(\\n\";","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"     * Creates the storage file","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"    public static void createFile() throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"        FileWriter createFile \u003d new FileWriter(FILEPATH);","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        createFile.write(STORAGE_MESSAGE);","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"        createFile.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"     * Reads the data from the storage file","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"     * @throws DukeException.StorageException Throws this exception when the data stored in the storage file is invalid","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException                    Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    public static void readFromStorage(ArrayList\u003cTask\u003e tasks) throws DukeException.StorageException, IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"            Scanner sc \u003d new Scanner(Storage.file);","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"            //Skips the first two lines of storage descriptions in the file","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"            int skipTwoLines \u003d 0;","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"                if (skipTwoLines \u003c 2) {","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"                    sc.nextLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"                    skipTwoLines++;","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"                } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"                    //Starts reading data","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"                    String[] tasksData \u003d sc.nextLine().split(DELIMITER);","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"                    Task currentTask;","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"                    switch (tasksData[0]) {","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"                    case \"T\":","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"                        tasks.add(new ToDo(tasksData[2]));","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"                        currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"                        //Updates the longestTaskDescription to ensure that the frames for to-do list can be printed correctly","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"                        Duke.longestTaskDescription \u003d Math.max(currentTask.getTask().length(), Duke.longestTaskDescription);","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"                        break;","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"                    case \"D\":","lastModifiedDate":"2021-09-15"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"                        tasks.add(new Deadline(tasksData[2], tasksData[3]));","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"                        currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"                        //Updates the Duke.longestTaskDescription to ensure that the frames for to-do list can be printed correctly","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"                        Duke.longestTaskDescription \u003d Math.max(currentTask.getTask().length() + \"(by: )\".length() + currentTask.getTime().length(), Duke.longestTaskDescription);","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"                        break;","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"                    case \"E\":","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"                        tasks.add(new Event(tasksData[2], tasksData[3]));","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"                        currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"                        //Updates the Duke.longestTaskDescription to ensure that the frames for to-do list can be printed correctly","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"                        Duke.longestTaskDescription \u003d Math.max(currentTask.getTask().length() + \"(at: )\".length() + currentTask.getTime().length(), Duke.longestTaskDescription);","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"                        break;","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"                    default:","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"                        throw new DukeException.StorageException();","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"                    }","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"                    //If the task is done, set it to done","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"                    if (tasksData[1].equals(\"Y\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"                        currentTask.setDone();","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"                    }","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"                }","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"            //Displays the to-do list if it is not empty","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"            if (tasks.size() \u003e 0) {","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"                System.out.println(\"\\nHello user! I have helped you written down the to-do list from my previous record!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"                Default.printToDoList(tasks, Duke.longestTaskDescription);","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"        } catch (FileNotFoundException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"            //Creates a file called shimaStorage.txt if the file is not found","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"            Storage.createFile();","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"     * Handles the error when the data stored in the storage file is invalid","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"    public static void handleStorageError(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"        Scanner readInput \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-15"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"        System.out.println();","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"Take Note:\");","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"        Default.showMessage(\"There is an error occurs when I try to read data from the shimaStorage.txt file, please help me fix it :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"        readUserInput(tasks, readInput);","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"     * Reads the user input and reacts accordingly","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks     The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"     * @param readInput The scanner for input","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"    private static void readUserInput(ArrayList\u003cTask\u003e tasks, Scanner readInput) {","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\nDo you wish to continue by clearing all the previous data stored in the storage file? (Y/N) \");","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"        String answer \u003d readInput.nextLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"        if (answer.equalsIgnoreCase(\"Y\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"            try {","lastModifiedDate":"2021-09-15"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"                Storage.updateStorage(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"                Default.showMessage(\"Unfortunately somethings have messed up, I have received this information:\");","lastModifiedDate":"2021-09-15"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-09-15"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"        } else if (answer.equalsIgnoreCase(\"N\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"            System.exit(1);","lastModifiedDate":"2021-09-15"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"        } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"I do not understand your reply, please try again :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"            readUserInput(tasks, readInput);","lastModifiedDate":"2021-09-15"},{"lineNumber":129,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":130,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":131,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":132,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":133,"author":{"gitId":"tryyang2001"},"content":"     * Updates the storage file whenever tasks are updated","lastModifiedDate":"2021-09-15"},{"lineNumber":134,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":135,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":136,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-15"},{"lineNumber":137,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":138,"author":{"gitId":"tryyang2001"},"content":"    public static void updateStorage(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":139,"author":{"gitId":"tryyang2001"},"content":"        FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2021-09-15"},{"lineNumber":140,"author":{"gitId":"tryyang2001"},"content":"        fw.write(STORAGE_MESSAGE);","lastModifiedDate":"2021-09-15"},{"lineNumber":141,"author":{"gitId":"tryyang2001"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2021-09-15"},{"lineNumber":142,"author":{"gitId":"tryyang2001"},"content":"            String taskToSave \u003d \"\";","lastModifiedDate":"2021-09-15"},{"lineNumber":143,"author":{"gitId":"tryyang2001"},"content":"            String symbolForDone \u003d (t.getDone()) ? \"Y\" : \"N\";","lastModifiedDate":"2021-09-15"},{"lineNumber":144,"author":{"gitId":"tryyang2001"},"content":"            boolean doNotSave \u003d false;","lastModifiedDate":"2021-09-15"},{"lineNumber":145,"author":{"gitId":"tryyang2001"},"content":"            if (t instanceof Deadline) {","lastModifiedDate":"2021-09-15"},{"lineNumber":146,"author":{"gitId":"tryyang2001"},"content":"                taskToSave \u003d t.getClassType() + DELIMITER + symbolForDone + DELIMITER + t.getTask() + DELIMITER + t.getTime() + System.lineSeparator();","lastModifiedDate":"2021-09-15"},{"lineNumber":147,"author":{"gitId":"tryyang2001"},"content":"            } else if (t instanceof Event) {","lastModifiedDate":"2021-09-15"},{"lineNumber":148,"author":{"gitId":"tryyang2001"},"content":"                taskToSave \u003d t.getClassType() + DELIMITER + symbolForDone + DELIMITER + t.getTask() + DELIMITER + t.getTime() + System.lineSeparator();","lastModifiedDate":"2021-09-15"},{"lineNumber":149,"author":{"gitId":"tryyang2001"},"content":"            } else if (t instanceof ToDo) {","lastModifiedDate":"2021-09-15"},{"lineNumber":150,"author":{"gitId":"tryyang2001"},"content":"                taskToSave \u003d t.getClassType() + DELIMITER + symbolForDone + DELIMITER + t.getTask() + System.lineSeparator();","lastModifiedDate":"2021-09-15"},{"lineNumber":151,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":152,"author":{"gitId":"tryyang2001"},"content":"                Default.showMessage(\"An unexpected error occurs when I try to know the type of the task \" + t);","lastModifiedDate":"2021-09-15"},{"lineNumber":153,"author":{"gitId":"tryyang2001"},"content":"                doNotSave \u003d true;","lastModifiedDate":"2021-09-15"},{"lineNumber":154,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":155,"author":{"gitId":"tryyang2001"},"content":"            if (!doNotSave) {","lastModifiedDate":"2021-09-15"},{"lineNumber":156,"author":{"gitId":"tryyang2001"},"content":"                fw.write(taskToSave);","lastModifiedDate":"2021-09-15"},{"lineNumber":157,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":158,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":159,"author":{"gitId":"tryyang2001"},"content":"        fw.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":160,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":161,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":162,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":163,"author":{"gitId":"tryyang2001"},"content":"     * Append the newly created task to the storage file","lastModifiedDate":"2021-09-15"},{"lineNumber":164,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":165,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":166,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-15"},{"lineNumber":167,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":168,"author":{"gitId":"tryyang2001"},"content":"    public static void saveTaskToFile(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":169,"author":{"gitId":"tryyang2001"},"content":"        //append mode","lastModifiedDate":"2021-09-15"},{"lineNumber":170,"author":{"gitId":"tryyang2001"},"content":"        FileWriter fw \u003d new FileWriter(file, true);","lastModifiedDate":"2021-09-15"},{"lineNumber":171,"author":{"gitId":"tryyang2001"},"content":"        Task currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-15"},{"lineNumber":172,"author":{"gitId":"tryyang2001"},"content":"        if (currentTask instanceof Deadline || currentTask instanceof Event) {","lastModifiedDate":"2021-09-15"},{"lineNumber":173,"author":{"gitId":"tryyang2001"},"content":"            String taskToSave \u003d currentTask.getClassType() + DELIMITER + \"N\" + DELIMITER + currentTask.getTask() + DELIMITER + currentTask.getTime() + System.lineSeparator();","lastModifiedDate":"2021-09-15"},{"lineNumber":174,"author":{"gitId":"tryyang2001"},"content":"            fw.write(taskToSave);","lastModifiedDate":"2021-09-15"},{"lineNumber":175,"author":{"gitId":"tryyang2001"},"content":"        } else if (currentTask instanceof ToDo) {","lastModifiedDate":"2021-09-15"},{"lineNumber":176,"author":{"gitId":"tryyang2001"},"content":"            String taskToSave \u003d currentTask.getClassType() + DELIMITER + \"N\" + DELIMITER + currentTask.getTask() + System.lineSeparator();","lastModifiedDate":"2021-09-15"},{"lineNumber":177,"author":{"gitId":"tryyang2001"},"content":"            fw.write(taskToSave);","lastModifiedDate":"2021-09-15"},{"lineNumber":178,"author":{"gitId":"tryyang2001"},"content":"        } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":179,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"An unexpected error occurs when I try to append the storage file... Class Type Mismatch!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":180,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":181,"author":{"gitId":"tryyang2001"},"content":"        fw.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":182,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":183,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"tryyang2001":183}},{"path":"src/main/java/duke/task/AddTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.task;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import duke.design.Default;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"public class AddTask {","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"     * Performs the add task action","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    public static void addTask(ArrayList\u003cTask\u003e tasks, String command, String[] words) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"        if (isCorrectToDo(tasks, command, words) || isCorrectDeadline(tasks, command, words) || isCorrectEvent(tasks, command, words)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\" Class type [\" + tasks.get(tasks.size() - 1).getClassType() + \"] \\\"\" + tasks.get(tasks.size() - 1) +","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"                    \"\\\" has been added to the list!\" + \" (\" + tasks.size() + \" tasks in total)\");","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"     * Checks the syntax for the command to create a new task, and add to the to-do list if the syntax is correct","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if an instance of the subclass is created and successfully stored in the to-do list","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCorrectToDo(ArrayList\u003cTask\u003e tasks, String command, String[] words) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        if (!words[0].equalsIgnoreCase(\"TODO\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"        if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the task is empty! I don\u0027t know how to record it :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(new ToDo(command.replace(words[0], \"\").trim()));","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"        if (Duke.longestTaskDescription \u003c command.replace(words[0], \"\").trim().length()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"            Duke.longestTaskDescription \u003d command.replace(words[0], \"\").trim().length();","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"        Storage.saveTaskToFile(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"        return true;","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"     * Checks the syntax for the command to create an \u0027Event\u0027 instance, and add to the to-do list if the syntax is correct","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if an instance of the subclass Event is created and successfully stored in the to-do list","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCorrectEvent(ArrayList\u003cTask\u003e tasks, String command, String[] words) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"        if (!words[0].equalsIgnoreCase(\"EVENT\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"        command \u003d command.replaceFirst(words[0], \"\").trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"        String time \u003d command.substring(command.indexOf(\u0027/\u0027) + 1).trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"        if (time.toLowerCase().startsWith(\"at\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"            time \u003d time.replaceFirst(\"(?i)at\", \"\").trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"        String taskName \u003d command.split(\"/\", 2)[0].trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"        if (words.length \u003d\u003d 1 || taskName.isEmpty()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the task is empty! I don\u0027t know how to record it :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"        if (time.isEmpty()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the date and period for the task \\\"\" + taskName + \"\\\" is missing!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"        if (!command.contains(\"/\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, fail to create an Event, the time specific character \u0027/\u0027 is missing\");","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"        if (!command.contains(\"-\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, fail to create an Event, the period specific character \u0027-\u0027 is missing\");","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(new Event(taskName, time));","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"        if (Duke.longestTaskDescription \u003c taskName.length() + time.length()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"            Duke.longestTaskDescription \u003d taskName.length() + \"(at: )\".length() + time.length();","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"        Storage.saveTaskToFile(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"        return true;","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"     * Checks the syntax for the command to create an \u0027Deadline\u0027 instance, and add to the to-do list if the syntax is correct","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The array list that stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the subclass Deadline is created and successfully stored in the to-do list","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"    public static boolean isCorrectDeadline(ArrayList\u003cTask\u003e tasks, String command, String[] words) throws IOException {","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"        if (!words[0].equalsIgnoreCase(\"DEADLINE\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"        command \u003d command.replaceFirst(words[0], \"\").trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"        String time \u003d command.substring(command.indexOf(\u0027/\u0027) + 1).trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"        if (time.toLowerCase().startsWith(\"by\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"            time \u003d time.replaceFirst(\"(?i)by\", \"\").trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"        String taskName \u003d command.split(\"/\", 2)[0].trim();","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"        if (words.length \u003d\u003d 1 || taskName.isEmpty()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the task is empty! I don\u0027t know how to record it :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"        if (time.isEmpty()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the deadline for the task \\\"\" + taskName + \"\\\" is missing!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"        if (!command.contains(\"/\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, fail to create an Event, the time specific character \u0027/\u0027 is missing\");","lastModifiedDate":"2021-09-15"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-15"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(new Deadline(taskName, time));","lastModifiedDate":"2021-09-15"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"        if (Duke.longestTaskDescription \u003c taskName.length() + time.length()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"            Duke.longestTaskDescription \u003d taskName.length() + \"(by: )\".length() + time.length();","lastModifiedDate":"2021-09-15"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"        Storage.saveTaskToFile(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"        return true;","lastModifiedDate":"2021-09-15"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"tryyang2001":128}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"//Stores task with deadline specified","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"    protected String endTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    public Deadline() {","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"        super();","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"        endTime \u003d \"\";","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    public Deadline(String task, String endTime) {","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"        super(task);","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    public String getClassType() {","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"        return \"D\";","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public String getTime() {","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"        return this.endTime;","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        return task + \" (by: \" + endTime + \")\";","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":29}},{"path":"src/main/java/duke/task/DeleteTasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.task;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import duke.design.Default;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"public class DeleteTasks {","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"     * Deletes the task(s) according to the task index/indices provided","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stored all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"     * @param words The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    public static void deleteTasks(ArrayList\u003cTask\u003e tasks, String[] words) {","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"        switch (words.length) {","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"        case 1:","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the input task index to delete is missing!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"        case 2:","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"            if (Command.isCommandDeleteAll(words[1])) {","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"                deleteAllTasks(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"                deleteSingleTask(tasks, words[1]);","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"        default:","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"            deleteMultipleTasks(tasks, words);","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"            Storage.updateStorage(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"An unexpected error occurs when I try to update the file\");","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"\\t\");","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"            ex.printStackTrace();","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"     * Deletes all the tasks stored","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stored all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"    public static void deleteAllTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"        tasks.clear();","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"        Default.showMessage(\"All tasks have been removed! Time to chill?\");","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"     * Deletes the specific task when there is only one task specified","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stored all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"     * @param word  The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"    public static void deleteSingleTask(ArrayList\u003cTask\u003e tasks, String word) {","lastModifiedDate":"2021-09-15"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"            int index \u003d Integer.parseInt(word);","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"            if (tasks.get(index - 1).getDone()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"                Default.showMessage(\"I have removed this task: [\" + tasks.get(index - 1).getClassType() + \"][X] \" + tasks.get(index - 1));","lastModifiedDate":"2021-09-15"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"                Default.showMessage(\"I have removed this task: [\" + tasks.get(index - 1).getClassType() + \"][ ] \" + tasks.get(index - 1));","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"            tasks.remove(index - 1);","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"            if (tasks.size() \u003e 0) {","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"                System.out.println(\"You have left \" + tasks.size() + \" tasks to do!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"                System.out.println(\"\\tNice! You have finished all tasks! Time to chill~\");","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the input task index to delete is invalid!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"     * Deletes multiple tasks when there are multiple task indices provided","lastModifiedDate":"2021-09-15"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stored all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"     * @param words The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"    public static void deleteMultipleTasks(ArrayList\u003cTask\u003e tasks, String[] words) {","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"            ArrayList\u003cInteger\u003e taskIndices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"            //Checks if the input task indices are valid","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"            for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"                taskIndices.add(Integer.parseInt(words[i]) - 1);","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"            //Deletes the task with the largest task index first","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"            taskIndices.sort(Collections.reverseOrder());","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"            for (Integer i : taskIndices) {","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"                if (tasks.get(i).getDone()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"                    Default.showMessage(\"I have removed this task: [\" + tasks.get(i).getClassType() + \"][X] \" + tasks.get(i));","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"                } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"                    Default.showMessage(\"I have removed this task: [\" + tasks.get(i).getClassType() + \"][ ] \" + tasks.get(i));","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"                }","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"                tasks.remove((int) i);","lastModifiedDate":"2021-09-15"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"            //Prints the message according to tasks left","lastModifiedDate":"2021-09-15"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"            if (tasks.size() \u003e 0) {","lastModifiedDate":"2021-09-15"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"                System.out.println(\"You have left \" + tasks.size() + \" tasks to do!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"                System.out.println(\"\\tNice! You have finished all tasks! Time to chill~\");","lastModifiedDate":"2021-09-15"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, there are some task indices which are invalid, I do not know how to handle :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"tryyang2001":110}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"    protected String period;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    public Event() {","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"        super();","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"        period \u003d \"\";","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    public Event(String task, String period) {","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"        super(task);","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"        this.period \u003d period;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    public String getClassType() {","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"        return \"E\";","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    public String getTime() {","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"        return this.period;","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"        return task + \" (at: \" + period + \")\";","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":28}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"    protected String task;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    //Constructor","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"    public Task() {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"        this.task \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    public Task(String task) {","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    //getters and setters","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    public String getTask() {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"        return task;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    public abstract String getTime();","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    public abstract String getClassType();","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"    public Boolean getDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"        return isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"tryyang2001":34}},{"path":"src/main/java/duke/task/TaskDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.task;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import duke.design.Default;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"public class TaskDone {","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"     * Marks the given tasks as done, and handles the possible errors if the input task number is not valid","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that contains all the tasks stored inside the to-do list","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"     * @param words The array of words that compose the input command","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    public static void handleTaskDone(ArrayList\u003cTask\u003e tasks, String[] words) {","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"            if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"                Default.showMessage(\"Sorry, the input task number is missing, please try again! :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"            for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"                //check if the input character after the word \"done\" is integer value","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"                int taskIndex \u003d Integer.parseInt(words[i]);","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"                showTaskDoneMessage(tasks, taskIndex);","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"            Storage.updateStorage(tasks);","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException |","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"                IndexOutOfBoundsException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"Sorry, the input task number is invalid, please try again! :(\");","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"            Default.showMessage(\"An unexpected error occurs when I try to update the file\");","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"\\t\");","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"            ex.printStackTrace();","lastModifiedDate":"2021-09-15"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"     * Shows the message to indicate that the task is marked as done","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks      The array list which stores all the tasks","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"     * @param taskNumber The given task number to mark as done","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    public static void showTaskDoneMessage(ArrayList\u003cTask\u003e tasks, int taskNumber) {","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"        if (!tasks.get(taskNumber - 1).getDone()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"            tasks.get(taskNumber - 1).setDone();","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\tHooray! Task number \" + taskNumber + \" has been marked completed!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t[✔] \" + tasks.get(taskNumber - 1).getTask());","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"        } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\tThe task number \" + taskNumber + \" - \\\"\" + tasks.get(taskNumber - 1).getTask() + \"\\\" has already been done!\");","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"tryyang2001":52}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"//Stores task without specific time","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"    public ToDo() {","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"        super();","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    public ToDo(String task) {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"        super(task);","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    public String getClassType() {","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        return \"T\";","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    public String getTime() {","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"        return \"\";","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"        return task;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"view -h","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"todo play games","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"deadline do assignment /by Sunday 6pm","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"event attend lecture /by Friday 4-6pm","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"false input","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"todo","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"done 2 3","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"delete 2","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"delete","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"delete all","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":17}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    rm EXPECTED.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"# run the program, feed commands from input.txt file and redirect the output to the EXPECTED.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e EXPECTED.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"dos2unix EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"diff EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tryyang2001":5,"-":33}}]
