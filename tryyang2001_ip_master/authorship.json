[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"**Shima**, aka _Duke_ for its previous name, is an **assistance bot** that provides a platform for users to note down important to-do tasks, deadlines or events. It is a **Command Line Interface (CLI)** based application developed for deskptop user. Meaning, **Shima** only accepts commands that are typed using keyboard. It is fast, convenient and efficient for editing, deleting and managing tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"## Setup","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"To run this application on your PC, please ensure you have done the following:","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"1. Downloaded and set up [Java 11](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html) on you PC","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"2. Downloaded the [jar file](https://github.com/tryyang2001/ip/releases/tag/A-Release) for this application","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"3. Open **Terminal** and move to the directory of the jar.file","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"4. Run the command at the directory of the jar file: `java -jar ip.jar`","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"### Quick start","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"This is the first screen you will see when you run the jar file:","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"\t              ##*                                 ","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"\t   .      . .\u0026####%                               ","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"\t    #%%%%((\u0026%######%**.                           ","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"\t    %#############%#%\u0026\u0026%%%%%##(*.                 ","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"\t . .%%#######%%%%%##############%%%%#(.           ","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"\t/##\u0026@%####\u0026%####\u0026#####%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%####\u0026/  .      ","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"\t\u0026######%%######%\u0026%%%#################%%%%\u0026#       ","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"\t(@####\u0026#####%\u0026%########################%###@(     ","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"\t,\u0026%#%%%%##%%############%%%%%%%%%%%##########%.   ","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"\t*\u0026#\u0026%%\u0026#%\u0026########\u0026%#(%#/((((((/****#\u0026%\u0026%#####%,  ","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"\t  ,\u0026#%%%%#####%%#(%(((\u0026#(\u0026(((((((((/%#(((%##%%#%. ","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"\t  (%##%%####%%(((/%\u0026((%\u0026#%##((((((((\u0026#(((%#(((\u0026\u0026, ","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"\t  (%#%\u0026####%#((##(#(/###.%#.*(##(((%, /##((%#(#( .","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"\t  *\u0026(\u0026%###%#(((((#/@%%%\u0026,. ...     \u0026%%\u0026%  (\u0026###*  ","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"\t . (%%%###%(((((#/#####\u0026, .. .... /\u0026(#(\u0026,.%(((#(  ","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"\t    *\u0026\u0026##%%(((((%*(%###%. .. .. . *%(##\u0026, (%((#(  ","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"\t      (\u0026#%%((((#%/ .**,. ..... . ...,,,. . (#(%(  ","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"\t        .(%(((((\u0026/ .   .  ...... .. .. . .(%/#%,  ","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"\t          .(%(((#\u0026*,,.           . .,*/*%#((#\u0026*   ","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"\t              ,/(#(    .,,******,.     ####%*     ","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"   __          ________ _      _____ ____  __  __ ______    ","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"   \\ \\        / /  ____| |    / ____/ __ \\|  \\/  |  ____|  ","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"    \\ \\  /\\  / /| |__  | |   | |   | |  | | \\  / | |__     ","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"     \\ \\/  \\/ / |  __| | |   | |   | |  | | |\\/| |  __|    ","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"      \\  /\\  /  | |____| |___| |___| |__| | |  | | |____   ","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"     __\\/_ \\/   |______|______\\_____\\____/|_|  |_|______|_ ","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"    / ____| |  | |_   _|  \\/  |   /\\   |  __ \\|_   _| \\ | |","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"   | (___ | |__| | | | | \\  / |  /  \\  | |__) | | | |  \\| |","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    \\___ \\|  __  | | | | |\\/| | / /\\ \\ |  _  /  | | | . ` |","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"    ____) | |  | |_| |_| |  | |/ ____ \\| | \\ \\ _| |_| |\\  |","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"   |_____/|_|  |_|_____|_|  |_/_/    \\_\\_|  \\_\\_____|_| \\_|","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"Hi there! My name is Shima Rin and I am a robot that can help you do some wonderful jobs!","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"--------------------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"* Version 9.0                                                                                                                                    *","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"* In this version, I am equipped with several functions, including PROFILE, HELP, TODO, DEADLINE, EVENT, LIST, DONE, DELETE, DATE, FIND and EXIT *","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"* To know more about how to use the command, you can type \"help\" to view the help menu written by me :P                                          *","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"* I am able to understand your command in any case, meaning that you are free to enter command with any case :D                                  *","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"--------------------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"### Features","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"### View bot profile - `profile`","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"To view the profile of the cute bot, type the command `profile`","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"### View help menu - `help`","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"To view the help menu and guidelines on how to use the command, type the command `help`","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"### Add a new to-do task - `todo`","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"To add a new to-do task, use the command `todo` with syntax: `todo [TASK_DESCRIPTION]`\\","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"Eg: ","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"  ```","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"  todo finish assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"  ```","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"Expected output:","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"  ```","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"    @-------------------------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"\t    Class type [T] \"finish assignment\" has been added to the list! (1 tasks in total)","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"\t@-------------------------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"  ```","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"### Add a new event task - `event`","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"To add a new event task, use the command `event` with syntax: `event [TASK_DESCRIPTION] /(at) [START_TIME] - [END_TIME]\\","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"event swimming /at 2 - 4 pm","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"Expected output:","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"\t@-------------------------------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"\t    Class type [E] \"swimming (at: 2 - 4 pm)\" has been added to the list! (2 tasks in total)","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"\t@-------------------------------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"**Note:** The number of tasks in total depends on how many task you have saved. The blackslash `/` and the dash `-` are mandatory for adding a new event.","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"### Add a new deadline task - `deadline`","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"To add a new deadline task, use the command `deadline` with syntax: `deadline [TASK_DESCRIPTION] /(by) [END_DATE of format yyyy-MM-dd] [END_TIME of utc time HH:mm]\\","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"deadline submit project /by 2021-10-1 23:59","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"Expected output:","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"\t@-------------------------------------------------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"\t    Class type [D] \"submit project (by: 01 Oct 2021 11.59 pm)\" has been added to the list! (3 tasks in total)","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"\t@-------------------------------------------------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"**Note:** The number of tasks in total depends on how many task you have saved. The blackslash `/` is mandatory for adding a new deadline. The format for **_end date_** must be `year-month-day` and the format for **_end time_** must be in utc format `hour:minute`","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"### View the to-do list - `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"To view the to-do list of the tasks added, use the command `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"Example of one possible output:","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"\t/-------------------------------------------------------------\\","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"\t| My to-do list:                                              |","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"\t| [E][ ] 1. swimming (at: 2 - 4 pm)                           |","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"\t| [D][ ] 2. submit project (by: 01 Oct 2021 11.59 pm)         |","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"\t| [T][ ] 3. finish assignment                                 |","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"\t\\-------------------------------------------------------------/","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"\tFor your knowledge, ","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"\tthe first [ ] indicates the type of the task (\u0027T\u0027 for to-do, \u0027D\u0027 for deadline, \u0027E\u0027 for event)","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"\tthe second [ ] indicates whether the task is completed:","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"\t[X] when the task is marked completed\t[ ] when the task is not done.","lastModifiedDate":"2021-09-26"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"### Mark task as done - `done`","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"To mark task(s) as done , use the command `done` with syntax: `done [TASK_INDICES]`\\","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"done 1 3","lastModifiedDate":"2021-09-26"},{"lineNumber":129,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"tryyang2001"},"content":"Example of one possible output:","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":132,"author":{"gitId":"tryyang2001"},"content":"\tHooray! Task number 1 has been marked completed!","lastModifiedDate":"2021-09-26"},{"lineNumber":133,"author":{"gitId":"tryyang2001"},"content":"\t[✔] swimming","lastModifiedDate":"2021-09-26"},{"lineNumber":134,"author":{"gitId":"tryyang2001"},"content":"\tHooray! Task number 3 has been marked completed!","lastModifiedDate":"2021-09-26"},{"lineNumber":135,"author":{"gitId":"tryyang2001"},"content":"\t[✔] finish assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"tryyang2001"},"content":"**Note:** It is possible to mark single or multiple tasks as done with just one command.\\","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"tryyang2001"},"content":"### Delete task from to-do list - `delete`","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"tryyang2001"},"content":"To delete unused task from the to-do list, use the command `delete` with syntax: `delete [TASK_INDICES]`\\","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"tryyang2001"},"content":"delete 1","lastModifiedDate":"2021-09-26"},{"lineNumber":144,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":145,"author":{"gitId":"tryyang2001"},"content":"Example of one possible output:","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":147,"author":{"gitId":"tryyang2001"},"content":"\t@------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":148,"author":{"gitId":"tryyang2001"},"content":"\t   I have removed this task: [E][X] swimming (at: 2 - 4 pm)","lastModifiedDate":"2021-09-26"},{"lineNumber":149,"author":{"gitId":"tryyang2001"},"content":"\t@------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":150,"author":{"gitId":"tryyang2001"},"content":"You have left 2 tasks to do!","lastModifiedDate":"2021-09-26"},{"lineNumber":151,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":152,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":153,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":154,"author":{"gitId":"tryyang2001"},"content":"delete all","lastModifiedDate":"2021-09-26"},{"lineNumber":155,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":156,"author":{"gitId":"tryyang2001"},"content":"Example of one possible output:","lastModifiedDate":"2021-09-26"},{"lineNumber":157,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":158,"author":{"gitId":"tryyang2001"},"content":"\t@-----------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":159,"author":{"gitId":"tryyang2001"},"content":"\t   All tasks have been removed! Time to chill?","lastModifiedDate":"2021-09-26"},{"lineNumber":160,"author":{"gitId":"tryyang2001"},"content":"\t@-----------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":161,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":162,"author":{"gitId":"tryyang2001"},"content":"**Note:** It is possible to delete single/multiple task with just one command. In addition, it is also possible to delete all task by using the keyword `all`.\\","lastModifiedDate":"2021-09-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":164,"author":{"gitId":"tryyang2001"},"content":"### Find task with deadline - `date`","lastModifiedDate":"2021-09-26"},{"lineNumber":165,"author":{"gitId":"tryyang2001"},"content":"To find tasks in to-do list which has a deadline date same as a specific date, use the command `date` with syntax: `date [DATE_TO_FIND of format yyyy-MM-dd]`\\","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":167,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":168,"author":{"gitId":"tryyang2001"},"content":"date 2021-10-1","lastModifiedDate":"2021-09-26"},{"lineNumber":169,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":170,"author":{"gitId":"tryyang2001"},"content":"Example of one possible output:","lastModifiedDate":"2021-09-26"},{"lineNumber":171,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":172,"author":{"gitId":"tryyang2001"},"content":"@--------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":173,"author":{"gitId":"tryyang2001"},"content":"\tHere are the tasks that I found with the deadline you given:","lastModifiedDate":"2021-09-26"},{"lineNumber":174,"author":{"gitId":"tryyang2001"},"content":"\t\t1. submit project (by: 01 Oct 2021 11.59 pm)","lastModifiedDate":"2021-09-26"},{"lineNumber":175,"author":{"gitId":"tryyang2001"},"content":"\tThere are 1 tasks matched with the deadline","lastModifiedDate":"2021-09-26"},{"lineNumber":176,"author":{"gitId":"tryyang2001"},"content":"@--------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":177,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":178,"author":{"gitId":"tryyang2001"},"content":"### Find task with keyword - `find`","lastModifiedDate":"2021-09-26"},{"lineNumber":179,"author":{"gitId":"tryyang2001"},"content":"To find tasks in to-do list which contains a specific keyword, use the command `find` with syntax: `find [KEYWORD]`\\","lastModifiedDate":"2021-09-26"},{"lineNumber":180,"author":{"gitId":"tryyang2001"},"content":"Eg:","lastModifiedDate":"2021-09-26"},{"lineNumber":181,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":182,"author":{"gitId":"tryyang2001"},"content":"find submi","lastModifiedDate":"2021-09-26"},{"lineNumber":183,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":184,"author":{"gitId":"tryyang2001"},"content":"Example of one possible output:","lastModifiedDate":"2021-09-26"},{"lineNumber":185,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":186,"author":{"gitId":"tryyang2001"},"content":"\t@----------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":187,"author":{"gitId":"tryyang2001"},"content":"\t\tHere are the tasks that matched the keyword","lastModifiedDate":"2021-09-26"},{"lineNumber":188,"author":{"gitId":"tryyang2001"},"content":"\t\t\t1. [D][ ] submit project (by: 01 Oct 2021 11.59 pm)","lastModifiedDate":"2021-09-26"},{"lineNumber":189,"author":{"gitId":"tryyang2001"},"content":"\t\t\t2. [T][ ] presentation slide submission","lastModifiedDate":"2021-09-26"},{"lineNumber":190,"author":{"gitId":"tryyang2001"},"content":"\t\t\t3. [E][ ] submit clothes (at: 10 am - 12 pm)","lastModifiedDate":"2021-09-26"},{"lineNumber":191,"author":{"gitId":"tryyang2001"},"content":"\t@----------------------------------------------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":192,"author":{"gitId":"tryyang2001"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":194,"author":{"gitId":"tryyang2001"},"content":"### Ends the program - `exit`","lastModifiedDate":"2021-09-26"},{"lineNumber":195,"author":{"gitId":"tryyang2001"},"content":"To terminate the program, use the command `exit` or `bye`","lastModifiedDate":"2021-09-26"},{"lineNumber":196,"author":{"gitId":"tryyang2001"},"content":"Expected output:","lastModifiedDate":"2021-09-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":198,"author":{"gitId":"tryyang2001"},"content":"\t@---------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":199,"author":{"gitId":"tryyang2001"},"content":"\t   Bye! Hope to see you again :D","lastModifiedDate":"2021-09-26"},{"lineNumber":200,"author":{"gitId":"tryyang2001"},"content":"\t@---------------------------------@","lastModifiedDate":"2021-09-26"},{"lineNumber":201,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":202,"author":{"gitId":"tryyang2001"},"content":"Process finished with exit code 0","lastModifiedDate":"2021-09-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":204,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":205,"author":{"gitId":"tryyang2001"},"content":"### Command Code Summary","lastModifiedDate":"2021-09-26"},{"lineNumber":206,"author":{"gitId":"tryyang2001"},"content":"Command | Usage | Syntax","lastModifiedDate":"2021-09-26"},{"lineNumber":207,"author":{"gitId":"tryyang2001"},"content":"--------|-------|-------","lastModifiedDate":"2021-09-26"},{"lineNumber":208,"author":{"gitId":"tryyang2001"},"content":"`profile`| views the profile with cute picture of the bot character | `profile`","lastModifiedDate":"2021-09-26"},{"lineNumber":209,"author":{"gitId":"tryyang2001"},"content":"`help`|views the help menu from the application | `help`","lastModifiedDate":"2021-09-26"},{"lineNumber":210,"author":{"gitId":"tryyang2001"},"content":"`todo`|adds a new to-do task to the to-do list | `todo [TASK_DESCRIPTION]`","lastModifiedDate":"2021-09-26"},{"lineNumber":211,"author":{"gitId":"tryyang2001"},"content":"`event`|adds a new event task to the to-do list | `event [TASK_DESCRIPTION] /(at) [START_TIME] - [END_TIME]`","lastModifiedDate":"2021-09-26"},{"lineNumber":212,"author":{"gitId":"tryyang2001"},"content":"`deadline`|adds a new deadline task to the to-do list | `deadline [TASK_DESCRIPTION] /(by) [END_DATE yyyy-MM-dd] [END_TIME utc HH:mm]`","lastModifiedDate":"2021-09-26"},{"lineNumber":213,"author":{"gitId":"tryyang2001"},"content":"`list` | views the to-do list | `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":214,"author":{"gitId":"tryyang2001"},"content":"`done` | marks tasks as done | `done [TASK_INDEX/INDICES]`","lastModifiedDate":"2021-09-26"},{"lineNumber":215,"author":{"gitId":"tryyang2001"},"content":"`delete` |deletes unused tasks | `delete [TASK_INDEX/INDICES]/all`","lastModifiedDate":"2021-09-26"},{"lineNumber":216,"author":{"gitId":"tryyang2001"},"content":"`date` |finds deadline task with the input date as deadline | `date [DATE yyyy-MM-dd]`","lastModifiedDate":"2021-09-26"},{"lineNumber":217,"author":{"gitId":"tryyang2001"},"content":"`find` |finds tasks that contain a specific keyword | `find [KEYWORD]`","lastModifiedDate":"2021-09-26"},{"lineNumber":218,"author":{"gitId":"tryyang2001"},"content":"`exit`/`bye` |exit or terminate the program | `exit` / `bye`","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tryyang2001":202,"-":16}},{"path":"shimaStorage.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"Welcome to my storage :P, this is how I memorize all your tasks!","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"Alert! Please do not delete anything inside this file, else I will get memory loss :(","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"DØNØsubmit projectØ2021-10-01 23:59","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"TØNØpresentation slide submission","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"EØNØsubmit clothesØ10 am - 12 pm","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"tryyang2001":5}},{"path":"src/main/java/shima/Shima.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.command.Command;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import shima.design.UserInterface;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import shima.exception.ShimaException;","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import shima.parser.Parser;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import shima.storage.Storage;","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"public class Shima {","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    public static final String STORAGE_IO_ERROR_MSG \u003d \"An unexpected error occurs when I was accessing the storage file :(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    private UserInterface ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     * Constructor for Shima class","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"     * @param filePath The file path of the storage file","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    public Shima(String filePath) {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"        ui \u003d new UserInterface(); //Displays welcome screen","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"        storage \u003d new Storage(filePath, ui); //Initializes storage class object","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"        tasks \u003d new TaskList(storage, ui); //Initializes the task list class object","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        initiateToDoList(tasks); //Retrieves data from storage file","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"        Shima shima \u003d new Shima(\"./shimaStorage.txt\");","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        shima.runProgram();","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"     * Starts reading input and execute actions accordingly","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"    @SuppressWarnings(\"InfiniteLoopStatement\")","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"    private void runProgram() {","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\nLet\u0027s start input your command:\");","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"        while (true) {","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"            try {","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"                Command command \u003d Parser.readCommand(tasks, storage, ui);","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"                command.runCommand();","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"            } catch (IOException ioException) {","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"                ui.showMessage(STORAGE_IO_ERROR_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"                ioException.printStackTrace();","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"     * Reads the saved to-do list at the start of the program","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stores all the tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"    private void initiateToDoList(TaskList tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"            storage.readFromStorage(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"            System.out.println();","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(STORAGE_IO_ERROR_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"            ioException.printStackTrace();","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"        } catch (ShimaException.StorageException storageException) {","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"            //user can choose whether to continue by forcefully deleting all the data from storage, or stop and fix the error","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"            storage.handleStorageError(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"tryyang2001":69}},{"path":"src/main/java/shima/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":" * This class serves to create deadline","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"public class AddDeadlineCommand extends AddToDoCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    protected String time;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    public AddDeadlineCommand(TaskList tasks, String command, String[] words, String time) {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        super(tasks, command, words);","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command for creating new deadline task","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when there is error during accessing storage file","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() throws IOException {","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"        command \u003d command.replaceFirst(words[0], \"\").trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"        String taskName \u003d command.split(\"/\", 2)[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"        tasks.createDeadline(taskName, time);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"tryyang2001":28}},{"path":"src/main/java/shima/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":" * This class serves to create event","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"public class AddEventCommand extends AddToDoCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    protected String taskName;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    protected String time;","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    public AddEventCommand(TaskList tasks, String command, String[] words, String taskName, String time) {","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"        super(tasks, command, words);","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command for creating new event task","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when there is error during accessing storage file","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() throws IOException {","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"        tasks.createEvent(taskName, time);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"tryyang2001":28}},{"path":"src/main/java/shima/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":" * This class serves to creates to-do","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    protected TaskList tasks;","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    protected String command;","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    protected String[] words;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The list that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"     * @param command The user input command","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the command","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public AddToDoCommand(TaskList tasks, String command, String[] words) {","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"        this.words \u003d words;","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command for creating new to-do task","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when there is error occurs during accessing storage file","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        tasks.createToDo(command, words);","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":37}},{"path":"src/main/java/shima/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"public class Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"        //This method is empty to represent empty command that does no action","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":9}},{"path":"src/main/java/shima/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.task.Deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":" * This class is used to find deadlines that match with the user input deadline","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    public static final String DATE_NOT_FOUND_MSG \u003d \"\\tI do not find any task with the deadline given...\";","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    public static final String DISPLAY_MSG \u003d \"\\tHere are the tasks that I found with the deadline you given:\";","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    public static final String LINE_SEPARATOR \u003d \"@--------------------------------------------------------------------@\";","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    protected ArrayList\u003cDeadline\u003e resultList;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    public DateCommand(ArrayList\u003cDeadline\u003e resultList) {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"        this.resultList \u003d resultList;","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"     * Prints out all the deadlines from the resultList that match the user input date","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() {","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"        if (resultList.isEmpty()) {","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(DATE_NOT_FOUND_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"            return;","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(DISPLAY_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        for (Deadline d : resultList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t\\t\" + (count + 1) + \". \" + resultList.get(count++));","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\tThere are \" + count + \" tasks matched with the deadline\");","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"tryyang2001":38}},{"path":"src/main/java/shima/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    private String[] words;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    public DeleteCommand(TaskList tasks, String[] words) {","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"        this.words \u003d words;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command for deleting tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"        tasks.deleteTasks(words);","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":20}},{"path":"src/main/java/shima/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.storage.Storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    private final String[] words;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    public DoneCommand(TaskList tasks, Storage storage, String[] words) {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        this.words \u003d words;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command for marking task as done","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"        tasks.markAsDone(tasks, words, storage);","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":24}},{"path":"src/main/java/shima/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.design.UserInterface;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import shima.storage.Storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    private static final String GOODBYE_MSG \u003d \"Bye! Hope to see you again :D\";","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    private final UserInterface ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    public ExitCommand(TaskList tasks, Storage storage, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command for saving the task list to the storage file and close the program","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when there is error during saving data","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() throws IOException {","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        storage.updateStorage(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"        ui.showMessage(GOODBYE_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"        System.exit(0);","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":31}},{"path":"src/main/java/shima/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.design.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import shima.task.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    public static final String LINE_SEPARATOR \u003d \"\\t@----------------------------------------------------------------------@\";","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    protected ArrayList\u003cTask\u003e matchingTasks;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    protected UserInterface ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    public FindCommand(ArrayList\u003cTask\u003e matchingTasks, UserInterface ui) {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        this.matchingTasks \u003d matchingTasks;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command to print all the tasks that contain the keyword which are stored in the matchingTasks array list","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() {","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t\\tHere are the tasks that matched the keyword\");","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"        for (Task t : matchingTasks) {","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"            String doneIcon \u003d (t.getDone())? \"[X] \" : \"[ ] \";","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t\\t\\t\" + (count + 1) + \". [\" + t.getClassType() + \"]\" + doneIcon + t);","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"            count++;","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"tryyang2001":32}},{"path":"src/main/java/shima/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.design.UserInterface;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    public static final String LINE_SEPARATOR \u003d \"************************************************************************************************************************************************************************\";","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    public static final String NEXT_LINE_INDENT \u003d \"\\n\\t\\t\";","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    protected ArrayList\u003cString\u003e helpLists;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    public HelpCommand() {","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"        this.helpLists \u003d createHelpMenu();","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command for printing help menu","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"        printHelpMenu();","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"     * Prints the help menu to the console","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"    public void printHelpMenu() {","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"Help Menu \" + UserInterface.CURR_VERSION + \"\\n\");","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"Welcome user!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"In this version, I am equipped with several functions, including PROFILE, HELP, TODO, DEADLINE, EVENT, LIST, DONE, DELETE, DATE, FIND and EXIT\");","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"I am able to understand your command in any case, meaning that you are free to enter command with any case :D\");","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c helpLists.size(); i++) {","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t\" + (i + 1) + \". \" + helpLists.get(i));","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"     * Creates the help menu descriptions by adding the strings into the array list","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns an array list of string with all the help menu descriptions","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"    private ArrayList\u003cString\u003e createHelpMenu() {","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"        ArrayList\u003cString\u003e helpLists \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"        //Profile command","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To view my cute profile XD, use the command \\\"profile\\\"\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"        //Help command","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To view the help menu, use the command \\\"help\\\"\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"        //To-do command","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To add a new to-do task, use the command \\\"todo\\\" with syntax:\" + NEXT_LINE_INDENT + \"todo [YOUR_TASK_DESCRIPTION]\" + NEXT_LINE_INDENT +","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"                \"eg. todo read book\\t\u003c-- will add the task \\\"read book\\\" to your to-do list\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"        //Deadline command","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To add a new task specified with deadline, use the command \\\"deadline\\\" with syntax:\" + NEXT_LINE_INDENT + \"deadline [YOUR_TASK_DESCRIPTION] /[END_DATE (yyyy-MM-dd)] [END_TIME in UTC (HH:mm)]\" + NEXT_LINE_INDENT +","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"                \"eg. deadline submit assignment /by 2021-10-1 16:00\\t\u003c-- will add the task \\\"submit assignment\\\" with deadline \\\"1 Oct 2021 4.00 pm\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"        //Event command","lastModifiedDate":"2021-09-17"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To add an event specified with start time and end time, use the command \\\"event\\\" with syntax:\" + NEXT_LINE_INDENT + \"event [YOUR_TASK_DESCRIPTION] /[START_TIME]-[END_TIME]\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"                NEXT_LINE_INDENT + \"eg. event attend tutorial /at Friday 2 - 4pm\\t\u003c-- will add the event \\\"attend tutorial\\\" with the event day Friday and start time 2pm and end time 4pm\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"        //List command","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To print the to-do list, use the command \\\"list\\\", it will then show you the to-do list created by me :P\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"        //Done command","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To mark the task as done, use the command \\\"done\\\" with syntax:\" + NEXT_LINE_INDENT + \"done [TASK_INDEX]\" + NEXT_LINE_INDENT + \"eg. done 1\\t\u003c-- will mark the 1st task as completed\\n\\t\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"                \"\\t\\tdone 1 2 3\\t\u003c-- will mark the 1st, 2nd and 3rd tasks as completed\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"        //Delete command","lastModifiedDate":"2021-09-17"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To delete task, use the command \\\"delete\\\" with syntax:\" + NEXT_LINE_INDENT + \"delete [TASK_INDEX]\" + NEXT_LINE_INDENT + \"eg. delete 1\\t\u003c--will delete the 1st task\\n\\t\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"                \"\\t\\tdelete 1 2 3\\t\u003c-- will delete the tasks with index 1, 2 and 3\" + NEXT_LINE_INDENT + \"\\tdelete all\\t\u003c-- will delete all the tasks in the list\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"        //Date command","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To print only the task with a specific deadline, use the command \\\"date\\\" with syntax:\" + NEXT_LINE_INDENT + \"date [SPECIFIC_DATE (yyyy-MM-dd)]\" + NEXT_LINE_INDENT +","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"                \"eg. date 2021-10-1\\t\u003c-- will display all the tasks with deadline date 2021-10-1\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"        //Find command","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To check if there exist tasks that contain a specific keyword, use the command \\\"find\\\" with syntax\" + NEXT_LINE_INDENT + \"find [KEYWORD]\" + NEXT_LINE_INDENT +","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"                \"eg. find assignment\\t\u003c-- will display all the tasks that contain the keyword \\\"assignment\\\"\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"        //Exit command","lastModifiedDate":"2021-09-17"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"        helpLists.add(\"To exit the program, use the command \\\"exit\\\" or \\\"bye\\\"\" + System.lineSeparator());","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"        return helpLists;","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"tryyang2001":78}},{"path":"src/main/java/shima/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    //Corner symbols for to-do list frames","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    public static final String TOP_LEFT_CORNER \u003d \"/\";","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"    public static final String TOP_RIGHT_CORNER \u003d \"\\\\\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    public static final String BOTTOM_LEFT_CORNER \u003d \"\\\\\";","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    public static final String BOTTOM_RIGHT_CORNER \u003d \"/\";","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    public ListCommand(TaskList tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command to print the to-do list","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"        tasks.printToDoList();","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":24}},{"path":"src/main/java/shima/command/ViewPersonalityCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.command;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.design.Profile;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"public class ViewPersonalityCommand extends Command {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    protected Profile profile;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    public ViewPersonalityCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"        profile \u003d new Profile();","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"     * Runs the command to print the profile of Shima bot","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    public void runCommand() {","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"        profile.printPersonality();","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":20}},{"path":"src/main/java/shima/design/Profile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.design;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import java.util.Random;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":" * Credit: The pictures are generated with the help of an online picture to ASCII symbols converter","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":" * The website available: \"https://manytools.org/hacker-tools/convert-images-to-ascii-art/\"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"public class Profile {","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"    //Pictures","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    private static final String PICTURE_1 \u003d \"***********************************************************************************************************************\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"            \"**                                                                                                                   **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((((((((((((((*#//////*///////*#/////*///////**//*****//******/*****///*,//((((((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((((/##///////////////*#///,//*///////***//******/,*******/*****/***,(((((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((*#(///////*//////*/*#////*//*///////*****,**************************,(((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((*#(*///////*//////***###/#/*//*/(/////***************,********,********,((((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((/##/////////*//#((/**/(##(///,//////////******.*********,*********,********/((((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((((/#(////(((((*//////****#//////*///*//////******,**********,*********,*********(((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((######//////,//////****((///////*//*//////******************,******************,((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((###(////////,////*//****#//*//////*//*//*//*******,***********,**********,*******,(((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((/##//*///////*/////*/*****#//*///////*////*//***,***.***********************.*,******((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((##//*///*///**/////*/****,(//**///////*///**********,,***********,***********.*,****,((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((##///*//**//**,/////*******//,***////////*//*****,****,,,**********,****,******,,*****,(((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((*#///////**/***,/////********//****//////////,****%****.,,,**********.***,,******,.**,*,(((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((/#///////*******,/*///*******%//,****//////////****/%***,,,,,,*****,***.***,,******,**,,**((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((*(//*////********//////****,/%#//,****,/////////*,**%%,**,,,,,,*****,***,,**,,*********,*,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((//*,/////*******,/,///*****/%(@*/,******////////***/\u0026\u0026(*,,,,,,,,***,,***,,,,,,,*******.,,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((/***//,/,*******%%/#*//*,**,%%\u0026@%/*@(*****,//////***(%@\u0026,*@*,,.,,,**,,.**.,,.,,,******,,.((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((///**//,/*//******%%@**@#,.........@@*/@@@@\u0026/***,*///**,@\u0026.........,.,*,,,.*,,,,.,,,****.,,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((///*,/////*,*,***,,,....,/,......\u0026\u0026@@@@@@@@@@@@@@@@@@@\u0026%/,*...... ......,,,.,,.,,,,.,,***.,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((/**,/,/////,**,.,,\u0026\u0026\u0026\u0026\u0026\u0026,.......,\u0026@@@@@@@@@@@@@@@@@@@@@@\u0026.........,\u0026\u0026\u0026\u0026#,,.*****,,..,..,**,(((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((***/,/////////**%\u0026\u0026\u0026\u0026\u0026\u0026,.....,@@@@@@@@@@@@@@@@@@@@@@@@@@%......,@@@@\u0026\u0026\u0026\u0026\u0026/*********,*,*****(((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((,,,,/////////***\u0026\u0026\u0026\u0026\u0026\u0026\u0026*****.***//@@@@@@@@@@@@@@@@@@@@@@\u0026***/**/****\u0026\u0026\u0026\u0026\u0026%*******,**,******(((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((,**//*////*//***@@@\u0026\u0026\u0026\u0026*///(((///\u0026@@@@@@@@@@@@@@@@@@@@@@\u0026*/////////\u0026\u0026@@%%%*******.***,.****,((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((,*.//*/////*/***/@@@@@@@@/((((((/@@@@@@@@@@@@@@@@@@@@@@@@@\u0026/((((((/@\u0026%(%%%%(******.***,,*,,**/(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((/////*/*///*/***%@@@@@@@@@@@\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%*****,,****.*,,**,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##*/*//,//*///*/***\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%*****,******,,,**,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##,*//*//***//*/***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%%%****,,******.,,.*,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##,*/*/,/***//*****@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%*****,.*******,*,*,(((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"            \"**       ##.////,/***///.**,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%%/%***,.*****,**.#,*(#*#        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"            \"**       //,/,//,/****///,**%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%*%#**,,,*****.**/,,#####        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"            \"**       //*/,./**/****//**,*/,@@@@@@@@@@@@@@@@@@@@@@@@@\u0026@@@@@@@@@@@@@@@@@@@\u0026%%%%%%%,,,,*,,,****,.**.,******,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///*,***,**,****/*,,,.,#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%#,,.,,,.*****,***.*********        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"            \"**       (///********,*****/.,,,,.\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%,,,,,,,,******.*,***********        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((,********,**************\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%%,,.,,,.*****..,.**************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((#******,////*****////////////%\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@\u0026%%%%%*,,,,,,*,,,**********************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((((((((((((((((((/////////////////////\u0026\u0026@@@@@@@@@\u0026@#*/////////////////////////***********///////        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((((((((((((((//////////////////%@\u0026@(*/////////////////////////////////*//////////////        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026##((((((((((((((((((((((((((((((///////////////*////////////////////////(((((((((((((//////////////        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026%%%\u0026#(((((((((((((((((((((((((((((((////////////*/////////(((((((((((((((((((((((((////////////(##        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%\u0026%\u0026%#(((((((((((((((((((((((((((((/////////**(((((((((((((((((((((((/////////////((########*        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%%%%%%%\u0026%%%%#((((((((((((((((((((((((((//////**,(((/////////////////(((#################(#*,,        **\";","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"    private static final String PICTURE_2 \u003d \"***********************************************************************************************************************\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"            \"**                                                                                                                   **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////,***,*/,////////#/////**#/(///*****////*//////***************.,,,,,,,,,,,,,,,,,**#########(,,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////****,//*////////*##(///**/#////****.**//**/////*****************,,,,,,,,,,,,,,,,.**(#########,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////,**,(////////*//**##(#///*,///*//*,******/,**/////*****************.,,,,,,,,,,,,,,.**(########(,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////**/////*/(///*/***#//////**,//**/**.*,*****,***////****************,*,,,,,,,,,,,,,,.,*#########,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///**#(//////////*/***/////////**//**/**.**%**********//*******,*********.,,,,,,,,,,,,,,.,*#########        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///*###(#////////*/****#///*//////*/*****.*,%\u0026***********************,*****.,,,,,,,,,,,,,.,*########        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"            \"**       //*(#(////*//////***,**.//,/**///////,****,**\u0026\u0026(%****,************.*****.****,,,,,,,,,,,,,,,*#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"            \"**       //,#//////*///////**,**,(//,//**///////,*****,,%@@#\u0026,**,.,**********,*.*****.***.,,,,,,,,,.,*#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///#///*//**//////******(\u0026*//,/***///////*****@@#..   ........ ..,***,,**////**.,,,,,,,,,,,,,(######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"            \"**       //((///**/**,/,////******\u0026%@,/*@//****////////,.@@...........\u0026\u0026\u0026\u0026\u0026//****,////***.,,,,,,,,,,,,*######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"            \"**       //,/////**,**(/%%///******%%@@@*%@@@@@@@@@@@@@@@@@....  ...@@@\u0026\u0026@\u0026(//****/////***.,,,,,,,,,,,*######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////,///**.**\u0026*\u0026@@@/....... @@@@@@@@@@@@@@@@@@@@\u0026****/.////**\u0026\u0026\u0026%%*//***/////***,.,,,,,,,,.,,######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////*////*,*,%@## .  .......(@@@@@@@@@@@@@@@@@@@@////((((//,@%%%%\u0026//***/////*****%%%%,,,,.,*.#####        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////*/,/////*.,.#@\u0026@....  .@#*@@@@@@@@@@@@@@@@@@@@@@*((((/\u0026\u0026\u0026\u0026%%%%%*//**/////**.*.%%%%%,,,,,#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///////,//**///*,,\u0026\u0026....*..////\u0026@@@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%#//*,//////*,**%%*%%/,,,,#######        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///////////,/*@@@\u0026\u0026\u0026***///(((((@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%%//*//*/*/*****/(#%%%,.,######((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////////.//**#@@@@@@*//(((/@@@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%%,///./*//*,**,*((%%%,.*##(,****        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////////,////***(@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@\u0026@@\u0026\u0026\u0026@@@@@\u0026%%%%*//./**/*,*,,*,%%%,,.,*********        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////////,/////***#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@/(((##########@@@@@@@@@@@%%%%%%/*/**/*,,,,,,#%.*********,**,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////////./////,*.*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@((((##############\u0026@@@@@@@\u0026%%%%%///*,/,,,,,.,,************,,,,*        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///////////*///****\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@/(((#################%@@@@@%%%%(/*,,,,,,,,,,,,******************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"            \"**       (/////,,////**//,**@\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@/((###################\u0026@\u0026@%%%//*,,,,,,,,,,,,********************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////*//////,****/*,@@@@@@@@@@@@@@@@@(####################*@@%%**,,,,.,,,,,,,,**//****/*************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////*//////////,*****/@@@@@@@@@@@@@@@\u0026####################(\u0026%*,.,,,,,,,,,,,//*/*********************        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////(((///////////////////*@@@@@@@@@@@@##################((*,,,,,,,../((((((((///****************/((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///((((((///////////,//////////*,,/\u0026@@@@@(##########,****///////((((((((((((((((((***********(((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///(((((((((((((///////////////////////****.%@\u0026\u0026/*****/////((((((((((((((((((((((/****/((((((((((/((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"            \"**       ///*#((((((((((((((((((///////////////////******,,**///((((((((((((((((((((((%%((((((((((((((,((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"            \"**       ////\u0026%((((((((((((((((((((((((((((///////////*******.((((((((((((((((#%%%%%%#(((((((((((*(((((((((((        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////%%%#(((((((((((((((((((((((((((((((((//////******,,/(((((((%%%%%%%%%#((((((((((((((((((((((((,.        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////%%%%%(((((((((((((((((((((((((((((((((((((/********,,(%%%%%%##((((((((((((((((((((((,,........        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"            \"**       //////(#%%%%%%%((((((((((((((((((((((((((((((((((((/***,,,,,,/((((((((((((((*,,,....................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////,%%###%%%%%%%%%%%%%#(((((((((((((((((((((((((((*******,,,,.((,,,,..............................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////,*%%%%#####%%%%%%%%%%%%%%%%%%%%%((((((((((((((((***********,..................................,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"            \"**       /////.***%%%%%%%####%%%%%#######,#%%%%%%%%%%%%(((((((**************..................,,,,,,,,,,,,,,,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"            \"**       (////*******%%%%%%%%%%%%%%%######(##(*(###%%%%%%%%%#(/****************,,,,,,,,,,,,,,,,,,,,,,,,,,....        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"            \"**       (/////./********(%%%%%%%%%%%%%%%#((((((((,(((((((((((((((((******************..,,,,,,...............        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((/////,**/******,,*****/#%%%%%%%#(//,,,,,,,*,(((((((((((((((((((********,...,,,,,,.................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"            \"**       ,(((((///,,****,*,,,,,,,,,,,,,,,,,,,,,,,,,,..........,(((((((((((((((......,,,,,,...................        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"            \"**       #((((((((/(,*,,*,**,,,,,,,,,,,,,,..........,,,,,,,,,.******((((((.... ...,,,,,,.....................        **\";","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"    private static final String PICTURE_3 \u003d \"***********************************************************************************************************************\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"            \"**                                                                                                                   **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((((*//*///////,/////////////*//////,//*///////%.//////////////////#%(##################        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"            \"**       ((((((((((((((,////*//////.//////////////,/(%(((/*/,/(#%/%%%%///#/%/////%%/#%//#%%%#################        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"            \"**       (((((#((#####.*////*/////*//////////////////////////,///////%*//////////*/////////#%(###########%#%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"            \"**       ############.,/////**/////*/////////////*/////*/////////////%.///////////*/////////%%*%%%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"            \"**       ###########./ *////,,*/*/*/////*////////,/////*/////////////#*////////////,*////////%%#%%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"            \"**       ########## ,* ,/////,, /**////*//*//////,////***/////*//////(#*////////////**////////%%%%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"            \"**       ####%%%%#*,,,.,,*////.//,*////,//*//////*////***//////*//////%***,*////////.**///////#%,%%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%%,,,,,,,,*,////***//////***//////*///*.**////////.///(.,*///////////***///////#%#%%%%%%%%%%%        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%#,,,, *,,,*,,//*,,//////***//////.///*****/////////.//(***//////////,***///////%#\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%% ,,,,**, *,, //,***/////****//////,//.******///////////,****///*/////,***///,///%*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%.,,,,,,,,,,, //*,**/////*****////////,*******///////,//*.****///.*////****///,///#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026, ,,,,,,.,,*,///**,*//*//,****/////.*/,*.******/////////,\u0026*,***//,*////******/////*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,,,,,,,,,,,**,//.,****////*****///.*%./.**,*******///////*@#    .* ***//.******* .//\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ,,,.,,,,,,,**///,,,**,////******///@\u0026\u0026/@***,********//%//       ...  . ,//,////\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ,,, ......,*,*//.,****,**// **,.*** \u0026./%#@@@.*.********.@@@        \u0026\u0026\u0026\u0026@@%**///%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026  ,,,,.,,,,*,,,,,/.***,***,.           (@@@@@@@@@@@@@@@@@@@@      .,\u0026\u0026\u0026\u0026@@.**///,\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026/\u0027 .,,,,,,,,,,,,,*/\u0027//  ,,**(\u0026         \u0026@@@@@@@@@@@@@@@@@@@\u0026,** ,***@\u0026@@\u0026@***/// \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026....,,,,,,, ,,,,*///////\u0026\u0026\u0026\u0026\u0026      \u0026@@%@@@@@@@@@@@@@@@@@@@@\u0026*/////#@@@@@,***/// \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026.... .., .,.,,,,*///////\u0026@@\u0026\u0026(,,******#@@@@@@@@@@@@@@@@@@@@@@////\u0026@@@@@@.***/// \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 .....*%%%\u0026,,,,*////// %%\u0026@@@@,//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,****// \u0026\u0026\u0026\u0026\u0026\u0026@\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ....%,\u0026%% ,,,,//*///#\u0026\u0026%%%@@@@@\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*****//#\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ...%%%*.%,,,,//,,//\u0026%@%%%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*****//@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(..(%%%#, ,,,//, //(%\u0026@.%%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%\u0026@@@@#*,**//.\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026../%%%%%,,,**, /,%(%%\u0026@*%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,****//@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026. ..%%/,,,*, /.%%\u0026%%%@@\u0026%\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,*,**//(\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ...%.,,*, /.%%%%%%%@@@\u0026/\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.#**,*//.\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 .. ,,,,/.#%%%%%%%%\u0026@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@(\u0026\u0026/*.*//.\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026 ,,,/.%%%%%%%%%%%%%\u0026@@@@@(@@@@@@@@@@@@@@@@@@@@,\u0026\u0026\u0026\u0026\u0026,**//,\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(,,*,%%%%%%%%%%%%%%%%%@@@@@,@@@@@@@@@@@@@@/\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,///\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,,/%%%%%%%%%%%%%%%%%%%%@@@\u0026%\u0026@@@@@@@(. %\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026//\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(  ... ....... . . #%%%%%%%%%%%%%%%%%%@@,\u0026%,.,//....,,,, \u0026\u0026\u0026#/%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026.......\u0026@\u0026............ ..... %%%%%%%%%%%%%%%\u0026@(%%%%%.%,...,,,,,,, ,,.*\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026\u0026\u0026(%%%%%%%%....@@@..........,. . %%%%,%%%%%%%%%%%%%@\u0026\u0026@.%%%%%..,,,,,,,,,,,,,,,,,,..%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026\u0026\u0026\u0026(%%%%%%%%/%%% ...@@@............%%%%%%%%*\u0026%%%%%%%%%\u0026*%%\u0026\u0026\u0026@%%,.,,,,,,,,,,,,,,,,,,,,,\u0026@.,,\u0026%/*\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"tryyang2001"},"content":"            \"**       \u0026%\u0026#%%%%%%%%\u0026\u0026\u0026\u0026(%% .. @@#........./%%%%%%%%%%\u0026\u0026/#%%%%%\u0026,%%%%\u0026\u0026\u0026\u0026,,,,,,,,,,,,,,,,,,,,,,%@ ,,.\u0026@\u0026@@\u0026,        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%%%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026.%%...\u0026@@......(%%%%%%%*%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026/(\u0026%%%%%\u0026\u0026\u0026\u0026.,,,,,,,,,,,,,,,,,,,#@ ,,.\u0026\u0026@\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%,%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026(%... @@/\u0027 %%%.%%%%%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026.,,,,,,,,,,,,,,,,,,%@ ,,,\u0026\u0026\u0026@\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%#%%%%%%\u0026\u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%...\u0026@%%%%%%*%%%%%%%%%%\u0026\u0026\u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@,,,,,,,,,,,,,,,,,,@@ ,,#%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%#%%%%%%\u0026%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026*% . %%%%%%%\u0026%%#%%%%%%%\u0026\u0026#,#\u0026(.*%\u0026\u0026\u0026\u0026\u0026#\u0026\u0026\u0026 ,.,,,,,,,,,,,,,,.@@,,.%%\u0026\u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026        **\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"tryyang2001"},"content":"            \"**       %%%#%%%%%%%%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,%.%%%%%%%\u0026\u0026,%\u0026\u0026\u0026,%%****..,/\u0026@\u0026\u0026\u0026@@@@@*#@@%,   .,,,,,,,,,.@(,,.%%\u0026\u0026\u0026\u0026*\u0026\u0026\u0026\u0026\u0026\u0026        **\";","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":140,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":141,"author":{"gitId":"tryyang2001"},"content":"     * Prints the ASCII art image of the robot and the description of the personality of the robot","lastModifiedDate":"2021-09-08"},{"lineNumber":142,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":143,"author":{"gitId":"tryyang2001"},"content":"    public void printPersonality() {","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"tryyang2001"},"content":"        Random random \u003d new Random();","lastModifiedDate":"2021-09-08"},{"lineNumber":145,"author":{"gitId":"tryyang2001"},"content":"        int randomNumber \u003d random.nextInt(3);","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"tryyang2001"},"content":"        switch (randomNumber) {","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"tryyang2001"},"content":"        case 0:","lastModifiedDate":"2021-09-08"},{"lineNumber":148,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(Profile.PICTURE_1);","lastModifiedDate":"2021-09-17"},{"lineNumber":149,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":150,"author":{"gitId":"tryyang2001"},"content":"        case 1:","lastModifiedDate":"2021-09-08"},{"lineNumber":151,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(Profile.PICTURE_2);","lastModifiedDate":"2021-09-17"},{"lineNumber":152,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":153,"author":{"gitId":"tryyang2001"},"content":"        case 2:","lastModifiedDate":"2021-09-08"},{"lineNumber":154,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(Profile.PICTURE_3);","lastModifiedDate":"2021-09-17"},{"lineNumber":155,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":156,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":157,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**                                                                                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":158,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**       Greeting!                                                                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":159,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -My name is Shima Rin, I am a Japanese anime character that comes from the anime \\\"Yuru Camp\\\" :P              **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":160,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -I love physical camping, especially during the winter season!                                               **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":161,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -I also love food (especially hot pot!) and hot spring! :P                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":162,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**      -By the way, I am a dog lover!                                                                               **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"**                                                                                                                   **\");","lastModifiedDate":"2021-09-08"},{"lineNumber":164,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"***********************************************************************************************************************\");","lastModifiedDate":"2021-09-08"},{"lineNumber":165,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":166,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":167,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"tryyang2001":167}},{"path":"src/main/java/shima/design/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.design;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"public class UserInterface {","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    public static final String CURR_VERSION \u003d \"Version 9.0\";","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"     * Displays all the welcome screens and designs when the program starts","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    public UserInterface() {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"        printLogo();","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"        printWelcomeMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        printVersionDescription();","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"     * Print the logo and greeting message","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    private void printLogo() {","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t              ##*                                 \");","lastModifiedDate":"2021-09-17"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t   .      . .\u0026####%                               \");","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t    #%%%%((\u0026%######%**.                           \");","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t    %#############%#%\u0026\u0026%%%%%##(*.                 \");","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t . .%%#######%%%%%##############%%%%#(.           \");","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t/##\u0026@%####\u0026%####\u0026#####%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026%%%####\u0026/  .      \");","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t\u0026######%%######%\u0026%%%#################%%%%\u0026#       \");","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t(@####\u0026#####%\u0026%########################%###@(     \");","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t,\u0026%#%%%%##%%############%%%%%%%%%%%##########%.   \");","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t*\u0026#\u0026%%\u0026#%\u0026########\u0026%#(%#/((((((/****#\u0026%\u0026%#####%,  \");","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  ,\u0026#%%%%#####%%#(%(((\u0026#(\u0026(((((((((/%#(((%##%%#%. \");","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  (%##%%####%%(((/%\u0026((%\u0026#%##((((((((\u0026#(((%#(((\u0026\u0026, \");","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  (%#%\u0026####%#((##(#(/###.%#.*(##(((%, /##((%#(#( .\");","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t  *\u0026(\u0026%###%#(((((#/@%%%\u0026,. ...     \u0026%%\u0026%  (\u0026###*  \");","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t . (%%%###%(((((#/#####\u0026, .. .... /\u0026(#(\u0026,.%(((#(  \");","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t    *\u0026\u0026##%%(((((%*(%###%. .. .. . *%(##\u0026, (%((#(  \");","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t      (\u0026#%%((((#%/ .**,. ..... . ...,,,. . (#(%(  \");","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t        .(%(((((\u0026/ .   .  ...... .. .. . .(%/#%,  \");","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t          .(%(((#\u0026*,,.           . .,*/*%#((#\u0026*   \");","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\t              ,/(#(    .,,******,.     ####%*     \");","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"     * Print the welcome message and the ASCII art when the program starts","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"    private void printWelcomeMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   __          ________ _      _____ ____  __  __ ______    \");","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   \\\\ \\\\        / /  ____| |    / ____/ __ \\\\|  \\\\/  |  ____|  \");","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    \\\\ \\\\  /\\\\  / /| |__  | |   | |   | |  | | \\\\  / | |__     \");","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"     \\\\ \\\\/  \\\\/ / |  __| | |   | |   | |  | | |\\\\/| |  __|    \");","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"      \\\\  /\\\\  /  | |____| |___| |___| |__| | |  | | |____   \");","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"     __\\\\/_ \\\\/   |______|______\\\\_____\\\\____/|_|  |_|______|_ \");","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    / ____| |  | |_   _|  \\\\/  |   /\\\\   |  __ \\\\|_   _| \\\\ | |\");","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   | (___ | |__| | | | | \\\\  / |  /  \\\\  | |__) | | | |  \\\\| |\");","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    \\\\___ \\\\|  __  | | | | |\\\\/| | / /\\\\ \\\\ |  _  /  | | | . ` |\");","lastModifiedDate":"2021-09-17"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"    ____) | |  | |_| |_| |  | |/ ____ \\\\| | \\\\ \\\\ _| |_| |\\\\  |\");","lastModifiedDate":"2021-09-17"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"   |_____/|_|  |_|_____|_|  |_/_/    \\\\_\\\\_|  \\\\_\\\\_____|_| \\\\_|\");","lastModifiedDate":"2021-09-17"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"        //greeting","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\nHi there! My name is Shima Rin and I am a robot that can help you do some wonderful jobs!\");","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"     * Show the current version\u0027s functionality of the bot","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"    private void printVersionDescription() {","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"        ArrayList\u003cString\u003e versionDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"        int maxDescriptionsLength \u003d 0;","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* \" + CURR_VERSION);","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* In this version, I am equipped with several functions, including PROFILE, HELP, TODO, DEADLINE, EVENT, LIST, DONE, DELETE, DATE, FIND and EXIT\");","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* To know more about how to use the command, you can type \\\"help\\\" to view the help menu written by me :P\");","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"        versionDescriptions.add(\"* I am able to understand your command in any case, meaning that you are free to enter command with any case :D\");","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"        //Finds the length of the longest description to align all \u0027*\u0027 displayed","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"        for (String str : versionDescriptions) {","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"            if (str.length() \u003e maxDescriptionsLength) {","lastModifiedDate":"2021-09-17"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"                maxDescriptionsLength \u003d str.length();","lastModifiedDate":"2021-09-17"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"        //Draws the frame for the version description","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c maxDescriptionsLength + 2; i++) {","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-17"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"        System.out.println();","lastModifiedDate":"2021-09-17"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"        for (String str : versionDescriptions) {","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"            //Uses format string to print the \u0027*\u0027 at the correct position after each sentence is completed","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"            System.out.printf(\"%1$-\" + (maxDescriptionsLength + 1) + \"s\", str);","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"*\");","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c maxDescriptionsLength + 2; i++) {","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"     * Shows the message string with a message box","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-17"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"     * @param message The message to print, multiple message strings are accepted","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"    public void showMessage(String... message) {","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"        int longestMessageLength \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"        for (String msg : message) {","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"            longestMessageLength \u003d Math.max(msg.length(), longestMessageLength);","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"        longestMessageLength +\u003d 4; //Adds 4 more spaces for each message box","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"        drawMessageBoxFrame(longestMessageLength);","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"        for (String msg : message) {","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t   \" + msg);","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"        drawMessageBoxFrame(longestMessageLength);","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"     * Draws the frame for the message box display","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"     * @param longestMessageLength The string length of the longest message","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"    private void drawMessageBoxFrame(int longestMessageLength) {","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t@\");","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c longestMessageLength; i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"@\");","lastModifiedDate":"2021-09-17"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"tryyang2001":123}},{"path":"src/main/java/shima/exception/ShimaException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.exception;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"public class ShimaException extends Exception {","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"    public static class StorageException extends Exception {","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"        //Throws this exception when the data stored in the storage file is invalid","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"tryyang2001":7}},{"path":"src/main/java/shima/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.parser;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.command.AddDeadlineCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import shima.command.AddEventCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import shima.command.AddToDoCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import shima.command.Command;","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import shima.command.DeleteCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import shima.command.DoneCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"import shima.command.ExitCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"import shima.command.FindCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"import shima.command.HelpCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"import shima.command.ListCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"import shima.command.DateCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"import shima.command.ViewPersonalityCommand;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"import shima.design.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"import shima.storage.Storage;","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"import shima.task.Deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"import shima.task.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"public class Parser {","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_PROFILE \u003d \"profile\";","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_EXIT \u003d \"exit\";","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_HELP \u003d \"help\";","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"    public static final String INVALID_COMMAND_MSG \u003d \"Sorry, the command is invalid, I cant understand... \";","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"    public static final String HELP_SUPPORT_MSG \u003d \"To seek for help, you can type the command \\\"help\\\" to view the help menu\";","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"    public static final String EMPTY_TASK_MSG \u003d \"Sorry, the task is empty! I don\u0027t know how to record it :(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"    public static final String SLASH_MISSING_MSG \u003d \"Sorry, fail to create an Event, the time specific character \u0027/\u0027 is missing\";","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"    public static final String DASH_MISSING_MSG \u003d \"Sorry, fail to create an Event, the period specific character \u0027-\u0027 is missing\";","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"    public static final String EMPTY_TASK_INDEX_MSG \u003d \"Sorry, the input task number is missing, please try again! :(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"    public static final String EMPTY_KEYWORD_MSG \u003d \"Sorry, the keyword is empty! I do not know which task you are looking for :(\";","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"    public static final String NO_MATCHING_TASK_MSG \u003d \"\\tHmm... I do not find any task matches the keyword, please use another keyword!\";","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"    public static final String EMPTY_DEADLINE_MSG \u003d \"Sorry, the deadline for the task is missing! I don\u0027t know how to memorize it:(\";","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"    public static final String EMPTY_PERIOD_MSG \u003d \"Sorry, the date and period for the task is missing! I don\u0027t know how to memorize it :(\";","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"    public static final String EXPIRED_DEADLINE_MSG \u003d \"Oops, the end date and time for the task is already expired, please give the task a new deadline!\";","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"    public static final String INCORRECT_DATE_TIME_FORMAT_MSG \u003d \"Oh no! The date and time format are incorrect, the format should be : yyyy-MM-dd HH:mm\";","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"    public static final String INVALID_DATE_TIME_MSG \u003d \"Sorry, the input after the backslash \u0027/\u0027 or \u0027/by\u0027 should only contains \" +","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"            \"date and time of format (yyyy-MM-dd HH:mm)\";","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_DATE \u003d \"date\";","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"    public static final String WRONG_DATE_TIME_FORMAT_MSG \u003d \"Sorry, either the input date format is invalid or incorrect! Take note that it\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"            \" should only contains date with format yyyy-MM-dd\";","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"    public static final String INVALID_DATE_MSG \u003d \"Sorry, the input date should only contains yyyy-MM-dd\";","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"    public static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"     * Reads the input command entered by the user and handle each command","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"     * @param storage The storage class object that used to save data","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the respective command to each input accordingly","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when there is error occurs when accessing external file","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"    public static Command readCommand(TaskList tasks, Storage storage, UserInterface ui) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"        String command \u003d in.nextLine().trim();","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"        String[] words \u003d command.split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"        switch (words[0].toLowerCase()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_PROFILE:","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"            return new ViewPersonalityCommand();","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_HELP:","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"            return parseToDo(tasks, command, words, ui);","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"            return parseEvent(tasks, command, words, ui);","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"            return parseDeadline(tasks, command, words, ui);","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"            return new ListCommand(tasks);","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"            return parseDoneCommand(tasks, storage, words, ui);","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"            return new DeleteCommand(tasks, words);","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_DATE:","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"            return parseDateCommand(tasks, command, words, ui);","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"            return parseFindCommand(tasks, command, words, ui);","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"        case COMMAND_EXIT:","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"            return new ExitCommand(tasks, storage, ui);","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"        default:","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INVALID_COMMAND_MSG, HELP_SUPPORT_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"            return new Command();","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the find command syntax and keyword are valid","lastModifiedDate":"2021-09-25"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The task list class object that stores all the tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-25"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-25"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-25"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns a new find command object if the syntax is correct, return empty command otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"    private static Command parseFindCommand(TaskList tasks, String command, String[] words, UserInterface ui) {","lastModifiedDate":"2021-09-25"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"        String keyword \u003d command.replaceFirst(words[0], \"\").trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"        if (keyword.isEmpty()) {","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(EMPTY_KEYWORD_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"            return new Command();","lastModifiedDate":"2021-09-25"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"        for (Task t : tasks.getTasks()) {","lastModifiedDate":"2021-09-25"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"            if (t.toString().contains(keyword)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"                matchingTasks.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":129,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":130,"author":{"gitId":"tryyang2001"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2021-09-25"},{"lineNumber":131,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(NO_MATCHING_TASK_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":132,"author":{"gitId":"tryyang2001"},"content":"            return new Command();","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"tryyang2001"},"content":"        return new FindCommand(matchingTasks, ui);","lastModifiedDate":"2021-09-25"},{"lineNumber":135,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":137,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the input date is valid or in correct format","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":140,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The list class object that stores all the tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":141,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-25"},{"lineNumber":142,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-25"},{"lineNumber":143,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-25"},{"lineNumber":144,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the list date command object if the input command is valid, returns an empty command otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":145,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":146,"author":{"gitId":"tryyang2001"},"content":"    private static Command parseDateCommand(TaskList tasks, String command, String[] words, UserInterface ui) {","lastModifiedDate":"2021-09-25"},{"lineNumber":147,"author":{"gitId":"tryyang2001"},"content":"        String inputDateString \u003d command.replaceFirst(words[0], \"\").trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":148,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":149,"author":{"gitId":"tryyang2001"},"content":"            inputDateString \u003d padDate(inputDateString);","lastModifiedDate":"2021-09-25"},{"lineNumber":150,"author":{"gitId":"tryyang2001"},"content":"            LocalDate inputDate \u003d LocalDate.parse(inputDateString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2021-09-25"},{"lineNumber":151,"author":{"gitId":"tryyang2001"},"content":"            ArrayList\u003cTask\u003e allDeadlines \u003d (ArrayList\u003cTask\u003e) tasks.getTasks().stream().filter(t -\u003e t instanceof Deadline).collect(Collectors.toList());","lastModifiedDate":"2021-09-25"},{"lineNumber":152,"author":{"gitId":"tryyang2001"},"content":"            ArrayList\u003cDeadline\u003e resultList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-25"},{"lineNumber":153,"author":{"gitId":"tryyang2001"},"content":"            for (Task t : allDeadlines) {","lastModifiedDate":"2021-09-25"},{"lineNumber":154,"author":{"gitId":"tryyang2001"},"content":"                Deadline deadline \u003d (Deadline) t;","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"tryyang2001"},"content":"                if (isSameDate(inputDate, deadline)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":156,"author":{"gitId":"tryyang2001"},"content":"                    resultList.add(deadline);","lastModifiedDate":"2021-09-25"},{"lineNumber":157,"author":{"gitId":"tryyang2001"},"content":"                }","lastModifiedDate":"2021-09-25"},{"lineNumber":158,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":159,"author":{"gitId":"tryyang2001"},"content":"            return new DateCommand(resultList);","lastModifiedDate":"2021-09-26"},{"lineNumber":160,"author":{"gitId":"tryyang2001"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":161,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(WRONG_DATE_TIME_FORMAT_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":162,"author":{"gitId":"tryyang2001"},"content":"            return new Command();","lastModifiedDate":"2021-09-25"},{"lineNumber":163,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":164,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INVALID_DATE_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":165,"author":{"gitId":"tryyang2001"},"content":"            return new Command();","lastModifiedDate":"2021-09-25"},{"lineNumber":166,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":167,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":168,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":169,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":170,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the two dates are the same","lastModifiedDate":"2021-09-25"},{"lineNumber":171,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":172,"author":{"gitId":"tryyang2001"},"content":"     * @param inputDate The user input date","lastModifiedDate":"2021-09-25"},{"lineNumber":173,"author":{"gitId":"tryyang2001"},"content":"     * @param deadline  The deadline stored in the tasks list class object","lastModifiedDate":"2021-09-25"},{"lineNumber":174,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the two dates are exactly the same, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":175,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":176,"author":{"gitId":"tryyang2001"},"content":"    private static boolean isSameDate(LocalDate inputDate, Deadline deadline) {","lastModifiedDate":"2021-09-25"},{"lineNumber":177,"author":{"gitId":"tryyang2001"},"content":"        return deadline.getEndTime().getYear() \u003d\u003d inputDate.getYear() \u0026\u0026","lastModifiedDate":"2021-09-25"},{"lineNumber":178,"author":{"gitId":"tryyang2001"},"content":"                deadline.getEndTime().getMonth() \u003d\u003d inputDate.getMonth() \u0026\u0026","lastModifiedDate":"2021-09-25"},{"lineNumber":179,"author":{"gitId":"tryyang2001"},"content":"                deadline.getEndTime().getDayOfMonth() \u003d\u003d inputDate.getDayOfMonth();","lastModifiedDate":"2021-09-25"},{"lineNumber":180,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":181,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":182,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"tryyang2001"},"content":"     * Checks the syntax for the command to create a new task","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"tryyang2001"},"content":"     * @param words The array of words that compose the input command","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"tryyang2001"},"content":"     * @param ui    The user interface class object used to display message box","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if an instance of the subclass is created and successfully stored in the to-do list","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"tryyang2001"},"content":"    private static boolean isCorrectToDo(String[] words, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"tryyang2001"},"content":"        if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(EMPTY_TASK_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"tryyang2001"},"content":"        return true;","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"tryyang2001"},"content":"     * Checks the syntax for the command to create an \u0027Event\u0027 instance","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if an instance of the subclass Event is created and successfully stored in the to-do list","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"tryyang2001"},"content":"    private static boolean isCorrectEvent(String command, String[] words, String taskName, String time, UserInterface ui) {","lastModifiedDate":"2021-09-25"},{"lineNumber":206,"author":{"gitId":"tryyang2001"},"content":"        if (words.length \u003d\u003d 1 || taskName.isEmpty()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(EMPTY_TASK_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"tryyang2001"},"content":"        if (time.isEmpty()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(EMPTY_PERIOD_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"tryyang2001"},"content":"        if (!command.contains(\"/\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(SLASH_MISSING_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":216,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":217,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":218,"author":{"gitId":"tryyang2001"},"content":"        if (!command.contains(\"-\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":219,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(DASH_MISSING_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":220,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":221,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"tryyang2001"},"content":"        return true;","lastModifiedDate":"2021-09-23"},{"lineNumber":223,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":224,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":225,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":226,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the syntax for the deadline command is correct, and the date and time specified is in correct format and valid","lastModifiedDate":"2021-09-25"},{"lineNumber":227,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":228,"author":{"gitId":"tryyang2001"},"content":"     * @param command The input command typed by the user","lastModifiedDate":"2021-09-23"},{"lineNumber":229,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the input command","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-23"},{"lineNumber":231,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns true if the subclass Deadline is created and successfully stored in the to-do list","lastModifiedDate":"2021-09-23"},{"lineNumber":232,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"tryyang2001"},"content":"    private static boolean isCorrectDeadline(String command, String[] words, String taskName, String time, UserInterface ui) {","lastModifiedDate":"2021-09-25"},{"lineNumber":234,"author":{"gitId":"tryyang2001"},"content":"        if (words.length \u003d\u003d 1 || taskName.isEmpty()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(EMPTY_TASK_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":236,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":237,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":238,"author":{"gitId":"tryyang2001"},"content":"        if (time.isEmpty()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":239,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(EMPTY_DEADLINE_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":240,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":241,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":242,"author":{"gitId":"tryyang2001"},"content":"        if (!command.contains(\"/\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":243,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(SLASH_MISSING_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":244,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":245,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":246,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":247,"author":{"gitId":"tryyang2001"},"content":"            //pad input time","lastModifiedDate":"2021-09-25"},{"lineNumber":248,"author":{"gitId":"tryyang2001"},"content":"            time \u003d padCorrectDateTimeFormat(time);","lastModifiedDate":"2021-09-25"},{"lineNumber":249,"author":{"gitId":"tryyang2001"},"content":"            LocalDateTime inputTime \u003d LocalDateTime.parse(time, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-09-25"},{"lineNumber":250,"author":{"gitId":"tryyang2001"},"content":"            LocalDateTime now \u003d LocalDateTime.now();","lastModifiedDate":"2021-09-25"},{"lineNumber":251,"author":{"gitId":"tryyang2001"},"content":"            if (inputTime.isBefore(now)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":252,"author":{"gitId":"tryyang2001"},"content":"                ui.showMessage(EXPIRED_DEADLINE_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":253,"author":{"gitId":"tryyang2001"},"content":"                return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":254,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":255,"author":{"gitId":"tryyang2001"},"content":"            return true;","lastModifiedDate":"2021-09-23"},{"lineNumber":256,"author":{"gitId":"tryyang2001"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":257,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INCORRECT_DATE_TIME_FORMAT_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":258,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":259,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":260,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INVALID_DATE_TIME_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":261,"author":{"gitId":"tryyang2001"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":262,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":263,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":264,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":265,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":266,"author":{"gitId":"tryyang2001"},"content":"     * Pads the input date time so that it has the same DateTimeFormat as yyyy-MM-dd HH:mm","lastModifiedDate":"2021-09-25"},{"lineNumber":267,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":268,"author":{"gitId":"tryyang2001"},"content":"     * @param time The input time","lastModifiedDate":"2021-09-25"},{"lineNumber":269,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the time string with correct date time format","lastModifiedDate":"2021-09-25"},{"lineNumber":270,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":271,"author":{"gitId":"tryyang2001"},"content":"    private static String padCorrectDateTimeFormat(String time) {","lastModifiedDate":"2021-09-25"},{"lineNumber":272,"author":{"gitId":"tryyang2001"},"content":"        time \u003d padDate(time);","lastModifiedDate":"2021-09-25"},{"lineNumber":273,"author":{"gitId":"tryyang2001"},"content":"        time \u003d padTime(time, time.indexOf(\" \"));","lastModifiedDate":"2021-09-25"},{"lineNumber":274,"author":{"gitId":"tryyang2001"},"content":"        return time;","lastModifiedDate":"2021-09-25"},{"lineNumber":275,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":276,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":277,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":278,"author":{"gitId":"tryyang2001"},"content":"     * Pads the input month/day with a leading \u00270\u0027 if they contain only single digit","lastModifiedDate":"2021-09-25"},{"lineNumber":279,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":280,"author":{"gitId":"tryyang2001"},"content":"     * @param time The input time string","lastModifiedDate":"2021-09-25"},{"lineNumber":281,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the time string padded with leading \u00270\u0027 for month/day of end date","lastModifiedDate":"2021-09-25"},{"lineNumber":282,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":283,"author":{"gitId":"tryyang2001"},"content":"    private static String padDate(String time) {","lastModifiedDate":"2021-09-25"},{"lineNumber":284,"author":{"gitId":"tryyang2001"},"content":"        int indexOfDash \u003d time.indexOf(\"-\");","lastModifiedDate":"2021-09-25"},{"lineNumber":285,"author":{"gitId":"tryyang2001"},"content":"        if (Integer.parseInt(time.substring(indexOfDash + 1, indexOfDash + 2)) \u003e 1) {","lastModifiedDate":"2021-09-25"},{"lineNumber":286,"author":{"gitId":"tryyang2001"},"content":"            time \u003d time.substring(0, indexOfDash + 1) + \"0\" + time.substring(indexOfDash + 1);","lastModifiedDate":"2021-09-26"},{"lineNumber":287,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":288,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":289,"author":{"gitId":"tryyang2001"},"content":"            if (Integer.parseInt(time.substring(time.lastIndexOf(\"-\") + 1, time.lastIndexOf(\"-\") + 3).trim()) \u003c 10) {","lastModifiedDate":"2021-09-26"},{"lineNumber":290,"author":{"gitId":"tryyang2001"},"content":"                time \u003d time.substring(0, time.lastIndexOf(\"-\") + 1) + \"0\" + time.substring(time.lastIndexOf(\"-\") + 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":291,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":292,"author":{"gitId":"tryyang2001"},"content":"        } catch (StringIndexOutOfBoundsException stringIndexOutOfBoundsException) {","lastModifiedDate":"2021-09-26"},{"lineNumber":293,"author":{"gitId":"tryyang2001"},"content":"            time +\u003d \"  \";","lastModifiedDate":"2021-09-26"},{"lineNumber":294,"author":{"gitId":"tryyang2001"},"content":"            if (Integer.parseInt(time.substring(time.lastIndexOf(\"-\") + 1, time.lastIndexOf(\"-\") + 3).trim()) \u003c 10) {","lastModifiedDate":"2021-09-26"},{"lineNumber":295,"author":{"gitId":"tryyang2001"},"content":"                time \u003d time.substring(0, time.lastIndexOf(\"-\") + 1) + \"0\" + time.substring(time.lastIndexOf(\"-\") + 1);","lastModifiedDate":"2021-09-26"},{"lineNumber":296,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":297,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":298,"author":{"gitId":"tryyang2001"},"content":"        return time.trim();","lastModifiedDate":"2021-09-26"},{"lineNumber":299,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":300,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":301,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":302,"author":{"gitId":"tryyang2001"},"content":"     * Pads the input hour with a leading \u00270\u0027 if it contains only single digit","lastModifiedDate":"2021-09-25"},{"lineNumber":303,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":304,"author":{"gitId":"tryyang2001"},"content":"     * @param time         The input time string","lastModifiedDate":"2021-09-25"},{"lineNumber":305,"author":{"gitId":"tryyang2001"},"content":"     * @param indexOfColon Returns the time string padded with leading \u00270\u0027 for hour of end time","lastModifiedDate":"2021-09-25"},{"lineNumber":306,"author":{"gitId":"tryyang2001"},"content":"     * @return Return the time string padded with leading \u00270\u0027 for hour of end time","lastModifiedDate":"2021-09-25"},{"lineNumber":307,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":308,"author":{"gitId":"tryyang2001"},"content":"    private static String padTime(String time, int indexOfColon) {","lastModifiedDate":"2021-09-25"},{"lineNumber":309,"author":{"gitId":"tryyang2001"},"content":"        if (Integer.parseInt(time.substring(time.indexOf(\":\") - 2, time.indexOf(\":\")).trim()) \u003c 10) {","lastModifiedDate":"2021-09-25"},{"lineNumber":310,"author":{"gitId":"tryyang2001"},"content":"            time \u003d time.substring(0, indexOfColon + 1) + \"0\" + time.substring(indexOfColon + 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":311,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":312,"author":{"gitId":"tryyang2001"},"content":"        return time;","lastModifiedDate":"2021-09-25"},{"lineNumber":313,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":314,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":315,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":316,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the to-do command is correct and creates a new add to-do command to execute","lastModifiedDate":"2021-09-25"},{"lineNumber":317,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":318,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":319,"author":{"gitId":"tryyang2001"},"content":"     * @param command The user input command","lastModifiedDate":"2021-09-23"},{"lineNumber":320,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the command","lastModifiedDate":"2021-09-23"},{"lineNumber":321,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-23"},{"lineNumber":322,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the add command object if the input command is valid, returns empty command object otherwise","lastModifiedDate":"2021-09-23"},{"lineNumber":323,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":324,"author":{"gitId":"tryyang2001"},"content":"    private static Command parseToDo(TaskList tasks, String command, String[] words, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":325,"author":{"gitId":"tryyang2001"},"content":"        if (isCorrectToDo(words, ui)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":326,"author":{"gitId":"tryyang2001"},"content":"            return new AddToDoCommand(tasks, command, words);","lastModifiedDate":"2021-09-25"},{"lineNumber":327,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":328,"author":{"gitId":"tryyang2001"},"content":"        return new Command();","lastModifiedDate":"2021-09-23"},{"lineNumber":329,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":330,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":331,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":332,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the deadline command is correct and creates a new add deadline command to execute","lastModifiedDate":"2021-09-25"},{"lineNumber":333,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":334,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":335,"author":{"gitId":"tryyang2001"},"content":"     * @param command The user input command","lastModifiedDate":"2021-09-23"},{"lineNumber":336,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the command","lastModifiedDate":"2021-09-23"},{"lineNumber":337,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-26"},{"lineNumber":338,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the add command object if the input command is valid, returns empty command object otherwise","lastModifiedDate":"2021-09-23"},{"lineNumber":339,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":340,"author":{"gitId":"tryyang2001"},"content":"    private static Command parseDeadline(TaskList tasks, String command, String[] words, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":341,"author":{"gitId":"tryyang2001"},"content":"        command \u003d command.replaceFirst(words[0], \"\").trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":342,"author":{"gitId":"tryyang2001"},"content":"        String time \u003d command.substring(command.indexOf(\u0027/\u0027) + 1).trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":343,"author":{"gitId":"tryyang2001"},"content":"        String taskName \u003d command.split(\"/\", 2)[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":344,"author":{"gitId":"tryyang2001"},"content":"        if (time.toLowerCase().startsWith(\"by\")) {","lastModifiedDate":"2021-09-26"},{"lineNumber":345,"author":{"gitId":"tryyang2001"},"content":"            time \u003d time.replaceFirst(\"(?i)by\", \"\").trim();","lastModifiedDate":"2021-09-26"},{"lineNumber":346,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":347,"author":{"gitId":"tryyang2001"},"content":"        if (isCorrectDeadline(command, words, taskName, time, ui)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":348,"author":{"gitId":"tryyang2001"},"content":"            time \u003d padCorrectDateTimeFormat(time);","lastModifiedDate":"2021-09-25"},{"lineNumber":349,"author":{"gitId":"tryyang2001"},"content":"            return new AddDeadlineCommand(tasks, command, words, time);","lastModifiedDate":"2021-09-25"},{"lineNumber":350,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":351,"author":{"gitId":"tryyang2001"},"content":"        return new Command();","lastModifiedDate":"2021-09-23"},{"lineNumber":352,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":353,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":354,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":355,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the event command is correct and creates a new add event command to execute","lastModifiedDate":"2021-09-25"},{"lineNumber":356,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":357,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":358,"author":{"gitId":"tryyang2001"},"content":"     * @param command The user input command","lastModifiedDate":"2021-09-23"},{"lineNumber":359,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the command","lastModifiedDate":"2021-09-23"},{"lineNumber":360,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-23"},{"lineNumber":361,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the add command object if the input command is valid, returns empty command object otherwise","lastModifiedDate":"2021-09-23"},{"lineNumber":362,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":363,"author":{"gitId":"tryyang2001"},"content":"    private static Command parseEvent(TaskList tasks, String command, String[] words, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":364,"author":{"gitId":"tryyang2001"},"content":"        command \u003d command.replaceFirst(words[0], \"\").trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":365,"author":{"gitId":"tryyang2001"},"content":"        String time \u003d command.substring(command.indexOf(\u0027/\u0027) + 1).trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":366,"author":{"gitId":"tryyang2001"},"content":"        String taskName \u003d command.split(\"/\", 2)[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":367,"author":{"gitId":"tryyang2001"},"content":"        if (time.toLowerCase().startsWith(\"at\")) {","lastModifiedDate":"2021-09-26"},{"lineNumber":368,"author":{"gitId":"tryyang2001"},"content":"            time \u003d time.replaceFirst(\"(?i)at\", \"\").trim();","lastModifiedDate":"2021-09-26"},{"lineNumber":369,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":370,"author":{"gitId":"tryyang2001"},"content":"        if (isCorrectEvent(command, words, taskName, time, ui)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":371,"author":{"gitId":"tryyang2001"},"content":"            return new AddEventCommand(tasks, command, words, taskName, time);","lastModifiedDate":"2021-09-25"},{"lineNumber":372,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":373,"author":{"gitId":"tryyang2001"},"content":"        return new Command();","lastModifiedDate":"2021-09-23"},{"lineNumber":374,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":375,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":376,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":377,"author":{"gitId":"tryyang2001"},"content":"     * Checks if the done command is correct and creates a new done command to execute","lastModifiedDate":"2021-09-25"},{"lineNumber":378,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":379,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks   The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":380,"author":{"gitId":"tryyang2001"},"content":"     * @param storage The storage class object used to save data","lastModifiedDate":"2021-09-23"},{"lineNumber":381,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the command","lastModifiedDate":"2021-09-23"},{"lineNumber":382,"author":{"gitId":"tryyang2001"},"content":"     * @param ui      The user interface class object used to display message box","lastModifiedDate":"2021-09-23"},{"lineNumber":383,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the done command object if the input command is valid, returns an empty command otherwise","lastModifiedDate":"2021-09-23"},{"lineNumber":384,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":385,"author":{"gitId":"tryyang2001"},"content":"    private static Command parseDoneCommand(TaskList tasks, Storage storage, String[] words, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":386,"author":{"gitId":"tryyang2001"},"content":"        if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":387,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(EMPTY_TASK_INDEX_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":388,"author":{"gitId":"tryyang2001"},"content":"            return new Command();","lastModifiedDate":"2021-09-23"},{"lineNumber":389,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":390,"author":{"gitId":"tryyang2001"},"content":"        return new DoneCommand(tasks, storage, words);","lastModifiedDate":"2021-09-23"},{"lineNumber":391,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":392,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"tryyang2001":392}},{"path":"src/main/java/shima/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.storage;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.design.UserInterface;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import shima.exception.ShimaException;","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"import shima.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import shima.task.ToDo;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import shima.task.Deadline;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"import shima.task.Event;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"import shima.task.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"public class Storage {","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    public static final String LIST_ALERT_MSG \u003d \"\\nHello user! I have helped you written down the to-do list from my previous record!\";","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    public static final String STORAGE_ERROR_MSG \u003d \"There is an error occurs when I try to read data from the shimaStorage.txt file, please help me fix it :(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public static final String UNEXPECTED_ERROR_MSG \u003d \"An unexpected error occurs when I try to know the type of the task \";","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    public static final String CLASS_TYPE_MISMATCH_MSG \u003d \"An unexpected error occurs when I try to append the storage file... Class Type Mismatch!\";","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    public static final String WRONG_REPLY_MSG \u003d \"I do not understand your reply, please try again :(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"    public static final String IOEXCEPTION_MSG \u003d \"Unfortunately somethings have messed up, I have received this information\";","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    public String filePath;","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"    private static final String DELIMITER \u003d \"Ø\";","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"    private File file;","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"    private UserInterface ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"    private static final String STORAGE_MESSAGE \u003d \"Welcome to my storage :P, this is how I memorize all your tasks!\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"            \"Alert! Please do not delete anything inside this file, else I will get memory loss :(\\n\";","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"    public Storage(String filePath, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"        this.file \u003d new File(this.filePath);","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"     * Creates the storage file","lastModifiedDate":"2021-09-15"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-15"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    public void createFile() throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"        FileWriter createFile \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"        createFile.write(STORAGE_MESSAGE);","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"        createFile.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"     * Reads the data from the storage file, will be called when the program starts","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"     * @throws ShimaException.StorageException Throws this exception when the data stored in the storage file is invalid","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException                     Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"    public void readFromStorage(TaskList tasks) throws ShimaException.StorageException, IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"            //Skips the first two lines of storage descriptions in the file","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"            sc.nextLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"            sc.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"                String[] tasksData \u003d sc.nextLine().split(DELIMITER);","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"                readData(tasks, tasksData);","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"            //Displays the to-do list if it is not empty","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"            if (tasks.size() \u003e 0) {","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"                System.out.println(LIST_ALERT_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"                tasks.printToDoList();","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"        } catch (FileNotFoundException ex) {","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"            //Creates a file called shimaStorage.txt if the file is not found","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"            createFile();","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"     * Handles the error when the data stored in the storage file contains invalid value","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"    public void handleStorageError(TaskList tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"        Scanner readInput \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"        System.out.println();","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"Take Note:\");","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"        ui.showMessage(STORAGE_ERROR_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"        readUserInput(tasks, readInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"     * Updates the storage file whenever tasks are updated","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"    public void updateStorage(TaskList tasks) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"        FileWriter fileWriter \u003d new FileWriter(file); //Clears all the texts in the file","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"        fileWriter.write(STORAGE_MESSAGE);","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"        for (Task t : tasks.getTasks()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"            String taskToSave \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"            String symbolForDone \u003d (t.getDone()) ? \"Y\" : \"N\";","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"            boolean canSave \u003d true;","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"            if (t instanceof Deadline) {","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"                taskToSave \u003d t.getClassType() + DELIMITER + symbolForDone + DELIMITER + t.getTask() + DELIMITER + t.getTime() +","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"                        System.lineSeparator();","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"            } else if (t instanceof Event) {","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"                taskToSave \u003d t.getClassType() + DELIMITER + symbolForDone + DELIMITER + t.getTask() + DELIMITER + t.getTime() +","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"                        System.lineSeparator();","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"            } else if (t instanceof ToDo) {","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"                taskToSave \u003d t.getClassType() + DELIMITER + symbolForDone + DELIMITER + t.getTask() + System.lineSeparator();","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"                ui.showMessage(UNEXPECTED_ERROR_MSG + t);","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"                canSave \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"            if (canSave) {","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"                fileWriter.write(taskToSave);","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"        fileWriter.close();","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"     * Appends the newly created task to the storage file","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception when error occurs during the write file process","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"    public void saveTaskToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"tryyang2001"},"content":"        FileWriter fileEditor \u003d new FileWriter(file, true); //Appends the existing file","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"tryyang2001"},"content":"        Task currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"tryyang2001"},"content":"        if (currentTask instanceof Deadline || currentTask instanceof Event) {","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"tryyang2001"},"content":"            String taskToSave \u003d currentTask.getClassType() + DELIMITER + \"N\" + DELIMITER + currentTask.getTask() + DELIMITER +","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"tryyang2001"},"content":"                    currentTask.getTime() + System.lineSeparator();","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"tryyang2001"},"content":"            fileEditor.write(taskToSave);","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"tryyang2001"},"content":"        } else if (currentTask instanceof ToDo) {","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"tryyang2001"},"content":"            String taskToSave \u003d currentTask.getClassType() + DELIMITER + \"N\" + DELIMITER + currentTask.getTask() + System.lineSeparator();","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"tryyang2001"},"content":"            fileEditor.write(taskToSave);","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"tryyang2001"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(CLASS_TYPE_MISMATCH_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"tryyang2001"},"content":"        fileEditor.close();","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"tryyang2001"},"content":"     * Reads data from the file if the file exists and contains lines","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"tryyang2001"},"content":"     * @throws ShimaException.StorageException Throws StorageException if the data stored is incorrect","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"tryyang2001"},"content":"    private void readData(TaskList tasks, String[] tasksData) throws ShimaException.StorageException {","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"tryyang2001"},"content":"        Task currentTask;","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"tryyang2001"},"content":"        switch (tasksData[0]) {","lastModifiedDate":"2021-09-15"},{"lineNumber":153,"author":{"gitId":"tryyang2001"},"content":"        case \"T\":","lastModifiedDate":"2021-09-15"},{"lineNumber":154,"author":{"gitId":"tryyang2001"},"content":"            tasks.add(new ToDo(tasksData[2]));","lastModifiedDate":"2021-09-15"},{"lineNumber":155,"author":{"gitId":"tryyang2001"},"content":"            currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"tryyang2001"},"content":"            //Updates the longestTaskDescription to ensure that the frames for to-do list can be printed correctly","lastModifiedDate":"2021-09-15"},{"lineNumber":157,"author":{"gitId":"tryyang2001"},"content":"            TaskList.longestTaskDescription \u003d Math.max(currentTask.getTask().length(), TaskList.longestTaskDescription);","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":159,"author":{"gitId":"tryyang2001"},"content":"        case \"D\":","lastModifiedDate":"2021-09-15"},{"lineNumber":160,"author":{"gitId":"tryyang2001"},"content":"            tasks.add(new Deadline(tasksData[2], tasksData[3]));","lastModifiedDate":"2021-09-15"},{"lineNumber":161,"author":{"gitId":"tryyang2001"},"content":"            currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"tryyang2001"},"content":"            TaskList.longestTaskDescription \u003d Math.max(\"(by: )\".length() + currentTask.toString().length(),","lastModifiedDate":"2021-09-25"},{"lineNumber":164,"author":{"gitId":"tryyang2001"},"content":"                    TaskList.longestTaskDescription);","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":166,"author":{"gitId":"tryyang2001"},"content":"        case \"E\":","lastModifiedDate":"2021-09-15"},{"lineNumber":167,"author":{"gitId":"tryyang2001"},"content":"            tasks.add(new Event(tasksData[2], tasksData[3]));","lastModifiedDate":"2021-09-15"},{"lineNumber":168,"author":{"gitId":"tryyang2001"},"content":"            currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"tryyang2001"},"content":"            TaskList.longestTaskDescription \u003d Math.max(currentTask.getTask().length() + \"(at: )\".length() + currentTask.getTime().length(),","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"tryyang2001"},"content":"                    TaskList.longestTaskDescription);","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-15"},{"lineNumber":172,"author":{"gitId":"tryyang2001"},"content":"        default:","lastModifiedDate":"2021-09-15"},{"lineNumber":173,"author":{"gitId":"tryyang2001"},"content":"            throw new ShimaException.StorageException();","lastModifiedDate":"2021-09-17"},{"lineNumber":174,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":175,"author":{"gitId":"tryyang2001"},"content":"        //Updates the status of the task (whether is done or not)","lastModifiedDate":"2021-09-26"},{"lineNumber":176,"author":{"gitId":"tryyang2001"},"content":"        if (tasksData[1].equals(\"Y\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":177,"author":{"gitId":"tryyang2001"},"content":"            currentTask.setDone();","lastModifiedDate":"2021-09-15"},{"lineNumber":178,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":179,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":180,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":181,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":182,"author":{"gitId":"tryyang2001"},"content":"     * Reads the user input and reacts accordingly","lastModifiedDate":"2021-09-15"},{"lineNumber":183,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":184,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks     The list class object that stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"tryyang2001"},"content":"     * @param readInput The scanner for input","lastModifiedDate":"2021-09-15"},{"lineNumber":186,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":187,"author":{"gitId":"tryyang2001"},"content":"    private void readUserInput(TaskList tasks, Scanner readInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\nDo you wish to continue by clearing all the previous data stored in the storage file? (Y/N) \");","lastModifiedDate":"2021-09-15"},{"lineNumber":189,"author":{"gitId":"tryyang2001"},"content":"        String answer \u003d readInput.nextLine();","lastModifiedDate":"2021-09-15"},{"lineNumber":190,"author":{"gitId":"tryyang2001"},"content":"        if (answer.equalsIgnoreCase(\"Y\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":191,"author":{"gitId":"tryyang2001"},"content":"            try {","lastModifiedDate":"2021-09-15"},{"lineNumber":192,"author":{"gitId":"tryyang2001"},"content":"                updateStorage(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"tryyang2001"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":194,"author":{"gitId":"tryyang2001"},"content":"                ui.showMessage(IOEXCEPTION_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"tryyang2001"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-09-15"},{"lineNumber":196,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":197,"author":{"gitId":"tryyang2001"},"content":"        } else if (answer.equalsIgnoreCase(\"N\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":198,"author":{"gitId":"tryyang2001"},"content":"            System.exit(1);","lastModifiedDate":"2021-09-15"},{"lineNumber":199,"author":{"gitId":"tryyang2001"},"content":"        } else {","lastModifiedDate":"2021-09-15"},{"lineNumber":200,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(WRONG_REPLY_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"tryyang2001"},"content":"            readUserInput(tasks, readInput);","lastModifiedDate":"2021-09-15"},{"lineNumber":202,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":203,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":204,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"tryyang2001":204}},{"path":"src/main/java/shima/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"//Stores task with deadline specified","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    public Deadline() {","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"        super();","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"        endTime \u003d null;","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    public Deadline(String task, String endTime) {","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"        this.endTime \u003d LocalDateTime.parse(endTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"     * Getter for private attribute endTime","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the LocalDateTime type value attribute endTime","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"    public LocalDateTime getEndTime() {","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        return endTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"     * Getter for the class type, retrieved from the enum TaskType","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the type of the current class, \u0027D\u0027 for deadline","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"    public String getClassType() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"        return TaskType.D.toString();","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"     * Method inherits from its superclass, display the LocalDateTime in string format","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the LocalDateTime attribute endTime in string and fixed format","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"    public String getTime() {","lastModifiedDate":"2021-09-15"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"        return endTime.format(dateTimeFormatter);","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"     * This method will prints task description and the date time in different format","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the deadline description with different format of date and time","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"        String amPm \u003d \"am\";","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"        String hour \u003d Integer.toString(endTime.getHour());","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"        if (endTime.getHour() \u003e 12) {","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"            amPm \u003d \"pm\";","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"            hour \u003d Integer.toString(endTime.getHour() - 12);","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"        return task + \" (by: \" + endTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \" \" + hour + \".\" +","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"                endTime.format(DateTimeFormatter.ofPattern(\"mm\")) + \" \" + amPm + \")\";","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":62}},{"path":"src/main/java/shima/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"    protected String period;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"    public Event() {","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"        super();","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"        period \u003d \"\";","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    public Event(String task, String period) {","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"        this.period \u003d period;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"     * Getter for the class type, retrieved from the enum TaskType","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the type of the current class, \u0027E\u0027 for event class type","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    public String getClassType() {","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"        return TaskType.E.toString();","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"     * Method inherits from its parent class, returns the period in string","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the attribute period in string","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"    public String getTime() {","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"        return this.period;","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"     * Formats the string when printing an event","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the string with fixed format that contains the task name and the period","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"        return task + \" (at: \" + period + \")\";","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":44}},{"path":"src/main/java/shima/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"    protected String task;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    //Constructor","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"    public Task() {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"        this.task \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"     * Abstract method that will return period/endTime for its subclasses event/deadline","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns nothing for this abstract method","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    public abstract String getTime();","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"     * Abstract method that will return the class type for its subclasses","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns nothing for this abstract method","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"    public abstract String getClassType();","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"     * Getter for task","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the attribute value task in string","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"    public String getTask() {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"        return task;","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"     * Getter for isDone","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the boolean attribute isDone","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"    public Boolean getDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"        return isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"     * Setter for isDone, used to mark task as done","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"tryyang2001":51}},{"path":"src/main/java/shima/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"import shima.command.ListCommand;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"import shima.design.UserInterface;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"import shima.storage.Storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"/**","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":" * The task list class that contains an array list and several methods such as print, delete and add","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":" */","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"public class TaskList {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"    public static final String INVALID_TASK_INDEX_MSG \u003d \"Sorry, the input task number is invalid, please try again! :(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"    public static final String INDEX_OUT_OF_BOUND_MSG \u003d \"Sorry, the input task number is out of the bound, please try again! :(\";","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"    public static final String UNEXPECTED_ERROR_MSG \u003d \"An unexpected error occurs when I try to update the file\";","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"    public static final String TASK_FINISHED_MSG \u003d \"\\tNice! You have finished all tasks! Time to chill~\";","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    public static final String UPDATE_STORAGE_ERROR_MSG \u003d \"An unexpected error occurs when I try to update the file\";","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"    public static final String DELETE_ALL_MSG \u003d \"All tasks have been removed! Time to chill?\";","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    public static int longestTaskDescription \u003d 0; //The length of the longest task description","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"    private final UserInterface ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"    public TaskList(Storage storage, UserInterface ui) {","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"     * Getter used to access the array list attribute","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the array list attribute value","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"        return tasks;","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"tryyang2001"},"content":"     * Mimics the toString behavior of the array list","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"tryyang2001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"tryyang2001"},"content":"        return tasks.toString();","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"tryyang2001"},"content":"     * Mimics the behavior of the size() method of the array list","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the size of the array list of the class attribute","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"tryyang2001"},"content":"    public int size() {","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"tryyang2001"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"tryyang2001"},"content":"     * Mimics the behavior get() method of the array list to access element in the array list attribute","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"tryyang2001"},"content":"     * @param index The index desired to access","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the task element in the array list attribute","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"tryyang2001"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"tryyang2001"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"tryyang2001"},"content":"     * Mimics the behavior of add() method of the array list to add new to-do type element to the array list attribute","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"tryyang2001"},"content":"     * @param task The new task added","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"tryyang2001"},"content":"    public void add(ToDo task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"tryyang2001"},"content":"     * Mimics the behavior of add() method of the array list to add new deadline type element to the array list attribute","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"tryyang2001"},"content":"     * @param task The new task added","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"tryyang2001"},"content":"    public void add(Deadline task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"tryyang2001"},"content":"     * Mimics the behavior of add() method of the array list to add new event type element to the array list attribute","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"tryyang2001"},"content":"     * @param task The new task added","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"tryyang2001"},"content":"    public void add(Event task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"tryyang2001"},"content":"     * Prints the to-do list with frames","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"tryyang2001"},"content":"    public void printToDoList() {","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"tryyang2001"},"content":"        final int MIN_LENGTH \u003d \" My to-do list: \".length();","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"tryyang2001"},"content":"        //if longestTaskDescription is shorter than the length of the string \"My to-do list: \", sets it to the length of the string","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"tryyang2001"},"content":"        if (longestTaskDescription \u003c MIN_LENGTH) {","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"tryyang2001"},"content":"            longestTaskDescription \u003d MIN_LENGTH;","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"tryyang2001"},"content":"        //Prints the to-do list","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"tryyang2001"},"content":"        drawUpperFrame();","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"tryyang2001"},"content":"        printTasks();","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"tryyang2001"},"content":"        drawLowerFrame();","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"tryyang2001"},"content":"     * Prints the upper frame of the to-do list and its default display string","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"tryyang2001"},"content":"    private void drawUpperFrame() {","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t\" + ListCommand.TOP_LEFT_CORNER); //the top left corner","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c longestTaskDescription + \"| [ ][ ] 100. \".length(); i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(ListCommand.TOP_RIGHT_CORNER);","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t| My to-do list: \");","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c longestTaskDescription + \"| [ ][ ] 100. \".length() - \"| My to-do list: \".length() + 1; i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"|\");","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"tryyang2001"},"content":"     * Prints the tasks stored in the array, the frame starts with \u0027|\u0027 and ends with \u0027|\u0027, the ending frame is always located at the position of the longest task description","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"tryyang2001"},"content":"    private void printTasks() {","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"tryyang2001"},"content":"            //Fill the first [] with class type, and the second [] with a \u0027X\u0027 if the task is completed","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"tryyang2001"},"content":"            String doneIcon \u003d (tasks.get(i).getDone()) ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"\\t| [\" + tasks.get(i).getClassType() + \"]\" + doneIcon + (i + 1) + \". \");","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"tryyang2001"},"content":"            //Calculates the required spacing for the current task as compared to the longest task description to print \u0027|\u0027","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"tryyang2001"},"content":"            int distanceToClosingFrame \u003d longestTaskDescription + \"| [ ][ ] 100. \".length() - (\"| [ ][ ] \" + (i + 1) + \". \").length() + 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"tryyang2001"},"content":"            System.out.printf(\"%1$-\" + distanceToClosingFrame + \"s\", tasks.get(i));","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"|\");","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"tryyang2001"},"content":"     * Prints the bottom frame of the to-do list and the guide for reading the to-do list","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"tryyang2001"},"content":"    private void drawLowerFrame() {","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"tryyang2001"},"content":"        System.out.print(\"\\t\" + ListCommand.BOTTOM_LEFT_CORNER);","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"tryyang2001"},"content":"        for (int i \u003d 0; i \u003c longestTaskDescription + \"| [ ][ ] 100. \".length(); i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(ListCommand.BOTTOM_RIGHT_CORNER);","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"tryyang2001"},"content":"        //Shows the guide for understanding the to-do list","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\tFor your knowledge, \");","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\tthe first [ ] indicates the type of the task (\u0027T\u0027 for to-do, \u0027D\u0027 for deadline, \u0027E\u0027 for event)\");","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"tryyang2001"},"content":"        System.out.println(\"\\tthe second [ ] indicates whether the task is completed:\\n\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"tryyang2001"},"content":"                \"\\t[X] when the task is marked completed\\t[ ] when the task is not done.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"tryyang2001"},"content":"     * Adds a to-do to the list if there is no error","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"tryyang2001"},"content":"     * @param command The user input command","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"tryyang2001"},"content":"     * @param words   The array of words that compose the command","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception if there is error occurs during saving","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"tryyang2001"},"content":"    public void createToDo(String command, String[] words) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(new ToDo(command.replace(words[0], \"\").trim()));","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"tryyang2001"},"content":"        if (longestTaskDescription \u003c command.replace(words[0], \"\").trim().length()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"tryyang2001"},"content":"            longestTaskDescription \u003d command.replace(words[0], \"\").trim().length();","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"tryyang2001"},"content":"        storage.saveTaskToFile(this);","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"tryyang2001"},"content":"        Task currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"tryyang2001"},"content":"        ui.showMessage(\" Class type [\" + currentTask.getClassType() + \"] \\\"\" + currentTask + \"\\\" has been added to the list!\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"tryyang2001"},"content":"                \" (\" + tasks.size() + \" tasks in total)\");","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"tryyang2001"},"content":"     * Creates an event to the list","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"tryyang2001"},"content":"     * @param taskName The name of the task","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"tryyang2001"},"content":"     * @param time     The given event period","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception if there is error occurs during saving data","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"tryyang2001"},"content":"    public void createEvent(String taskName, String time) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(new Event(taskName, time));","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"tryyang2001"},"content":"        if (longestTaskDescription \u003c taskName.length() + time.length()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"tryyang2001"},"content":"            longestTaskDescription \u003d taskName.length() + \"(at: )\".length() + time.length();","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"tryyang2001"},"content":"        storage.saveTaskToFile(this);","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"tryyang2001"},"content":"        Task currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"tryyang2001"},"content":"        ui.showMessage(\" Class type [\" + currentTask.getClassType() + \"] \\\"\" + currentTask + \"\\\" has been added to the list!\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"tryyang2001"},"content":"                \" (\" + tasks.size() + \" tasks in total)\");","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"tryyang2001"},"content":"     * Creates a deadline to the list","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"tryyang2001"},"content":"     * @param taskName The name of the task","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"tryyang2001"},"content":"     * @param time     The given deadline","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"tryyang2001"},"content":"     * @throws IOException Throws this exception if there is error occurs during saving data","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"tryyang2001"},"content":"    public void createDeadline(String taskName, String time) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"tryyang2001"},"content":"        tasks.add(new Deadline(taskName, time));","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"tryyang2001"},"content":"        Deadline deadline \u003d (Deadline) tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":203,"author":{"gitId":"tryyang2001"},"content":"        int deadlineDescriptionLength \u003d deadline.toString().length();","lastModifiedDate":"2021-09-25"},{"lineNumber":204,"author":{"gitId":"tryyang2001"},"content":"        if (longestTaskDescription \u003c deadlineDescriptionLength) {","lastModifiedDate":"2021-09-25"},{"lineNumber":205,"author":{"gitId":"tryyang2001"},"content":"            longestTaskDescription \u003d deadlineDescriptionLength;","lastModifiedDate":"2021-09-25"},{"lineNumber":206,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"tryyang2001"},"content":"        storage.saveTaskToFile(this);","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"tryyang2001"},"content":"        Task currentTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"tryyang2001"},"content":"        ui.showMessage(\" Class type [\" + currentTask.getClassType() + \"] \\\"\" + currentTask + \"\\\" has been added to the list!\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"tryyang2001"},"content":"                \" (\" + tasks.size() + \" tasks in total)\");","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"tryyang2001"},"content":"     * Deletes the task(s) according to the task index/indices provided","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":216,"author":{"gitId":"tryyang2001"},"content":"     * @param words The array of words that compose the input command","lastModifiedDate":"2021-09-23"},{"lineNumber":217,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":218,"author":{"gitId":"tryyang2001"},"content":"    public void deleteTasks(String[] words) {","lastModifiedDate":"2021-09-23"},{"lineNumber":219,"author":{"gitId":"tryyang2001"},"content":"        switch (words.length) {","lastModifiedDate":"2021-09-23"},{"lineNumber":220,"author":{"gitId":"tryyang2001"},"content":"        case 1:","lastModifiedDate":"2021-09-23"},{"lineNumber":221,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(\"Sorry, the input task index to delete is missing!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":223,"author":{"gitId":"tryyang2001"},"content":"        case 2:","lastModifiedDate":"2021-09-23"},{"lineNumber":224,"author":{"gitId":"tryyang2001"},"content":"            if (words[1].equalsIgnoreCase((\"all\"))) {","lastModifiedDate":"2021-09-23"},{"lineNumber":225,"author":{"gitId":"tryyang2001"},"content":"                deleteAllTasks(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":226,"author":{"gitId":"tryyang2001"},"content":"            } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":227,"author":{"gitId":"tryyang2001"},"content":"                deleteSingleTask(tasks, words[1]);","lastModifiedDate":"2021-09-23"},{"lineNumber":228,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":229,"author":{"gitId":"tryyang2001"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"tryyang2001"},"content":"        default:","lastModifiedDate":"2021-09-23"},{"lineNumber":231,"author":{"gitId":"tryyang2001"},"content":"            deleteMultipleTasks(tasks, words);","lastModifiedDate":"2021-09-23"},{"lineNumber":232,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"tryyang2001"},"content":"            storage.updateStorage(this);","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"tryyang2001"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":236,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(UPDATE_STORAGE_ERROR_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":237,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"\\t\");","lastModifiedDate":"2021-09-23"},{"lineNumber":238,"author":{"gitId":"tryyang2001"},"content":"            ioException.printStackTrace();","lastModifiedDate":"2021-09-23"},{"lineNumber":239,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":240,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":241,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":242,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":243,"author":{"gitId":"tryyang2001"},"content":"     * Deletes all the tasks stored","lastModifiedDate":"2021-09-23"},{"lineNumber":244,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":245,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stored all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":246,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":247,"author":{"gitId":"tryyang2001"},"content":"    private void deleteAllTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":248,"author":{"gitId":"tryyang2001"},"content":"        tasks.clear();","lastModifiedDate":"2021-09-23"},{"lineNumber":249,"author":{"gitId":"tryyang2001"},"content":"        ui.showMessage(DELETE_ALL_MSG);","lastModifiedDate":"2021-09-25"},{"lineNumber":250,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":251,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":252,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":253,"author":{"gitId":"tryyang2001"},"content":"     * Deletes the specific task when there is only one task specified","lastModifiedDate":"2021-09-23"},{"lineNumber":254,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":255,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stored all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":256,"author":{"gitId":"tryyang2001"},"content":"     * @param word  The array of words that compose the input command","lastModifiedDate":"2021-09-23"},{"lineNumber":257,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":258,"author":{"gitId":"tryyang2001"},"content":"    private void deleteSingleTask(ArrayList\u003cTask\u003e tasks, String word) {","lastModifiedDate":"2021-09-23"},{"lineNumber":259,"author":{"gitId":"tryyang2001"},"content":"        int index;","lastModifiedDate":"2021-09-23"},{"lineNumber":260,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":261,"author":{"gitId":"tryyang2001"},"content":"            //Compiler throws NumberFormatException if word is not a digit character","lastModifiedDate":"2021-09-23"},{"lineNumber":262,"author":{"gitId":"tryyang2001"},"content":"            index \u003d Integer.parseInt(word);","lastModifiedDate":"2021-09-23"},{"lineNumber":263,"author":{"gitId":"tryyang2001"},"content":"            try {","lastModifiedDate":"2021-09-23"},{"lineNumber":264,"author":{"gitId":"tryyang2001"},"content":"                String doneIcon \u003d (tasks.get(index - 1).getDone()) ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2021-09-23"},{"lineNumber":265,"author":{"gitId":"tryyang2001"},"content":"                ui.showMessage(\"I have removed this task: [\" + tasks.get(index - 1).getClassType() + \"]\" + doneIcon","lastModifiedDate":"2021-09-23"},{"lineNumber":266,"author":{"gitId":"tryyang2001"},"content":"                        + tasks.get(index - 1));","lastModifiedDate":"2021-09-23"},{"lineNumber":267,"author":{"gitId":"tryyang2001"},"content":"                tasks.remove(index - 1);","lastModifiedDate":"2021-09-23"},{"lineNumber":268,"author":{"gitId":"tryyang2001"},"content":"                if (tasks.size() \u003e 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":269,"author":{"gitId":"tryyang2001"},"content":"                    System.out.println(\"You have left \" + tasks.size() + \" tasks to do!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":270,"author":{"gitId":"tryyang2001"},"content":"                } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":271,"author":{"gitId":"tryyang2001"},"content":"                    System.out.println(TASK_FINISHED_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":272,"author":{"gitId":"tryyang2001"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":273,"author":{"gitId":"tryyang2001"},"content":"            } catch (IndexOutOfBoundsException indexOutOfBoundsException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":274,"author":{"gitId":"tryyang2001"},"content":"                ui.showMessage(INDEX_OUT_OF_BOUND_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":275,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":276,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":277,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INVALID_TASK_INDEX_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":278,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":279,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":280,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":281,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":282,"author":{"gitId":"tryyang2001"},"content":"     * Deletes multiple tasks when there are multiple task indices provided","lastModifiedDate":"2021-09-23"},{"lineNumber":283,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":284,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that stored all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":285,"author":{"gitId":"tryyang2001"},"content":"     * @param words The array of words that compose the input command","lastModifiedDate":"2021-09-23"},{"lineNumber":286,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":287,"author":{"gitId":"tryyang2001"},"content":"    private void deleteMultipleTasks(ArrayList\u003cTask\u003e tasks, String[] words) {","lastModifiedDate":"2021-09-23"},{"lineNumber":288,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":289,"author":{"gitId":"tryyang2001"},"content":"            ArrayList\u003cInteger\u003e taskIndices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":290,"author":{"gitId":"tryyang2001"},"content":"            //Checks if the input task indices are valid","lastModifiedDate":"2021-09-23"},{"lineNumber":291,"author":{"gitId":"tryyang2001"},"content":"            for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":292,"author":{"gitId":"tryyang2001"},"content":"                taskIndices.add(Integer.parseInt(words[i]) - 1); //throws NumberFormatException if input is not digit character","lastModifiedDate":"2021-09-23"},{"lineNumber":293,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":294,"author":{"gitId":"tryyang2001"},"content":"            try {","lastModifiedDate":"2021-09-23"},{"lineNumber":295,"author":{"gitId":"tryyang2001"},"content":"                //Deletes the task with the largest task index first","lastModifiedDate":"2021-09-23"},{"lineNumber":296,"author":{"gitId":"tryyang2001"},"content":"                taskIndices.sort(Collections.reverseOrder());","lastModifiedDate":"2021-09-23"},{"lineNumber":297,"author":{"gitId":"tryyang2001"},"content":"                for (Integer i : taskIndices) {","lastModifiedDate":"2021-09-23"},{"lineNumber":298,"author":{"gitId":"tryyang2001"},"content":"                    String doneIcon \u003d (tasks.get(i).getDone()) ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2021-09-25"},{"lineNumber":299,"author":{"gitId":"tryyang2001"},"content":"                    ui.showMessage(\"I have removed this task: [\" + tasks.get(i).getClassType() + \"]\" + doneIcon + tasks.get(i));","lastModifiedDate":"2021-09-25"},{"lineNumber":300,"author":{"gitId":"tryyang2001"},"content":"                    tasks.remove((int) i);","lastModifiedDate":"2021-09-23"},{"lineNumber":301,"author":{"gitId":"tryyang2001"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":302,"author":{"gitId":"tryyang2001"},"content":"                //Prints the message according to tasks left","lastModifiedDate":"2021-09-23"},{"lineNumber":303,"author":{"gitId":"tryyang2001"},"content":"                if (tasks.size() \u003e 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":304,"author":{"gitId":"tryyang2001"},"content":"                    System.out.println(\"You have left \" + tasks.size() + \" tasks to do!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":305,"author":{"gitId":"tryyang2001"},"content":"                } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":306,"author":{"gitId":"tryyang2001"},"content":"                    System.out.println(TASK_FINISHED_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":307,"author":{"gitId":"tryyang2001"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":308,"author":{"gitId":"tryyang2001"},"content":"            } catch (IndexOutOfBoundsException indexOutOfBoundsException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":309,"author":{"gitId":"tryyang2001"},"content":"                ui.showMessage(INDEX_OUT_OF_BOUND_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":310,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":311,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":312,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INVALID_TASK_INDEX_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":313,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":314,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":315,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":316,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":317,"author":{"gitId":"tryyang2001"},"content":"     * Marks the given tasks as done, and handles the possible errors if the input task number is not valid","lastModifiedDate":"2021-09-23"},{"lineNumber":318,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":319,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks The array list that contains all the tasks stored inside the to-do list","lastModifiedDate":"2021-09-23"},{"lineNumber":320,"author":{"gitId":"tryyang2001"},"content":"     * @param words The array of words that compose the input command","lastModifiedDate":"2021-09-23"},{"lineNumber":321,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":322,"author":{"gitId":"tryyang2001"},"content":"    public void markAsDone(TaskList tasks, String[] words, Storage storage) {","lastModifiedDate":"2021-09-23"},{"lineNumber":323,"author":{"gitId":"tryyang2001"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":324,"author":{"gitId":"tryyang2001"},"content":"            for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":325,"author":{"gitId":"tryyang2001"},"content":"                //check if the input character after the word \"done\" is integer value","lastModifiedDate":"2021-09-23"},{"lineNumber":326,"author":{"gitId":"tryyang2001"},"content":"                int taskIndex \u003d Integer.parseInt(words[i]);","lastModifiedDate":"2021-09-23"},{"lineNumber":327,"author":{"gitId":"tryyang2001"},"content":"                showTaskDoneMessage(tasks, taskIndex);","lastModifiedDate":"2021-09-23"},{"lineNumber":328,"author":{"gitId":"tryyang2001"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":329,"author":{"gitId":"tryyang2001"},"content":"            storage.updateStorage(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":330,"author":{"gitId":"tryyang2001"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":331,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INVALID_TASK_INDEX_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":332,"author":{"gitId":"tryyang2001"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":333,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(INDEX_OUT_OF_BOUND_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":334,"author":{"gitId":"tryyang2001"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-09-23"},{"lineNumber":335,"author":{"gitId":"tryyang2001"},"content":"            ui.showMessage(UNEXPECTED_ERROR_MSG);","lastModifiedDate":"2021-09-23"},{"lineNumber":336,"author":{"gitId":"tryyang2001"},"content":"            System.out.print(\"\\t\");","lastModifiedDate":"2021-09-23"},{"lineNumber":337,"author":{"gitId":"tryyang2001"},"content":"            ioException.printStackTrace();","lastModifiedDate":"2021-09-23"},{"lineNumber":338,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":339,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":340,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":341,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":342,"author":{"gitId":"tryyang2001"},"content":"     * Shows the message to indicate that the task is marked as done","lastModifiedDate":"2021-09-23"},{"lineNumber":343,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":344,"author":{"gitId":"tryyang2001"},"content":"     * @param tasks      The array list which stores all the tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":345,"author":{"gitId":"tryyang2001"},"content":"     * @param taskNumber The given task number to mark as done","lastModifiedDate":"2021-09-23"},{"lineNumber":346,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":347,"author":{"gitId":"tryyang2001"},"content":"    private static void showTaskDoneMessage(TaskList tasks, int taskNumber) {","lastModifiedDate":"2021-09-23"},{"lineNumber":348,"author":{"gitId":"tryyang2001"},"content":"        if (!tasks.get(taskNumber - 1).getDone()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":349,"author":{"gitId":"tryyang2001"},"content":"            tasks.get(taskNumber - 1).setDone();","lastModifiedDate":"2021-09-23"},{"lineNumber":350,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\tHooray! Task number \" + taskNumber + \" has been marked completed!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":351,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\t[✔] \" + tasks.get(taskNumber - 1).getTask());","lastModifiedDate":"2021-09-23"},{"lineNumber":352,"author":{"gitId":"tryyang2001"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":353,"author":{"gitId":"tryyang2001"},"content":"            System.out.println(\"\\tThe task number \" + taskNumber + \" - \\\"\" + tasks.get(taskNumber - 1).getTask() + \"\\\" has already been done!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":354,"author":{"gitId":"tryyang2001"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":355,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":356,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"tryyang2001":356}},{"path":"src/main/java/shima/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.task;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"//The enum that contains all the possible task class types","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"public enum TaskType {","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"    T, D, E","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"tryyang2001":6}},{"path":"src/main/java/shima/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"package shima.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"//Stores task without specific time","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"    public ToDo() {","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"        super();","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"    public ToDo(String task) {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"     * Getter for the class type, retrieved from the enum TaskType","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the type of the current class, \u0027T\u0027 for to-do class type","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"tryyang2001"},"content":"    public String getClassType() {","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"tryyang2001"},"content":"        return TaskType.T.toString();","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"tryyang2001"},"content":"     * Method inherits from its parent class, it has no meaning in this to-do class","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns a null value since to-do stores no time","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"tryyang2001"},"content":"    public String getTime() {","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"tryyang2001"},"content":"        return \"\";","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"tryyang2001"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"tryyang2001"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"tryyang2001"},"content":"     * Formats the string when printing a to-do task","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"tryyang2001"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"tryyang2001"},"content":"     * @return Returns the string with fixed format that contains the task description","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"tryyang2001"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"tryyang2001"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"tryyang2001"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"tryyang2001"},"content":"        return task;","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"tryyang2001"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"tryyang2001"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":41}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tryyang2001"},"content":"view -h","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"tryyang2001"},"content":"todo play games","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"tryyang2001"},"content":"deadline do assignment /by Sunday 6pm","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"tryyang2001"},"content":"event attend lecture /by Friday 4-6pm","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"tryyang2001"},"content":"false input","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"tryyang2001"},"content":"todo","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"tryyang2001"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"tryyang2001"},"content":"done 2 3","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"delete 2","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"tryyang2001"},"content":"delete","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"tryyang2001"},"content":"delete all","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"tryyang2001"},"content":"list","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"tryyang2001"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"tryyang2001":17}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"tryyang2001"},"content":"    rm EXPECTED.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"tryyang2001"},"content":"# run the program, feed commands from input.txt file and redirect the output to the EXPECTED.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"tryyang2001"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e EXPECTED.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"tryyang2001"},"content":"dos2unix EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"tryyang2001"},"content":"diff EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tryyang2001":5,"-":33}}]
