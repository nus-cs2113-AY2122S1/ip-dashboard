[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":"    protected String datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wutdequack"},"content":"     * Create Deadline with given name and associated datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wutdequack"},"content":"     * @param name The description of the Deadline task.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wutdequack"},"content":"     * @param datetime The datetime of when the task is due.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wutdequack"},"content":"    public Deadline(String name, String datetime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wutdequack"},"content":"        super(name);","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wutdequack"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wutdequack"},"content":"     * Get the current due date and time of the Deadline task.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wutdequack"},"content":"     * @return The string with the datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wutdequack"},"content":"    public String getDatetime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wutdequack"},"content":"        return datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wutdequack"},"content":"     * Set the current due date and time of the Deadline task.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wutdequack"},"content":"     * @param datetime The string with the datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wutdequack"},"content":"    public void setDatetime(String datetime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wutdequack"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"wutdequack"},"content":"     * Get the Item type which is D in this case.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"wutdequack"},"content":"     * @return A string \"D\".","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wutdequack"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wutdequack"},"content":"    public String getItemType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wutdequack"},"content":"        return \"D\";","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"wutdequack"},"content":"     * Changes a Task into a human-readable format.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"wutdequack"},"content":"     * @return A formatted String of the Deadline, its status, type, description and datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wutdequack"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wutdequack"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wutdequack"},"content":"        return String.format(\"%s (by: %s)\", super.toString(), datetime);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"wutdequack"},"content":"     * Changes a Task into a human-readable format to be stored in file.","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"wutdequack"},"content":"     * @return A formatted String of the Deadline, its status, type, description and datetime.","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"wutdequack"},"content":"    @Override","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"wutdequack"},"content":"    public String toFileStringFormat() {","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"wutdequack"},"content":"        return String.format(\"%s | %s\", super.toFileStringFormat(), datetime);","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"wutdequack"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"wutdequack":56}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":"    protected String datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wutdequack"},"content":"     * Create Event with given name and associated datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wutdequack"},"content":"     * @param name The description of the Event task.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wutdequack"},"content":"     * @param datetime The datetime of when the task is due.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wutdequack"},"content":"    public Event(String name, String datetime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wutdequack"},"content":"        super(name);","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wutdequack"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wutdequack"},"content":"     * Get the current due date and time of the Event task.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wutdequack"},"content":"     * @return The string with the datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wutdequack"},"content":"    public String getDatetime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wutdequack"},"content":"        return datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"wutdequack"},"content":"     * Set the current due date and time of the Event task.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"wutdequack"},"content":"     * @param datetime The string with the datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"wutdequack"},"content":"    public void setDatetime(String datetime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"wutdequack"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"wutdequack"},"content":"     * Get the Item type which is E in this case.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"wutdequack"},"content":"     * @return A string \"E\".","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"wutdequack"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"wutdequack"},"content":"    public String getItemType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"wutdequack"},"content":"        return \"E\";","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"wutdequack"},"content":"     * Changes a Task into a human-readable format.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"wutdequack"},"content":"     * @return A formatted String of the Event, its status, type, description and datetime.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"wutdequack"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"wutdequack"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"wutdequack"},"content":"        return String.format(\"%s (at: %s)\", super.toString(), datetime);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":48,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":49,"author":{"gitId":"wutdequack"},"content":"     * Changes a Task into a human-readable format to be stored in file.","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"wutdequack"},"content":"     * @return A formatted String of the Event, its status, type, description and datetime.","lastModifiedDate":"2021-09-15"},{"lineNumber":51,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":52,"author":{"gitId":"wutdequack"},"content":"    @Override","lastModifiedDate":"2021-09-15"},{"lineNumber":53,"author":{"gitId":"wutdequack"},"content":"    public String toFileStringFormat() {","lastModifiedDate":"2021-09-15"},{"lineNumber":54,"author":{"gitId":"wutdequack"},"content":"        return String.format(\"%s | %s\", super.toFileStringFormat(), datetime);","lastModifiedDate":"2021-09-15"},{"lineNumber":55,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":56,"author":{"gitId":"wutdequack"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"wutdequack":56}},{"path":"src/main/java/InsufficientParametersException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"public class InsufficientParametersException extends Exception {","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":"    public InsufficientParametersException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"wutdequack":4}},{"path":"src/main/java/MissingVariablesException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"public class MissingVariablesException extends Exception {","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":"    public MissingVariablesException() {","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"wutdequack":4}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":" * Represents a Task.","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"wutdequack"},"content":"    private String name;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"wutdequack"},"content":"    private boolean isCompleted;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"wutdequack"},"content":"     * Create Task with specified name.","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"wutdequack"},"content":"     * @param name The name of task.","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"wutdequack"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"wutdequack"},"content":"        setName(name);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"wutdequack"},"content":"        setCompleted(false);","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"wutdequack"},"content":"     * Gets the task\u0027s name.","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"wutdequack"},"content":"     * @return A string representing the task\u0027s name.","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"wutdequack"},"content":"    public String getName() {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"wutdequack"},"content":"        return name;","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"wutdequack"},"content":"     * Gets the potential task completion status.","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"wutdequack"},"content":"     * @return A boolean value representing the task\u0027s completion status.","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"wutdequack"},"content":"    public boolean getCompleted() {","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"wutdequack"},"content":"        return isCompleted;","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"wutdequack"},"content":"     * Set the task\u0027s last name.","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"wutdequack"},"content":"     * @param name A string containing the task\u0027s name.","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"wutdequack"},"content":"    public void setName(String name) {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"wutdequack"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"wutdequack"},"content":"     * Set the task\u0027s completion status.","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"wutdequack"},"content":"     * @param isCompleted A boolean containing the task\u0027s completion status.","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"wutdequack"},"content":"    public void setCompleted(boolean isCompleted) {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"wutdequack"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // @@author unknown","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // Reused from https://nus-cs2113-ay2122s1.github.io/website/schedule/week3/project.html","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Get the task\u0027s completion status formatted into.","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * If isCompleted is true, return \"X\" else returns \" \".","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return A string representing the status.","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // Mark done task with X","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return (isCompleted ? \"X\" : \" \");","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Get the Item type.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns empty string for normal Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Meant to be polymorphed.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @return An empty string \" \"","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public String getItemType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return \" \";","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Changes a Task into a human-readable format.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @return A formatted String of the Task, its status, type and description.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return String.format(\"[%s][%s] %s\", getItemType(), getStatusIcon(), name);","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Changes a Task into a human-readable format to be stored in file.","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @return A formatted String of the Task, its status, type and description.","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public String toFileStringFormat() {","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return String.format(\"%s | %s | %s\", getItemType(), getStatusIcon(), name);","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"wutdequack":48,"-":40}},{"path":"src/main/java/Terminator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"import java.io.File;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"import java.util.StringJoiner;","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"wutdequack"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"wutdequack"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"wutdequack"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wutdequack"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"wutdequack"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"wutdequack"},"content":"public class Terminator {","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"wutdequack"},"content":"     * Initialize the scanner to be used globally.","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"wutdequack"},"content":"    private static final Scanner scanObject \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"wutdequack"},"content":"     * Keywords for commands.","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"wutdequack"},"content":"    private static final String BYE_STRING \u003d \"BYE\";","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"wutdequack"},"content":"    private static final String DONE_STRING \u003d \"DONE\";","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"wutdequack"},"content":"    private static final String LIST_STRING \u003d \"LIST\";","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"wutdequack"},"content":"    private static final String TODO_STRING \u003d \"TODO\";","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"wutdequack"},"content":"    private static final String EVENT_STRING \u003d \"EVENT\";","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"wutdequack"},"content":"    private static final String DELETE_STRING \u003d \"DELETE\";","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"wutdequack"},"content":"    private static final String DEADLINE_STRING \u003d \"DEADLINE\";","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"wutdequack"},"content":"     * List of constants used to define who is speaking.","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"wutdequack"},"content":"    public static final String TERMINATOR_STRING \u003d \"[The Terminator]\";","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"wutdequack"},"content":"    public static final String USER_STRING \u003d \"[User]\";","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"wutdequack"},"content":"     * List of constants used in extractNameDateTime","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"wutdequack"},"content":"    public static final String BY_KEYWORD \u003d \"/by\";","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"wutdequack"},"content":"    public static final String AT_KEYWORD \u003d \"/at\";","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"wutdequack"},"content":"    public static final String TODO_KEYWORD \u003d \"todo\";","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"wutdequack"},"content":"    public static final String EVENT_KEYWORD \u003d \"event\";","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"wutdequack"},"content":"    public static final String DEADLINE_KEYWORD \u003d \"deadline\";","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"wutdequack"},"content":"     * List of constants used in formatWithHeading.","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"wutdequack"},"content":"    public static final int TERMINATOR_FORMATTING \u003d 0;","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"wutdequack"},"content":"    public static final int USER_FORMATTING \u003d 1;","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"wutdequack"},"content":"     * List of constants used in tokenizing user input.","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"wutdequack"},"content":"    public static final int KEYWORD_INDEX \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"wutdequack"},"content":"    public static final int TASK_NUMBER_INDEX \u003d 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"wutdequack"},"content":"     * List of constants used to identify Event Type for createEvent","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"wutdequack"},"content":"    public static final String TODO_TYPE \u003d \"T\";","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"wutdequack"},"content":"    public static final String EVENT_TYPE \u003d \"E\";","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"wutdequack"},"content":"    public static final String NORMAL_TYPE \u003d \"N\";","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"wutdequack"},"content":"    public static final String DEADLINE_TYPE \u003d \"D\";","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"wutdequack"},"content":"     * List of constants used to show index of taskName and dateTime from retrieval list","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"wutdequack"},"content":"    public static final int TASK_NAME_INDEX \u003d 0;","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"wutdequack"},"content":"    public static final int DATE_TIME_INDEX \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"wutdequack"},"content":"    public static final int COMPLETION_INDEX \u003d 2;","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"wutdequack"},"content":"     * Global variable used to show if loop to get user input should continue running.","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"wutdequack"},"content":"    public static Boolean toContinue \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"wutdequack"},"content":"     * Global Array List of all tasks created by the user.","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"wutdequack"},"content":"    public static ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":82,"author":{"gitId":"wutdequack"},"content":"     * Global File Path to save and retrieve Task Records","lastModifiedDate":"2021-09-15"},{"lineNumber":83,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"wutdequack"},"content":"    public static String DIR_LOCATION \u003d \"./data\";","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"wutdequack"},"content":"    public static String FILE_LOCATION \u003d \"./data/records.txt\";","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":88,"author":{"gitId":"wutdequack"},"content":"     * Global variables used to determine if input for Task Creation is from file or from user","lastModifiedDate":"2021-09-15"},{"lineNumber":89,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":90,"author":{"gitId":"wutdequack"},"content":"    public static int FROM_USER \u003d 0;","lastModifiedDate":"2021-09-15"},{"lineNumber":91,"author":{"gitId":"wutdequack"},"content":"    public static int FROM_FILE \u003d 1;","lastModifiedDate":"2021-09-15"},{"lineNumber":92,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":93,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":94,"author":{"gitId":"wutdequack"},"content":"     * Global variable to show the deliminator for strings stored in the file format","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"wutdequack"},"content":"    public static String DELIMINATOR_FOR_FILE \u003d \" | \";","lastModifiedDate":"2021-09-15"},{"lineNumber":97,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":98,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"wutdequack"},"content":"     * Utilizes user input to extract Task Name and UserInput.","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"wutdequack"},"content":"     * @param userInput The string given by the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":101,"author":{"gitId":"wutdequack"},"content":"     * @param eventType The type of task to extract based on.","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"wutdequack"},"content":"     * @return String array containing userinput and eventType.","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"wutdequack"},"content":"    private static String[] extractNameDateTime(String userInput, String eventType) {","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"wutdequack"},"content":"        String[] returnArray \u003d new String[3];","lastModifiedDate":"2021-09-15"},{"lineNumber":106,"author":{"gitId":"wutdequack"},"content":"        if (Objects.equals(eventType, DEADLINE_TYPE)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"wutdequack"},"content":"            // Get indexes to substring","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"wutdequack"},"content":"            int startOfByIndex \u003d userInput.indexOf(BY_KEYWORD);","lastModifiedDate":"2021-09-02"},{"lineNumber":109,"author":{"gitId":"wutdequack"},"content":"            int endOfByIndex \u003d startOfByIndex + 3;","lastModifiedDate":"2021-09-03"},{"lineNumber":110,"author":{"gitId":"wutdequack"},"content":"            int endOfDeadlineStringIndex \u003d userInput.indexOf(DEADLINE_KEYWORD) + 8;","lastModifiedDate":"2021-09-03"},{"lineNumber":111,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"wutdequack"},"content":"            // Get specific task_name and date_time","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"wutdequack"},"content":"            String taskName \u003d userInput.substring(endOfDeadlineStringIndex, startOfByIndex).strip();","lastModifiedDate":"2021-09-02"},{"lineNumber":114,"author":{"gitId":"wutdequack"},"content":"            String dateTime \u003d userInput.substring(endOfByIndex).strip();","lastModifiedDate":"2021-09-02"},{"lineNumber":115,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"wutdequack"},"content":"            // Place values into array","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"wutdequack"},"content":"            returnArray[TASK_NAME_INDEX] \u003d taskName;","lastModifiedDate":"2021-09-02"},{"lineNumber":118,"author":{"gitId":"wutdequack"},"content":"            returnArray[DATE_TIME_INDEX] \u003d dateTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":119,"author":{"gitId":"wutdequack"},"content":"        } else if (Objects.equals(eventType, EVENT_TYPE)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"wutdequack"},"content":"            // Get indexes to substring","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"wutdequack"},"content":"            int startOfAtIndex \u003d userInput.indexOf(AT_KEYWORD);","lastModifiedDate":"2021-09-02"},{"lineNumber":122,"author":{"gitId":"wutdequack"},"content":"            int endOfAtIndex \u003d startOfAtIndex + 3;","lastModifiedDate":"2021-09-03"},{"lineNumber":123,"author":{"gitId":"wutdequack"},"content":"            int endOfEventStringIndex \u003d userInput.indexOf(EVENT_KEYWORD) + 5;","lastModifiedDate":"2021-09-03"},{"lineNumber":124,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"wutdequack"},"content":"            // Get specific task_name and date_time","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"wutdequack"},"content":"            String taskName \u003d userInput.substring(endOfEventStringIndex, startOfAtIndex).strip();","lastModifiedDate":"2021-09-02"},{"lineNumber":127,"author":{"gitId":"wutdequack"},"content":"            String dateTime \u003d userInput.substring(endOfAtIndex).strip();","lastModifiedDate":"2021-09-02"},{"lineNumber":128,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"wutdequack"},"content":"            // Place values into array","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"wutdequack"},"content":"            returnArray[TASK_NAME_INDEX] \u003d taskName;","lastModifiedDate":"2021-09-02"},{"lineNumber":131,"author":{"gitId":"wutdequack"},"content":"            returnArray[DATE_TIME_INDEX] \u003d dateTime;","lastModifiedDate":"2021-09-02"},{"lineNumber":132,"author":{"gitId":"wutdequack"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"wutdequack"},"content":"            // Extract values for ToDo","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"wutdequack"},"content":"            int endOfToDoStringIndex \u003d userInput.indexOf(TODO_KEYWORD) + 4;","lastModifiedDate":"2021-09-03"},{"lineNumber":135,"author":{"gitId":"wutdequack"},"content":"            String taskName \u003d userInput.substring(endOfToDoStringIndex).strip();","lastModifiedDate":"2021-09-02"},{"lineNumber":136,"author":{"gitId":"wutdequack"},"content":"            returnArray[TASK_NAME_INDEX] \u003d taskName;","lastModifiedDate":"2021-09-02"},{"lineNumber":137,"author":{"gitId":"wutdequack"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"wutdequack"},"content":"        return returnArray;","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"wutdequack"},"content":"     * Prints response back to user of task that is modified.","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"wutdequack"},"content":"     * @param taskNumber The index of the task to be updated.","lastModifiedDate":"2021-09-02"},{"lineNumber":144,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"wutdequack"},"content":"    private static void printUpdateMessage(int taskNumber) {","lastModifiedDate":"2021-09-02"},{"lineNumber":146,"author":{"gitId":"wutdequack"},"content":"        Task currentTask \u003d tasksList.get(taskNumber);","lastModifiedDate":"2021-09-02"},{"lineNumber":147,"author":{"gitId":"wutdequack"},"content":"        System.out.println(\"Great! The following item has been marked as completed\" + System.lineSeparator() +","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"wutdequack"},"content":"                currentTask.toString());","lastModifiedDate":"2021-09-02"},{"lineNumber":149,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Is there anything else you would like me to do?\",","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"wutdequack"},"content":"                TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":153,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":154,"author":{"gitId":"wutdequack"},"content":"     * Prints response back to user of task that is deleted.","lastModifiedDate":"2021-09-08"},{"lineNumber":155,"author":{"gitId":"wutdequack"},"content":"     * @param taskNumber The index of the task to be deleted.","lastModifiedDate":"2021-09-08"},{"lineNumber":156,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":157,"author":{"gitId":"wutdequack"},"content":"    private static void printDeleteMessage(int taskNumber) {","lastModifiedDate":"2021-09-08"},{"lineNumber":158,"author":{"gitId":"wutdequack"},"content":"        Task currentTask \u003d tasksList.get(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":159,"author":{"gitId":"wutdequack"},"content":"        System.out.println(\"Noted. The following item has been deleted\" + System.lineSeparator() +","lastModifiedDate":"2021-09-08"},{"lineNumber":160,"author":{"gitId":"wutdequack"},"content":"                currentTask.toString());","lastModifiedDate":"2021-09-08"},{"lineNumber":161,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Is there anything else you would like me to do?\",","lastModifiedDate":"2021-09-08"},{"lineNumber":162,"author":{"gitId":"wutdequack"},"content":"                TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":164,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":165,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"wutdequack"},"content":"     * Updates the completion status of the Task to true.","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"wutdequack"},"content":"     * @param taskNumber The index of the task to be updated.","lastModifiedDate":"2021-09-02"},{"lineNumber":168,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":169,"author":{"gitId":"wutdequack"},"content":"    private static void updateTaskCompletionStatus(int taskNumber) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-08"},{"lineNumber":170,"author":{"gitId":"wutdequack"},"content":"        tasksList.get(taskNumber).setCompleted(true);","lastModifiedDate":"2021-09-02"},{"lineNumber":171,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":173,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":174,"author":{"gitId":"wutdequack"},"content":"     * Deletes the Task from the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":175,"author":{"gitId":"wutdequack"},"content":"     * @param taskNumber The index of the task to be deleted.","lastModifiedDate":"2021-09-08"},{"lineNumber":176,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":177,"author":{"gitId":"wutdequack"},"content":"    private static void deleteTaskFromList(int taskNumber) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-08"},{"lineNumber":178,"author":{"gitId":"wutdequack"},"content":"        tasksList.remove(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":179,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":180,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":181,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":182,"author":{"gitId":"wutdequack"},"content":"     * Prints error message if requested task to access is out of bounds.","lastModifiedDate":"2021-09-08"},{"lineNumber":183,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":184,"author":{"gitId":"wutdequack"},"content":"    private static void printOutOfBoundsMessage() {","lastModifiedDate":"2021-09-08"},{"lineNumber":185,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Index is out of bounds! Try again :(\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-08"},{"lineNumber":186,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":187,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":188,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":189,"author":{"gitId":"wutdequack"},"content":"     * Prints the tasks in the Task list with formatting.","lastModifiedDate":"2021-08-18"},{"lineNumber":190,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":191,"author":{"gitId":"wutdequack"},"content":"    private static void printTasks() {","lastModifiedDate":"2021-09-01"},{"lineNumber":192,"author":{"gitId":"wutdequack"},"content":"        System.out.println(\"Here is a list of taskings:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":193,"author":{"gitId":"wutdequack"},"content":"        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-08-19"},{"lineNumber":194,"author":{"gitId":"wutdequack"},"content":"        for (int i \u003d 0; i \u003c tasksList.size(); ++i) {","lastModifiedDate":"2021-08-18"},{"lineNumber":195,"author":{"gitId":"wutdequack"},"content":"            Task currentTask \u003d tasksList.get(i);","lastModifiedDate":"2021-08-18"},{"lineNumber":196,"author":{"gitId":"wutdequack"},"content":"            // If the current task is completed, check the completion status","lastModifiedDate":"2021-09-02"},{"lineNumber":197,"author":{"gitId":"wutdequack"},"content":"            System.out.printf(\"%d.%s\" + System.lineSeparator(), i+1, currentTask.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"wutdequack"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":199,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Anything else?\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-18"},{"lineNumber":200,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":201,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":202,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":203,"author":{"gitId":"wutdequack"},"content":"     * Prints response back to user of task that is added.","lastModifiedDate":"2021-08-18"},{"lineNumber":204,"author":{"gitId":"wutdequack"},"content":"     * @param newTask The task that is added by the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":205,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":206,"author":{"gitId":"wutdequack"},"content":"    private static void printAddTaskMessage(Task newTask) {","lastModifiedDate":"2021-09-02"},{"lineNumber":207,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Added the following Task\" + System.lineSeparator() +","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"wutdequack"},"content":"                newTask.toString(), TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-02"},{"lineNumber":209,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(String.format(\"Now you have %d task(s) in the list.\",","lastModifiedDate":"2021-08-26"},{"lineNumber":210,"author":{"gitId":"wutdequack"},"content":"                        tasksList.size()), TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-26"},{"lineNumber":211,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Hmmm... what should I do now?\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-26"},{"lineNumber":212,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":213,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":214,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":215,"author":{"gitId":"wutdequack"},"content":"     * Creates a new default/ToDo Task with name provided and adds it to ArrayList.","lastModifiedDate":"2021-08-26"},{"lineNumber":216,"author":{"gitId":"wutdequack"},"content":"     * @param taskName The name of the task to be added.","lastModifiedDate":"2021-09-02"},{"lineNumber":217,"author":{"gitId":"wutdequack"},"content":"     * @return The task object created by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":218,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":219,"author":{"gitId":"wutdequack"},"content":"    private static Task createTask(String taskName, String taskType) {","lastModifiedDate":"2021-09-02"},{"lineNumber":220,"author":{"gitId":"wutdequack"},"content":"        Task newTask;","lastModifiedDate":"2021-09-02"},{"lineNumber":221,"author":{"gitId":"wutdequack"},"content":"        if (Objects.equals(taskType, TODO_TYPE)) {","lastModifiedDate":"2021-09-02"},{"lineNumber":222,"author":{"gitId":"wutdequack"},"content":"            newTask \u003d new ToDo(taskName);","lastModifiedDate":"2021-09-02"},{"lineNumber":223,"author":{"gitId":"wutdequack"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":224,"author":{"gitId":"wutdequack"},"content":"            newTask \u003d new Task(taskName);","lastModifiedDate":"2021-09-02"},{"lineNumber":225,"author":{"gitId":"wutdequack"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":226,"author":{"gitId":"wutdequack"},"content":"        return newTask;","lastModifiedDate":"2021-09-02"},{"lineNumber":227,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":228,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":229,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":230,"author":{"gitId":"wutdequack"},"content":"     * Creates a Deadline/Event Task with name and appropriate date time.","lastModifiedDate":"2021-09-21"},{"lineNumber":231,"author":{"gitId":"wutdequack"},"content":"     * If task_type \u003d DEADLINE_TYPE, create a Deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":232,"author":{"gitId":"wutdequack"},"content":"     * Else If task_type \u003d EVENT_TYPE, create a Event object.","lastModifiedDate":"2021-08-26"},{"lineNumber":233,"author":{"gitId":"wutdequack"},"content":"     * @param taskName The name assigned to the given task.","lastModifiedDate":"2021-09-02"},{"lineNumber":234,"author":{"gitId":"wutdequack"},"content":"     * @param dateTime The date-time associated with the task.","lastModifiedDate":"2021-09-02"},{"lineNumber":235,"author":{"gitId":"wutdequack"},"content":"     * @param taskType The type of task to determine the subclass to create.","lastModifiedDate":"2021-09-02"},{"lineNumber":236,"author":{"gitId":"wutdequack"},"content":"     * @return The task object created by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":237,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":238,"author":{"gitId":"wutdequack"},"content":"    private static Task createTask(String taskName, String dateTime, String taskType) {","lastModifiedDate":"2021-09-02"},{"lineNumber":239,"author":{"gitId":"wutdequack"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2021-09-02"},{"lineNumber":240,"author":{"gitId":"wutdequack"},"content":"        if (Objects.equals(taskType, DEADLINE_TYPE)) {","lastModifiedDate":"2021-09-02"},{"lineNumber":241,"author":{"gitId":"wutdequack"},"content":"            newTask \u003d new Deadline(taskName, dateTime);","lastModifiedDate":"2021-09-02"},{"lineNumber":242,"author":{"gitId":"wutdequack"},"content":"        } else if (Objects.equals(taskType, EVENT_TYPE)) {","lastModifiedDate":"2021-09-02"},{"lineNumber":243,"author":{"gitId":"wutdequack"},"content":"            newTask \u003d new Event(taskName, dateTime);","lastModifiedDate":"2021-09-02"},{"lineNumber":244,"author":{"gitId":"wutdequack"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":245,"author":{"gitId":"wutdequack"},"content":"        return newTask;","lastModifiedDate":"2021-09-02"},{"lineNumber":246,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":247,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":248,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":249,"author":{"gitId":"wutdequack"},"content":"     *  Adds a new task into the list of tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":250,"author":{"gitId":"wutdequack"},"content":"     * @param newTask A task created by the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":251,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":252,"author":{"gitId":"wutdequack"},"content":"    private static void addTask(Task newTask) {","lastModifiedDate":"2021-09-02"},{"lineNumber":253,"author":{"gitId":"wutdequack"},"content":"        tasksList.add(newTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":254,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":255,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":256,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":257,"author":{"gitId":"wutdequack"},"content":"     * Prints Goodbye message to user.","lastModifiedDate":"2021-08-18"},{"lineNumber":258,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":259,"author":{"gitId":"wutdequack"},"content":"    private static void printGoodByeMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":260,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Hasta la vista.\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-17"},{"lineNumber":261,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"I will be back.\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-17"},{"lineNumber":262,"author":{"gitId":"wutdequack"},"content":"        System.out.println(formatWithHeading(\"Program Terminating in...\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-17"},{"lineNumber":263,"author":{"gitId":"wutdequack"},"content":"        // Stops at 2 intentionally","lastModifiedDate":"2021-08-17"},{"lineNumber":264,"author":{"gitId":"wutdequack"},"content":"        for (int i \u003d 5; i \u003e 1; --i) {","lastModifiedDate":"2021-08-17"},{"lineNumber":265,"author":{"gitId":"wutdequack"},"content":"            System.out.println(formatWithHeading(Integer.toString(i), TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-17"},{"lineNumber":266,"author":{"gitId":"wutdequack"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":267,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":268,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":269,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":270,"author":{"gitId":"wutdequack"},"content":"     * Formats printed messages with the appropriate headings.","lastModifiedDate":"2021-09-21"},{"lineNumber":271,"author":{"gitId":"wutdequack"},"content":"     * If option TERMINATOR_FORMATTING is selected, [The Terminator] will prepend the msg.","lastModifiedDate":"2021-08-17"},{"lineNumber":272,"author":{"gitId":"wutdequack"},"content":"     * If option USER_FORMATTING is selected, [User] will prepend the msg.","lastModifiedDate":"2021-08-17"},{"lineNumber":273,"author":{"gitId":"wutdequack"},"content":"     * @param msg Message to be printed.","lastModifiedDate":"2021-08-17"},{"lineNumber":274,"author":{"gitId":"wutdequack"},"content":"     * @param option TERMINATOR_FORMATTING or USER_FORMATTING.","lastModifiedDate":"2021-08-17"},{"lineNumber":275,"author":{"gitId":"wutdequack"},"content":"     * @return String with prepended heading.","lastModifiedDate":"2021-08-17"},{"lineNumber":276,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":277,"author":{"gitId":"wutdequack"},"content":"    private static String formatWithHeading(String msg, Integer option) {","lastModifiedDate":"2021-09-01"},{"lineNumber":278,"author":{"gitId":"wutdequack"},"content":"        String prepend \u003d \"\";","lastModifiedDate":"2021-08-17"},{"lineNumber":279,"author":{"gitId":"wutdequack"},"content":"        switch (option) {","lastModifiedDate":"2021-08-17"},{"lineNumber":280,"author":{"gitId":"wutdequack"},"content":"        case TERMINATOR_FORMATTING:","lastModifiedDate":"2021-08-17"},{"lineNumber":281,"author":{"gitId":"wutdequack"},"content":"            prepend \u003d TERMINATOR_STRING;","lastModifiedDate":"2021-09-01"},{"lineNumber":282,"author":{"gitId":"wutdequack"},"content":"            break;","lastModifiedDate":"2021-08-17"},{"lineNumber":283,"author":{"gitId":"wutdequack"},"content":"        case USER_FORMATTING:","lastModifiedDate":"2021-08-17"},{"lineNumber":284,"author":{"gitId":"wutdequack"},"content":"            prepend \u003d USER_STRING;","lastModifiedDate":"2021-09-01"},{"lineNumber":285,"author":{"gitId":"wutdequack"},"content":"            break;","lastModifiedDate":"2021-08-17"},{"lineNumber":286,"author":{"gitId":"wutdequack"},"content":"        default:","lastModifiedDate":"2021-08-17"},{"lineNumber":287,"author":{"gitId":"wutdequack"},"content":"            break;","lastModifiedDate":"2021-08-17"},{"lineNumber":288,"author":{"gitId":"wutdequack"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":289,"author":{"gitId":"wutdequack"},"content":"        return String.format(\"%s: %s\", prepend, msg);","lastModifiedDate":"2021-08-17"},{"lineNumber":290,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":291,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":292,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":293,"author":{"gitId":"wutdequack"},"content":"     * Prints the welcome message to the user.","lastModifiedDate":"2021-08-17"},{"lineNumber":294,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":295,"author":{"gitId":"wutdequack"},"content":"    private static void printHelloMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        // @@author ObASCII","lastModifiedDate":"2021-08-17"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        // Reused from https://www.asciiart.eu/computers/computers","lastModifiedDate":"2021-08-17"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        // with minor modifications","lastModifiedDate":"2021-08-17"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        String logo \u003d \"              ,---------------------------,\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                + \"              |  /---------------------\\\\  |\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                + \"              | |                       | |\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                + \"              | |     404               | |\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                + \"              | |      Send             | |\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                + \"              | |       Help            | |\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":305,"author":{"gitId":"-"},"content":"                + \"              | |        Pls            | |\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                + \"              |  \\\\_____________________/  |\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":307,"author":{"gitId":"-"},"content":"                + \"              |___________________________|\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                + \"            ,---\\\\_____     []     _______/------,\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                + \"          /         /______________\\\\           /|\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                + \"        /___________________________________ /  | ___\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":311,"author":{"gitId":"-"},"content":"                + \"        |                                   |   |    )\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":312,"author":{"gitId":"-"},"content":"                + \"        |  _ _ _                 [-------]  |   |   (\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                + \"        |  o o o                 [-------]  |  /    _)_\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":314,"author":{"gitId":"-"},"content":"                + \"        |__________________________________ |/     /  /\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                + \"    /-------------------------------------/|      ( )/\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":316,"author":{"gitId":"-"},"content":"                + \"  /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                + \"/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":318,"author":{"gitId":"-"},"content":"                + \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";","lastModifiedDate":"2021-08-17"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        System.out.println(logo);","lastModifiedDate":"2021-08-17"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        System.out.println(formatWithHeading(\"Hola Amigos, I am the Terminator.\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-17"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        System.out.println(formatWithHeading(\"What would you like me to do?\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-08-17"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        System.out.println(\"[*] Type \\\"bye\\\" if you want to leave!\");","lastModifiedDate":"2021-08-17"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":326,"author":{"gitId":"-"},"content":"     * Prompts the user for input and returns the received input.","lastModifiedDate":"2021-09-01"},{"lineNumber":327,"author":{"gitId":"-"},"content":"     * @return Line entered by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":328,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    private static String getUserInput() {","lastModifiedDate":"2021-09-01"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        System.out.print(formatWithHeading(\"\", USER_FORMATTING));","lastModifiedDate":"2021-09-01"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        String input \u003d scanObject.nextLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        // Keep getting input until its not empty","lastModifiedDate":"2021-09-01"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        while (input.trim().isEmpty()){","lastModifiedDate":"2021-09-01"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            input \u003d scanObject.nextLine();","lastModifiedDate":"2021-09-01"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        return input;","lastModifiedDate":"2021-09-01"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":340,"author":{"gitId":"-"},"content":"     * Given user command to mark task as completed, return the task number.","lastModifiedDate":"2021-09-01"},{"lineNumber":341,"author":{"gitId":"-"},"content":"     * @param userInput String containing the TaskNumber.","lastModifiedDate":"2021-09-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":"     * @return The TaskNumber to be marked as done","lastModifiedDate":"2021-09-01"},{"lineNumber":343,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    private static int getTaskNumberFromInput(String userInput) throws IndexOutOfBoundsException{","lastModifiedDate":"2021-09-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":346,"author":{"gitId":"-"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.split(\" \")[TASK_NUMBER_INDEX]) - 1;","lastModifiedDate":"2021-09-03"},{"lineNumber":347,"author":{"gitId":"-"},"content":"            // If less than 0, throw exception","lastModifiedDate":"2021-09-03"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            if (taskNumber \u003c 0) {","lastModifiedDate":"2021-09-03"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                throw new NumberFormatException();","lastModifiedDate":"2021-09-03"},{"lineNumber":350,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-03"},{"lineNumber":351,"author":{"gitId":"-"},"content":"            return taskNumber;","lastModifiedDate":"2021-09-03"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":353,"author":{"gitId":"-"},"content":"            System.out.println(formatWithHeading(\"Input was not a valid number\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-03"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2021-09-03"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Checks if the correct format is given based on the task option.","lastModifiedDate":"2021-09-03"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * @param rawUserInput String given by the user.","lastModifiedDate":"2021-09-03"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     * @param taskType The type of task to determine the subclass to create.","lastModifiedDate":"2021-09-03"},{"lineNumber":362,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    private static Boolean isCorrectFormat(String rawUserInput, String taskType) {","lastModifiedDate":"2021-09-03"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":365,"author":{"gitId":"-"},"content":"            boolean incorrectDeadlineString \u003d taskType.equals(DEADLINE_TYPE) \u0026\u0026 !rawUserInput.contains(BY_KEYWORD);","lastModifiedDate":"2021-09-03"},{"lineNumber":366,"author":{"gitId":"-"},"content":"            boolean incorrectEventString \u003d taskType.equals(EVENT_TYPE) \u0026\u0026 !rawUserInput.contains(AT_KEYWORD);","lastModifiedDate":"2021-09-03"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            if (incorrectEventString || incorrectDeadlineString) {","lastModifiedDate":"2021-09-03"},{"lineNumber":368,"author":{"gitId":"-"},"content":"                throw new InsufficientParametersException();","lastModifiedDate":"2021-09-03"},{"lineNumber":369,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-03"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        } catch (InsufficientParametersException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            // If not enough parameters, print message and return False","lastModifiedDate":"2021-09-03"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            printMissingParametersMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":373,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2021-09-03"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        // If pass all checks, it is in the correct format","lastModifiedDate":"2021-09-03"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2021-09-03"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":380,"author":{"gitId":"-"},"content":"     * Prints message to user informing them that their input lack the required parameters","lastModifiedDate":"2021-09-03"},{"lineNumber":381,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    private static void printMissingParametersMessage(){","lastModifiedDate":"2021-09-03"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        System.out.println(formatWithHeading(\"You are missing parameters! Try again!\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-03"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":387,"author":{"gitId":"-"},"content":"     * Worker class to create ToDo Tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":388,"author":{"gitId":"-"},"content":"     * @param userLine Line that is inputted by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":389,"author":{"gitId":"-"},"content":"     * @param option FROM_USER or FROM_FILE.","lastModifiedDate":"2021-09-15"},{"lineNumber":390,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    private static void createToDoTask(String userLine, int option) {","lastModifiedDate":"2021-09-15"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        // Extract values and create ToDo Task","lastModifiedDate":"2021-09-01"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            String[] extractedValues \u003d new String[3];","lastModifiedDate":"2021-09-15"},{"lineNumber":395,"author":{"gitId":"-"},"content":"            String taskName, completionStatus \u003d \" \";","lastModifiedDate":"2021-09-15"},{"lineNumber":396,"author":{"gitId":"-"},"content":"            if (option \u003d\u003d FROM_USER) {","lastModifiedDate":"2021-09-15"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                extractedValues \u003d extractNameDateTime(userLine, TODO_TYPE);","lastModifiedDate":"2021-09-15"},{"lineNumber":398,"author":{"gitId":"-"},"content":"            } else if (option \u003d\u003d FROM_FILE) {","lastModifiedDate":"2021-09-15"},{"lineNumber":399,"author":{"gitId":"-"},"content":"                extractedValues \u003d parseFileFormattedString(userLine, TODO_TYPE);","lastModifiedDate":"2021-09-15"},{"lineNumber":400,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            taskName \u003d extractedValues[TASK_NAME_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            completionStatus \u003d extractedValues[COMPLETION_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            Task createdTask \u003d createTask(taskName, TODO_TYPE);","lastModifiedDate":"2021-09-02"},{"lineNumber":404,"author":{"gitId":"-"},"content":"            if (Objects.equals(completionStatus, \"X\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":405,"author":{"gitId":"-"},"content":"                createdTask.setCompleted(true);","lastModifiedDate":"2021-09-15"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            if (taskName.isEmpty()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                throw new MissingVariablesException();","lastModifiedDate":"2021-09-03"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-03"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            addTask(createdTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            printAddTaskMessage(createdTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        } catch (MissingVariablesException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":413,"author":{"gitId":"-"},"content":"            System.out.println(formatWithHeading(\"You did not enter a valid ToDo task\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-03"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":418,"author":{"gitId":"-"},"content":"     * Worker class to create Deadline Tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":419,"author":{"gitId":"-"},"content":"     * @param userLine Line that is inputted by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":420,"author":{"gitId":"-"},"content":"     * @param option FROM_USER or FROM_FILE.","lastModifiedDate":"2021-09-15"},{"lineNumber":421,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":422,"author":{"gitId":"-"},"content":"    private static void createDeadlineTask(String userLine, int option) {","lastModifiedDate":"2021-09-15"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        // Extract values and create Deadline Task","lastModifiedDate":"2021-09-01"},{"lineNumber":424,"author":{"gitId":"-"},"content":"        if (!isCorrectFormat(userLine, DEADLINE_TYPE)) {","lastModifiedDate":"2021-09-03"},{"lineNumber":425,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2021-09-03"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            String[] extractedValues \u003d new String[3];","lastModifiedDate":"2021-09-15"},{"lineNumber":429,"author":{"gitId":"-"},"content":"            String taskName, dateTime, completionStatus \u003d \" \";","lastModifiedDate":"2021-09-15"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            if (option \u003d\u003d FROM_USER) {","lastModifiedDate":"2021-09-15"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                extractedValues \u003d extractNameDateTime(userLine, DEADLINE_TYPE);","lastModifiedDate":"2021-09-15"},{"lineNumber":432,"author":{"gitId":"-"},"content":"            } else if (option \u003d\u003d FROM_FILE) {","lastModifiedDate":"2021-09-15"},{"lineNumber":433,"author":{"gitId":"-"},"content":"                extractedValues \u003d parseFileFormattedString(userLine, DEADLINE_TYPE);","lastModifiedDate":"2021-09-15"},{"lineNumber":434,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":435,"author":{"gitId":"-"},"content":"            taskName \u003d extractedValues[TASK_NAME_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":436,"author":{"gitId":"-"},"content":"            dateTime \u003d extractedValues[DATE_TIME_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":437,"author":{"gitId":"-"},"content":"            completionStatus \u003d extractedValues[COMPLETION_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":438,"author":{"gitId":"-"},"content":"            if (taskName.isEmpty() || dateTime.isEmpty()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":439,"author":{"gitId":"-"},"content":"                throw new MissingVariablesException();","lastModifiedDate":"2021-09-03"},{"lineNumber":440,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-03"},{"lineNumber":441,"author":{"gitId":"-"},"content":"            Task createdTask \u003d createTask(taskName, dateTime, DEADLINE_TYPE);","lastModifiedDate":"2021-09-02"},{"lineNumber":442,"author":{"gitId":"-"},"content":"            if (Objects.equals(completionStatus, \"X\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":443,"author":{"gitId":"-"},"content":"                createdTask.setCompleted(true);","lastModifiedDate":"2021-09-15"},{"lineNumber":444,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            addTask(createdTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":446,"author":{"gitId":"-"},"content":"            printAddTaskMessage(createdTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        } catch (MissingVariablesException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":448,"author":{"gitId":"-"},"content":"            System.out.println(formatWithHeading(\"Missing Task Name/Date Time!\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-03"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":450,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":453,"author":{"gitId":"-"},"content":"     * Worker class to create Event Tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":454,"author":{"gitId":"-"},"content":"     * @param userLine Line that is inputted by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":455,"author":{"gitId":"-"},"content":"     * @param option FROM_USER or FROM_FILE.","lastModifiedDate":"2021-09-15"},{"lineNumber":456,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    private static void createEventTask(String userLine, int option) {","lastModifiedDate":"2021-09-15"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        // Extract values and create Event Task","lastModifiedDate":"2021-09-01"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        if (!isCorrectFormat(userLine, EVENT_TYPE)) {","lastModifiedDate":"2021-09-03"},{"lineNumber":460,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2021-09-03"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":463,"author":{"gitId":"-"},"content":"            String[] extractedValues \u003d new String[3];","lastModifiedDate":"2021-09-15"},{"lineNumber":464,"author":{"gitId":"-"},"content":"            String taskName, dateTime, completionStatus \u003d \" \";","lastModifiedDate":"2021-09-15"},{"lineNumber":465,"author":{"gitId":"-"},"content":"            if (option \u003d\u003d FROM_USER) {","lastModifiedDate":"2021-09-15"},{"lineNumber":466,"author":{"gitId":"-"},"content":"                extractedValues \u003d extractNameDateTime(userLine, EVENT_TYPE);","lastModifiedDate":"2021-09-15"},{"lineNumber":467,"author":{"gitId":"-"},"content":"            } else if (option \u003d\u003d FROM_FILE) {","lastModifiedDate":"2021-09-15"},{"lineNumber":468,"author":{"gitId":"-"},"content":"                extractedValues \u003d parseFileFormattedString(userLine, EVENT_TYPE);","lastModifiedDate":"2021-09-15"},{"lineNumber":469,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":470,"author":{"gitId":"-"},"content":"            taskName \u003d extractedValues[TASK_NAME_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            dateTime \u003d extractedValues[DATE_TIME_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":472,"author":{"gitId":"-"},"content":"            completionStatus \u003d extractedValues[COMPLETION_INDEX];","lastModifiedDate":"2021-09-15"},{"lineNumber":473,"author":{"gitId":"-"},"content":"            if (taskName.isEmpty() || dateTime.isEmpty()) {","lastModifiedDate":"2021-09-03"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                throw new MissingVariablesException();","lastModifiedDate":"2021-09-03"},{"lineNumber":475,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-03"},{"lineNumber":476,"author":{"gitId":"-"},"content":"            Task createdTask \u003d createTask(taskName, dateTime, EVENT_TYPE);","lastModifiedDate":"2021-09-02"},{"lineNumber":477,"author":{"gitId":"-"},"content":"            if (Objects.equals(completionStatus, \"X\")) {","lastModifiedDate":"2021-09-15"},{"lineNumber":478,"author":{"gitId":"-"},"content":"                createdTask.setCompleted(true);","lastModifiedDate":"2021-09-15"},{"lineNumber":479,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":480,"author":{"gitId":"-"},"content":"            addTask(createdTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":481,"author":{"gitId":"-"},"content":"            printAddTaskMessage(createdTask);","lastModifiedDate":"2021-09-02"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        } catch (MissingVariablesException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":483,"author":{"gitId":"-"},"content":"            System.out.println(formatWithHeading(\"Missing Task Name/Date Time!\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-03"},{"lineNumber":484,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":485,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":486,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":487,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":488,"author":{"gitId":"-"},"content":"     * Prints to the screen that you don\u0027t understand the commands","lastModifiedDate":"2021-09-03"},{"lineNumber":489,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":490,"author":{"gitId":"-"},"content":"    private static void printUnknownCommandMessage(){","lastModifiedDate":"2021-09-03"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        System.out.println(formatWithHeading(\"Sorry, I don\u0027t understand you\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-03"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        System.out.println(formatWithHeading(\"Put either list/deadline/todo/event\", TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-03"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":496,"author":{"gitId":"-"},"content":"     * Handles the scenario if a file is not found.","lastModifiedDate":"2021-09-15"},{"lineNumber":497,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":498,"author":{"gitId":"-"},"content":"    private static void handleFileNotFound() {","lastModifiedDate":"2021-09-15"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        System.out.println(formatWithHeading(\"Directory (data) and/or File (data/records.txt) does not exist!\",","lastModifiedDate":"2021-09-15"},{"lineNumber":500,"author":{"gitId":"-"},"content":"                TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-15"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":502,"author":{"gitId":"-"},"content":"            File fileObject \u003d new File(FILE_LOCATION);","lastModifiedDate":"2021-09-21"},{"lineNumber":503,"author":{"gitId":"-"},"content":"            fileObject.getParentFile().mkdirs();","lastModifiedDate":"2021-09-21"},{"lineNumber":504,"author":{"gitId":"-"},"content":"            if (fileObject.createNewFile()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":505,"author":{"gitId":"-"},"content":"                System.out.println(formatWithHeading(\"New database created at \" + FILE_LOCATION,","lastModifiedDate":"2021-09-21"},{"lineNumber":506,"author":{"gitId":"-"},"content":"                        TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-21"},{"lineNumber":507,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":509,"author":{"gitId":"-"},"content":"            System.out.println(formatWithHeading(\"Cannot create file here. Check your permissions!\",","lastModifiedDate":"2021-09-21"},{"lineNumber":510,"author":{"gitId":"-"},"content":"                    TERMINATOR_FORMATTING));","lastModifiedDate":"2021-09-15"},{"lineNumber":511,"author":{"gitId":"-"},"content":"            handleByeSequence();","lastModifiedDate":"2021-09-15"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":513,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":515,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":516,"author":{"gitId":"-"},"content":"     * Handle the bye sequence for Terminator.","lastModifiedDate":"2021-09-15"},{"lineNumber":517,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":518,"author":{"gitId":"-"},"content":"    private static void handleByeSequence() {","lastModifiedDate":"2021-09-15"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        toContinue \u003d false;","lastModifiedDate":"2021-09-15"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        printGoodByeMessage();","lastModifiedDate":"2021-09-15"},{"lineNumber":521,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":523,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":524,"author":{"gitId":"-"},"content":"     * Generates string version of all the tasks to be stored.","lastModifiedDate":"2021-09-15"},{"lineNumber":525,"author":{"gitId":"-"},"content":"     * @return A String of all the tasks to be stored in a text file.","lastModifiedDate":"2021-09-15"},{"lineNumber":526,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    private static String generateStringToStore() {","lastModifiedDate":"2021-09-15"},{"lineNumber":528,"author":{"gitId":"-"},"content":"        StringJoiner taskJoiner \u003d new StringJoiner(System.lineSeparator());","lastModifiedDate":"2021-09-15"},{"lineNumber":529,"author":{"gitId":"-"},"content":"        for (Task t: tasksList) {","lastModifiedDate":"2021-09-15"},{"lineNumber":530,"author":{"gitId":"-"},"content":"            taskJoiner.add(t.toFileStringFormat());","lastModifiedDate":"2021-09-15"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        return taskJoiner.toString();","lastModifiedDate":"2021-09-15"},{"lineNumber":533,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":534,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":535,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":536,"author":{"gitId":"-"},"content":"     * Stores given string into the file path.","lastModifiedDate":"2021-09-15"},{"lineNumber":537,"author":{"gitId":"-"},"content":"     * @param stringToBeSaved A string to be be stored into the file.","lastModifiedDate":"2021-09-15"},{"lineNumber":538,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":539,"author":{"gitId":"-"},"content":"    private static void writeToFile(String stringToBeSaved) {","lastModifiedDate":"2021-09-15"},{"lineNumber":540,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":541,"author":{"gitId":"-"},"content":"            FileWriter fw \u003d new FileWriter(FILE_LOCATION);","lastModifiedDate":"2021-09-15"},{"lineNumber":542,"author":{"gitId":"-"},"content":"            fw.write(stringToBeSaved);","lastModifiedDate":"2021-09-15"},{"lineNumber":543,"author":{"gitId":"-"},"content":"            fw.close();","lastModifiedDate":"2021-09-15"},{"lineNumber":544,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":545,"author":{"gitId":"-"},"content":"            handleFileNotFound();","lastModifiedDate":"2021-09-15"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":547,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":549,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":550,"author":{"gitId":"-"},"content":"     * Handler function for updating Tasks to File.","lastModifiedDate":"2021-09-15"},{"lineNumber":551,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":552,"author":{"gitId":"-"},"content":"    private static void updateTasksToFile() {","lastModifiedDate":"2021-09-15"},{"lineNumber":553,"author":{"gitId":"-"},"content":"        String generatedString \u003d generateStringToStore();","lastModifiedDate":"2021-09-15"},{"lineNumber":554,"author":{"gitId":"-"},"content":"        writeToFile(generatedString);","lastModifiedDate":"2021-09-15"},{"lineNumber":555,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":557,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":558,"author":{"gitId":"-"},"content":"     * Reads Strings from file, add them to arraylist and return arraylist.","lastModifiedDate":"2021-09-15"},{"lineNumber":559,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":560,"author":{"gitId":"-"},"content":"    private static ArrayList\u003cString\u003e readFromFile() {","lastModifiedDate":"2021-09-15"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e returnArrayList \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-09-15"},{"lineNumber":562,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-15"},{"lineNumber":563,"author":{"gitId":"-"},"content":"            File fileObject \u003d new File(FILE_LOCATION);","lastModifiedDate":"2021-09-15"},{"lineNumber":564,"author":{"gitId":"-"},"content":"            Scanner scanObject \u003d new Scanner(fileObject);","lastModifiedDate":"2021-09-15"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":566,"author":{"gitId":"-"},"content":"            // Iterate through the lines and add it into the arrayList.","lastModifiedDate":"2021-09-15"},{"lineNumber":567,"author":{"gitId":"-"},"content":"            while (scanObject.hasNext()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":568,"author":{"gitId":"-"},"content":"                returnArrayList.add(scanObject.nextLine());","lastModifiedDate":"2021-09-15"},{"lineNumber":569,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":570,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-15"},{"lineNumber":571,"author":{"gitId":"-"},"content":"            handleFileNotFound();","lastModifiedDate":"2021-09-15"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        return returnArrayList;","lastModifiedDate":"2021-09-15"},{"lineNumber":574,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":576,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":577,"author":{"gitId":"-"},"content":"     * Parse the String into different parts based on format.","lastModifiedDate":"2021-09-15"},{"lineNumber":578,"author":{"gitId":"-"},"content":"     * @param fileFormattedString A string extracted from the input file.","lastModifiedDate":"2021-09-15"},{"lineNumber":579,"author":{"gitId":"-"},"content":"     * @param eventType The type of task to extract based on.","lastModifiedDate":"2021-09-15"},{"lineNumber":580,"author":{"gitId":"-"},"content":"     * @return String array of parsed Strings","lastModifiedDate":"2021-09-15"},{"lineNumber":581,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":582,"author":{"gitId":"-"},"content":"    private static String[] parseFileFormattedString(String fileFormattedString, String eventType) {","lastModifiedDate":"2021-09-15"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        String[] returnArray \u003d new String[3];","lastModifiedDate":"2021-09-15"},{"lineNumber":584,"author":{"gitId":"-"},"content":"        String[] splitResult \u003d fileFormattedString.split(Pattern.quote(DELIMINATOR_FOR_FILE));","lastModifiedDate":"2021-09-15"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        returnArray[COMPLETION_INDEX] \u003d splitResult[1];","lastModifiedDate":"2021-09-15"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        returnArray[TASK_NAME_INDEX] \u003d splitResult[2];","lastModifiedDate":"2021-09-15"},{"lineNumber":587,"author":{"gitId":"-"},"content":"        if (Objects.equals(eventType, DEADLINE_TYPE) || Objects.equals(eventType, EVENT_TYPE)) {","lastModifiedDate":"2021-09-15"},{"lineNumber":588,"author":{"gitId":"-"},"content":"            returnArray[DATE_TIME_INDEX] \u003d splitResult[3];","lastModifiedDate":"2021-09-15"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":590,"author":{"gitId":"-"},"content":"        return returnArray;","lastModifiedDate":"2021-09-15"},{"lineNumber":591,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":593,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":594,"author":{"gitId":"-"},"content":"     * Facilitates the task object creation given the strings from the file.","lastModifiedDate":"2021-09-15"},{"lineNumber":595,"author":{"gitId":"-"},"content":"     * @param fileFormattedTaskStrings An ArrayList of Strings read from a file","lastModifiedDate":"2021-09-15"},{"lineNumber":596,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":597,"author":{"gitId":"-"},"content":"    private static void facilitateTaskObjectCreation(ArrayList\u003cString\u003e fileFormattedTaskStrings) {","lastModifiedDate":"2021-09-15"},{"lineNumber":598,"author":{"gitId":"-"},"content":"        for (String fileFormatString: fileFormattedTaskStrings) {","lastModifiedDate":"2021-09-15"},{"lineNumber":599,"author":{"gitId":"-"},"content":"            // Get the first char from the string","lastModifiedDate":"2021-09-15"},{"lineNumber":600,"author":{"gitId":"-"},"content":"            String firstChar \u003d fileFormatString.substring(0,1);","lastModifiedDate":"2021-09-15"},{"lineNumber":601,"author":{"gitId":"-"},"content":"            switch (firstChar.toUpperCase()) {","lastModifiedDate":"2021-09-15"},{"lineNumber":602,"author":{"gitId":"-"},"content":"            case EVENT_TYPE:","lastModifiedDate":"2021-09-15"},{"lineNumber":603,"author":{"gitId":"-"},"content":"                createEventTask(fileFormatString, FROM_FILE);","lastModifiedDate":"2021-09-15"},{"lineNumber":604,"author":{"gitId":"-"},"content":"                break;","lastModifiedDate":"2021-09-15"},{"lineNumber":605,"author":{"gitId":"-"},"content":"            case DEADLINE_TYPE:","lastModifiedDate":"2021-09-15"},{"lineNumber":606,"author":{"gitId":"-"},"content":"                createDeadlineTask(fileFormatString, FROM_FILE);","lastModifiedDate":"2021-09-15"},{"lineNumber":607,"author":{"gitId":"-"},"content":"                break;","lastModifiedDate":"2021-09-15"},{"lineNumber":608,"author":{"gitId":"-"},"content":"            default:","lastModifiedDate":"2021-09-15"},{"lineNumber":609,"author":{"gitId":"-"},"content":"                createToDoTask(fileFormatString, FROM_FILE);","lastModifiedDate":"2021-09-15"},{"lineNumber":610,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-15"},{"lineNumber":611,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-15"},{"lineNumber":612,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":613,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":614,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":615,"author":{"gitId":"-"},"content":"     * Handler function for updating Tasks from File.","lastModifiedDate":"2021-09-15"},{"lineNumber":616,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":617,"author":{"gitId":"-"},"content":"    private static void loadTasksFromFile() {","lastModifiedDate":"2021-09-15"},{"lineNumber":618,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e contentFromFile \u003d  readFromFile();","lastModifiedDate":"2021-09-15"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        facilitateTaskObjectCreation(contentFromFile);","lastModifiedDate":"2021-09-15"},{"lineNumber":620,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":621,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":622,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":623,"author":{"gitId":"-"},"content":"     * Executes the command based on what is given by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":624,"author":{"gitId":"-"},"content":"     * @param userLine Line that is inputted by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":625,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":626,"author":{"gitId":"-"},"content":"    private static void executeCommand(String userLine) {","lastModifiedDate":"2021-09-01"},{"lineNumber":627,"author":{"gitId":"-"},"content":"        String keyword \u003d userLine.split(\" \")[KEYWORD_INDEX];","lastModifiedDate":"2021-09-01"},{"lineNumber":628,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":629,"author":{"gitId":"-"},"content":"        // Checks for the input for keywords BYE and LIST","lastModifiedDate":"2021-08-18"},{"lineNumber":630,"author":{"gitId":"-"},"content":"        switch (keyword.toUpperCase()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        case DONE_STRING:","lastModifiedDate":"2021-09-01"},{"lineNumber":632,"author":{"gitId":"-"},"content":"            // Go to helper function to mark task as done","lastModifiedDate":"2021-09-08"},{"lineNumber":633,"author":{"gitId":"-"},"content":"            handleDoneTask(userLine);","lastModifiedDate":"2021-09-08"},{"lineNumber":634,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-08-18"},{"lineNumber":635,"author":{"gitId":"-"},"content":"        case DELETE_STRING:","lastModifiedDate":"2021-09-08"},{"lineNumber":636,"author":{"gitId":"-"},"content":"            // Go to helper function to mark task as done","lastModifiedDate":"2021-09-08"},{"lineNumber":637,"author":{"gitId":"-"},"content":"            handleDeleteTask(userLine);","lastModifiedDate":"2021-09-08"},{"lineNumber":638,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":639,"author":{"gitId":"-"},"content":"        case LIST_STRING:","lastModifiedDate":"2021-09-01"},{"lineNumber":640,"author":{"gitId":"-"},"content":"            // Print Tasks with in-built tasksList","lastModifiedDate":"2021-08-18"},{"lineNumber":641,"author":{"gitId":"-"},"content":"            printTasks();","lastModifiedDate":"2021-08-18"},{"lineNumber":642,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-08-18"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        case BYE_STRING:","lastModifiedDate":"2021-09-01"},{"lineNumber":644,"author":{"gitId":"-"},"content":"            // Stop loop and print Goodbye","lastModifiedDate":"2021-09-15"},{"lineNumber":645,"author":{"gitId":"-"},"content":"            handleByeSequence();","lastModifiedDate":"2021-09-15"},{"lineNumber":646,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-08-18"},{"lineNumber":647,"author":{"gitId":"-"},"content":"        case TODO_STRING:","lastModifiedDate":"2021-09-01"},{"lineNumber":648,"author":{"gitId":"-"},"content":"            createToDoTask(userLine, FROM_USER);","lastModifiedDate":"2021-09-15"},{"lineNumber":649,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        case DEADLINE_STRING:","lastModifiedDate":"2021-09-01"},{"lineNumber":651,"author":{"gitId":"-"},"content":"            createDeadlineTask(userLine, FROM_USER);","lastModifiedDate":"2021-09-15"},{"lineNumber":652,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":653,"author":{"gitId":"-"},"content":"        case EVENT_STRING:","lastModifiedDate":"2021-09-01"},{"lineNumber":654,"author":{"gitId":"-"},"content":"            createEventTask(userLine, FROM_USER);","lastModifiedDate":"2021-09-15"},{"lineNumber":655,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":656,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2021-08-18"},{"lineNumber":657,"author":{"gitId":"-"},"content":"            printUnknownCommandMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":658,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2021-08-18"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":660,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":661,"author":{"gitId":"-"},"content":"        // Update the list","lastModifiedDate":"2021-09-15"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        updateTasksToFile();","lastModifiedDate":"2021-09-15"},{"lineNumber":663,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":664,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":665,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":666,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":667,"author":{"gitId":"-"},"content":"     * Handles the creation of done tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":668,"author":{"gitId":"-"},"content":"     * @param userLine Line of input from user.","lastModifiedDate":"2021-09-08"},{"lineNumber":669,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":670,"author":{"gitId":"-"},"content":"    private static void handleDoneTask(String userLine) {","lastModifiedDate":"2021-09-08"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":672,"author":{"gitId":"-"},"content":"            // Parse out task number from user input","lastModifiedDate":"2021-09-08"},{"lineNumber":673,"author":{"gitId":"-"},"content":"            int taskNumber \u003d getTaskNumberFromInput(userLine);","lastModifiedDate":"2021-09-08"},{"lineNumber":674,"author":{"gitId":"-"},"content":"            // Update the list and print respective message","lastModifiedDate":"2021-09-08"},{"lineNumber":675,"author":{"gitId":"-"},"content":"            updateTaskCompletionStatus(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":676,"author":{"gitId":"-"},"content":"            printUpdateMessage(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":678,"author":{"gitId":"-"},"content":"            printOutOfBoundsMessage();","lastModifiedDate":"2021-09-08"},{"lineNumber":679,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":680,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":681,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":682,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":683,"author":{"gitId":"-"},"content":"     * Handler function to delete task from list.","lastModifiedDate":"2021-09-08"},{"lineNumber":684,"author":{"gitId":"-"},"content":"     * @param userLine Line of input from user.","lastModifiedDate":"2021-09-08"},{"lineNumber":685,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":686,"author":{"gitId":"-"},"content":"    private static void handleDeleteTask(String userLine) {","lastModifiedDate":"2021-09-08"},{"lineNumber":687,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":688,"author":{"gitId":"-"},"content":"            // Parse out task number from user input","lastModifiedDate":"2021-09-08"},{"lineNumber":689,"author":{"gitId":"-"},"content":"            int taskNumber \u003d getTaskNumberFromInput(userLine);","lastModifiedDate":"2021-09-08"},{"lineNumber":690,"author":{"gitId":"-"},"content":"            // Print respective message and delete the task","lastModifiedDate":"2021-09-08"},{"lineNumber":691,"author":{"gitId":"-"},"content":"            printDeleteMessage(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":692,"author":{"gitId":"-"},"content":"            deleteTaskFromList(taskNumber);","lastModifiedDate":"2021-09-08"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":694,"author":{"gitId":"-"},"content":"            printOutOfBoundsMessage();","lastModifiedDate":"2021-09-08"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":696,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":697,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":698,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":699,"author":{"gitId":"-"},"content":"     * Main Function that is called upon program execution.","lastModifiedDate":"2021-09-01"},{"lineNumber":700,"author":{"gitId":"-"},"content":"     * @param args System Arguments added to the program.","lastModifiedDate":"2021-09-01"},{"lineNumber":701,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":702,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-01"},{"lineNumber":703,"author":{"gitId":"-"},"content":"        // Prints opening message","lastModifiedDate":"2021-09-01"},{"lineNumber":704,"author":{"gitId":"-"},"content":"        printHelloMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":705,"author":{"gitId":"-"},"content":"        loadTasksFromFile();","lastModifiedDate":"2021-09-15"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":707,"author":{"gitId":"-"},"content":"        // Continue Running Loop until bye is called","lastModifiedDate":"2021-09-01"},{"lineNumber":708,"author":{"gitId":"-"},"content":"        while (toContinue) {","lastModifiedDate":"2021-09-01"},{"lineNumber":709,"author":{"gitId":"-"},"content":"            // Gets user input","lastModifiedDate":"2021-09-01"},{"lineNumber":710,"author":{"gitId":"-"},"content":"            String userInput \u003d getUserInput();","lastModifiedDate":"2021-09-01"},{"lineNumber":711,"author":{"gitId":"-"},"content":"            executeCommand(userInput);","lastModifiedDate":"2021-09-01"},{"lineNumber":712,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":713,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":714,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"wutdequack":295,"-":419}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"     * Create a ToDo Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wutdequack"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wutdequack"},"content":"     * @param name The name of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wutdequack"},"content":"    public ToDo(String name) {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wutdequack"},"content":"        super(name);","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wutdequack"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wutdequack"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"wutdequack"},"content":"     * Get the Item type which is T in this case.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"wutdequack"},"content":"     * @return A string \"T\".","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"wutdequack"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"wutdequack"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"wutdequack"},"content":"    public String getItemType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"wutdequack"},"content":"        return \"T\";","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"wutdequack"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"wutdequack"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"wutdequack":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wutdequack"},"content":"todo read book","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"wutdequack"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"wutdequack"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"wutdequack"},"content":"todo join sports club","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"wutdequack"},"content":"list","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"wutdequack"},"content":"done 1","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"wutdequack"},"content":"done 4","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"wutdequack"},"content":"list","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"wutdequack"},"content":"todo borrow book","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"wutdequack"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"wutdequack"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"wutdequack"},"content":"list","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"wutdequack":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"wutdequack"},"content":"java -classpath ..\\bin Terminator \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wutdequack":1,"-":20}}]
