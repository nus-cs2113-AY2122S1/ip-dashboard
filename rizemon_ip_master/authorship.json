[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":" * The Command class handles the validation of a supported command and printing of its usage.","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":"public class Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"    /* The supported command */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"    private String command;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"     * Instantiates a new supported command.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"     * @param command Command to support.","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"    public Command(String command) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"    public String getCommand() {","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"        return command;","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"     * Checks if the given input is indicating that the user is attempting to run this command.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to check.","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"     * @return True if the user is trying to run this command.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"    public boolean isCommand(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"        String commandLine \u003d inputLine.strip();","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"        return commandLine.equals(command) || commandLine.startsWith(command + \" \");","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"     * Checks if the given input is a valid command.","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to check.","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"rizemon"},"content":"     * @return True if the input is valid.","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"rizemon"},"content":"    public boolean isValidCommandLine(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"rizemon"},"content":"        return inputLine.strip().equals(getCommand());","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"rizemon"},"content":"     * Returns the command syntax of the command.","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"rizemon"},"content":"     * @return Command syntax.","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"rizemon"},"content":"    public String getUsage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"rizemon"},"content":"        return String.format(\"%s\", command);","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"rizemon"},"content":"     * Returns the parsed values from the argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to parse.","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"rizemon"},"content":"     * @return List of parsed values.","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"rizemon"},"content":"    public String[] parseCommand(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"rizemon"},"content":"        return new String[]{\"\"};","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"rizemon":61}},{"path":"src/main/java/CommandExecutor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":" * The CommandExecutor class deals with the execution of supported commands.","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":"public class CommandExecutor {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"    /* Indexes used in referencing results from command execution */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"    private final static int ARGUMENT_VALUE_INDEX \u003d 0;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"    private final static int FLAG_VALUE_INDEX \u003d 1;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"    /* Supported commands */","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"    private final static String END_COMMAND \u003d \"bye\";","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"    private final static String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"    private final static String DONE_COMMAND \u003d \"done\";","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"    private final static String ADD_TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"    private final static String ADD_DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"    private final static String ADD_EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"    /* Names of supported arguments/flags */","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"    private final static String ARGUMENT_TASK_INDEX \u003d \"Task Index\";","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"    private final static String ARGUMENT_TASK_DESCRIPTION \u003d \"Task Description\";","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"    private final static String FLAG_TASK_TIMESTAMP \u003d \"Timestamp\";","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"    private final static String FLAG_DEADLINE_OPTION \u003d \"by\";","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"    private final static String FLAG_EVENT_OPTION \u003d \"at\";","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"    /* Used to store tasks */","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"    /* Used to store supported commands */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"    private Command[] commandList;","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"    /* State of whether interaction has terminated. True if interaction has terminated. */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"     * Instantiates a new handler for command executions.","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"rizemon"},"content":"    public CommandExecutor() {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"rizemon"},"content":"        taskManager \u003d new TaskManager();","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"rizemon"},"content":"        commandList \u003d new Command[]{","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"rizemon"},"content":"                new Command(END_COMMAND),","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"rizemon"},"content":"                new Command(LIST_COMMAND),","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"rizemon"},"content":"                new CommandWithArgument(DONE_COMMAND, ARGUMENT_TASK_INDEX),","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"rizemon"},"content":"                new CommandWithArgument(ADD_TODO_COMMAND, ARGUMENT_TASK_DESCRIPTION),","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"rizemon"},"content":"                new CommandWithFlag(ADD_DEADLINE_COMMAND, ARGUMENT_TASK_DESCRIPTION, FLAG_DEADLINE_OPTION, FLAG_TASK_TIMESTAMP),","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"rizemon"},"content":"                new CommandWithFlag(ADD_EVENT_COMMAND, ARGUMENT_TASK_DESCRIPTION, FLAG_EVENT_OPTION, FLAG_TASK_TIMESTAMP)","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"rizemon"},"content":"        };","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"rizemon"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"rizemon"},"content":"        return isExit;","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"rizemon"},"content":"     * Validates the given input string before executing it.","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to check.","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"rizemon"},"content":"    public void execute(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"rizemon"},"content":"        Command command \u003d findCommand(inputLine);","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"rizemon"},"content":"        if (command \u003d\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"rizemon"},"content":"            System.out.println(\"[X] Unable to find command.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"rizemon"},"content":"            return;","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"rizemon"},"content":"        if (!command.isValidCommandLine(inputLine)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"rizemon"},"content":"            System.out.printf(\"[!] Usage: %s\\n\", command.getUsage());","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"rizemon"},"content":"            return;","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"rizemon"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"rizemon"},"content":"            runCommand(command, inputLine);","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"rizemon"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"rizemon"},"content":"            System.out.println(\"[X] Error parsing argument!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"rizemon"},"content":"     * Finds the correct command according to the given input string.","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to search.","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"rizemon"},"content":"     * @return Command that user is trying to run.","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"rizemon"},"content":"    private Command findCommand(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"rizemon"},"content":"        for (Command command : commandList) {","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"rizemon"},"content":"            if (command.isCommand(inputLine)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"rizemon"},"content":"                return command;","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"rizemon"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"rizemon"},"content":"        return null;","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"rizemon"},"content":"     * Perform execution of the given command using the given input string.","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"rizemon"},"content":"     * @param command   Command that user is trying to run.","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to read from.","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"rizemon"},"content":"    private void runCommand(Command command, String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"rizemon"},"content":"        String[] commandResults \u003d command.parseCommand(inputLine);","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"rizemon"},"content":"        Task task;","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"rizemon"},"content":"        switch (command.getCommand()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"rizemon"},"content":"        case LIST_COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"rizemon"},"content":"            taskManager.printTaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"rizemon"},"content":"            break;","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"rizemon"},"content":"        case DONE_COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"rizemon"},"content":"            taskManager.complete(Integer.parseInt(commandResults[ARGUMENT_VALUE_INDEX]));","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"rizemon"},"content":"            break;","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"rizemon"},"content":"        case ADD_TODO_COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"rizemon"},"content":"            task \u003d new Todo(commandResults[ARGUMENT_VALUE_INDEX]);","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"rizemon"},"content":"            taskManager.addTask(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"rizemon"},"content":"            break;","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"rizemon"},"content":"        case ADD_DEADLINE_COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"rizemon"},"content":"            task \u003d new Deadline(commandResults[ARGUMENT_VALUE_INDEX], commandResults[FLAG_VALUE_INDEX]);","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"rizemon"},"content":"            taskManager.addTask(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"rizemon"},"content":"            break;","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"rizemon"},"content":"        case ADD_EVENT_COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"rizemon"},"content":"            task \u003d new Event(commandResults[ARGUMENT_VALUE_INDEX], commandResults[FLAG_VALUE_INDEX]);","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"rizemon"},"content":"            taskManager.addTask(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"rizemon"},"content":"            break;","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"rizemon"},"content":"        case END_COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"rizemon"},"content":"            isExit \u003d true;","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"rizemon"},"content":"            break;","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":123,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"rizemon":123}},{"path":"src/main/java/CommandWithArgument.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":" * The CommandWithArgument class extends the Command class by allowing the supported command to have an argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"public class CommandWithArgument extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"    /* Name of the argument */","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    private String argumentName;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"     * Instantiates a new supported command that has an argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"     * @param command      Command to support.","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"     * @param argumentName Name of the argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"    public CommandWithArgument(String command, String argumentName) {","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"        super(command);","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"        this.argumentName \u003d argumentName;","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"    public String getArgumentName() {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"        return argumentName;","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"     * Checks if the given input is a valid command.","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to check.","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"     * @return True if the input is valid.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"    public boolean isValidCommandLine(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"        String commandLine \u003d inputLine.strip();","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"rizemon"},"content":"        String[] tokens \u003d commandLine.split(\" \", -1);","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"rizemon"},"content":"        String argumentValue \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, tokens.length));","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"rizemon"},"content":"        return commandLine.startsWith(super.getCommand() + \" \")","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"rizemon"},"content":"                \u0026\u0026 argumentValue.length() \u003e 0;","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"rizemon"},"content":"     * Returns the command syntax of the command.","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"rizemon"},"content":"     * @return Command syntax.","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"rizemon"},"content":"    public String getUsage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"rizemon"},"content":"        return String.format(\"%s \u003c%s\u003e\", super.getCommand(), argumentName);","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"rizemon"},"content":"     * Returns the parsed values from the argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to parse.","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"rizemon"},"content":"     * @return List of parsed values.","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"rizemon"},"content":"    public String[] parseCommand(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"rizemon"},"content":"        String commandLine \u003d inputLine.strip();","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"rizemon"},"content":"        String[] tokens \u003d commandLine.split(\" \", -1);","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"rizemon"},"content":"        String argumentValue \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, tokens.length));","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"rizemon"},"content":"        return new String[]{argumentValue};","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"rizemon":66}},{"path":"src/main/java/CommandWithFlag.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":" * The CommandWithFlag class extends the CommandWithArgument class by allowing the supported command to have an","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":" * additional flag along with an argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"public class CommandWithFlag extends CommandWithArgument {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    /* Used to denote a flag */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"    private final static String FLAG_PREFIX \u003d \"/\";","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"    /* Default index if element cannot be found */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"    private final static int NOT_FOUND \u003d -1;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"    /* Option to indicate the flag on the command line. */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"    private String flagOption;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"    /* Name of the flag */","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"    private String flagName;","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"     * Instantiates a new supported command that has an argument and a flag.","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"     * @param command      Command to support.","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"     * @param argumentName Name of the argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"     * @param flagOption   Option to indicate the flag on the command line.","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"     * @param flagName     Name of the flag","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"    public CommandWithFlag(String command, String argumentName, String flagOption, String flagName) {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"        super(command, argumentName);","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"        this.flagOption \u003d flagOption;","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"        this.flagName \u003d flagName;","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"rizemon"},"content":"     * Checks if the given input is a valid command.","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to check.","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"rizemon"},"content":"     * @return True if the input is valid.","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"rizemon"},"content":"    public boolean isValidCommandLine(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"rizemon"},"content":"        String commandLine \u003d inputLine.strip();","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"rizemon"},"content":"        String[] tokens \u003d commandLine.split(\" \", -1);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"rizemon"},"content":"        int flagIndex \u003d findFlagOption(tokens);","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"rizemon"},"content":"        if (flagIndex \u003d\u003d NOT_FOUND) {","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"rizemon"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"rizemon"},"content":"        String argumentValue \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, flagIndex));","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"rizemon"},"content":"        String flagValue \u003d String.join(\" \", Arrays.copyOfRange(tokens, flagIndex + 1, tokens.length));","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"rizemon"},"content":"        return commandLine.startsWith(super.getCommand() + \" \")","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"rizemon"},"content":"                \u0026\u0026 argumentValue.length() \u003e 0","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"rizemon"},"content":"                \u0026\u0026 flagValue.length() \u003e 0;","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"rizemon"},"content":"     * Returns the command syntax of the command.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"rizemon"},"content":"     * @return Command syntax.","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"rizemon"},"content":"    public String getUsage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"rizemon"},"content":"        return String.format(\"%s \u003c%s\u003e %s%s \u003c%s\u003e\",","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"rizemon"},"content":"                super.getCommand(),","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"rizemon"},"content":"                super.getArgumentName(),","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"rizemon"},"content":"                FLAG_PREFIX,","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"rizemon"},"content":"                flagOption,","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"rizemon"},"content":"                flagName","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"rizemon"},"content":"        );","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"rizemon"},"content":"     * Returns the parsed values from the argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"rizemon"},"content":"     * @param inputLine Raw input line to parse.","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"rizemon"},"content":"     * @return List of parsed values.","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"rizemon"},"content":"    public String[] parseCommand(String inputLine) {","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"rizemon"},"content":"        String commandLine \u003d inputLine.strip();","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"rizemon"},"content":"        String[] tokens \u003d commandLine.split(\" \", -1);","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"rizemon"},"content":"        int flagIndex \u003d findFlagOption(tokens);","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"rizemon"},"content":"        String argumentValue \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, flagIndex));","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"rizemon"},"content":"        String flagValue \u003d String.join(\" \", Arrays.copyOfRange(tokens, flagIndex + 1, tokens.length));","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"rizemon"},"content":"        return new String[]{argumentValue, flagValue};","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"rizemon"},"content":"     * Returns the index of element containing the flag option.","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"rizemon"},"content":"     * @param tokens List of tokens to check.","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"rizemon"},"content":"     * @return Index of the flag option. NOT_FOUND if cannot be found.","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"rizemon"},"content":"    private int findFlagOption(String[] tokens) {","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"rizemon"},"content":"        for (int i \u003d 0; i \u003c tokens.length; i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"rizemon"},"content":"            if (tokens[i].equals(FLAG_PREFIX + flagOption)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"rizemon"},"content":"                return i;","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"rizemon"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"rizemon"},"content":"        return NOT_FOUND;","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"rizemon":106}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":" * The Deadline class manages a task that need to be done before a specific date/time.","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"    /* Timestamp of deadline */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"    private String dateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"     * Initialise a new incomplete task with a deadline.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"     * @param description Description of task to be done.","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"     * @param dateTime    When the task need to be done by.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"    public Deadline(String description, String dateTime) {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"        return String.format(\"%s (by: %s)\", super.getDescription(), dateTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"     * Return the Deadline icon.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"     * @return Deadline icon.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"        return \"D\";","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"rizemon":34}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":" * The Duke application serves to aid users in the management of their tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"    /* Hard-coded line */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    private final static String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"    /* Name of chat-bot */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"    private final static String BOT_NAME \u003d \"taskmon\";","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"    /* List of chat-bot messages */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"    private final static String WELCOME_MESSAGE \u003d \"\"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"            + \"[*] Detecting chat-bot version...\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"            + \"[+] Chat-bot version is *VULNERABLE*!\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"            + \"[*] Hacking into the chat-bot...\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"            + \"[*] Escalating privileges...\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"            + \"[+] Interactive shell spawned. You can now manipulate the chat-bot directly!\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"    private final static String BYE_MESSAGE \u003d \"[*] Deleting traces of compromise...\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"            + \"[+] Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"     * Prints the given string in between 2 horizontal lines.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"     * @param section The string to be printed.","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"    private static void printSection(String section) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"        System.out.println(section);","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rizemon"},"content":"     * Provides an interactive prompt to the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rizemon"},"content":"    private static void interact() {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rizemon"},"content":"        String rawLine;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rizemon"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rizemon"},"content":"        CommandExecutor commandExecutor \u003d new CommandExecutor();","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"rizemon"},"content":"        printSection(WELCOME_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"rizemon"},"content":"        do {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rizemon"},"content":"            System.out.printf(\"[root@%s ~]$ \", BOT_NAME);","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"rizemon"},"content":"            rawLine \u003d in.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"rizemon"},"content":"            commandExecutor.execute(rawLine);","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"rizemon"},"content":"        } while (!commandExecutor.isExit());","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"rizemon"},"content":"        printSection(BYE_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"rizemon"},"content":"        interact();","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"rizemon":51,"-":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":" * The Event class manages a task that start at a specific time and ends at a specific time.","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"    /* Timestamp of occurrence */","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"    private String dateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"     * Initialise a new incomplete task with time of occurrence.","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"     * @param description Description of task to be done.","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"     * @param dateTime    When the task is occurring at.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"    public Event(String description, String dateTime) {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"        return String.format(\"%s (at: %s)\", super.getDescription(), dateTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"     * Return the Event icon.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"     * @return Event icon.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"        return \"E\";","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"rizemon":34}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":" * The Task class manages the description and status of a task.","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"    /* Contents of the task */","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"    private String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"    /* State of the task. True if task is completed. */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    private boolean isCompleted;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"     * Initialise a new incomplete task.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"     * @param description Description of task to be done.","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"        return description;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"     * Return the icon representing whether the task is completed.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"     * @return Status task icon.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"        return (isCompleted ? \"X\" : \" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"rizemon"},"content":"     * Set the task to the completed state.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rizemon"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rizemon"},"content":"        isCompleted \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"rizemon"},"content":"     * Return the icon representing the type of the task.","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"rizemon"},"content":"     * @return Task icon.","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"rizemon"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"rizemon"},"content":"        return \"?\";","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rizemon":49}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":" * The TaskManager class manages the list of tasks, including adding and printing.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"    /* List of tasks */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"     * Initialise a new list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"    public TaskManager() {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"     * Prints the list of tasks in a neatly formatted way.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"    public void printTaskList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"        Task task;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"        System.out.println(\"[*] Here are your list of tasks:\");","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"        String output \u003d \"[x] No tasks found :(\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"rizemon"},"content":"        if (taskList.size() \u003e 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"rizemon"},"content":"            output \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"rizemon"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"rizemon"},"content":"                task \u003d taskList.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"rizemon"},"content":"                output +\u003d String.format(\"   %d.[%s][%s] %s\\n\",","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"rizemon"},"content":"                        i + 1,","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"rizemon"},"content":"                        task.getTaskIcon(),","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"rizemon"},"content":"                        task.getStatusIcon(),","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"rizemon"},"content":"                        task.getDescription()","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"rizemon"},"content":"                );","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"rizemon"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"rizemon"},"content":"        System.out.print(output);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"rizemon"},"content":"     * Adds the given task description to the list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"rizemon"},"content":"     * @param task New task.","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"rizemon"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"rizemon"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"rizemon"},"content":"        System.out.println(\"[+] Task added: \");","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"rizemon"},"content":"        System.out.printf(\"   [%s][%s] %s\\n\",","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"rizemon"},"content":"                task.getTaskIcon(),","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"rizemon"},"content":"                task.getStatusIcon(),","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"rizemon"},"content":"                task.getDescription()","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"rizemon"},"content":"        );","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"rizemon"},"content":"        System.out.printf(\"[\u003d] You now have %d tasks in the list.\\n\", taskList.size());","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"rizemon"},"content":"     * Marks the task at the given index as completed.","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"rizemon"},"content":"     * @param taskIndex 1-Based index of selected task.","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"rizemon"},"content":"    public void complete(int taskIndex) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"rizemon"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e taskList.size()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"rizemon"},"content":"            System.out.println(\"[-] Task not found\");","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"rizemon"},"content":"            return;","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"rizemon"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"rizemon"},"content":"        Task taskSelected \u003d taskList.get(taskIndex - 1);","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"rizemon"},"content":"        taskSelected.markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"rizemon"},"content":"        System.out.println(\"[+] Task marked as done:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"rizemon"},"content":"        System.out.printf(\"   [%s][%s] %s\\n\",","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"rizemon"},"content":"                taskSelected.getTaskIcon(),","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"rizemon"},"content":"                taskSelected.getStatusIcon(),","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"rizemon"},"content":"                taskSelected.getDescription()","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"rizemon"},"content":"        );","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"rizemon":76}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rizemon"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"rizemon"},"content":" * The Todo class manages a task that has no date/time attached to it.","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"rizemon"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"rizemon"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"rizemon"},"content":"     * Initialise a new incomplete Todo.","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"rizemon"},"content":"     * @param description Description of task to be done.","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"rizemon"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"rizemon"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"rizemon"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"rizemon"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"rizemon"},"content":"     * Return the Todo icon.","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"rizemon"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"rizemon"},"content":"     * @return Todo icon.","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"rizemon"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"rizemon"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"rizemon"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"rizemon"},"content":"        return \"T\";","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"rizemon"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"rizemon"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"rizemon":24}}]
