[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"T---0---things","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"D---1---poop---when","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"T---0---iP","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"kahhe":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"![Image of Duke](https://www.vhv.rs/dpng/d/47-477379_java-duke-png-transparent-png.png)","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"_Tired_ is a **todo** desktop app for **Personal Assistant Chatbot** that helps you to **keep track of various things**.","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"Optimised for use via a **[Command Line Interface (CLI)](https://en.wikipedia.org/wiki/Command-line_interface)**,","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"with a dash of **User Interface (UI) design** that keeps it enjoyable to use.","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"It\u0027s **light and easy** to use, without any fancy embellishments that will bag down its performance.","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"- [Set Up](#set-up)","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"- [Features](#features)","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"    - []()","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"    - []()","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"- [Usage](#usage)","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"  - [`help`](#help)","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"  - [`todo`](#todo)","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"  - [`deadline`](#deadline)","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"  - [`event`](#event)","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"  - [`done`](#done)","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"  - [`delete`](#delete)","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"  - [`find`](#find)","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"- [FAQ](#faq)","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"## Set Up","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"## Quick Start","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"### feature very good","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"### feature so and so","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"### `help`","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"Shows a list of all possible commands.","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"    ┌────────────────────────────────────────────────────────────────────┐","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"    │ Okay. For the last time, don\u0027t make me remind you again.           │","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"kahhe"},"content":"    │                                                                    │","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"kahhe"},"content":"    │                todo \u003cname\u003e: Add a todo task to the list.           │","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"kahhe"},"content":"    │ deadline \u003cname\u003e /by \u003ctime\u003e: Add a task with specified deadline.    │","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"kahhe"},"content":"    │    event \u003cname\u003e /at \u003ctime\u003e: Add an event with the specified time.  │","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"kahhe"},"content":"    │         done \u003ctask_number\u003e: Mark a task as done.                   │","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"kahhe"},"content":"    │       delete \u003ctask_number\u003e: Remove a task from the list.           │","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"kahhe"},"content":"    │               find \u003cquery\u003e: Search for text in the list.           │","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"kahhe"},"content":"    └────────────────────────────────────────────────────────────────────┘","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"kahhe"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"kahhe"},"content":"### `todo`","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"kahhe"},"content":"Command: `todo \u003cTASK_NAME\u003e`","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"kahhe"},"content":"Describe the action and its outcome.","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"kahhe"},"content":"Example of usage:","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"kahhe"},"content":"`keyword (optional arguments)`","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"kahhe"},"content":"Expected outcome:","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"kahhe"},"content":"Description of the outcome.","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"kahhe"},"content":"```","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"kahhe"},"content":"expected output","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"kahhe"},"content":"```","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"kahhe"},"content":"###`deadline`","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"kahhe"},"content":"###`event`","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"kahhe"},"content":"###`done`","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"kahhe"},"content":"###`delete`","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"kahhe"},"content":"###`find`","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"kahhe"},"content":"### Sample: `Keyword` - Describe action","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"Describe the action and its outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"`keyword (optional arguments)`","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Description of the outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2021-07-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":92,"author":{"gitId":"kahhe"},"content":"### Command Summary","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"kahhe"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"kahhe"},"content":"Do you remember, 21st night of September?","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"kahhe"},"content":"Love was changing the mind of pretenders","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"kahhe"},"content":"While chasing the clouds away","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"kahhe"},"content":"Our hearts were ringing","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"kahhe"},"content":"In the key that our souls were singing","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"kahhe"},"content":"As we danced in the night","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"kahhe"},"content":"Remember","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"kahhe"},"content":"How the stars stole the night away, oh yeah","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"kahhe"},"content":"````","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"kahhe"},"content":"## FAQ","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"kahhe"},"content":"## Coming Soon","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"kahhe"},"content":"[Kidding! Sayonara CS2113T iP!](https://www.youtube.com/watch?v\u003ddQw4w9WgXcQ)","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"-":25,"kahhe":81}},{"path":"docs/kahhe-todo.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"#Todo List \u003cbr\u003e for improvements in the future","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"---","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"- [x] `done`, `delete`, `deadline`, and `event` commands not working ","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"with 1 or more whitespace (ArrayIndexOutOfBoundsException)","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"- [ ] More abstraction","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"- [ ] Need more S L A P P in methods","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"- [x] `todo` + empty space generates task with whitespace as taskName","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"- [x] `engageUser()` to handle parsing then commands, separately","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"- [x] If load file is blank, no message on whether file was loaded ","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"    successfully or not","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"- [ ] Consider which methods to be `public` or `private`","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"[Google](https://www.google.com)  ","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"kahhe":20}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"        Ui.greetUser();","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"        TaskList.engageUser();","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"        Ui.byeUser();","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"-":2,"kahhe":8}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"     * DukeException constructor.","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"     * @param message Message to be printed, representing which error has occurred.","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"        super(message);","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"kahhe":12}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke;","lastModifiedDate":"2021-09-29"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-29"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"public class Parser {","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"    private static final String BYE \u003d \"bye\";","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"    private static final String HELLO\u003d \"hello\";","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"    private static final String HI \u003d \"hi\";","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"    private static final String YO \u003d \"yo\";","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"    private static final String TODO \u003d \"todo\";","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"    private static final String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"    private static final String EVENT \u003d \"event\";","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"    private static final String BY\u003d \"/by\";","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"    private static final String AT \u003d \"/at\";","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"    private static final String DONE \u003d \"done\";","lastModifiedDate":"2021-09-29"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"    private static final String DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"    private static final String LIST \u003d \"list\";","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"    private static final String HELP \u003d \"help\";","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"    private static final String FIND \u003d \"find\";","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"     * Parses input from user to execute the correct and desired commands of the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"     * @param input User input to terminal.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"    public static void parse(Scanner input)  {","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"        do {","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"            String firstWord \u003d input.next();","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"            String remainingWords \u003d input.nextLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"            String taskType \u003d parseFirstWord(firstWord);","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"            String taskName \u003d parseTaskName(remainingWords);","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"            String taskDetails \u003d parseTaskDetails(remainingWords);","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"            case BYE:","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"                isExit \u003d parseBye();","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":42,"author":{"gitId":"kahhe"},"content":"            case HELLO:","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"kahhe"},"content":"            case HI:","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"kahhe"},"content":"            case YO:","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"kahhe"},"content":"                parseGreetings();","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"kahhe"},"content":"            case LIST:","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"kahhe"},"content":"                parseList();","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"kahhe"},"content":"            case TODO:","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"kahhe"},"content":"                parseTodo(taskName);","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"kahhe"},"content":"            case DEADLINE:","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"kahhe"},"content":"                parseDeadline(taskName, taskDetails);","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"kahhe"},"content":"            case EVENT:","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"kahhe"},"content":"                parseEvent(taskName, taskDetails);","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"kahhe"},"content":"            case DONE:","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"kahhe"},"content":"                parseDone(taskName);","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"kahhe"},"content":"            case DELETE:","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"kahhe"},"content":"                parseDelete(taskName);","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"kahhe"},"content":"            case FIND:","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"kahhe"},"content":"                parseFind(taskName);","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"kahhe"},"content":"            case HELP:","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"kahhe"},"content":"                parseHelp(taskName);","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"kahhe"},"content":"            default:","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"kahhe"},"content":"                parseDefault(taskType, remainingWords);","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"kahhe"},"content":"        } while (!isExit);","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"kahhe"},"content":"     * Extracts out the first word of user input (typically the command word taskType).","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"kahhe"},"content":"     * @param text User input.","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"kahhe"},"content":"     * @return String text in lower case and without whitespaces.","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"kahhe"},"content":"    private static String parseFirstWord(String text) {","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"kahhe"},"content":"        String[] words \u003d text.split(\" \");","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"kahhe"},"content":"        return words[0].toLowerCase();","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"kahhe"},"content":"     * Extracts out the description of task that user wants to add.","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"kahhe"},"content":"     * @param text User input.","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"kahhe"},"content":"     * @return String description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"kahhe"},"content":"    protected static String parseTaskName(String text) {","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"kahhe"},"content":"        if (!text.isEmpty()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"kahhe"},"content":"            text \u003d text.substring(1);","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"kahhe"},"content":"        if (text.contains(BY)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"kahhe"},"content":"            String[] words \u003d text.split(BY);","lastModifiedDate":"2021-09-29"},{"lineNumber":102,"author":{"gitId":"kahhe"},"content":"            text \u003d words[0];","lastModifiedDate":"2021-09-29"},{"lineNumber":103,"author":{"gitId":"kahhe"},"content":"        } else if (text.contains(AT)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"kahhe"},"content":"            String[] words \u003d text.split(AT);","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"kahhe"},"content":"            text \u003d words[0];","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"kahhe"},"content":"        return text;","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"kahhe"},"content":"     * Extracts out the time details fo task that user wants to add.","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"kahhe"},"content":"     * @param text User input.","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"kahhe"},"content":"     * @return String details of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"kahhe"},"content":"    private static String parseTaskDetails(String text) {","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"kahhe"},"content":"        if (!text.isEmpty()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"kahhe"},"content":"            text \u003d text.substring(1);","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":120,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"kahhe"},"content":"        if (text.contains(BY)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"kahhe"},"content":"            String[] words \u003d text.split(BY);","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"kahhe"},"content":"            text \u003d words[1];","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"kahhe"},"content":"        } else if (text.contains(AT)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"kahhe"},"content":"            String[] words \u003d text.split(AT);","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"kahhe"},"content":"            text \u003d words[1];","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"kahhe"},"content":"        return text;","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":131,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"kahhe"},"content":"     * Initiates saving of tasks to duke.txt and causes exit of do-while loop.","lastModifiedDate":"2021-09-29"},{"lineNumber":133,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":134,"author":{"gitId":"kahhe"},"content":"     * @return True to be assigned to isExit.","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"kahhe"},"content":"    protected static boolean parseBye() {","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"kahhe"},"content":"        Storage.saveTaskToFile(TaskList.tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"kahhe"},"content":"        return true;","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"kahhe"},"content":"     * Prints mockery to user for being stupid.","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"kahhe"},"content":"    private static void parseGreetings() {","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"kahhe"},"content":"        Ui.mockUser();","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":147,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":148,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":149,"author":{"gitId":"kahhe"},"content":"     * Prints list of all tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"kahhe"},"content":"    private static void parseList() {","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"kahhe"},"content":"        Ui.showList(TaskList.tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":153,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":154,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":155,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"kahhe"},"content":"     * Adds a task of type Todo to ArrayList tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"kahhe"},"content":"     * @param taskName Description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"kahhe"},"content":"    protected static void parseTodo(String taskName) {","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"kahhe"},"content":"        TaskList.addTask(\"T\", taskName, \"\");","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":162,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"kahhe"},"content":"     * Adds a task of type Deadline to ArrayList tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"kahhe"},"content":"     * @param taskName Description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"kahhe"},"content":"     * @param taskDetails Time of deadline in String format.","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"kahhe"},"content":"    private static void parseDeadline(String taskName, String taskDetails) {","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"kahhe"},"content":"        TaskList.addTask(\"D\", taskName, taskDetails);","lastModifiedDate":"2021-09-29"},{"lineNumber":171,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":172,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":173,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":174,"author":{"gitId":"kahhe"},"content":"     * Adds a task of type Event to Arraylist tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":175,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":176,"author":{"gitId":"kahhe"},"content":"     * @param taskName Description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":177,"author":{"gitId":"kahhe"},"content":"     * @param taskDetails Time of event in String format.","lastModifiedDate":"2021-09-29"},{"lineNumber":178,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"kahhe"},"content":"    private static void parseEvent(String taskName, String taskDetails) {","lastModifiedDate":"2021-09-29"},{"lineNumber":180,"author":{"gitId":"kahhe"},"content":"        TaskList.addTask(\"E\", taskName, taskDetails);","lastModifiedDate":"2021-09-29"},{"lineNumber":181,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":182,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":183,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":184,"author":{"gitId":"kahhe"},"content":"     * Marks a task in ArrayList tasks as done, only if they exist or has not been completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":185,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":186,"author":{"gitId":"kahhe"},"content":"     * @param integer An integer in String format.","lastModifiedDate":"2021-09-29"},{"lineNumber":187,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":188,"author":{"gitId":"kahhe"},"content":"    private static void parseDone(String integer) {","lastModifiedDate":"2021-09-29"},{"lineNumber":189,"author":{"gitId":"kahhe"},"content":"        TaskList.doneTask(integer);","lastModifiedDate":"2021-09-29"},{"lineNumber":190,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":191,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":192,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":193,"author":{"gitId":"kahhe"},"content":"     * Deletes a task from ArrayList tasks, only if they exist or has not been completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":194,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":195,"author":{"gitId":"kahhe"},"content":"     * @param integer An integer in String format.","lastModifiedDate":"2021-09-29"},{"lineNumber":196,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":197,"author":{"gitId":"kahhe"},"content":"    private static void parseDelete(String integer) {","lastModifiedDate":"2021-09-29"},{"lineNumber":198,"author":{"gitId":"kahhe"},"content":"        TaskList.deleteTask(integer);","lastModifiedDate":"2021-09-29"},{"lineNumber":199,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":200,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":202,"author":{"gitId":"kahhe"},"content":"     * Searches the description of all tasks with a String query from user.","lastModifiedDate":"2021-09-29"},{"lineNumber":203,"author":{"gitId":"kahhe"},"content":"     * Prints the tasks that contains the query (as a substring).","lastModifiedDate":"2021-09-29"},{"lineNumber":204,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":205,"author":{"gitId":"kahhe"},"content":"     * @param userInput Query of user.","lastModifiedDate":"2021-09-29"},{"lineNumber":206,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":207,"author":{"gitId":"kahhe"},"content":"    private static void parseFind(String userInput) {","lastModifiedDate":"2021-09-29"},{"lineNumber":208,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":209,"author":{"gitId":"kahhe"},"content":"            TaskList.findTask(userInput);","lastModifiedDate":"2021-09-29"},{"lineNumber":210,"author":{"gitId":"kahhe"},"content":"        } catch (DukeException E) {","lastModifiedDate":"2021-09-29"},{"lineNumber":211,"author":{"gitId":"kahhe"},"content":"            Ui.showMissingTextError();","lastModifiedDate":"2021-09-29"},{"lineNumber":212,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":213,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":214,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":215,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":216,"author":{"gitId":"kahhe"},"content":"     * Prints all commands that can be used.","lastModifiedDate":"2021-09-29"},{"lineNumber":217,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":218,"author":{"gitId":"kahhe"},"content":"     * @param extraText Additional text after `help` command to be printed for fun.","lastModifiedDate":"2021-09-29"},{"lineNumber":219,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":220,"author":{"gitId":"kahhe"},"content":"    private static void parseHelp(String extraText) {","lastModifiedDate":"2021-09-29"},{"lineNumber":221,"author":{"gitId":"kahhe"},"content":"        Ui.showHelpMessage(extraText);","lastModifiedDate":"2021-09-29"},{"lineNumber":222,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":223,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":224,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":225,"author":{"gitId":"kahhe"},"content":"     * Prints error message to user. Prompts user to input correct command.","lastModifiedDate":"2021-09-29"},{"lineNumber":226,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":227,"author":{"gitId":"kahhe"},"content":"     * @param firstWord First word in the sentence user typed.","lastModifiedDate":"2021-09-29"},{"lineNumber":228,"author":{"gitId":"kahhe"},"content":"     * @param remainingWords Remaining words in the sentence user typed, if any.","lastModifiedDate":"2021-09-29"},{"lineNumber":229,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":230,"author":{"gitId":"kahhe"},"content":"    protected static void parseDefault(String firstWord, String remainingWords) {","lastModifiedDate":"2021-09-29"},{"lineNumber":231,"author":{"gitId":"kahhe"},"content":"        Ui.showWrongTaskTypeError(firstWord + remainingWords);","lastModifiedDate":"2021-09-29"},{"lineNumber":232,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":233,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"kahhe":233}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"import java.io.File;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"public class Storage {","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"    private static final String DELIMITER \u003d \"---\";","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"    private static final String TODO \u003d \"T\";","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"    private static final String DEADLINE \u003d \"D\";","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"    private static final String EVENT \u003d \"E\";","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"     * Loads previously saved file for tasks on startup.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"     * If it does not exist, a new file will be created.","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"    public static void load() {","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"        File directory \u003d new File(\"data\");","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"                directory.mkdir();","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"            File f \u003d new File(\"data/duke.txt\");","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"                parseText(s.nextLine());","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"                if (!s.hasNext()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"                    Ui.showTaskLoadedSuccessMessage();","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"                    return;","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"                }","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"            Ui.showBlankLoadFileMessage();","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"            Ui.showLoadingFileMissing();","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"kahhe"},"content":"     * Splits a line from load file into information parseComponents can understand.","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"kahhe"},"content":"     * @param line A String of one sentence scanned from the load file.","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"kahhe"},"content":"     * @throws DukeException Format of string is unexpected.","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"kahhe"},"content":"    public static void parseText(String line) throws DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"kahhe"},"content":"        String[] words \u003d line.split(DELIMITER);","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"kahhe"},"content":"            parseComponents(words);","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"kahhe"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"kahhe"},"content":"            Ui.showLoadFileCorrupted();","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"kahhe"},"content":"     * Adds tasks from load file using information parsed from parseText.","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"kahhe"},"content":"     * @param words String array containing the different information regarding a task.","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"kahhe"},"content":"     * @throws DukeException Format of taskType is unexpected.","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"kahhe"},"content":"    public static void parseComponents(String[] words) throws DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":68,"author":{"gitId":"kahhe"},"content":"        if (words.length \u003c 3 || words.length \u003e 4) {","lastModifiedDate":"2021-09-29"},{"lineNumber":69,"author":{"gitId":"kahhe"},"content":"            throw new ArrayIndexOutOfBoundsException();","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"kahhe"},"content":"        String taskType \u003d words[0];","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"kahhe"},"content":"        String taskIsDone \u003d words[1];","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"kahhe"},"content":"        String taskName\u003d words[2];","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"kahhe"},"content":"        String taskDetails \u003d \"Hello there. Welcome to my FileManager.java!\";","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"kahhe"},"content":"        if (taskType.equals(DEADLINE) || taskType.equals(EVENT)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"kahhe"},"content":"            taskDetails \u003d words[3];","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"kahhe"},"content":"        if (taskType.equals(TODO) || taskType.equals(DEADLINE) || taskType.equals(EVENT)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"kahhe"},"content":"            try {","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"kahhe"},"content":"                TaskList.addTaskFromFile(taskType, taskIsDone, taskName, taskDetails);","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"kahhe"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"kahhe"},"content":"                Ui.showLoadFileCorrupted();","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"kahhe"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"Unidentified task type.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"kahhe"},"content":"     * Saves the tasks input by user during the session to duke.txt.","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing tasks the user wishes to save.","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"kahhe"},"content":"    public static void saveTaskToFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"kahhe"},"content":"            FileWriter fw \u003d new FileWriter(\"data/duke.txt\");","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"kahhe"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"kahhe"},"content":"                fw.write(getTaskForSaving(tasks, i));","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"kahhe"},"content":"            fw.close();","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"kahhe"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"kahhe"},"content":"            System.out.println(\"File not found. Save failed.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"kahhe"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"kahhe"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":112,"author":{"gitId":"kahhe"},"content":"     * Formats information about a task into a string readable by the load() method.","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing tasks the user wishes to save.","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"kahhe"},"content":"     * @param taskIndex Index of the task in the ArrayList.","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"kahhe"},"content":"     * @return A string format to be saved in file.","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"kahhe"},"content":"     * @throws IOException Writing to save file is erroneous.","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":119,"author":{"gitId":"kahhe"},"content":"    public static String getTaskForSaving(ArrayList\u003cTask\u003e tasks, int taskIndex) throws IOException {","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"kahhe"},"content":"        return tasks.get(taskIndex).toSaveFile(DELIMITER) + \"\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":121,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":122,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"kahhe":122}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"public class TaskList {","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"    private static final String TODO \u003d \"T\";","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"    private static final String DEADLINE \u003d \"D\";","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"    private static final String EVENT \u003d \"E\";","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"    protected static int taskCount \u003d 0;","lastModifiedDate":"2021-09-29"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"    protected static int taskCompleted \u003d 0;","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"    protected static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"     * Adds inputs from user to ArrayList tasks to keep track of user\u0027s tasks, deadlines, and events.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"     * @param taskName    Name of task from user.","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"     * @param taskType    Type of task from user.","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"     * @param taskDetails Time/date of event/deadline.","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"    protected static void addTask(String taskType, String taskName, String taskDetails) {","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"            case TODO:","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"                addTodo(false, taskName);","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"            case DEADLINE:","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"                addDeadline(false, taskName, taskDetails);","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"            case EVENT:","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"                addEvent(false, taskName, taskDetails);","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"            default:","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"                return;","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"kahhe"},"content":"            confirmTaskAdded(false);","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"kahhe"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"kahhe"},"content":"            Ui.showMissingTextError();","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"kahhe"},"content":"     * Adds tasks from file to ArrayList tasks to keep track of user\u0027s tasks, deadlines, and events.","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"kahhe"},"content":"     * @param taskType Type of task: Todo, Deadline, or Event.","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"kahhe"},"content":"     * @param taskIsDone Boolean status of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"kahhe"},"content":"     * @param taskName Description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"kahhe"},"content":"     * @param taskDetails Time information pertaining to task.","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"kahhe"},"content":"     * @throws DukeException When the isDone value is not 1 or 0.","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":58,"author":{"gitId":"kahhe"},"content":"    public static void addTaskFromFile(String taskType, String taskIsDone, String taskName, String taskDetails) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":59,"author":{"gitId":"kahhe"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"kahhe"},"content":"        if (taskIsDone.equals(\"1\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"kahhe"},"content":"            isDone \u003d true;","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"kahhe"},"content":"        } else if (taskIsDone.equals(\"0\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"kahhe"},"content":"            isDone \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"kahhe"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"Done status of task corrupted.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":67,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"kahhe"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"kahhe"},"content":"            case TODO:","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"kahhe"},"content":"                addTodo(isDone, taskName);","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"kahhe"},"content":"            case DEADLINE:","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"kahhe"},"content":"                addDeadline(isDone, taskName, taskDetails);","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"kahhe"},"content":"            case EVENT:","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"kahhe"},"content":"                addEvent(isDone, taskName, taskDetails);","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"kahhe"},"content":"                break;","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"kahhe"},"content":"            default:","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"kahhe"},"content":"                return;","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"kahhe"},"content":"            updateTaskCountAndTaskCompleted(isDone);","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"kahhe"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"kahhe"},"content":"            Ui.showMissingTextError();","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"kahhe"},"content":"     * Adds a task of type Todo to ArrayList tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"kahhe"},"content":"     * @param isDone Boolean status representing whether the task has been done.","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"kahhe"},"content":"     * @param taskName Description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"kahhe"},"content":"     * @throws DukeException Description of task not inputted.","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"kahhe"},"content":"    public static void addTodo(boolean isDone, String taskName) throws DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"kahhe"},"content":"        if (taskName.isBlank()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"todo name missing.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"kahhe"},"content":"        tasks.add(new Todo(isDone, taskName));","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":104,"author":{"gitId":"kahhe"},"content":"     * Adds a task of type Deadline to ArrayList tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":105,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":106,"author":{"gitId":"kahhe"},"content":"     * @param isDone Boolean status representing whether the task has been done.","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"kahhe"},"content":"     * @param taskName Description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"kahhe"},"content":"     * @param taskDetails Time of deadline in String format.","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"kahhe"},"content":"     * @throws DukeException Description of task not inputted.","lastModifiedDate":"2021-09-29"},{"lineNumber":110,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"kahhe"},"content":"    public static void addDeadline(boolean isDone, String taskName, String taskDetails) throws DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"kahhe"},"content":"        if (taskName.isBlank()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":113,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"deadline name missing.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"kahhe"},"content":"        if (taskName.equals(taskDetails)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"deadline details missing\");","lastModifiedDate":"2021-09-29"},{"lineNumber":117,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":118,"author":{"gitId":"kahhe"},"content":"        tasks.add(new Deadline(isDone, taskName, taskDetails));","lastModifiedDate":"2021-09-22"},{"lineNumber":119,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":121,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":122,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"kahhe"},"content":"     * Adds a task of type Event to ArrayList tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"kahhe"},"content":"     * @param isDone Boolean status representing whether the task has been done.","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"kahhe"},"content":"     * @param taskName Description of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"kahhe"},"content":"     * @param taskDetails Time of event in String format.","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"kahhe"},"content":"     * @throws DukeException Description of task not inputted.","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"kahhe"},"content":"    public static void addEvent(boolean isDone, String taskName, String taskDetails) throws DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"kahhe"},"content":"        if (taskName.isBlank()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":132,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"event name missing.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":133,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"kahhe"},"content":"        if (taskName.equals(taskDetails)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":135,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"event details missing\");","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"kahhe"},"content":"        tasks.add(new Event(isDone, taskName, taskDetails));","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"kahhe"},"content":"     * Updates taskCount and taskCompleted after a task has been added from save file.","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"kahhe"},"content":"     * @param isDone Boolean status representing whether the task has been done.","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":146,"author":{"gitId":"kahhe"},"content":"    public static void updateTaskCountAndTaskCompleted(boolean isDone) {","lastModifiedDate":"2021-09-22"},{"lineNumber":147,"author":{"gitId":"kahhe"},"content":"        taskCount++;","lastModifiedDate":"2021-09-22"},{"lineNumber":148,"author":{"gitId":"kahhe"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"kahhe"},"content":"            taskCompleted++;","lastModifiedDate":"2021-09-22"},{"lineNumber":150,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":151,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"kahhe"},"content":"     * Prints confirmation to user of added task and updates taskCount number","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":156,"author":{"gitId":"kahhe"},"content":"     * @param isDone Boolean status representing whether the task has been done.","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"kahhe"},"content":"    public static void confirmTaskAdded(boolean isDone) {","lastModifiedDate":"2021-09-22"},{"lineNumber":159,"author":{"gitId":"kahhe"},"content":"        updateTaskCountAndTaskCompleted(isDone);","lastModifiedDate":"2021-09-22"},{"lineNumber":160,"author":{"gitId":"kahhe"},"content":"        int taskPending \u003d taskCount - taskCompleted;","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"kahhe"},"content":"        String isPlural \u003d (taskPending) \u003d\u003d 1 ? \"\" : \"s\";","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"kahhe"},"content":"        Ui.printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":164,"author":{"gitId":"kahhe"},"content":"        Ui.printAddedTask(tasks, isPlural, taskPending);","lastModifiedDate":"2021-09-21"},{"lineNumber":165,"author":{"gitId":"kahhe"},"content":"        Ui.printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"kahhe"},"content":"     * Marks a task in ArrayList tasks as done, only if they exist or has not been completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":171,"author":{"gitId":"kahhe"},"content":"     * @param userInput String from user to be converted into a number that is associated with a task.","lastModifiedDate":"2021-09-21"},{"lineNumber":172,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":173,"author":{"gitId":"kahhe"},"content":"    public static void doneTask(String userInput) {","lastModifiedDate":"2021-09-21"},{"lineNumber":174,"author":{"gitId":"kahhe"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-21"},{"lineNumber":175,"author":{"gitId":"kahhe"},"content":"        boolean isExists;","lastModifiedDate":"2021-09-21"},{"lineNumber":176,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":177,"author":{"gitId":"kahhe"},"content":"            //todo abstraction here with a TaskManager method with `throws DukeException`","lastModifiedDate":"2021-09-21"},{"lineNumber":178,"author":{"gitId":"kahhe"},"content":"            taskNumber \u003d Integer.parseInt(userInput) - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":179,"author":{"gitId":"kahhe"},"content":"            isExists \u003d taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c taskCount;","lastModifiedDate":"2021-09-21"},{"lineNumber":180,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":181,"author":{"gitId":"kahhe"},"content":"            Ui.printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"kahhe"},"content":"            if (!isExists) {","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"kahhe"},"content":"                Ui.printTaskDoesNotExist();","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"kahhe"},"content":"            } else if (tasks.get(taskNumber).getDoneStatus()) {","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"kahhe"},"content":"                Ui.printTaskAlreadyDone();","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"kahhe"},"content":"            } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":187,"author":{"gitId":"kahhe"},"content":"                taskCompleted++;","lastModifiedDate":"2021-09-21"},{"lineNumber":188,"author":{"gitId":"kahhe"},"content":"                tasks.get(taskNumber).setAsDone();","lastModifiedDate":"2021-09-21"},{"lineNumber":189,"author":{"gitId":"kahhe"},"content":"                Ui.printTaskDone(tasks, taskNumber);","lastModifiedDate":"2021-09-21"},{"lineNumber":190,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":191,"author":{"gitId":"kahhe"},"content":"            Ui.printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":192,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":193,"author":{"gitId":"kahhe"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2021-09-21"},{"lineNumber":194,"author":{"gitId":"kahhe"},"content":"            Ui.showNumberFormatError();","lastModifiedDate":"2021-09-29"},{"lineNumber":195,"author":{"gitId":"kahhe"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":196,"author":{"gitId":"kahhe"},"content":"            Ui.showMissingTextError();","lastModifiedDate":"2021-09-29"},{"lineNumber":197,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":198,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":199,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":200,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"kahhe"},"content":"     * Deletes a task from ArrayList tasks, only if they exist or has not been completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":202,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":203,"author":{"gitId":"kahhe"},"content":"     * @param userInput String from user to be converted into a number that is associated with a task.","lastModifiedDate":"2021-09-29"},{"lineNumber":204,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":205,"author":{"gitId":"kahhe"},"content":"    public static void deleteTask(String userInput) {","lastModifiedDate":"2021-09-21"},{"lineNumber":206,"author":{"gitId":"kahhe"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-21"},{"lineNumber":207,"author":{"gitId":"kahhe"},"content":"        boolean isExists;","lastModifiedDate":"2021-09-21"},{"lineNumber":208,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":209,"author":{"gitId":"kahhe"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":210,"author":{"gitId":"kahhe"},"content":"            //todo abstraction here with a TaskManager method with `throws DukeException`","lastModifiedDate":"2021-09-21"},{"lineNumber":211,"author":{"gitId":"kahhe"},"content":"            taskNumber \u003d Integer.parseInt(userInput) - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":212,"author":{"gitId":"kahhe"},"content":"            isExists \u003d taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c taskCount;","lastModifiedDate":"2021-09-21"},{"lineNumber":213,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":214,"author":{"gitId":"kahhe"},"content":"            Ui.printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":215,"author":{"gitId":"kahhe"},"content":"            if (!isExists) {","lastModifiedDate":"2021-09-21"},{"lineNumber":216,"author":{"gitId":"kahhe"},"content":"                Ui.printTaskDoesNotExist();","lastModifiedDate":"2021-09-21"},{"lineNumber":217,"author":{"gitId":"kahhe"},"content":"            } else if (tasks.get(taskNumber).getDoneStatus()){","lastModifiedDate":"2021-09-21"},{"lineNumber":218,"author":{"gitId":"kahhe"},"content":"                taskCount--;","lastModifiedDate":"2021-09-22"},{"lineNumber":219,"author":{"gitId":"kahhe"},"content":"                Ui.printTaskAlreadyDone();","lastModifiedDate":"2021-09-21"},{"lineNumber":220,"author":{"gitId":"kahhe"},"content":"                Ui.printDeleteDoneTask();","lastModifiedDate":"2021-09-22"},{"lineNumber":221,"author":{"gitId":"kahhe"},"content":"                tasks.remove(tasks.get(taskNumber));","lastModifiedDate":"2021-09-22"},{"lineNumber":222,"author":{"gitId":"kahhe"},"content":"            } else {","lastModifiedDate":"2021-09-21"},{"lineNumber":223,"author":{"gitId":"kahhe"},"content":"                taskCount--;","lastModifiedDate":"2021-09-21"},{"lineNumber":224,"author":{"gitId":"kahhe"},"content":"                Ui.printTaskDeleted(tasks, taskNumber);","lastModifiedDate":"2021-09-21"},{"lineNumber":225,"author":{"gitId":"kahhe"},"content":"                tasks.remove(tasks.get(taskNumber));","lastModifiedDate":"2021-09-21"},{"lineNumber":226,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":227,"author":{"gitId":"kahhe"},"content":"            Ui.printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":228,"author":{"gitId":"kahhe"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2021-09-21"},{"lineNumber":229,"author":{"gitId":"kahhe"},"content":"            Ui.showNumberFormatError();","lastModifiedDate":"2021-09-29"},{"lineNumber":230,"author":{"gitId":"kahhe"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":231,"author":{"gitId":"kahhe"},"content":"            Ui.showMissingTextError();","lastModifiedDate":"2021-09-29"},{"lineNumber":232,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-21"},{"lineNumber":233,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":234,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":235,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":236,"author":{"gitId":"kahhe"},"content":"     * Searches the description of all tasks with a String query from user.","lastModifiedDate":"2021-09-29"},{"lineNumber":237,"author":{"gitId":"kahhe"},"content":"     * Prints the tasks that contains the query (as a substring).","lastModifiedDate":"2021-09-29"},{"lineNumber":238,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":239,"author":{"gitId":"kahhe"},"content":"     * @param userInput Query of user.","lastModifiedDate":"2021-09-29"},{"lineNumber":240,"author":{"gitId":"kahhe"},"content":"     * @throws DukeException Query is blank.","lastModifiedDate":"2021-09-29"},{"lineNumber":241,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":242,"author":{"gitId":"kahhe"},"content":"    public static void findTask(String userInput) throws DukeException {","lastModifiedDate":"2021-09-29"},{"lineNumber":243,"author":{"gitId":"kahhe"},"content":"        ArrayList\u003cTask\u003e tempTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-29"},{"lineNumber":244,"author":{"gitId":"kahhe"},"content":"        if (!userInput.isBlank()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":245,"author":{"gitId":"kahhe"},"content":"            userInput \u003d userInput.toLowerCase();","lastModifiedDate":"2021-09-29"},{"lineNumber":246,"author":{"gitId":"kahhe"},"content":"        } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":247,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"Query is missing.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":248,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":249,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":250,"author":{"gitId":"kahhe"},"content":"        if (tasks.size() !\u003d 0) {","lastModifiedDate":"2021-09-29"},{"lineNumber":251,"author":{"gitId":"kahhe"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":252,"author":{"gitId":"kahhe"},"content":"                if (task.getTaskName().toLowerCase().contains(userInput)) {","lastModifiedDate":"2021-09-29"},{"lineNumber":253,"author":{"gitId":"kahhe"},"content":"                    tempTasks.add(task);","lastModifiedDate":"2021-09-29"},{"lineNumber":254,"author":{"gitId":"kahhe"},"content":"                }","lastModifiedDate":"2021-09-29"},{"lineNumber":255,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-29"},{"lineNumber":256,"author":{"gitId":"kahhe"},"content":"        } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":257,"author":{"gitId":"kahhe"},"content":"            throw new DukeException(\"List is empty.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":258,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":259,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":260,"author":{"gitId":"kahhe"},"content":"        if (tempTasks.size() !\u003d 0) {","lastModifiedDate":"2021-09-29"},{"lineNumber":261,"author":{"gitId":"kahhe"},"content":"            Ui.showQueryList(tempTasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":262,"author":{"gitId":"kahhe"},"content":"        } else {","lastModifiedDate":"2021-09-29"},{"lineNumber":263,"author":{"gitId":"kahhe"},"content":"            Ui.showQueryNotFound();","lastModifiedDate":"2021-09-29"},{"lineNumber":264,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":265,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":266,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":267,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":268,"author":{"gitId":"kahhe"},"content":"     * Engages user based on what the user has typed.","lastModifiedDate":"2021-09-29"},{"lineNumber":269,"author":{"gitId":"kahhe"},"content":"     * Passes execution to parse();","lastModifiedDate":"2021-09-29"},{"lineNumber":270,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":271,"author":{"gitId":"kahhe"},"content":"    public static void engageUser() {","lastModifiedDate":"2021-09-22"},{"lineNumber":272,"author":{"gitId":"kahhe"},"content":"            Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-29"},{"lineNumber":273,"author":{"gitId":"kahhe"},"content":"            Parser.parse(input);","lastModifiedDate":"2021-09-29"},{"lineNumber":274,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":275,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kahhe":275}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"public class Ui {","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"    public static final String INDENT \u003d \"    │ \";","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"    // UI embellishments","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"     * Prints the top horizontal line to demarcate text from Tired.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"    public static void printTopLine() {","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"        System.out.println(\"    ┌────────────────────────────────────────────────────────────────────┐\");","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"     * Prints the bottom horizontal line to demarcate text from Tired.","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"    public static void printBottomLine() {","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"        System.out.println(\"    └────────────────────────────────────────────────────────────────────┘\");","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"     * Prints logo of Tired","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"    public static void printLogo() {","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"        // Generated with: https://patorjk.com/software/taag/","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"        String logo \u003d \"         ______       __     __                 __\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"                + \"        / ____/___   / /_   / /   ____   _____ / /_\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"                + \"       / / __ / _ \\\\ / __/  / /   / __ \\\\ / ___// __/\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"                + \"      / /_/ //  __// /_   / /___/ /_/ /(__  )/ /_  \\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"                + \"      \\\\____/ \\\\___/ \\\\__/  /_____/\\\\____//____/ \\\\__/\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"                + \"            ┌─┐┬  ┌─┐┌─┐┌─┐┌─┐┌─┐\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"                + \"            ├─┘│  ├┤ ├─┤└─┐├┤  ┌┘\\n\"","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"                + \"      o o o ┴  ┴─┘└─┘┴ ┴└─┘└─┘ o\";","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"        System.out.println(logo);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"kahhe"},"content":"    // Greetings","lastModifiedDate":"2021-09-29"},{"lineNumber":43,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":44,"author":{"gitId":"kahhe"},"content":"     * Prints a reluctant greeting message.","lastModifiedDate":"2021-09-29"},{"lineNumber":45,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"kahhe"},"content":"    public static void printGreeting() {","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"*Sigh* Hi... I\u0027m Tired                                             │\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"kahhe"},"content":"                + INDENT + \"What do you want from me?                                          │\");","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"kahhe"},"content":"     * Prints a message mocking the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"kahhe"},"content":"    public static void printMockery() {","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"You know what a todo list bot is?\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"kahhe"},"content":"                + INDENT + \"I\u0027m a todo list bot. So stop chatting with me.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":60,"author":{"gitId":"kahhe"},"content":"     * Prints a goodbye message of Duke pretending to care for user.","lastModifiedDate":"2021-09-29"},{"lineNumber":61,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"kahhe"},"content":"    public static void printGoodbye() {","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"\\\"Only in the agony of parting do we look into the depths of love.\\\" │\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":64,"author":{"gitId":"kahhe"},"content":"                + INDENT + \" —— George Eliot                                                   │\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"kahhe"},"content":"                + INDENT + \"                                                                   │\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"kahhe"},"content":"                + INDENT + \"Ha! As if I care! Goodbye!!                                        │\");","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":70,"author":{"gitId":"kahhe"},"content":"     * Prints all commands that can be used.","lastModifiedDate":"2021-09-29"},{"lineNumber":71,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"kahhe"},"content":"     * @param extraText Additional text after `help` command to be printed for fun.","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"kahhe"},"content":"    public static void printHelp(String extraText) {","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Okay. For the last time, don\u0027t make me remind you again.           │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"                                                                   │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"               todo \u003cname\u003e: Add a todo task to the list.           │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":78,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"deadline \u003cname\u003e /by \u003ctime\u003e: Add a task with specified deadline.    │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":79,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"   event \u003cname\u003e /at \u003ctime\u003e: Add an event with the specified time.  │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":80,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"        done \u003ctask_number\u003e: Mark a task as done.                   │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":81,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"      delete \u003ctask_number\u003e: Remove a task from the list.           │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":82,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"              find \u003cquery\u003e: Search for text in the list.           │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":83,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":84,"author":{"gitId":"kahhe"},"content":"        if(!extraText.isBlank()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":85,"author":{"gitId":"kahhe"},"content":"            System.out.println(INDENT + \"                                                                   │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":86,"author":{"gitId":"kahhe"},"content":"            System.out.println(INDENT + \"Oh and you typed extra garbage after \\\"help\\\":                       │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":87,"author":{"gitId":"kahhe"},"content":"            System.out.println(INDENT + extraText);","lastModifiedDate":"2021-09-29"},{"lineNumber":88,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":89,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":90,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":91,"author":{"gitId":"kahhe"},"content":"    // Negative feedback of erroneous user input","lastModifiedDate":"2021-09-29"},{"lineNumber":92,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":93,"author":{"gitId":"kahhe"},"content":"     * Echoes what user has typed.","lastModifiedDate":"2021-09-29"},{"lineNumber":94,"author":{"gitId":"kahhe"},"content":"     * Probes user to use right commands.","lastModifiedDate":"2021-09-29"},{"lineNumber":95,"author":{"gitId":"kahhe"},"content":"     * Encourages user to check out `help` section.","lastModifiedDate":"2021-09-29"},{"lineNumber":96,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":97,"author":{"gitId":"kahhe"},"content":"     * @param text","lastModifiedDate":"2021-09-29"},{"lineNumber":98,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":99,"author":{"gitId":"kahhe"},"content":"    public static void printUnexpectedCommand(String text) {","lastModifiedDate":"2021-09-29"},{"lineNumber":100,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Look what you typed:\\n\" + INDENT + text);","lastModifiedDate":"2021-09-29"},{"lineNumber":101,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT);","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Please don\u0027t embarrass yourself any further.\\n\"","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"kahhe"},"content":"                + INDENT + \"Use the right commands. Type \\\"help\\\" if you don\u0027t know.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":107,"author":{"gitId":"kahhe"},"content":"     * Prints message urging user to retype.","lastModifiedDate":"2021-09-29"},{"lineNumber":108,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":109,"author":{"gitId":"kahhe"},"content":"    public static void printMissingText() {","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Retype and complete your sentence like a grown adult. Please.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":111,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":114,"author":{"gitId":"kahhe"},"content":"     * Prints message asking user for a number (the correct input).","lastModifiedDate":"2021-09-29"},{"lineNumber":115,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":116,"author":{"gitId":"kahhe"},"content":"    public static void printNumberExpected() {","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Does that look like a number to you? Type. A. Number.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":121,"author":{"gitId":"kahhe"},"content":"     * Prints notice that load file exists but is blank.","lastModifiedDate":"2021-09-29"},{"lineNumber":122,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":123,"author":{"gitId":"kahhe"},"content":"    public static void printBlankLoadFileFound() {","lastModifiedDate":"2021-09-29"},{"lineNumber":124,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Notice: previously saved file empty.                               │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":125,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":126,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":127,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":128,"author":{"gitId":"kahhe"},"content":"     * Prints message that load file does not exist.","lastModifiedDate":"2021-09-29"},{"lineNumber":129,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":130,"author":{"gitId":"kahhe"},"content":"    public static void printLoadFileNotFound() {","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT+ \"Load file: not found.                                              │\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":132,"author":{"gitId":"kahhe"},"content":"                + INDENT + \"Tasks added in this session will be automatically saved upon exit. │\");","lastModifiedDate":"2021-09-22"},{"lineNumber":133,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":136,"author":{"gitId":"kahhe"},"content":"     * Prints messsage that load file has corrupted data.","lastModifiedDate":"2021-09-29"},{"lineNumber":137,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":138,"author":{"gitId":"kahhe"},"content":"    public static void printLoadFileCorrupted() {","lastModifiedDate":"2021-09-29"},{"lineNumber":139,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"One corrupted data found. Corrupted data will be removed upon exit.│\");","lastModifiedDate":"2021-09-29"},{"lineNumber":140,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":141,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":142,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":143,"author":{"gitId":"kahhe"},"content":"     * Prints message that the task user has selected (using done or delete command) does not exist.","lastModifiedDate":"2021-09-29"},{"lineNumber":144,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":145,"author":{"gitId":"kahhe"},"content":"    public static void printTaskDoesNotExist() {","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Wha- Hey! Task does not exist!\");","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":150,"author":{"gitId":"kahhe"},"content":"     * Prints message that the task user has selected (using `done` or `delete` command) has been completed.","lastModifiedDate":"2021-09-29"},{"lineNumber":151,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":152,"author":{"gitId":"kahhe"},"content":"    public static void printTaskAlreadyDone() {","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Dude... you\u0027ve done the task already.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":157,"author":{"gitId":"kahhe"},"content":"     * Prints message that user\u0027s query cannot be found in the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":158,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":159,"author":{"gitId":"kahhe"},"content":"    public static void printQueryNotFound() {","lastModifiedDate":"2021-09-29"},{"lineNumber":160,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Are you not familiar with your list? Query not found.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":161,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":162,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":163,"author":{"gitId":"kahhe"},"content":"    // Positive feedback of successful executions","lastModifiedDate":"2021-09-29"},{"lineNumber":164,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":165,"author":{"gitId":"kahhe"},"content":"     * Prints message that task has been successfully added to list.","lastModifiedDate":"2021-09-29"},{"lineNumber":166,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":167,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":168,"author":{"gitId":"kahhe"},"content":"     * @param isPlural Boolean variable to tell whether task(s) should be singular to plural.","lastModifiedDate":"2021-09-29"},{"lineNumber":169,"author":{"gitId":"kahhe"},"content":"     * @param taskPending Number of remaining undone tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":170,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":171,"author":{"gitId":"kahhe"},"content":"    public static void printAddedTask(ArrayList\u003cTask\u003e tasks, String isPlural, int taskPending) {","lastModifiedDate":"2021-09-29"},{"lineNumber":172,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \" Fine. Added to your list:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":173,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"   \" + tasks.get(tasks.size() - 1));","lastModifiedDate":"2021-09-29"},{"lineNumber":174,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \" You have \" + taskPending + \" pending task\"","lastModifiedDate":"2021-09-29"},{"lineNumber":175,"author":{"gitId":"kahhe"},"content":"                + isPlural + \". tHaT\u0027s aWeSoMe!!!!!1!!\");","lastModifiedDate":"2021-09-29"},{"lineNumber":176,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":177,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":178,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":179,"author":{"gitId":"kahhe"},"content":"     * Prints message that saved file containing previously saved tasks has been loaded successfully.","lastModifiedDate":"2021-09-29"},{"lineNumber":180,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":181,"author":{"gitId":"kahhe"},"content":"    public static void printTasksLoadedSuccessfully() {","lastModifiedDate":"2021-09-29"},{"lineNumber":182,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Loaded previously saved file.                                      │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":183,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":184,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":185,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":186,"author":{"gitId":"kahhe"},"content":"     * Prints message that tasks inputted in session has been saved on a file.","lastModifiedDate":"2021-09-29"},{"lineNumber":187,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":188,"author":{"gitId":"kahhe"},"content":"    public static void printTasksSavedSuccessfully() {","lastModifiedDate":"2021-09-29"},{"lineNumber":189,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Tasks successfully saved to file.                                  │\");","lastModifiedDate":"2021-09-29"},{"lineNumber":190,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":191,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":192,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":193,"author":{"gitId":"kahhe"},"content":"     * Prints message of task that has been deleted by the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":194,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":195,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":196,"author":{"gitId":"kahhe"},"content":"     * @param taskNumber Index of task in the ArrayList.","lastModifiedDate":"2021-09-29"},{"lineNumber":197,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":198,"author":{"gitId":"kahhe"},"content":"    public static void printTaskDeleted(ArrayList\u003cTask\u003e tasks, int taskNumber) {","lastModifiedDate":"2021-09-29"},{"lineNumber":199,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"Lazy eh? Gotcha fam, removed the task:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":200,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"[\" + tasks.get(taskNumber).getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-29"},{"lineNumber":201,"author":{"gitId":"kahhe"},"content":"                + tasks.get(taskNumber).getTaskName());","lastModifiedDate":"2021-09-29"},{"lineNumber":202,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"You left \" + (tasks.size() - 1) + \" tasks in the list.\");","lastModifiedDate":"2021-09-29"},{"lineNumber":203,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":204,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":205,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":206,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":207,"author":{"gitId":"kahhe"},"content":"     * Prints message that task has been marked as done.","lastModifiedDate":"2021-09-29"},{"lineNumber":208,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":209,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":210,"author":{"gitId":"kahhe"},"content":"     * @param taskNumber Index of task in the ArrayList.","lastModifiedDate":"2021-09-29"},{"lineNumber":211,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":212,"author":{"gitId":"kahhe"},"content":"    public static void printTaskDone(ArrayList\u003cTask\u003e tasks, int taskNumber) {","lastModifiedDate":"2021-09-21"},{"lineNumber":213,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"About time. I\u0027ve mark that task as done:\");","lastModifiedDate":"2021-09-21"},{"lineNumber":214,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"[\" + tasks.get(taskNumber).getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-21"},{"lineNumber":215,"author":{"gitId":"kahhe"},"content":"                + tasks.get(taskNumber).getTaskName());","lastModifiedDate":"2021-09-21"},{"lineNumber":216,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":217,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":218,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":219,"author":{"gitId":"kahhe"},"content":"     * Prints message that a completed task is deleted from the list.","lastModifiedDate":"2021-09-29"},{"lineNumber":220,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":221,"author":{"gitId":"kahhe"},"content":"    public static void printDeleteDoneTask() {","lastModifiedDate":"2021-09-22"},{"lineNumber":222,"author":{"gitId":"kahhe"},"content":"        System.out.println(INDENT + \"But I\u0027ll delete for you, cus\u0027 I\u0027m nice. :)\");","lastModifiedDate":"2021-09-22"},{"lineNumber":223,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":224,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":225,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":226,"author":{"gitId":"kahhe"},"content":"     * Prints header message for a list of task to be printed afterwords.","lastModifiedDate":"2021-09-29"},{"lineNumber":227,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":228,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks. No printing if list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":229,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":230,"author":{"gitId":"kahhe"},"content":"    public static void printListHeader(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":231,"author":{"gitId":"kahhe"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":232,"author":{"gitId":"kahhe"},"content":"            System.out.println(INDENT + \"Here are your tasks, oRgAnIc iTeLlIgEnCe:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":233,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":234,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":235,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":236,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":237,"author":{"gitId":"kahhe"},"content":"     * Prints header message for a list of task matching user query to be printed afterwords.","lastModifiedDate":"2021-09-29"},{"lineNumber":238,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":239,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks. No printing if list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":240,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":241,"author":{"gitId":"kahhe"},"content":"    public static void printQueryListHeader(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":242,"author":{"gitId":"kahhe"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2021-09-29"},{"lineNumber":243,"author":{"gitId":"kahhe"},"content":"            System.out.println(INDENT + \"Here are the matching tasks, oRgAnIc iTeLlIgEnCe:\");","lastModifiedDate":"2021-09-29"},{"lineNumber":244,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-29"},{"lineNumber":245,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":246,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":247,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":248,"author":{"gitId":"kahhe"},"content":"     * Prints list of all tasks with all information in a helpful manner for the user.","lastModifiedDate":"2021-09-29"},{"lineNumber":249,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":250,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":251,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":252,"author":{"gitId":"kahhe"},"content":"    public static void printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":253,"author":{"gitId":"kahhe"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":254,"author":{"gitId":"kahhe"},"content":"            for (Task t : tasks) {","lastModifiedDate":"2021-09-21"},{"lineNumber":255,"author":{"gitId":"kahhe"},"content":"                System.out.println(INDENT + (tasks.indexOf(t) + 1) + \".\" + t.toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":256,"author":{"gitId":"kahhe"},"content":"            }","lastModifiedDate":"2021-09-21"},{"lineNumber":257,"author":{"gitId":"kahhe"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":258,"author":{"gitId":"kahhe"},"content":"            System.out.println(INDENT + \"Why are you asking for a list???                                   │\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":259,"author":{"gitId":"kahhe"},"content":"                    + INDENT + \"It\u0027s empty, like something I know.                                 │\");","lastModifiedDate":"2021-09-22"},{"lineNumber":260,"author":{"gitId":"kahhe"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":261,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":262,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":263,"author":{"gitId":"kahhe"},"content":"    // `show` methods incorporating the above `print` methods. S L A P P E D","lastModifiedDate":"2021-09-29"},{"lineNumber":264,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":265,"author":{"gitId":"kahhe"},"content":"     * Prints list of tasks with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":266,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":267,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":268,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":269,"author":{"gitId":"kahhe"},"content":"    public static void showList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":270,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":271,"author":{"gitId":"kahhe"},"content":"        printListHeader(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":272,"author":{"gitId":"kahhe"},"content":"        printList(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":273,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":274,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":275,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":276,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":277,"author":{"gitId":"kahhe"},"content":"     * Prints list of tasks that matches user query with UI embellishments","lastModifiedDate":"2021-09-29"},{"lineNumber":278,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":279,"author":{"gitId":"kahhe"},"content":"     * @param tasks ArrayList containing all the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":280,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":281,"author":{"gitId":"kahhe"},"content":"    public static void showQueryList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-29"},{"lineNumber":282,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":283,"author":{"gitId":"kahhe"},"content":"        printQueryListHeader(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":284,"author":{"gitId":"kahhe"},"content":"        printList(tasks);","lastModifiedDate":"2021-09-29"},{"lineNumber":285,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":286,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":287,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":288,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":289,"author":{"gitId":"kahhe"},"content":"     * Prints message that no task matches user\u0027s query with UI embellishments","lastModifiedDate":"2021-09-29"},{"lineNumber":290,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":291,"author":{"gitId":"kahhe"},"content":"    public static void showQueryNotFound() {","lastModifiedDate":"2021-09-29"},{"lineNumber":292,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":293,"author":{"gitId":"kahhe"},"content":"        printQueryNotFound();","lastModifiedDate":"2021-09-29"},{"lineNumber":294,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":295,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":296,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":297,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":298,"author":{"gitId":"kahhe"},"content":"     * Prints error message to user of wrong command used. Prompts user to input correct command.","lastModifiedDate":"2021-09-29"},{"lineNumber":299,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":300,"author":{"gitId":"kahhe"},"content":"     * @param text User input.","lastModifiedDate":"2021-09-29"},{"lineNumber":301,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":302,"author":{"gitId":"kahhe"},"content":"    public static void showWrongTaskTypeError(String text) {","lastModifiedDate":"2021-09-29"},{"lineNumber":303,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":304,"author":{"gitId":"kahhe"},"content":"        printUnexpectedCommand(text);","lastModifiedDate":"2021-09-29"},{"lineNumber":305,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":306,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":307,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":308,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":309,"author":{"gitId":"kahhe"},"content":"     * Prints error message for when user leaves out important information in input.","lastModifiedDate":"2021-09-21"},{"lineNumber":310,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":311,"author":{"gitId":"kahhe"},"content":"    public static void showMissingTextError() {","lastModifiedDate":"2021-09-29"},{"lineNumber":312,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":313,"author":{"gitId":"kahhe"},"content":"        printMissingText();","lastModifiedDate":"2021-09-21"},{"lineNumber":314,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":315,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":316,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":317,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":318,"author":{"gitId":"kahhe"},"content":"     * Prints error message for when an integer is expected from user (`done` or `delete` command).","lastModifiedDate":"2021-09-29"},{"lineNumber":319,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":320,"author":{"gitId":"kahhe"},"content":"    public static void showNumberFormatError() {","lastModifiedDate":"2021-09-29"},{"lineNumber":321,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":322,"author":{"gitId":"kahhe"},"content":"        printNumberExpected();","lastModifiedDate":"2021-09-21"},{"lineNumber":323,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":324,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":325,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":326,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":327,"author":{"gitId":"kahhe"},"content":"     * Prints all commands for user to familiarise.","lastModifiedDate":"2021-09-29"},{"lineNumber":328,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":329,"author":{"gitId":"kahhe"},"content":"     * @param userInput Extra text from user after `help` to be printed for fun.","lastModifiedDate":"2021-09-29"},{"lineNumber":330,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":331,"author":{"gitId":"kahhe"},"content":"    public static void showHelpMessage(String userInput) {","lastModifiedDate":"2021-09-29"},{"lineNumber":332,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":333,"author":{"gitId":"kahhe"},"content":"        printHelp(userInput);","lastModifiedDate":"2021-09-29"},{"lineNumber":334,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":335,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":336,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":337,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":338,"author":{"gitId":"kahhe"},"content":"     * Prints message that file was loaded successfully with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":339,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":340,"author":{"gitId":"kahhe"},"content":"    public static void showTaskLoadedSuccessMessage() {","lastModifiedDate":"2021-09-29"},{"lineNumber":341,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":342,"author":{"gitId":"kahhe"},"content":"        printTasksLoadedSuccessfully();","lastModifiedDate":"2021-09-29"},{"lineNumber":343,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":344,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":345,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":346,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":347,"author":{"gitId":"kahhe"},"content":"     * Prints message that loaded file is blank with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":348,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":349,"author":{"gitId":"kahhe"},"content":"    public static void showBlankLoadFileMessage() {","lastModifiedDate":"2021-09-29"},{"lineNumber":350,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":351,"author":{"gitId":"kahhe"},"content":"        printBlankLoadFileFound();","lastModifiedDate":"2021-09-29"},{"lineNumber":352,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":353,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":354,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":355,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":356,"author":{"gitId":"kahhe"},"content":"     * Prints message that load file does not exist with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":357,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":358,"author":{"gitId":"kahhe"},"content":"    public static void showLoadingFileMissing() {","lastModifiedDate":"2021-09-29"},{"lineNumber":359,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":360,"author":{"gitId":"kahhe"},"content":"        printLoadFileNotFound();","lastModifiedDate":"2021-09-22"},{"lineNumber":361,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":362,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":363,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":364,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":365,"author":{"gitId":"kahhe"},"content":"     * Prints message that a data in the load file is corrupted with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":366,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":367,"author":{"gitId":"kahhe"},"content":"    public static void showLoadFileCorrupted() {","lastModifiedDate":"2021-09-29"},{"lineNumber":368,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"kahhe"},"content":"        printLoadFileCorrupted();","lastModifiedDate":"2021-09-29"},{"lineNumber":370,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":371,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":372,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":374,"author":{"gitId":"kahhe"},"content":"     * Loads previously save file (if any) and prints greeting message to user when code is ran with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":375,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":376,"author":{"gitId":"kahhe"},"content":"    public static void greetUser() {","lastModifiedDate":"2021-09-21"},{"lineNumber":377,"author":{"gitId":"kahhe"},"content":"        Storage.load();","lastModifiedDate":"2021-09-29"},{"lineNumber":378,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":379,"author":{"gitId":"kahhe"},"content":"        printLogo();","lastModifiedDate":"2021-09-21"},{"lineNumber":380,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":381,"author":{"gitId":"kahhe"},"content":"        printGreeting();","lastModifiedDate":"2021-09-21"},{"lineNumber":382,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":383,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":384,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":385,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":386,"author":{"gitId":"kahhe"},"content":"     * Prints a snarky remark to user with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":387,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":388,"author":{"gitId":"kahhe"},"content":"    public static void mockUser() {","lastModifiedDate":"2021-09-21"},{"lineNumber":389,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":390,"author":{"gitId":"kahhe"},"content":"        printMockery();","lastModifiedDate":"2021-09-21"},{"lineNumber":391,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":392,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":393,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":394,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":395,"author":{"gitId":"kahhe"},"content":"     * Prints farewell message to user and exits code with UI embellishments.","lastModifiedDate":"2021-09-29"},{"lineNumber":396,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":397,"author":{"gitId":"kahhe"},"content":"    public static void byeUser() {","lastModifiedDate":"2021-09-21"},{"lineNumber":398,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":399,"author":{"gitId":"kahhe"},"content":"        printGoodbye();","lastModifiedDate":"2021-09-21"},{"lineNumber":400,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-21"},{"lineNumber":401,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":402,"author":{"gitId":"kahhe"},"content":"        printTopLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":403,"author":{"gitId":"kahhe"},"content":"        printTasksSavedSuccessfully();","lastModifiedDate":"2021-09-29"},{"lineNumber":404,"author":{"gitId":"kahhe"},"content":"        printBottomLine();","lastModifiedDate":"2021-09-29"},{"lineNumber":405,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":406,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"kahhe":406}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"kahhe":5}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"public class TodoCommand extends Command{","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"kahhe":4}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke.task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"    protected String by;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"    protected String type;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"     * @param isDone Whether task has been done or not.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"     * @param taskName Name of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"     * @param by Deadline of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"    public Deadline(boolean isDone, String taskName, String by) {","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"        super(taskName);","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"        this.type \u003d \"D\";","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"     * Returns information about task in a sensible form.","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"     * @return Information about task in a string.","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"    public String toString() {","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"     * Returns a String of information about task in format readable by load() method.","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"     * @param DELIMITER Delimiter separating information in return String.","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"     * @return String of task information.","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"    @Override","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"    public String toSaveFile(String DELIMITER) {","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"        return \"D\" + super.toSaveFile(DELIMITER) + DELIMITER + by;","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"kahhe":41}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke.task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"    protected String at;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"    protected String type;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"     * Constructor for Event.","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"     * @param isDone Whether task has been done or not.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"     * @param taskName Name of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"     * @param at Deadline of the task.","lastModifiedDate":"2021-09-29"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"    public Event(boolean isDone, String taskName, String at) {","lastModifiedDate":"2021-09-29"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"        super(taskName);","lastModifiedDate":"2021-09-29"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"        this.type \u003d \"E\";","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"     * Returns information about task in a sensible form.","lastModifiedDate":"2021-09-29"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"     * @return Information about task in a string.","lastModifiedDate":"2021-09-29"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"    public String toString() {","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"     * Returns a String of information about task in format readable by load() method.","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"     * @param DELIMITER Delimiter separating information in return String.","lastModifiedDate":"2021-09-29"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"     * @return String of task information.","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"    @Override","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"    public String toSaveFile(String DELIMITER) {","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"        return \"E\" + super.toSaveFile(DELIMITER) + DELIMITER + at;","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"kahhe":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke.task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"public class Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"    protected String taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"     * Constructor for Task, generates name and status of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"     * @param description Name of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"        this.taskName \u003d description;","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"     * Checks if task has been completed and returns the corresponding symbol.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"     * @return Whitespace if task is not completed, tick if task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"     * Gets the boolean value of isDone.","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"     * @return True or false depending on isDone.","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"    public boolean getDoneStatus() {","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"        return isDone;","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"     * Gets name of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"     * @return Name of task as a String.","lastModifiedDate":"2021-09-29"},{"lineNumber":40,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":41,"author":{"gitId":"kahhe"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"kahhe"},"content":"        return taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":46,"author":{"gitId":"kahhe"},"content":"     * Changes the name of the tasks.","lastModifiedDate":"2021-09-29"},{"lineNumber":47,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":48,"author":{"gitId":"kahhe"},"content":"     * @param newTaskName String containing the new name to replace the old name.","lastModifiedDate":"2021-09-29"},{"lineNumber":49,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":50,"author":{"gitId":"kahhe"},"content":"    public void setTaskName(String newTaskName) {","lastModifiedDate":"2021-09-29"},{"lineNumber":51,"author":{"gitId":"kahhe"},"content":"            taskName \u003d newTaskName;","lastModifiedDate":"2021-09-29"},{"lineNumber":52,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-29"},{"lineNumber":53,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":54,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":55,"author":{"gitId":"kahhe"},"content":"     * Sets isDone value to true.","lastModifiedDate":"2021-09-29"},{"lineNumber":56,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":57,"author":{"gitId":"kahhe"},"content":"    public void setAsDone() {","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"kahhe"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":61,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":62,"author":{"gitId":"kahhe"},"content":"     * Returns information about task in a sensible form.","lastModifiedDate":"2021-09-29"},{"lineNumber":63,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":64,"author":{"gitId":"kahhe"},"content":"     * @return Information about task in a string.","lastModifiedDate":"2021-09-29"},{"lineNumber":65,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":66,"author":{"gitId":"kahhe"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":67,"author":{"gitId":"kahhe"},"content":"    public String toString() {","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"kahhe"},"content":"        return \"[\" + getStatusIcon() + \"] \" + taskName;","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":72,"author":{"gitId":"kahhe"},"content":"     * Returns a String of information about task in format readable by load() method.","lastModifiedDate":"2021-09-29"},{"lineNumber":73,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":74,"author":{"gitId":"kahhe"},"content":"     * @param DELIMITER Delimiter separating information in return String.","lastModifiedDate":"2021-09-29"},{"lineNumber":75,"author":{"gitId":"kahhe"},"content":"     * @return String of task information.","lastModifiedDate":"2021-09-29"},{"lineNumber":76,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":77,"author":{"gitId":"kahhe"},"content":"    public String toSaveFile(String DELIMITER) {","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"kahhe"},"content":"        return DELIMITER + (isDone? 1 : 0) + DELIMITER + taskName;","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"kahhe":80}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"package duke.task;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"kahhe"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"kahhe"},"content":"    protected String type;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"kahhe"},"content":"     * Constructor for Todo.","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"kahhe"},"content":"     * @param isDone Whether task has been done or not.","lastModifiedDate":"2021-09-29"},{"lineNumber":10,"author":{"gitId":"kahhe"},"content":"     * @param taskName Name of task.","lastModifiedDate":"2021-09-29"},{"lineNumber":11,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":12,"author":{"gitId":"kahhe"},"content":"    public Todo(boolean isDone, String taskName) {","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"kahhe"},"content":"        super(taskName);","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"kahhe"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"kahhe"},"content":"        this.type \u003d \"T\";","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":19,"author":{"gitId":"kahhe"},"content":"     * Returns information about task in a sensible form.","lastModifiedDate":"2021-09-29"},{"lineNumber":20,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":21,"author":{"gitId":"kahhe"},"content":"     * @return Information about task in a string.","lastModifiedDate":"2021-09-29"},{"lineNumber":22,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":23,"author":{"gitId":"kahhe"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"kahhe"},"content":"    public String toString() {","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"kahhe"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"kahhe"},"content":"    /**","lastModifiedDate":"2021-09-29"},{"lineNumber":29,"author":{"gitId":"kahhe"},"content":"     * Returns a String of information about task in format readable by load() method.","lastModifiedDate":"2021-09-29"},{"lineNumber":30,"author":{"gitId":"kahhe"},"content":"     *","lastModifiedDate":"2021-09-29"},{"lineNumber":31,"author":{"gitId":"kahhe"},"content":"     * @param DELIMITER Delimiter separating information in return String.","lastModifiedDate":"2021-09-29"},{"lineNumber":32,"author":{"gitId":"kahhe"},"content":"     * @return String of task information.","lastModifiedDate":"2021-09-29"},{"lineNumber":33,"author":{"gitId":"kahhe"},"content":"     */","lastModifiedDate":"2021-09-29"},{"lineNumber":34,"author":{"gitId":"kahhe"},"content":"    @Override","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"kahhe"},"content":"    public String toSaveFile(String DELIMITER) {","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"kahhe"},"content":"        return \"T\" + super.toSaveFile(DELIMITER);","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"kahhe"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"kahhe"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"kahhe"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"kahhe":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kahhe"},"content":"todo Homework someday","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"kahhe":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"kahhe"},"content":"java -classpath C..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"kahhe":1}}]
