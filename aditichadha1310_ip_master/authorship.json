[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"# User Guide - **_Duke_**","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"**Duke** is a desktop app to **manage tasks and keep a track of things**. It is a **Personal Assistant Chatbot** that","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"can store data and help you keep a track of your scheduled tasks. It is optimized for use via a Command Line Interface (","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"CLI) that can help you manage your tasks faster than the traditional GUI apps.","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"## Table of Contents","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"- [Features](#features)","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"    * [Viewing help](#viewing-help--help)","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"    * [Adding a Todo](#adding-a-todo-todo-description)","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"    * [Adding a Deadline](#adding-a-deadline-deadline-description-by-date_time)","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"    * [Adding an Event](#adding-an-event-event-description-at-date_time)","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"    * [Listing all Tasks](#listing-all-tasks-list\")","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"    * [Marking a task as done](#marking-a-task-as-done-done-index_number)","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"    * [Deleting a task](#deleting-a-task-delete-index_number)","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"    * [Searching for tasks](#searching-for-tasks-find-keyword)","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"    * [Saving the tasks](#saving-the-tasks)","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"    * [Exiting the program](#exit-the-application--bye)","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"- [FAQ](#faq)","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"- [Command Summary]()","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"-------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"## Quick Start","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"1. Ensure that you have Java `11` or above installed in your computer.","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"2. Download the latest `ip.jar` from [here](https://github.com/aditichadha1310/ip).","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"3. Copy the file to the folder you want to use as the home folder for your `Personal Assistant Chatbot- Duke`.","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"4. Write the command `java -jar ip.jar` to start the application.","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"You should see the following output :","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"aditichadha1310"},"content":"Hello! I\u0027m Duke","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"What can I do for you?","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"aditichadha1310"},"content":"5. Note the sample commands given below! Type a command and press `Enter` to execute it. e.g. typing `help` will display","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"aditichadha1310"},"content":"   all possible commands that **DUKE** accepts.","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"aditichadha1310"},"content":"Some example commands you can try:","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"aditichadha1310"},"content":"- `list` : Lists all tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"aditichadha1310"},"content":"- `todo \u003cdescription\u003e` : Adds a TODO task in the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"aditichadha1310"},"content":"- `deadline \u003cdescription\u003e /by \u003cDate_Time\u003e` : Adds a DEADLINE task to be completed by `\u003cdate_time\u003e` in the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"aditichadha1310"},"content":"- `event \u003cdescription\u003e /at \u003cDate_Time\u003e` : Adds an EVENT task that will take place at `\u003cdate_time\u003e` in the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"aditichadha1310"},"content":"- `delete \u003c5\u003e` : Deletes the 5th task from the current list.","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"aditichadha1310"},"content":"- `bye` : Exits the application.","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"aditichadha1310"},"content":"---","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"aditichadha1310"},"content":"**Notes about the command formats**","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"aditichadha1310"},"content":"\u003e - Words in `\u003cUPPER_CASE\u003e` are the parameters to be given by the user. \u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"aditichadha1310"},"content":"    \u003e e.g. in `todo \u003cDESCRIPTION\u003e`, \u003cDESCRIPTION\u003e is a parameter which can be used as : `todo Read Novel`","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"aditichadha1310"},"content":"    \u003e \u003cbr /\u003e\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"aditichadha1310"},"content":"\u003e - Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `bye`) will be ignored.\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"aditichadha1310"},"content":"    \u003e e.g. `list 123` will be interpreted as `list`.","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":67,"author":{"gitId":"aditichadha1310"},"content":"------------------------------------------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":69,"author":{"gitId":"aditichadha1310"},"content":"### Viewing help : `help`","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":71,"author":{"gitId":"aditichadha1310"},"content":"This will list all the valid commands that DUKE accepts.","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":73,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"aditichadha1310"},"content":"help","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"aditichadha1310"},"content":"The following is a list of commands that Duke accepts :","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"aditichadha1310"},"content":"-\u003e help","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"aditichadha1310"},"content":"-\u003e todo","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"aditichadha1310"},"content":"-\u003e deadline","lastModifiedDate":"2021-09-26"},{"lineNumber":80,"author":{"gitId":"aditichadha1310"},"content":"-\u003e event","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"aditichadha1310"},"content":"-\u003e list","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"aditichadha1310"},"content":"-\u003e done","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"aditichadha1310"},"content":"-\u003e delete","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"aditichadha1310"},"content":"-\u003e find","lastModifiedDate":"2021-09-26"},{"lineNumber":85,"author":{"gitId":"aditichadha1310"},"content":"-\u003e bye","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"aditichadha1310"},"content":"-\u003e For details please refer to the User Guide of Duke at the link given below:","lastModifiedDate":"2021-09-26"},{"lineNumber":87,"author":{"gitId":"aditichadha1310"},"content":"-\u003e https://aditichadha1310.github.io/ip/","lastModifiedDate":"2021-09-26"},{"lineNumber":88,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":89,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":90,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":92,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":94,"author":{"gitId":"aditichadha1310"},"content":"### Adding a TODO: `todo \u003cDESCRIPTION\u003e`","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":96,"author":{"gitId":"aditichadha1310"},"content":"Adds a *TODO* task to the task list. By default, the task is set to **not done**.","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"aditichadha1310"},"content":"- **DESCRIPTION** :  is the description of the Task.","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":100,"author":{"gitId":"aditichadha1310"},"content":"Example: `todo Complete CS2113T Assignment`","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":102,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"aditichadha1310"},"content":"todo Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":104,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":105,"author":{"gitId":"aditichadha1310"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-26"},{"lineNumber":106,"author":{"gitId":"aditichadha1310"},"content":" [T][ ] Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"aditichadha1310"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":111,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"aditichadha1310"},"content":"### Adding a DEADLINE: `deadline \u003cDESCRIPTION\u003e /by \u003cDATE_TIME\u003e`","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"aditichadha1310"},"content":"Adds a *DEADLINE* task to the task list. By default, the task is set to **not done**.","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"aditichadha1310"},"content":"- **DESCRIPTION** : is the description of the Task.","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"aditichadha1310"},"content":"- **/by** : is a *REQUIRED* clause when adding a deadline","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"aditichadha1310"},"content":"- **DATE_TIME** : are the *date* and *time* that the task is due by. This **CANNOT BE EMPTY OR INVALID**.","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"aditichadha1310"},"content":"\u003e Note: date_time needs to be given in a valid format.","lastModifiedDate":"2021-09-26"},{"lineNumber":123,"author":{"gitId":"aditichadha1310"},"content":"\u003e* The correct format is **YYYY-MM-DD HH:MM**.","lastModifiedDate":"2021-09-26"},{"lineNumber":124,"author":{"gitId":"aditichadha1310"},"content":"\u003e* Note: Every deadline creation statement _**requires**_ Date and Time given in the **correct format** as given above.","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"aditichadha1310"},"content":"\u003e* Some examples of valid and invalid date and time formats are-","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e - 2021-12-10 12:00 -\u003e  **VALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":127,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 2020-08-10 1000 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":128,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 12-10-2024 12:00 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":129,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 12-2024-09 12:00 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 2022-09-0912:00 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":131,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 2024-7-8 12:00 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":132,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 2023-07-08 4 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":133,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 2022-07-08 24:30 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":134,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 2022-07-08 0:54 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":135,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 22-07-08 00:54 -\u003e **INVALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":136,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- 2022-07-08 00:54 -\u003e  **VALID**","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"aditichadha1310"},"content":"\u003e* Note: The date of the month, the number of the month, the hours and minutes should be in **double digits**.","lastModifiedDate":"2021-09-26"},{"lineNumber":138,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e - For example: If date is 9 August 2021 , it should be written as 2021-08-09.","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- Similarly, the year should be given as a four digit - **YYYY**.","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- The timing should contain double digits for the hours and minutes separated by a **colon**. Timing without a colon is not acceptable. For example : 02:08 is **valid** whereas 2:08 and 0208 are **invalid** timing formats.","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"aditichadha1310"},"content":"\u003e\u003e- The timing follows the 24-hour notation: `HH:MM`.","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"aditichadha1310"},"content":"Example: `deadline read book /by 2021-10-13 16:00`","lastModifiedDate":"2021-09-26"},{"lineNumber":144,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":145,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"aditichadha1310"},"content":"deadline read book /by 2021-10-13 16:00","lastModifiedDate":"2021-09-26"},{"lineNumber":147,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":148,"author":{"gitId":"aditichadha1310"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-26"},{"lineNumber":149,"author":{"gitId":"aditichadha1310"},"content":" [D][ ] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":150,"author":{"gitId":"aditichadha1310"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":151,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":153,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":154,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":155,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":156,"author":{"gitId":"aditichadha1310"},"content":"### Adding an EVENT: `event \u003cDESCRIPTION\u003e /at \u003cDATE_TIME\u003e`","lastModifiedDate":"2021-09-26"},{"lineNumber":157,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":158,"author":{"gitId":"aditichadha1310"},"content":"Adds a *EVENT* task to the task list. By default, the task is set to **not done**.","lastModifiedDate":"2021-09-26"},{"lineNumber":159,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":160,"author":{"gitId":"aditichadha1310"},"content":"- **DESCRIPTION** :  is the description of the Task.","lastModifiedDate":"2021-09-26"},{"lineNumber":161,"author":{"gitId":"aditichadha1310"},"content":"- **/at** : is a *REQUIRED* clause when adding an event","lastModifiedDate":"2021-09-26"},{"lineNumber":162,"author":{"gitId":"aditichadha1310"},"content":"- **DATE_TIME** : are the *date* and *time* for which the event is scheduled. This **CANNOT BE EMPTY OR INVALID**.","lastModifiedDate":"2021-09-26"},{"lineNumber":163,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":164,"author":{"gitId":"aditichadha1310"},"content":"\u003e Note: date_time needs to be given in a valid format.","lastModifiedDate":"2021-09-26"},{"lineNumber":165,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"aditichadha1310"},"content":"- The correct format is **YYYY-MM-DD HH:MM**.","lastModifiedDate":"2021-09-26"},{"lineNumber":167,"author":{"gitId":"aditichadha1310"},"content":"- For details about the date and time format, please refer","lastModifiedDate":"2021-09-26"},{"lineNumber":168,"author":{"gitId":"aditichadha1310"},"content":"  to [this](#adding-a-deadline-deadline-description-by-date_time) section.","lastModifiedDate":"2021-09-26"},{"lineNumber":169,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":170,"author":{"gitId":"aditichadha1310"},"content":"Example: `event attend lecture /at 2021-11-21 08:00`","lastModifiedDate":"2021-09-26"},{"lineNumber":171,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":172,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":173,"author":{"gitId":"aditichadha1310"},"content":"event attend lecture /at 2021-11-21 08:00","lastModifiedDate":"2021-09-26"},{"lineNumber":174,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":175,"author":{"gitId":"aditichadha1310"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-26"},{"lineNumber":176,"author":{"gitId":"aditichadha1310"},"content":" [E][ ] attend lecture  (at:NOVEMBER 21, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":177,"author":{"gitId":"aditichadha1310"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":178,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":179,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":180,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":181,"author":{"gitId":"aditichadha1310"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-26"},{"lineNumber":182,"author":{"gitId":"aditichadha1310"},"content":"1.[T][ ] Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":183,"author":{"gitId":"aditichadha1310"},"content":"2.[D][ ] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":184,"author":{"gitId":"aditichadha1310"},"content":"3.[E][ ] attend lecture  (at:NOVEMBER 21, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":185,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":186,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":187,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":188,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":189,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e  ","lastModifiedDate":"2021-09-26"},{"lineNumber":190,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":191,"author":{"gitId":"aditichadha1310"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":192,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":193,"author":{"gitId":"aditichadha1310"},"content":"This command lists all the tasks currently scheduled in the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":194,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":195,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":196,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":197,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":198,"author":{"gitId":"aditichadha1310"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-26"},{"lineNumber":199,"author":{"gitId":"aditichadha1310"},"content":"1.[T][ ] Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":200,"author":{"gitId":"aditichadha1310"},"content":"2.[D][X] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":201,"author":{"gitId":"aditichadha1310"},"content":"3.[E][ ] attend lecture  (at:NOVEMBER 21, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":202,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":203,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":204,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":205,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":206,"author":{"gitId":"aditichadha1310"},"content":"The format for each Task printed is:","lastModifiedDate":"2021-09-26"},{"lineNumber":207,"author":{"gitId":"aditichadha1310"},"content":"`[TaskType][isDone] Description (Deadline/Event Time)`","lastModifiedDate":"2021-09-26"},{"lineNumber":208,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":209,"author":{"gitId":"aditichadha1310"},"content":"**TaskType:**","lastModifiedDate":"2021-09-26"},{"lineNumber":210,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":211,"author":{"gitId":"aditichadha1310"},"content":"* T -\u003e TODO task","lastModifiedDate":"2021-09-26"},{"lineNumber":212,"author":{"gitId":"aditichadha1310"},"content":"* D -\u003e DEADLINE Task","lastModifiedDate":"2021-09-26"},{"lineNumber":213,"author":{"gitId":"aditichadha1310"},"content":"* E -\u003e EVENT Task","lastModifiedDate":"2021-09-26"},{"lineNumber":214,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":215,"author":{"gitId":"aditichadha1310"},"content":"**isDone:**","lastModifiedDate":"2021-09-26"},{"lineNumber":216,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":217,"author":{"gitId":"aditichadha1310"},"content":"* \\[ ]  -\u003e not done","lastModifiedDate":"2021-09-26"},{"lineNumber":218,"author":{"gitId":"aditichadha1310"},"content":"* \\[X] -\u003e done","lastModifiedDate":"2021-09-26"},{"lineNumber":219,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":220,"author":{"gitId":"aditichadha1310"},"content":"**Deadline/Event Time**","lastModifiedDate":"2021-09-26"},{"lineNumber":221,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":222,"author":{"gitId":"aditichadha1310"},"content":"* *null* -\u003e In case of a Todo there is no deadline or event time.","lastModifiedDate":"2021-09-26"},{"lineNumber":223,"author":{"gitId":"aditichadha1310"},"content":"* (by:MONTH_NAME DAY_OF_MONTH, YEAR TIME) -\u003e In case of a Deadline","lastModifiedDate":"2021-09-26"},{"lineNumber":224,"author":{"gitId":"aditichadha1310"},"content":"* (at:MONTH_NAME DAY_OF_MONTH, YEAR TIME) -\u003e In case of an Event","lastModifiedDate":"2021-09-26"},{"lineNumber":225,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":226,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":227,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":228,"author":{"gitId":"aditichadha1310"},"content":"### Marking a task as done: `done \u003cINDEX_NUMBER\u003e`","lastModifiedDate":"2021-09-26"},{"lineNumber":229,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":230,"author":{"gitId":"aditichadha1310"},"content":"Marks the task present at the specified **INDEX_NUMBER** as _done_ in the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":231,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":232,"author":{"gitId":"aditichadha1310"},"content":"- **INDEX_NUMBER** : index as displayed in the Task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":233,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":234,"author":{"gitId":"aditichadha1310"},"content":"Example: `list` -\u003e `done 2` -\u003e `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":235,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":236,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":237,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":238,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":239,"author":{"gitId":"aditichadha1310"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-26"},{"lineNumber":240,"author":{"gitId":"aditichadha1310"},"content":"1.[T][ ] Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":241,"author":{"gitId":"aditichadha1310"},"content":"2.[D][ ] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":242,"author":{"gitId":"aditichadha1310"},"content":"3.[E][ ] attend lecture  (at:NOVEMBER 21, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":243,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":244,"author":{"gitId":"aditichadha1310"},"content":"done 2","lastModifiedDate":"2021-09-26"},{"lineNumber":245,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":246,"author":{"gitId":"aditichadha1310"},"content":"Nice! I have marked this task as done:","lastModifiedDate":"2021-09-26"},{"lineNumber":247,"author":{"gitId":"aditichadha1310"},"content":"[D][X] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":248,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":249,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":250,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":251,"author":{"gitId":"aditichadha1310"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-26"},{"lineNumber":252,"author":{"gitId":"aditichadha1310"},"content":"1.[T][ ] Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":253,"author":{"gitId":"aditichadha1310"},"content":"2.[D][X] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":254,"author":{"gitId":"aditichadha1310"},"content":"3.[E][ ] attend lecture  (at:NOVEMBER 21, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":255,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":256,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":257,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":258,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":259,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":260,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":261,"author":{"gitId":"aditichadha1310"},"content":"### Deleting a task: `delete \u003cINDEX_NUMBER\u003e`","lastModifiedDate":"2021-09-26"},{"lineNumber":262,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":263,"author":{"gitId":"aditichadha1310"},"content":"Deletes the task present at the specified **index_number** in the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":264,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":265,"author":{"gitId":"aditichadha1310"},"content":"- **INDEX_NUMBER** : index as displayed in the Task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":266,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":267,"author":{"gitId":"aditichadha1310"},"content":"Example: `list` -\u003e `delete 2` -\u003e `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":268,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":269,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":270,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":271,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":272,"author":{"gitId":"aditichadha1310"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-26"},{"lineNumber":273,"author":{"gitId":"aditichadha1310"},"content":"1.[T][ ] Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":274,"author":{"gitId":"aditichadha1310"},"content":"2.[D][X] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":275,"author":{"gitId":"aditichadha1310"},"content":"3.[E][ ] attend lecture  (at:NOVEMBER 21, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":276,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":277,"author":{"gitId":"aditichadha1310"},"content":"delete 2","lastModifiedDate":"2021-09-26"},{"lineNumber":278,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":279,"author":{"gitId":"aditichadha1310"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-26"},{"lineNumber":280,"author":{"gitId":"aditichadha1310"},"content":"[D][X] read book  (by:OCTOBER 13, 2021 04:00 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":281,"author":{"gitId":"aditichadha1310"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":282,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":283,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":284,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":285,"author":{"gitId":"aditichadha1310"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-26"},{"lineNumber":286,"author":{"gitId":"aditichadha1310"},"content":"1.[T][ ] Complete CS2113T Assignment","lastModifiedDate":"2021-09-26"},{"lineNumber":287,"author":{"gitId":"aditichadha1310"},"content":"2.[E][ ] attend lecture  (at:NOVEMBER 21, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":288,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":289,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":290,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":291,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":292,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":293,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":294,"author":{"gitId":"aditichadha1310"},"content":"### Searching for tasks: `find \u003cKEYWORD\u003e`","lastModifiedDate":"2021-09-26"},{"lineNumber":295,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":296,"author":{"gitId":"aditichadha1310"},"content":"Queries the task list by the passed search keyword.","lastModifiedDate":"2021-09-26"},{"lineNumber":297,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":298,"author":{"gitId":"aditichadha1310"},"content":"- All tasks that contains the `KEYWORD` in their task description will be displayed.","lastModifiedDate":"2021-09-26"},{"lineNumber":299,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":300,"author":{"gitId":"aditichadha1310"},"content":"Example: `list` -\u003e `find Attend`","lastModifiedDate":"2021-09-26"},{"lineNumber":301,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":302,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":303,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-09-26"},{"lineNumber":304,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":305,"author":{"gitId":"aditichadha1310"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-26"},{"lineNumber":306,"author":{"gitId":"aditichadha1310"},"content":"1.[E][ ] Attend CS2113T lecture  (at:NOVEMBER 13, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":307,"author":{"gitId":"aditichadha1310"},"content":"2.[D][X] Complete CG2271 Labs  (by:DECEMBER 4, 2021 09:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":308,"author":{"gitId":"aditichadha1310"},"content":"3.[T][X] Attend carnival","lastModifiedDate":"2021-09-26"},{"lineNumber":309,"author":{"gitId":"aditichadha1310"},"content":"4.[D][ ] Finish all assignments  (by:DECEMBER 25, 2021 11:59 p.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":310,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":311,"author":{"gitId":"aditichadha1310"},"content":"find Attend","lastModifiedDate":"2021-09-26"},{"lineNumber":312,"author":{"gitId":"aditichadha1310"},"content":"[E][ ] Attend CS2113T lecture  (at:NOVEMBER 13, 2021 08:00 a.m.)","lastModifiedDate":"2021-09-26"},{"lineNumber":313,"author":{"gitId":"aditichadha1310"},"content":"[T][X] Attend carnival","lastModifiedDate":"2021-09-26"},{"lineNumber":314,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":315,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":316,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":317,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":318,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":319,"author":{"gitId":"aditichadha1310"},"content":"### Saving the Tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":320,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":321,"author":{"gitId":"aditichadha1310"},"content":"All updates made to the task list are automatically saved to a local file `duke.txt`","lastModifiedDate":"2021-09-26"},{"lineNumber":322,"author":{"gitId":"aditichadha1310"},"content":"\u003e Note: There is no need to save manually.","lastModifiedDate":"2021-09-26"},{"lineNumber":323,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":324,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":325,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":326,"author":{"gitId":"aditichadha1310"},"content":"### Exit the application : `bye`","lastModifiedDate":"2021-09-26"},{"lineNumber":327,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":328,"author":{"gitId":"aditichadha1310"},"content":"Exits the application and closes **Duke**.","lastModifiedDate":"2021-09-26"},{"lineNumber":329,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":330,"author":{"gitId":"aditichadha1310"},"content":"Example: `bye`","lastModifiedDate":"2021-09-26"},{"lineNumber":331,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":332,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":333,"author":{"gitId":"aditichadha1310"},"content":"bye","lastModifiedDate":"2021-09-26"},{"lineNumber":334,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":335,"author":{"gitId":"aditichadha1310"},"content":" Bye. Hope to see you again soon!","lastModifiedDate":"2021-09-26"},{"lineNumber":336,"author":{"gitId":"aditichadha1310"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-26"},{"lineNumber":337,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":338,"author":{"gitId":"aditichadha1310"},"content":"```","lastModifiedDate":"2021-09-26"},{"lineNumber":339,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":340,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":341,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":342,"author":{"gitId":"aditichadha1310"},"content":"-----------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":343,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":344,"author":{"gitId":"aditichadha1310"},"content":"## FAQ","lastModifiedDate":"2021-09-26"},{"lineNumber":345,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":346,"author":{"gitId":"aditichadha1310"},"content":"**Q:** Why am I unable to create a task in the past?","lastModifiedDate":"2021-09-26"},{"lineNumber":347,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":348,"author":{"gitId":"aditichadha1310"},"content":"**A:** The tasks are generally scheduled for the future, thus Duke does not allow users to schedule a task for a past","lastModifiedDate":"2021-09-26"},{"lineNumber":349,"author":{"gitId":"aditichadha1310"},"content":"date.","lastModifiedDate":"2021-09-26"},{"lineNumber":350,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":351,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":352,"author":{"gitId":"aditichadha1310"},"content":"**Q:** How can I delete multiple tasks or mark multiple tasks as done in one command?","lastModifiedDate":"2021-09-26"},{"lineNumber":353,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":354,"author":{"gitId":"aditichadha1310"},"content":"**A:** Deleting multiple tasks and marking multiple tasks as done in one single command is currently unsupported, but an","lastModifiedDate":"2021-09-26"},{"lineNumber":355,"author":{"gitId":"aditichadha1310"},"content":"alternative option is to delete/mark the tasks as done one by one.","lastModifiedDate":"2021-09-26"},{"lineNumber":356,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":357,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":358,"author":{"gitId":"aditichadha1310"},"content":"**Q:** How do I transfer my data to another PC?","lastModifiedDate":"2021-09-26"},{"lineNumber":359,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":360,"author":{"gitId":"aditichadha1310"},"content":"**A:** Install the app in the other computer and overwrite the empty data file it creates with the file that contains","lastModifiedDate":"2021-09-26"},{"lineNumber":361,"author":{"gitId":"aditichadha1310"},"content":"the data from your previous Duke home folder.","lastModifiedDate":"2021-09-26"},{"lineNumber":362,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":363,"author":{"gitId":"aditichadha1310"},"content":"\u003cbr /\u003e","lastModifiedDate":"2021-09-26"},{"lineNumber":364,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":365,"author":{"gitId":"aditichadha1310"},"content":"--------------------------------------------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":366,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":367,"author":{"gitId":"aditichadha1310"},"content":"## Command Summary","lastModifiedDate":"2021-09-26"},{"lineNumber":368,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":369,"author":{"gitId":"aditichadha1310"},"content":"| Command Format     | Action |","lastModifiedDate":"2021-09-26"},{"lineNumber":370,"author":{"gitId":"aditichadha1310"},"content":"| ----------- | ----------- |","lastModifiedDate":"2021-09-26"},{"lineNumber":371,"author":{"gitId":"aditichadha1310"},"content":"| `help`                                  | Lists all the valid commands                                  |","lastModifiedDate":"2021-09-26"},{"lineNumber":372,"author":{"gitId":"aditichadha1310"},"content":"| `list`                                  | Lists all the scheduled tasks from the task list              |","lastModifiedDate":"2021-09-26"},{"lineNumber":373,"author":{"gitId":"aditichadha1310"},"content":"| `find \u003cSEARCH_KEYWORD\u003e`                 | Searches in the task list for tasks which contain the keyword |","lastModifiedDate":"2021-09-26"},{"lineNumber":374,"author":{"gitId":"aditichadha1310"},"content":"| `todo \u003cDESCRIPTION\u003e`                    | Adds a todo task with description                             |","lastModifiedDate":"2021-09-26"},{"lineNumber":375,"author":{"gitId":"aditichadha1310"},"content":"| `deadline \u003cDESCRIPTION\u003e /by \u003cDATE_TIME\u003e`| Adds a deadline task with description and a deadline          |","lastModifiedDate":"2021-09-26"},{"lineNumber":376,"author":{"gitId":"aditichadha1310"},"content":"| `event \u003cDESCRIPTION\u003e /at \u003cDATE_TIME\u003e`   | Adds an event task with description and event timing          |","lastModifiedDate":"2021-09-26"},{"lineNumber":377,"author":{"gitId":"aditichadha1310"},"content":"| `delete \u003cINDEX_NUMBER\u003e`                 | Deletes the task from the specified index                     |","lastModifiedDate":"2021-09-26"},{"lineNumber":378,"author":{"gitId":"aditichadha1310"},"content":"| `done \u003cINDEX_NUMBER\u003e`                   | Marks the task at the specified index as done                 |","lastModifiedDate":"2021-09-26"},{"lineNumber":379,"author":{"gitId":"aditichadha1310"},"content":"| `bye`                                   | Exits the application                                         |","lastModifiedDate":"2021-09-26"},{"lineNumber":380,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":381,"author":{"gitId":"aditichadha1310"},"content":"----------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-09-26"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"}],"authorContributionMap":{"aditichadha1310":358,"-":24}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"aditichadha1310":1}},{"path":"src/main/java/duke/DateAndTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"/* Importing local files from other packages */","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"import exception.DukeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"import java.time.Month;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"public class DateAndTimeParser {","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some error messages as Strings","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_PAST_DATE \u003d \"☹ OOPS!!! You cannot schedule a task for the past.\";","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"     * Returns date and time in the string form.","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"     * @return dateAndTime in the String format.","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"    public static String callProcessDateTime(String dateAndTime) {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"            LocalDateTime localDateTime \u003d LocalDateTime.parse(dateAndTime);","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"            dateAndTime \u003d ProcessDateTime(localDateTime);","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"            dateAndTime \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"☹ OOPS!!! The date and time format is Invalid.\\n\" + e.getMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"        } catch (DateTimeException eg) {","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"aditichadha1310"},"content":"            dateAndTime \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"☹ OOPS!!! The date and time format is Invalid.\\n\" + eg.getMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"        } catch (DukeException ex) {","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"            dateAndTime \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(ex.getMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"aditichadha1310"},"content":"        return dateAndTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"aditichadha1310"},"content":"     * Returns date and time after converting it to particular format in the String form.","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"aditichadha1310"},"content":"     * For Example: It decodes the object 2022-08-09 13:00 and converts it to the String \"AUGUST 9, 2022 01:00 p.m\".","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"aditichadha1310"},"content":"     * @param dateAndTime DateAndTime stores the date and time in a particular form as a string.","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"aditichadha1310"},"content":"     * @param meridium    Meridum stores the anti/post meridium according to the date","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"aditichadha1310"},"content":"     * @param isBefore    IsBefore stores true if the date and time passed as the object is before today\u0027s date and timing and false otherwise.","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"aditichadha1310"},"content":"     * @return dateAndTime in the String form","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"aditichadha1310"},"content":"     * @throws DukeException if task is scheduled for the past.","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"aditichadha1310"},"content":"    public static String ProcessDateTime(LocalDateTime localDateTime) throws DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"aditichadha1310"},"content":"        String dateAndTime \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"aditichadha1310"},"content":"        String antiMeridium \u003d \"a.m.\";","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"aditichadha1310"},"content":"        String meridium \u003d antiMeridium;","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"aditichadha1310"},"content":"        String postMeridium \u003d \"p.m.\";","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"aditichadha1310"},"content":"        Month month \u003d localDateTime.getMonth();","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"aditichadha1310"},"content":"        int day \u003d localDateTime.getDayOfMonth();","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"aditichadha1310"},"content":"        int year \u003d localDateTime.getYear();","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"aditichadha1310"},"content":"        int hour \u003d localDateTime.getHour();","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"aditichadha1310"},"content":"        int minute \u003d localDateTime.getMinute();","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"aditichadha1310"},"content":"        String minutes \u003d Integer.toString(minute);","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"aditichadha1310"},"content":"        String hours \u003d Integer.toString(hour);","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"aditichadha1310"},"content":"        LocalDateTime dateNow \u003d LocalDateTime.now();","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"aditichadha1310"},"content":"        boolean isBefore \u003d localDateTime.isBefore(dateNow);","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"aditichadha1310"},"content":"        if (minute \u003d\u003d 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"aditichadha1310"},"content":"            minutes \u003d \"00\";","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"aditichadha1310"},"content":"        if (hour \u003e 12) {","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"aditichadha1310"},"content":"            hour -\u003d 12;","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"aditichadha1310"},"content":"            hours \u003d Integer.toString(hour);","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"aditichadha1310"},"content":"            meridium \u003d postMeridium;","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"aditichadha1310"},"content":"        if (hour \u003c 10) {","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"aditichadha1310"},"content":"            hours \u003d \"0\" + hour;","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"aditichadha1310"},"content":"        if (isBefore) {","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"aditichadha1310"},"content":"            dateAndTime \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"aditichadha1310"},"content":"            throw new DukeException(ERROR_PAST_DATE);","lastModifiedDate":"2021-09-26"},{"lineNumber":86,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"aditichadha1310"},"content":"            dateAndTime \u003d month + \" \" + day + \", \" + year + \" \" + hours + \":\" + minutes + \" \" + meridium;","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"aditichadha1310"},"content":"        return dateAndTime;","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"aditichadha1310":91}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"     * Stores the deadline of the task","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"    protected String by;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"     * Constructor to initialize task description and deadline.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"     * @param description Description stores the description of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"     * @param by          By stores the deadline of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"        this.taskType \u003d TaskType.DEADLINE;","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"     * Returns the string in a particular format.","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"     * @return Task description and deadline in a particular format.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"        return (\"[D]\" + super.toString() + \" (by:\" + this.by + \")\");","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"aditichadha1310":30}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"     * Creates an instance of the TaskList class","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"    public static final TaskList TASK_LIST \u003d new TaskList();","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"    private static boolean isWorking \u003d true;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"     * Calls different functions responsible for the execution of this program.","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"     * Loads the data from the Duke.txt file into the TaskList at the start and greets the user by calling the function greet().","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"     * Calls runDuke() function to execute user\u0027s commands.","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"     * Finally, it greets the user bye by calling the function greetBye().","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"        Storage.loadData(Duke.TASK_LIST);","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"        Ui.greet();","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"        runDuke();","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"        Ui.greetBye();","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"     * Executes Duke until the user enters the command bye when the flag isWorking is set to false.","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"     * Sends the user\u0027s command for execution by calling the processCommand() function.","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"     * @param isWorking isWorking stores true when the program is running and false when it has to be stopped.","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"     * @param command   Command stores the command entered by the user.","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"    private static void runDuke() {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"aditichadha1310"},"content":"        while (isWorking) {","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"            String command \u003d Ui.getCommand();","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"            isWorking \u003d Parser.processCommand(command);","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"aditichadha1310":36,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"     * Stores the event time of the task","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"    protected String at;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"     * Constructor to initialize task description and event time.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"     * @param description Description stores the description of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"     * @param at          At stores the event time of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"        this.taskType \u003d TaskType.EVENT;","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"     * Returns the string in a particular format.","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"     * @return Task description and event time in a particular String format.","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"        return (\"[E]\" + super.toString() + \" (at:\" + this.at + \")\");","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"aditichadha1310":30}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"/* Importing local files from other packages */","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"import exception.DukeException;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"import exception.EmptyTaskDescriptionException;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"import exception.NoTaskFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"public class Parser {","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"    /* Initializing Strings with Duke commands */","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"    public static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"    public static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"    public static final String COMMAND_HELP \u003d \"help\";","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"     * Returns true if the command is not bye and the program should continue for the next iteration as well. Returns false otherwise.","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"     * @param userInput UserInput stores the command entered by the user.","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"     * @return true if the command should continue for the next iteration. Returns false otherwise.","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"    public static boolean processCommand(String userInput) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"            if (userInput.startsWith(COMMAND_BYE)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"                return false;","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"aditichadha1310"},"content":"            } else if (userInput.startsWith(COMMAND_LIST)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"                TaskList.list();","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"                return true;","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"            } else if (userInput.startsWith(COMMAND_DONE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"                TaskList.markTaskAsDone(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"aditichadha1310"},"content":"                return true;","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"            } else if (userInput.startsWith(COMMAND_DELETE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"aditichadha1310"},"content":"                TaskList.deleteTask(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"aditichadha1310"},"content":"                return true;","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"aditichadha1310"},"content":"            } else if (userInput.startsWith(COMMAND_FIND)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"aditichadha1310"},"content":"                TaskList.callFindTasks(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"aditichadha1310"},"content":"                return true;","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"aditichadha1310"},"content":"            } else if (userInput.startsWith(COMMAND_HELP)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"aditichadha1310"},"content":"                TaskList.help();","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"aditichadha1310"},"content":"                return true;","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"aditichadha1310"},"content":"            } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"aditichadha1310"},"content":"                TaskList.addTaskToList(userInput);","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"aditichadha1310"},"content":"                return true;","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"aditichadha1310"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"aditichadha1310"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"aditichadha1310"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"Could not save data to file\");","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"aditichadha1310"},"content":"        } catch (NoTaskFoundException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"aditichadha1310"},"content":"        } catch (EmptyTaskDescriptionException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"aditichadha1310"},"content":"        return true;","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"aditichadha1310":68}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"/* Importing some packages to help  store and read data from files */","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"import java.io.File;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":" * Loads the previous tasks into the scheduledTasks(Task List) from the file (Duke.txt) at the start of the execution.","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":" * Saves the tasks to the file when user creates them.","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":" * Updates the file in case there is any deletion of the task.","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":" * Updates the tasks as \"done\" when user marks them as done in the scheduledTasks Task List.","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"public class Storage {","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"     * Initializing initials of the three types of tasks.","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"    public static final String INITIAL_TODO \u003d \"T\";","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"    public static final String INITIAL_DEADLINE \u003d \"D\";","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"    public static final String INITIAL_EVENT \u003d \"E\";","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some Strings as delimiters.","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"    public static final String DELIMITER_ARROW \u003d \"\u003d\u003e\";","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"    public static final String DELIMITER_SPACE \u003d \" \";","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some flag values","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"    public static final String TASK_COMPLETED \u003d \"1\";","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"    public static final String TASK_INCOMPLETE \u003d \"0\";","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"    public static final String TASK_MARKED_COMPLETE \u003d \"X\";","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"aditichadha1310"},"content":"     * Storing the path of the file which will record the tasks for future reference.","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"aditichadha1310"},"content":"    private static final String FILE_PATH \u003d \"duke.txt\";","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"aditichadha1310"},"content":"     * Calls the loadPreviousData() function and catches the encountered exceptions(if any).","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"aditichadha1310"},"content":"     * Creates a new file at the FILE_PATH if file is not found.","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"aditichadha1310"},"content":"    public static void loadData(TaskList taskList) {","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"aditichadha1310"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"aditichadha1310"},"content":"            loadPreviousData(taskList);","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"aditichadha1310"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"aditichadha1310"},"content":"            File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"aditichadha1310"},"content":"            try {","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"aditichadha1310"},"content":"                file.createNewFile();","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"aditichadha1310"},"content":"            } catch (IOException ee) {","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"aditichadha1310"},"content":"                System.out.println(\"Cannot create a new file\");","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"aditichadha1310"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":62,"author":{"gitId":"aditichadha1310"},"content":"     * Load the tasks from the Duke.txt file into the current taskList","lastModifiedDate":"2021-09-26"},{"lineNumber":63,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":64,"author":{"gitId":"aditichadha1310"},"content":"     * @throws FileNotFoundException if file is not found","lastModifiedDate":"2021-09-26"},{"lineNumber":65,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"aditichadha1310"},"content":"    public static void loadPreviousData(TaskList taskList) throws FileNotFoundException {","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"aditichadha1310"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"aditichadha1310"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"aditichadha1310"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"aditichadha1310"},"content":"            loadSavedTasksToList(sc.nextLine(), taskList);","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"aditichadha1310"},"content":"     * Loads a particular task from the Duke.txt file and stores it in the memory in the scheduledTasks Task List.","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"aditichadha1310"},"content":"    public static void loadSavedTasksToList(String input, TaskList taskList) {","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"aditichadha1310"},"content":"        String[] splitInput \u003d input.split(DELIMITER_ARROW);","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"aditichadha1310"},"content":"        String taskType \u003d splitInput[0].trim();","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"aditichadha1310"},"content":"        String taskStatus \u003d splitInput[1].trim();","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"aditichadha1310"},"content":"        String taskDescription \u003d splitInput[2].trim();","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"aditichadha1310"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"aditichadha1310"},"content":"        case INITIAL_TODO:","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"aditichadha1310"},"content":"            taskList.scheduledTasks.add(new Todo(taskDescription));","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"aditichadha1310"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"aditichadha1310"},"content":"        case INITIAL_DEADLINE:","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"aditichadha1310"},"content":"            String timeDueBy \u003d splitInput[3];","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"aditichadha1310"},"content":"            taskList.scheduledTasks.add(new Deadline(taskDescription, timeDueBy));","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"aditichadha1310"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"aditichadha1310"},"content":"        case INITIAL_EVENT:","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"aditichadha1310"},"content":"            String timeDueAt \u003d splitInput[3];","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"aditichadha1310"},"content":"            taskList.scheduledTasks.add(new Event(taskDescription, timeDueAt));","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"aditichadha1310"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"aditichadha1310"},"content":"        default:","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"aditichadha1310"},"content":"            break;","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"aditichadha1310"},"content":"        if (taskStatus.equals(TASK_COMPLETED)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"aditichadha1310"},"content":"            taskList.scheduledTasks.get(TaskList.scheduledTasks.size() - 1).markAsDone();","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":107,"author":{"gitId":"aditichadha1310"},"content":"     * Calls the function to save the tasks from the scheduledTasks task List into the file-\u003e Duke.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"aditichadha1310"},"content":"     * Catches exceptions if encountered and displays appropriate error messages.","lastModifiedDate":"2021-09-26"},{"lineNumber":109,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":110,"author":{"gitId":"aditichadha1310"},"content":"    public static void callSaveTaskToList(ArrayList\u003cTask\u003e scheduledTasks) {","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"aditichadha1310"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"aditichadha1310"},"content":"            saveTaskToDisk(scheduledTasks);","lastModifiedDate":"2021-09-26"},{"lineNumber":113,"author":{"gitId":"aditichadha1310"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":114,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"Unable to save data to the disk\");","lastModifiedDate":"2021-09-26"},{"lineNumber":115,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":118,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":119,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":120,"author":{"gitId":"aditichadha1310"},"content":"     * Writes the tasks to the file -\u003e Duke.txt, from the scheduledTasks task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":121,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":122,"author":{"gitId":"aditichadha1310"},"content":"     * @param lineToWrite     LineToWrite stores the String containing the task that will be stored in the file Duke.txt","lastModifiedDate":"2021-09-26"},{"lineNumber":123,"author":{"gitId":"aditichadha1310"},"content":"     * @param taskStatus      TaskStatus stores the completion status of the task","lastModifiedDate":"2021-09-26"},{"lineNumber":124,"author":{"gitId":"aditichadha1310"},"content":"     * @param taskDescription TaskDescription stores the description of the task.","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"aditichadha1310"},"content":"    public static void saveTaskToDisk(ArrayList\u003cTask\u003e scheduledTasks) throws IOException {","lastModifiedDate":"2021-09-22"},{"lineNumber":127,"author":{"gitId":"aditichadha1310"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-22"},{"lineNumber":128,"author":{"gitId":"aditichadha1310"},"content":"        String lineToWrite \u003d \"\";","lastModifiedDate":"2021-09-22"},{"lineNumber":129,"author":{"gitId":"aditichadha1310"},"content":"        for (Task task : scheduledTasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":130,"author":{"gitId":"aditichadha1310"},"content":"            lineToWrite \u003d \"\";","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"aditichadha1310"},"content":"            if (task.taskType \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2021-09-22"},{"lineNumber":132,"author":{"gitId":"aditichadha1310"},"content":"                lineToWrite \u003d INITIAL_TODO + DELIMITER_SPACE;","lastModifiedDate":"2021-09-22"},{"lineNumber":133,"author":{"gitId":"aditichadha1310"},"content":"            } else if (task.taskType \u003d\u003d TaskType.DEADLINE) {","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"aditichadha1310"},"content":"                lineToWrite \u003d INITIAL_DEADLINE + DELIMITER_SPACE;","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"aditichadha1310"},"content":"            } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"aditichadha1310"},"content":"                lineToWrite \u003d INITIAL_EVENT + DELIMITER_SPACE;","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"aditichadha1310"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"aditichadha1310"},"content":"            lineToWrite \u003d lineToWrite + DELIMITER_ARROW + DELIMITER_SPACE;","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"aditichadha1310"},"content":"            String taskStatus \u003d task.getStatus();","lastModifiedDate":"2021-09-22"},{"lineNumber":141,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"aditichadha1310"},"content":"            if (taskStatus.equals(TASK_MARKED_COMPLETE)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"aditichadha1310"},"content":"                lineToWrite \u003d lineToWrite + TASK_COMPLETED;","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"aditichadha1310"},"content":"            } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":145,"author":{"gitId":"aditichadha1310"},"content":"                lineToWrite \u003d lineToWrite + TASK_INCOMPLETE;","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"aditichadha1310"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":147,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":148,"author":{"gitId":"aditichadha1310"},"content":"            String taskDescription \u003d task.description;","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":150,"author":{"gitId":"aditichadha1310"},"content":"            lineToWrite \u003d lineToWrite + \" \u003d\u003e \" + taskDescription;","lastModifiedDate":"2021-09-22"},{"lineNumber":151,"author":{"gitId":"aditichadha1310"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"aditichadha1310"},"content":"                lineToWrite \u003d lineToWrite + \" \u003d\u003e \" + ((Deadline) task).by;","lastModifiedDate":"2021-09-22"},{"lineNumber":153,"author":{"gitId":"aditichadha1310"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2021-09-22"},{"lineNumber":154,"author":{"gitId":"aditichadha1310"},"content":"                lineToWrite \u003d lineToWrite + \" \u003d\u003e \" + ((Event) task).at;","lastModifiedDate":"2021-09-22"},{"lineNumber":155,"author":{"gitId":"aditichadha1310"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":156,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":157,"author":{"gitId":"aditichadha1310"},"content":"            lineToWrite +\u003d \"\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":158,"author":{"gitId":"aditichadha1310"},"content":"            fw.write(lineToWrite);","lastModifiedDate":"2021-09-22"},{"lineNumber":159,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":160,"author":{"gitId":"aditichadha1310"},"content":"        fw.close();","lastModifiedDate":"2021-09-22"},{"lineNumber":161,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":162,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":163,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"aditichadha1310":163}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"    protected String description;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"    protected TaskType taskType;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"     * Stores true if task is done and false otherwise.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"     * Default Constructor to initialise the task description, task completion status and the task type.","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"    public Task() {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"        this.description \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"        this.taskType \u003d TaskType.NONE;","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"     * Parameterized constructor to initialise the task description and task completion status.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"     * Returns string \"X\" if task is completed and space otherwise.Returns the task completion status of a particular task.","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"     * @return Task Completion Status","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"aditichadha1310"},"content":"            return \"X\";","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"aditichadha1310"},"content":"            return \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"aditichadha1310"},"content":"     * Marks a particular task as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"aditichadha1310"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"aditichadha1310"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"aditichadha1310"},"content":"     * Returns the task completion status in a particular String format.","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"aditichadha1310"},"content":"     * @return Task completion Status in a String format.","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"aditichadha1310"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"aditichadha1310"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"aditichadha1310"},"content":"        String taskStatus \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"aditichadha1310"},"content":"        return (\"[\" + taskStatus + \"] \" + this.description);","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"aditichadha1310":63}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"/* Importing local files from other packages */","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"import exception.DukeException;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"import exception.EmptyTaskDescriptionException;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"import exception.NoTaskFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"public class TaskList {","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"    public static final String LINK_TO_UG \u003d \"-\u003e For details please refer to the User Guide of Duke at the link given below:\\n-\u003e https://aditichadha1310.github.io/ip/\";","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some delimiters as Strings.","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"    public static final String DELIMITER_SPACE \u003d \" \";","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"    public static final String DELIMITER_FORWARD_SLASH \u003d \"/\";","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"    public static final String DELIMITER_BY \u003d \"/by\";","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"    public static final String DELIMITER_AT \u003d \"/at\";","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"    public static final String DELIMITER_DOT \u003d \".\";","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some flags.","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"    public static final int INVALID \u003d -1;","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"    public static final int DELIMITING_LIMIT_TWO \u003d 2;","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some display messages as Strings.","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"    public static final String MESSAGE_TASK_REMOVED \u003d \"Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"    public static final String MESSAGE_TASK_ADDED \u003d \"Got it. I\u0027ve added this task:\";","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"aditichadha1310"},"content":"    public static final String MESSAGE_LIST_ALL_TASKS \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"    public static final String MESSAGE_TASK_MARKED_DONE \u003d \"Nice! I have marked this task as done:\";","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some error messages as Strings.","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_INVALID_TASK_STATEMENT \u003d \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_INVALID_TASK_NUMBER \u003d \"Sorry, no task is assigned at this number, you might want to re-check?\";","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_EMPTY_TASKLIST \u003d \"Sorry, no tasks have been added to the list as yet!\\n\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"aditichadha1310"},"content":"            \"You can add tasks to this list simply by typing and pressing \\\"Enter\\\"!!\";","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_DEADLINE_WITHOUT_BY \u003d \"☹ OOPS!!! Its an invalid deadline creation statement.\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"aditichadha1310"},"content":"            \"\\n Include \\\"/by\\\" to state the deadline of the task followed by valid date and time in the correct format.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_EVENT_WITHOUT_AT \u003d \"☹ OOPS!!! Its an invalid event creation statement.\" +","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"aditichadha1310"},"content":"            \"\\n Include \\\"/at\\\" to state the event time followed by valid date and time in the correct format.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_EMPTY_TODO \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_EMPTY_DEADLINE \u003d \"☹ OOPS!!! The description or the deadline of the task cannot be empty.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_INCOMPLETE_DEADLINE \u003d \"☹ OOPS!!! The description of the task seems incomplete.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_EMPTY_EVENT \u003d \"☹ OOPS!!! The description and time schedule of the event cannot be empty.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_INCOMPLETE_EVENT \u003d \"☹ OOPS!!! The description or time schedule of the event seems incomplete.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"aditichadha1310"},"content":"    public static final String ERROR_INCORRECT_DELETE_COMMAND \u003d \"☹ OOPS!!! Its an invalid task deletion command.\";","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":61,"author":{"gitId":"aditichadha1310"},"content":"    public static final String TASK_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"aditichadha1310"},"content":"    public static final String TASK_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"aditichadha1310"},"content":"    public static final String TASK_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"aditichadha1310"},"content":"    public static final String[] COMMANDS \u003d new String[]{","lastModifiedDate":"2021-09-26"},{"lineNumber":67,"author":{"gitId":"aditichadha1310"},"content":"            \"help\", \"todo\", \"deadline\", \"event\", \"list\", \"done\", \"delete\", \"find\", \"bye\"","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"aditichadha1310"},"content":"    };","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":70,"author":{"gitId":"aditichadha1310"},"content":"    public static int indexOfForwardSlash;","lastModifiedDate":"2021-09-26"},{"lineNumber":71,"author":{"gitId":"aditichadha1310"},"content":"    public static boolean isTaskValid \u003d true;","lastModifiedDate":"2021-09-26"},{"lineNumber":72,"author":{"gitId":"aditichadha1310"},"content":"    public static String taskDescription;","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"aditichadha1310"},"content":"    public static String timeDueAt;","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"aditichadha1310"},"content":"    public static String timeDueBy;","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"aditichadha1310"},"content":"     * Task type Array list to store the tasks the user will create","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":79,"author":{"gitId":"aditichadha1310"},"content":"    public static ArrayList\u003cTask\u003e scheduledTasks;","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":81,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":82,"author":{"gitId":"aditichadha1310"},"content":"     * Task type Array list to store the filtered list of tasks when user searches for them using a keyword.","lastModifiedDate":"2021-09-26"},{"lineNumber":83,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":84,"author":{"gitId":"aditichadha1310"},"content":"    public static ArrayList\u003cTask\u003e filteredList;","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"aditichadha1310"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"aditichadha1310"},"content":"        scheduledTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":91,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":92,"author":{"gitId":"aditichadha1310"},"content":"     * Displays the list of the commands accepted by Duke.","lastModifiedDate":"2021-09-26"},{"lineNumber":93,"author":{"gitId":"aditichadha1310"},"content":"     * Displays the link of the user guide to provide details.","lastModifiedDate":"2021-09-26"},{"lineNumber":94,"author":{"gitId":"aditichadha1310"},"content":"     **/","lastModifiedDate":"2021-09-26"},{"lineNumber":95,"author":{"gitId":"aditichadha1310"},"content":"    public static void help() {","lastModifiedDate":"2021-09-26"},{"lineNumber":96,"author":{"gitId":"aditichadha1310"},"content":"        Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":97,"author":{"gitId":"aditichadha1310"},"content":"        System.out.println(\"The following is a list of commands that Duke accepts :\");","lastModifiedDate":"2021-09-26"},{"lineNumber":98,"author":{"gitId":"aditichadha1310"},"content":"        for (String i : COMMANDS) {","lastModifiedDate":"2021-09-26"},{"lineNumber":99,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"-\u003e \" + i);","lastModifiedDate":"2021-09-26"},{"lineNumber":100,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":101,"author":{"gitId":"aditichadha1310"},"content":"        System.out.println(LINK_TO_UG);","lastModifiedDate":"2021-09-26"},{"lineNumber":102,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":103,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"aditichadha1310"},"content":"     * Updates the status of the task by marking it as done in the task list.","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"aditichadha1310"},"content":"     * @param taskNumberCompleted TaskNumberCompleted stores the index of the task which has been completed by the user.","lastModifiedDate":"2021-09-26"},{"lineNumber":108,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"aditichadha1310"},"content":"    public static void markTaskAsDone(String userInput) throws NoTaskFoundException {","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"aditichadha1310"},"content":"        Ui.printLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"aditichadha1310"},"content":"        int taskNumberCompleted \u003d Integer.parseInt(userInput.substring(userInput.indexOf(\" \") + 1));","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":113,"author":{"gitId":"aditichadha1310"},"content":"        if ((taskNumberCompleted \u003c\u003d scheduledTasks.size()) \u0026\u0026 (taskNumberCompleted \u003e 0)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"aditichadha1310"},"content":"            scheduledTasks.get(taskNumberCompleted - 1).markAsDone();","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(MESSAGE_TASK_MARKED_DONE);","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(scheduledTasks.get(taskNumberCompleted - 1));","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"aditichadha1310"},"content":"            Storage.callSaveTaskToList(scheduledTasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":118,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":119,"author":{"gitId":"aditichadha1310"},"content":"            throw new NoTaskFoundException(ERROR_INVALID_TASK_NUMBER);","lastModifiedDate":"2021-09-22"},{"lineNumber":120,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":121,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":122,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":123,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":124,"author":{"gitId":"aditichadha1310"},"content":"     * Calls the findTasks() function with the search keyword and displays the list of the tasks that contain the search keyword.","lastModifiedDate":"2021-09-26"},{"lineNumber":125,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":126,"author":{"gitId":"aditichadha1310"},"content":"     * @param userInput    userInput stores the command given by the user.","lastModifiedDate":"2021-09-26"},{"lineNumber":127,"author":{"gitId":"aditichadha1310"},"content":"     * @param filterString FilterString contains the string by which the task list is queried","lastModifiedDate":"2021-09-26"},{"lineNumber":128,"author":{"gitId":"aditichadha1310"},"content":"     * @param filteredList FilteredList stores the tasks which contain the search keyword(filterString) in their task description.","lastModifiedDate":"2021-09-26"},{"lineNumber":129,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":130,"author":{"gitId":"aditichadha1310"},"content":"    public static void callFindTasks(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"aditichadha1310"},"content":"        int indexOfSpace \u003d userInput.indexOf(DELIMITER_SPACE);","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"aditichadha1310"},"content":"        String filterString \u003d userInput.substring(indexOfSpace + 1);","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"aditichadha1310"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d findTasks(filterString);","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"aditichadha1310"},"content":"        filteredList.stream()","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"aditichadha1310"},"content":"                .forEach(System.out::println);","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"aditichadha1310"},"content":"     * Queries the scheduledTasks task list by the search keyword.","lastModifiedDate":"2021-09-26"},{"lineNumber":141,"author":{"gitId":"aditichadha1310"},"content":"     * Returns a list of tasks that contain the filterString in their task description.","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"aditichadha1310"},"content":"    public static ArrayList\u003cTask\u003e findTasks(String filterString) {","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"aditichadha1310"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"aditichadha1310"},"content":"        filteredList \u003d (ArrayList\u003cTask\u003e) scheduledTasks.stream()","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"aditichadha1310"},"content":"                .filter((t) -\u003e t.description.contains(filterString))","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"aditichadha1310"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"aditichadha1310"},"content":"        counter \u003d filteredList.size();","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"aditichadha1310"},"content":"        if (counter \u003c\u003d 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but no tasks match your search.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"aditichadha1310"},"content":"        return filteredList;","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":158,"author":{"gitId":"aditichadha1310"},"content":"     * Adds the task to the task list if it is a valid task creation statement given by the user.","lastModifiedDate":"2021-09-22"},{"lineNumber":159,"author":{"gitId":"aditichadha1310"},"content":"     * Displays appropriate message if task is valid and is created successfully, vice versa.","lastModifiedDate":"2021-09-22"},{"lineNumber":160,"author":{"gitId":"aditichadha1310"},"content":"     * Displays the total number of tasks in the list as well.","lastModifiedDate":"2021-09-22"},{"lineNumber":161,"author":{"gitId":"aditichadha1310"},"content":"     * Stores the task in the file Duke.txt as well.","lastModifiedDate":"2021-09-26"},{"lineNumber":162,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":163,"author":{"gitId":"aditichadha1310"},"content":"     * @param isTaskValid IsTaskValid stores true if the task statement entered by the user is a valid task creation statement and false, otherwise.","lastModifiedDate":"2021-09-22"},{"lineNumber":164,"author":{"gitId":"aditichadha1310"},"content":"     * @throws DukeException                 if the description of the task or timing is incomplete or invalid.","lastModifiedDate":"2021-09-26"},{"lineNumber":165,"author":{"gitId":"aditichadha1310"},"content":"     * @throws EmptyTaskDescriptionException if the descritiona and timing is empty.","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":167,"author":{"gitId":"aditichadha1310"},"content":"    public static void addTaskToList(String userInput) throws DukeException, EmptyTaskDescriptionException {","lastModifiedDate":"2021-09-22"},{"lineNumber":168,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":169,"author":{"gitId":"aditichadha1310"},"content":"        isTaskValid \u003d true;","lastModifiedDate":"2021-09-26"},{"lineNumber":170,"author":{"gitId":"aditichadha1310"},"content":"        String firstWord;","lastModifiedDate":"2021-09-22"},{"lineNumber":171,"author":{"gitId":"aditichadha1310"},"content":"        String[] split \u003d userInput.split(DELIMITER_SPACE, DELIMITING_LIMIT_TWO);","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"aditichadha1310"},"content":"        firstWord \u003d split[0].toLowerCase();","lastModifiedDate":"2021-09-22"},{"lineNumber":173,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":174,"author":{"gitId":"aditichadha1310"},"content":"        switch (firstWord) {","lastModifiedDate":"2021-09-22"},{"lineNumber":175,"author":{"gitId":"aditichadha1310"},"content":"        case TASK_TODO:","lastModifiedDate":"2021-09-22"},{"lineNumber":176,"author":{"gitId":"aditichadha1310"},"content":"            addTodo(split);","lastModifiedDate":"2021-09-26"},{"lineNumber":177,"author":{"gitId":"aditichadha1310"},"content":"            break;","lastModifiedDate":"2021-09-26"},{"lineNumber":178,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":179,"author":{"gitId":"aditichadha1310"},"content":"        case TASK_DEADLINE:","lastModifiedDate":"2021-09-26"},{"lineNumber":180,"author":{"gitId":"aditichadha1310"},"content":"            addDeadline(split, userInput);","lastModifiedDate":"2021-09-26"},{"lineNumber":181,"author":{"gitId":"aditichadha1310"},"content":"            break;","lastModifiedDate":"2021-09-26"},{"lineNumber":182,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":183,"author":{"gitId":"aditichadha1310"},"content":"        case TASK_EVENT:","lastModifiedDate":"2021-09-26"},{"lineNumber":184,"author":{"gitId":"aditichadha1310"},"content":"            addEvent(split, userInput);","lastModifiedDate":"2021-09-26"},{"lineNumber":185,"author":{"gitId":"aditichadha1310"},"content":"            break;","lastModifiedDate":"2021-09-26"},{"lineNumber":186,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":187,"author":{"gitId":"aditichadha1310"},"content":"        default:","lastModifiedDate":"2021-09-26"},{"lineNumber":188,"author":{"gitId":"aditichadha1310"},"content":"            isTaskValid \u003d false;","lastModifiedDate":"2021-09-26"},{"lineNumber":189,"author":{"gitId":"aditichadha1310"},"content":"            throw new DukeException(ERROR_INVALID_TASK_STATEMENT);","lastModifiedDate":"2021-09-26"},{"lineNumber":190,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":191,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":192,"author":{"gitId":"aditichadha1310"},"content":"        if (isTaskValid) {","lastModifiedDate":"2021-09-26"},{"lineNumber":193,"author":{"gitId":"aditichadha1310"},"content":"            Ui.printLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":194,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(MESSAGE_TASK_ADDED);","lastModifiedDate":"2021-09-26"},{"lineNumber":195,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(DELIMITER_SPACE + scheduledTasks.get(scheduledTasks.size() - 1));","lastModifiedDate":"2021-09-26"},{"lineNumber":196,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"Now you have \" + scheduledTasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-26"},{"lineNumber":197,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":198,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":199,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":200,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":201,"author":{"gitId":"aditichadha1310"},"content":"     * Adds a TODO task to the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":202,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":203,"author":{"gitId":"aditichadha1310"},"content":"     * @throws EmptyTaskDescriptionException if the task description for todo is empty.","lastModifiedDate":"2021-09-26"},{"lineNumber":204,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":205,"author":{"gitId":"aditichadha1310"},"content":"    public static void addTodo(String split[]) throws EmptyTaskDescriptionException {","lastModifiedDate":"2021-09-26"},{"lineNumber":206,"author":{"gitId":"aditichadha1310"},"content":"        if (split.length \u003c 2 || split[1].isEmpty()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":207,"author":{"gitId":"aditichadha1310"},"content":"            throw new EmptyTaskDescriptionException(ERROR_EMPTY_TODO);","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":209,"author":{"gitId":"aditichadha1310"},"content":"            scheduledTasks.add(new Todo(split[1]));","lastModifiedDate":"2021-09-22"},{"lineNumber":210,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":211,"author":{"gitId":"aditichadha1310"},"content":"        Storage.callSaveTaskToList(scheduledTasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":212,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":213,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":214,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":215,"author":{"gitId":"aditichadha1310"},"content":"     * Adds a deadline type task to the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":216,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":217,"author":{"gitId":"aditichadha1310"},"content":"     * @throws DukeException                 if the task description or deadline is in invalid format or if it is incomplete.","lastModifiedDate":"2021-09-26"},{"lineNumber":218,"author":{"gitId":"aditichadha1310"},"content":"     * @throws EmptyTaskDescriptionException if the task description or deadline are empty.","lastModifiedDate":"2021-09-26"},{"lineNumber":219,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":220,"author":{"gitId":"aditichadha1310"},"content":"    public static void addDeadline(String split[], String userInput) throws DukeException, EmptyTaskDescriptionException {","lastModifiedDate":"2021-09-26"},{"lineNumber":221,"author":{"gitId":"aditichadha1310"},"content":"        indexOfForwardSlash \u003d userInput.indexOf(DELIMITER_FORWARD_SLASH);","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"aditichadha1310"},"content":"        int indexOfBy \u003d userInput.indexOf(DELIMITER_BY);","lastModifiedDate":"2021-09-23"},{"lineNumber":223,"author":{"gitId":"aditichadha1310"},"content":"        if (indexOfBy \u003d\u003d INVALID) {","lastModifiedDate":"2021-09-23"},{"lineNumber":224,"author":{"gitId":"aditichadha1310"},"content":"            throw new DukeException(ERROR_DEADLINE_WITHOUT_BY);","lastModifiedDate":"2021-09-23"},{"lineNumber":225,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":226,"author":{"gitId":"aditichadha1310"},"content":"        if (split.length \u003c 2 || split[1].isEmpty() || indexOfForwardSlash \u003d\u003d INVALID) {","lastModifiedDate":"2021-09-23"},{"lineNumber":227,"author":{"gitId":"aditichadha1310"},"content":"            throw new EmptyTaskDescriptionException(ERROR_EMPTY_DEADLINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":228,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":229,"author":{"gitId":"aditichadha1310"},"content":"        taskDescription \u003d split[1].split(DELIMITER_BY, DELIMITING_LIMIT_TWO)[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"aditichadha1310"},"content":"        String timeDueByFormatted \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":231,"author":{"gitId":"aditichadha1310"},"content":"        timeDueBy \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":232,"author":{"gitId":"aditichadha1310"},"content":"        timeDueBy \u003d split[1].split(DELIMITER_BY, DELIMITING_LIMIT_TWO)[1];","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"aditichadha1310"},"content":"        if (taskDescription.isEmpty() || timeDueBy.isEmpty()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":234,"author":{"gitId":"aditichadha1310"},"content":"            throw new DukeException(ERROR_INCOMPLETE_DEADLINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":236,"author":{"gitId":"aditichadha1310"},"content":"        timeDueBy \u003d (timeDueBy.trim()).replace(DELIMITER_SPACE, \"T\");","lastModifiedDate":"2021-09-23"},{"lineNumber":237,"author":{"gitId":"aditichadha1310"},"content":"        timeDueByFormatted \u003d DateAndTimeParser.callProcessDateTime(timeDueBy);","lastModifiedDate":"2021-09-23"},{"lineNumber":238,"author":{"gitId":"aditichadha1310"},"content":"        if (!timeDueByFormatted.isEmpty()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":239,"author":{"gitId":"aditichadha1310"},"content":"            scheduledTasks.add(new Deadline(taskDescription, timeDueByFormatted));","lastModifiedDate":"2021-09-23"},{"lineNumber":240,"author":{"gitId":"aditichadha1310"},"content":"            Storage.callSaveTaskToList(scheduledTasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":241,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":242,"author":{"gitId":"aditichadha1310"},"content":"            isTaskValid \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":243,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":244,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":245,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":246,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":247,"author":{"gitId":"aditichadha1310"},"content":"     * Adds an event type task to the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":248,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":249,"author":{"gitId":"aditichadha1310"},"content":"     * @throws DukeException                 if the task description or event time is in invalid format or if it is incomplete.","lastModifiedDate":"2021-09-26"},{"lineNumber":250,"author":{"gitId":"aditichadha1310"},"content":"     * @throws EmptyTaskDescriptionException if the task description or event timing are empty.","lastModifiedDate":"2021-09-26"},{"lineNumber":251,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":252,"author":{"gitId":"aditichadha1310"},"content":"    public static void addEvent(String split[], String userInput) throws DukeException, EmptyTaskDescriptionException {","lastModifiedDate":"2021-09-26"},{"lineNumber":253,"author":{"gitId":"aditichadha1310"},"content":"        indexOfForwardSlash \u003d userInput.indexOf(DELIMITER_FORWARD_SLASH);","lastModifiedDate":"2021-09-23"},{"lineNumber":254,"author":{"gitId":"aditichadha1310"},"content":"        int indexOfAt \u003d userInput.indexOf(DELIMITER_AT);","lastModifiedDate":"2021-09-23"},{"lineNumber":255,"author":{"gitId":"aditichadha1310"},"content":"        if (indexOfAt \u003d\u003d INVALID) {","lastModifiedDate":"2021-09-23"},{"lineNumber":256,"author":{"gitId":"aditichadha1310"},"content":"            throw new DukeException(ERROR_EVENT_WITHOUT_AT);","lastModifiedDate":"2021-09-23"},{"lineNumber":257,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":258,"author":{"gitId":"aditichadha1310"},"content":"        if (split.length \u003c 2 || split[1].isEmpty() || indexOfForwardSlash \u003d\u003d INVALID) {","lastModifiedDate":"2021-09-23"},{"lineNumber":259,"author":{"gitId":"aditichadha1310"},"content":"            throw new EmptyTaskDescriptionException(ERROR_EMPTY_EVENT);","lastModifiedDate":"2021-09-23"},{"lineNumber":260,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":261,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":262,"author":{"gitId":"aditichadha1310"},"content":"        taskDescription \u003d split[1].split(DELIMITER_AT, DELIMITING_LIMIT_TWO)[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":263,"author":{"gitId":"aditichadha1310"},"content":"        String timeDueAtFormatted \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":264,"author":{"gitId":"aditichadha1310"},"content":"        timeDueAt \u003d \"\";","lastModifiedDate":"2021-09-23"},{"lineNumber":265,"author":{"gitId":"aditichadha1310"},"content":"        timeDueAt \u003d split[1].split(DELIMITER_AT, DELIMITING_LIMIT_TWO)[1];","lastModifiedDate":"2021-09-23"},{"lineNumber":266,"author":{"gitId":"aditichadha1310"},"content":"        if (taskDescription.isEmpty() || timeDueAt.isEmpty()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":267,"author":{"gitId":"aditichadha1310"},"content":"            throw new DukeException(ERROR_INCOMPLETE_EVENT);","lastModifiedDate":"2021-09-23"},{"lineNumber":268,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":269,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":270,"author":{"gitId":"aditichadha1310"},"content":"        timeDueAt \u003d (timeDueAt.trim()).replace(DELIMITER_SPACE, \"T\");","lastModifiedDate":"2021-09-23"},{"lineNumber":271,"author":{"gitId":"aditichadha1310"},"content":"        timeDueAtFormatted \u003d DateAndTimeParser.callProcessDateTime(timeDueAt);","lastModifiedDate":"2021-09-23"},{"lineNumber":272,"author":{"gitId":"aditichadha1310"},"content":"        if (!timeDueAtFormatted.isEmpty()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":273,"author":{"gitId":"aditichadha1310"},"content":"            scheduledTasks.add(new Event(taskDescription, timeDueAtFormatted));","lastModifiedDate":"2021-09-23"},{"lineNumber":274,"author":{"gitId":"aditichadha1310"},"content":"            Storage.callSaveTaskToList(scheduledTasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":275,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":276,"author":{"gitId":"aditichadha1310"},"content":"            isTaskValid \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":277,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":278,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":279,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":280,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":281,"author":{"gitId":"aditichadha1310"},"content":"     * Deletes the task from the specified index in the task list.","lastModifiedDate":"2021-09-26"},{"lineNumber":282,"author":{"gitId":"aditichadha1310"},"content":"     * Updates the task list in the Duke.txt file.","lastModifiedDate":"2021-09-26"},{"lineNumber":283,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":284,"author":{"gitId":"aditichadha1310"},"content":"     * @param deleteTask DeleteTask stores the task number which is supposed to be deleted.","lastModifiedDate":"2021-09-22"},{"lineNumber":285,"author":{"gitId":"aditichadha1310"},"content":"     * @throws DukeException        if the task deletion command is invalid","lastModifiedDate":"2021-09-26"},{"lineNumber":286,"author":{"gitId":"aditichadha1310"},"content":"     * @throws NoTaskFoundException if there is no task at the specified task number.","lastModifiedDate":"2021-09-26"},{"lineNumber":287,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":288,"author":{"gitId":"aditichadha1310"},"content":"    public static void deleteTask(String userInput) throws IOException, NoTaskFoundException, DukeException {","lastModifiedDate":"2021-09-23"},{"lineNumber":289,"author":{"gitId":"aditichadha1310"},"content":"        Ui.printLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":290,"author":{"gitId":"aditichadha1310"},"content":"        int deleteTask;","lastModifiedDate":"2021-09-23"},{"lineNumber":291,"author":{"gitId":"aditichadha1310"},"content":"        int indexOfSpace \u003d userInput.indexOf(DELIMITER_SPACE);","lastModifiedDate":"2021-09-23"},{"lineNumber":292,"author":{"gitId":"aditichadha1310"},"content":"        if (indexOfSpace !\u003d INVALID) {","lastModifiedDate":"2021-09-23"},{"lineNumber":293,"author":{"gitId":"aditichadha1310"},"content":"            deleteTask \u003d Integer.parseInt(userInput.substring(indexOfSpace + 1));","lastModifiedDate":"2021-09-23"},{"lineNumber":294,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":295,"author":{"gitId":"aditichadha1310"},"content":"            throw new DukeException(ERROR_INCORRECT_DELETE_COMMAND);","lastModifiedDate":"2021-09-23"},{"lineNumber":296,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":297,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":298,"author":{"gitId":"aditichadha1310"},"content":"        if ((deleteTask \u003c\u003d scheduledTasks.size()) \u0026\u0026 (deleteTask \u003e 0)) {","lastModifiedDate":"2021-09-22"},{"lineNumber":299,"author":{"gitId":"aditichadha1310"},"content":"            Task taskToBeDeleted \u003d scheduledTasks.get(deleteTask - 1);","lastModifiedDate":"2021-09-22"},{"lineNumber":300,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(MESSAGE_TASK_REMOVED);","lastModifiedDate":"2021-09-22"},{"lineNumber":301,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(taskToBeDeleted","lastModifiedDate":"2021-09-22"},{"lineNumber":302,"author":{"gitId":"aditichadha1310"},"content":"            );","lastModifiedDate":"2021-09-22"},{"lineNumber":303,"author":{"gitId":"aditichadha1310"},"content":"            scheduledTasks.remove(deleteTask - 1);","lastModifiedDate":"2021-09-22"},{"lineNumber":304,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(\"Now you have \" + scheduledTasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":305,"author":{"gitId":"aditichadha1310"},"content":"            Storage.callSaveTaskToList(scheduledTasks);","lastModifiedDate":"2021-09-22"},{"lineNumber":306,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":307,"author":{"gitId":"aditichadha1310"},"content":"            throw new NoTaskFoundException(ERROR_INVALID_TASK_NUMBER);","lastModifiedDate":"2021-09-22"},{"lineNumber":308,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":309,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":310,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":311,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":312,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":313,"author":{"gitId":"aditichadha1310"},"content":"     * Lists all the tasks in the task list along with their task completion status.","lastModifiedDate":"2021-09-22"},{"lineNumber":314,"author":{"gitId":"aditichadha1310"},"content":"     * The tasks are enlisted as such that they reveal if they are a \"todo\", \"event\" or a \"deadline\".","lastModifiedDate":"2021-09-26"},{"lineNumber":315,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-22"},{"lineNumber":316,"author":{"gitId":"aditichadha1310"},"content":"     * @throws NoTaskFoundException if there are no tasks in the list.","lastModifiedDate":"2021-09-26"},{"lineNumber":317,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":318,"author":{"gitId":"aditichadha1310"},"content":"    public static void list() throws NoTaskFoundException {","lastModifiedDate":"2021-09-22"},{"lineNumber":319,"author":{"gitId":"aditichadha1310"},"content":"        int i;","lastModifiedDate":"2021-09-22"},{"lineNumber":320,"author":{"gitId":"aditichadha1310"},"content":"        Ui.printLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":321,"author":{"gitId":"aditichadha1310"},"content":"        if (scheduledTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-22"},{"lineNumber":322,"author":{"gitId":"aditichadha1310"},"content":"            throw new NoTaskFoundException(ERROR_EMPTY_TASKLIST);","lastModifiedDate":"2021-09-22"},{"lineNumber":323,"author":{"gitId":"aditichadha1310"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":324,"author":{"gitId":"aditichadha1310"},"content":"            System.out.println(MESSAGE_LIST_ALL_TASKS);","lastModifiedDate":"2021-09-22"},{"lineNumber":325,"author":{"gitId":"aditichadha1310"},"content":"            i \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":326,"author":{"gitId":"aditichadha1310"},"content":"            for (Task task : scheduledTasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":327,"author":{"gitId":"aditichadha1310"},"content":"                System.out.print((i + 1) + DELIMITER_DOT);","lastModifiedDate":"2021-09-22"},{"lineNumber":328,"author":{"gitId":"aditichadha1310"},"content":"                System.out.println(task);","lastModifiedDate":"2021-09-22"},{"lineNumber":329,"author":{"gitId":"aditichadha1310"},"content":"                i++;","lastModifiedDate":"2021-09-22"},{"lineNumber":330,"author":{"gitId":"aditichadha1310"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":331,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":332,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":333,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-22"},{"lineNumber":334,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"aditichadha1310":334}},{"path":"src/main/java/duke/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"/**","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":" * Stores the different types of tasks that can be created and the default task type which is NONE.","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":" */","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"public enum TaskType {","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"    NONE, TODO, DEADLINE, EVENT","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"aditichadha1310":8}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package duke;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"     * Constructor to initialize task description.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"     * @param description Description stores the description of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"        this.taskType \u003d TaskType.TODO;","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"     * Returns the string in a particular String format.","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"     * @return Task description in a particular format.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"        return (\"[T]\" + super.toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"aditichadha1310":24}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"aditichadha1310":7}},{"path":"src/main/java/exception/EmptyTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package exception;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"public class EmptyTaskDescriptionException extends Exception {","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"    public EmptyTaskDescriptionException(String errorMessage) {","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"aditichadha1310":7}},{"path":"src/main/java/exception/NoTaskFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package exception;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"public class NoTaskFoundException extends Exception {","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"    public NoTaskFoundException(String errorMessage) {","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"aditichadha1310":7}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"package ui;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"public class Ui {","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"aditichadha1310"},"content":"     * Storing some messages as String.","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"aditichadha1310"},"content":"    public static final String GREET_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"    public static final String EXIT_MESSAGE \u003d \" Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"aditichadha1310"},"content":"    public static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"aditichadha1310"},"content":"     * Creating an object of the Scanner class to facilitate accepting input from user.","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"    private static Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"aditichadha1310"},"content":"     * Greets the user by printing some introductory message.","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"aditichadha1310"},"content":"    public static void greet() {","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"aditichadha1310"},"content":"        printLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"        System.out.println(GREET_MESSAGE);","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"aditichadha1310"},"content":"        printLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"aditichadha1310"},"content":"     * Greets the user goodbye and the code finishes its execution.","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"aditichadha1310"},"content":"    public static void greetBye() {","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"aditichadha1310"},"content":"        System.out.println(EXIT_MESSAGE);","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"aditichadha1310"},"content":"        printLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"aditichadha1310"},"content":"        System.exit(0);","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"aditichadha1310"},"content":"     * Prints a line on the screen","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"aditichadha1310"},"content":"    public static void printLine() {","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"aditichadha1310"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"aditichadha1310"},"content":"    /**","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"aditichadha1310"},"content":"     * Returns the command accepted from the user.","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"aditichadha1310"},"content":"     *","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"aditichadha1310"},"content":"     * @return userInput is the command entered by the user.","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"aditichadha1310"},"content":"     */","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"aditichadha1310"},"content":"    public static String getCommand() {","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"aditichadha1310"},"content":"        String userInput \u003d sc.nextLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"aditichadha1310"},"content":"        if (userInput.isBlank()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"aditichadha1310"},"content":"            return getCommand();","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"aditichadha1310"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"aditichadha1310"},"content":"        return userInput;","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"aditichadha1310"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"aditichadha1310"},"content":"}","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"aditichadha1310"},"content":"","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"aditichadha1310":57}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"aditichadha1310"},"content":"todo read","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"aditichadha1310"},"content":"deadline complete project /by 7pm","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"aditichadha1310"},"content":"event attend meeting /at 6-7pm","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"aditichadha1310"},"content":"done 2","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"aditichadha1310"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"aditichadha1310"},"content":"bye","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"aditichadha1310":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"aditichadha1310"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\exception\\*.java","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"aditichadha1310"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aditichadha1310":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"aditichadha1310"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/exception/*.java","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"aditichadha1310"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aditichadha1310":2,"-":36}}]
