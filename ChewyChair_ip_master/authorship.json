[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ChewyChair"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"ChewyChair"},"content":"    private String by;","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"ChewyChair"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"ChewyChair"},"content":"        super(name);","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"ChewyChair"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"ChewyChair"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"ChewyChair"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"ChewyChair"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"ChewyChair"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"ChewyChair":14}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ChewyChair"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"ChewyChair"},"content":"    private String at;","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"ChewyChair"},"content":"    public Event(String name, String at) {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"ChewyChair"},"content":"        super(name);","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"ChewyChair"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"ChewyChair"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"ChewyChair"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"ChewyChair"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"ChewyChair"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"ChewyChair":14}},{"path":"src/main/java/Shika.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ChewyChair"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"ChewyChair"},"content":"public class Shika {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"ChewyChair"},"content":"    public static String line \u003d \"____________________________________________________________________________\\n\";","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"ChewyChair"},"content":"     * Main function that calls other functions to run Shika.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"ChewyChair"},"content":"     * @param args Command line arguments.","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"ChewyChair"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"ChewyChair"},"content":"        greetUser();","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"ChewyChair"},"content":"        runShika();","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"ChewyChair"},"content":"     * Function that prints Shika logo and a greeting message.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"ChewyChair"},"content":"    public static void greetUser() {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"ChewyChair"},"content":"        String logo \u003d \"  _________.__    .__ __            \\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"ChewyChair"},"content":"                + \" /   _____/|  |__ |__|  | _______   \\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"ChewyChair"},"content":"                + \" \\\\_____  \\\\ |  |  \\\\|  |  |/ /\\\\__  \\\\  \\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"ChewyChair"},"content":"                + \" /        \\\\|   Y  \\\\  |    \u003c  / __ \\\\_\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"ChewyChair"},"content":"                + \"/_______  /|___|  /__|__|_ \\\\(____  /\\n\"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"ChewyChair"},"content":"                + \"        \\\\/      \\\\/        \\\\/     \\\\/ \\n\";","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"ChewyChair"},"content":"        System.out.println(logo + \"\\nHello, friend! Shika at your service!\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"ChewyChair"},"content":"     * Function that calls scan() in a loop to run Shika. Loop can be exited by inputting \"bye\".","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"ChewyChair"},"content":"    public static void runShika() {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"ChewyChair"},"content":"        Task[] taskList \u003d new Task[100];","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"ChewyChair"},"content":"        Task.count \u003d 0;","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"ChewyChair"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"ChewyChair"},"content":"        String text;","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"ChewyChair"},"content":"        while(in.hasNextLine()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"ChewyChair"},"content":"            text \u003d in.nextLine();","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"ChewyChair"},"content":"            if (text.trim().equals(\"bye\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"ChewyChair"},"content":"                System.out.println(line + \"\u003e Bye friend!\\n\u003e See you again! :3\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"ChewyChair"},"content":"                return;","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"ChewyChair"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"ChewyChair"},"content":"            scan(taskList, text);","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"ChewyChair"},"content":"     * Function that input is an integer. It checks if value can be parsed by parseInt() without throwing an exception.","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"ChewyChair"},"content":"     * @param input String to be parsed.","lastModifiedDate":"2021-08-17"},{"lineNumber":50,"author":{"gitId":"ChewyChair"},"content":"     * @return Returns false if parseInt() throws an exception, returns true otherwise.","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":52,"author":{"gitId":"ChewyChair"},"content":"    public static boolean isInteger(String input) {","lastModifiedDate":"2021-08-17"},{"lineNumber":53,"author":{"gitId":"ChewyChair"},"content":"        try {","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"ChewyChair"},"content":"            Integer.parseInt(input);","lastModifiedDate":"2021-08-17"},{"lineNumber":55,"author":{"gitId":"ChewyChair"},"content":"            return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"ChewyChair"},"content":"        } catch (final NumberFormatException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":57,"author":{"gitId":"ChewyChair"},"content":"            return false;","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":59,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"ChewyChair"},"content":"     * Function that checks if the string is an add task command.","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"ChewyChair"},"content":"     * @param text String containing user input.","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"ChewyChair"},"content":"     * @return true if string starts with \"todo\", \"deadline\" or \"event\" and false otherwise.","lastModifiedDate":"2021-08-17"},{"lineNumber":65,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"ChewyChair"},"content":"    public static boolean isAddCommand(String text) {","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"ChewyChair"},"content":"        return text.startsWith(\"todo\") || text.startsWith(\"deadline\") || text.startsWith(\"event\");","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":71,"author":{"gitId":"ChewyChair"},"content":"     * Function that waits for user input, then executes user command.","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"ChewyChair"},"content":"     * \"list\" will list all current tasks.","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"ChewyChair"},"content":"     * \"done x\" will mark task x as done, where x is the number of the task.","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"ChewyChair"},"content":"     * \"todo\", \"deadline\" or \"event\" will add the task.","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"ChewyChair"},"content":"     * Any other string will print an error message.","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"ChewyChair"},"content":"     * @param taskList Array containing all recorded tasks.","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"ChewyChair"},"content":"     * @param text String containing user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":79,"author":{"gitId":"ChewyChair"},"content":"    public static void scan(Task[] taskList, String text) {","lastModifiedDate":"2021-08-17"},{"lineNumber":80,"author":{"gitId":"ChewyChair"},"content":"        text \u003d text.trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"ChewyChair"},"content":"        if (text.equals(\"list\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"ChewyChair"},"content":"            printTasks(taskList);","lastModifiedDate":"2021-08-17"},{"lineNumber":83,"author":{"gitId":"ChewyChair"},"content":"        } else if (text.startsWith(\"done\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":84,"author":{"gitId":"ChewyChair"},"content":"            doTask(taskList, text);","lastModifiedDate":"2021-08-17"},{"lineNumber":85,"author":{"gitId":"ChewyChair"},"content":"        } else if (isAddCommand(text)) {","lastModifiedDate":"2021-08-17"},{"lineNumber":86,"author":{"gitId":"ChewyChair"},"content":"            addTask(taskList, text);","lastModifiedDate":"2021-08-17"},{"lineNumber":87,"author":{"gitId":"ChewyChair"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":88,"author":{"gitId":"ChewyChair"},"content":"            System.out.print(line + \"Please enter a valid command.\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":89,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":90,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":91,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":92,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":93,"author":{"gitId":"ChewyChair"},"content":"     * This function adds the task specified by the user to the list. It checks for the category of the task","lastModifiedDate":"2021-08-17"},{"lineNumber":94,"author":{"gitId":"ChewyChair"},"content":"     * as specified by the user and executes accordingly.","lastModifiedDate":"2021-08-17"},{"lineNumber":95,"author":{"gitId":"ChewyChair"},"content":"     * @param taskList Array containing all recorded tasks.","lastModifiedDate":"2021-08-17"},{"lineNumber":96,"author":{"gitId":"ChewyChair"},"content":"     * @param text String containing user input.","lastModifiedDate":"2021-08-17"},{"lineNumber":97,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":98,"author":{"gitId":"ChewyChair"},"content":"    public static void addTask(Task[] taskList, String text) {","lastModifiedDate":"2021-08-17"},{"lineNumber":99,"author":{"gitId":"ChewyChair"},"content":"        if (text.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":100,"author":{"gitId":"ChewyChair"},"content":"            addTodo(taskList, text);","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"ChewyChair"},"content":"        } else if (text.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":102,"author":{"gitId":"ChewyChair"},"content":"            addDeadline(taskList, text);","lastModifiedDate":"2021-08-17"},{"lineNumber":103,"author":{"gitId":"ChewyChair"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"ChewyChair"},"content":"            addEvent(taskList, text);","lastModifiedDate":"2021-08-17"},{"lineNumber":105,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":107,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":108,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"ChewyChair"},"content":"     * This function adds the todo specified by the user to the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"ChewyChair"},"content":"     * @param taskList Array containing all recorded tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"ChewyChair"},"content":"     * @param text String containing user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"ChewyChair"},"content":"    public static void addTodo(Task[] taskList, String text) {","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"ChewyChair"},"content":"        String str \u003d text.substring(text.indexOf(\"todo\") + 4).trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"ChewyChair"},"content":"        taskList[Task.count] \u003d new Todo(str);","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"ChewyChair"},"content":"        Task.count +\u003d 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"ChewyChair"},"content":"        System.out.println(line + \"\u003e Added: \" + \"\\n\\t\" + Task.count + \". \" + taskList[Task.count - 1].toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":121,"author":{"gitId":"ChewyChair"},"content":"     * This function adds the deadline specified by the user to the list.","lastModifiedDate":"2021-08-17"},{"lineNumber":122,"author":{"gitId":"ChewyChair"},"content":"     * @param taskList Array containing all recorded tasks.","lastModifiedDate":"2021-08-17"},{"lineNumber":123,"author":{"gitId":"ChewyChair"},"content":"     * @param text String containing user input.","lastModifiedDate":"2021-08-17"},{"lineNumber":124,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":125,"author":{"gitId":"ChewyChair"},"content":"    public static void addDeadline(Task[] taskList, String text) {","lastModifiedDate":"2021-08-17"},{"lineNumber":126,"author":{"gitId":"ChewyChair"},"content":"        if (!text.contains(\"/by\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":127,"author":{"gitId":"ChewyChair"},"content":"            System.out.print(line + \"Please follow the format [NAME] /by [DEADLINE]. Thank you!\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":128,"author":{"gitId":"ChewyChair"},"content":"            return;","lastModifiedDate":"2021-08-17"},{"lineNumber":129,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":130,"author":{"gitId":"ChewyChair"},"content":"        String str \u003d text.substring(text.indexOf(\"deadline\") + 8, text.indexOf(\"/\")).trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":131,"author":{"gitId":"ChewyChair"},"content":"        String by \u003d text.substring(text.indexOf(\"/by\") + 3).trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":132,"author":{"gitId":"ChewyChair"},"content":"        taskList[Task.count] \u003d new Deadline(str, by);","lastModifiedDate":"2021-08-17"},{"lineNumber":133,"author":{"gitId":"ChewyChair"},"content":"        Task.count +\u003d 1;","lastModifiedDate":"2021-08-17"},{"lineNumber":134,"author":{"gitId":"ChewyChair"},"content":"        System.out.println(line + \"\u003e Added: \" + \"\\n\\t\" + Task.count + \". \" + taskList[Task.count - 1].toString());","lastModifiedDate":"2021-08-17"},{"lineNumber":135,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":136,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":137,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":138,"author":{"gitId":"ChewyChair"},"content":"     * This function adds the event specified by the user to the list.","lastModifiedDate":"2021-08-17"},{"lineNumber":139,"author":{"gitId":"ChewyChair"},"content":"     * @param taskList Array containing all recorded tasks.","lastModifiedDate":"2021-08-17"},{"lineNumber":140,"author":{"gitId":"ChewyChair"},"content":"     * @param text String containing user input.","lastModifiedDate":"2021-08-17"},{"lineNumber":141,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":142,"author":{"gitId":"ChewyChair"},"content":"    public static void addEvent(Task[] taskList, String text) {","lastModifiedDate":"2021-08-17"},{"lineNumber":143,"author":{"gitId":"ChewyChair"},"content":"        if (!text.contains(\"/at\")) {","lastModifiedDate":"2021-08-17"},{"lineNumber":144,"author":{"gitId":"ChewyChair"},"content":"            System.out.print(line + \"Please follow the format [NAME] /at [DURATION]. Thank you!\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":145,"author":{"gitId":"ChewyChair"},"content":"            return;","lastModifiedDate":"2021-08-17"},{"lineNumber":146,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":147,"author":{"gitId":"ChewyChair"},"content":"        String str \u003d text.substring(text.indexOf(\"event\") + 5, text.indexOf(\"/\")).trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":148,"author":{"gitId":"ChewyChair"},"content":"        String at \u003d text.substring(text.indexOf(\"/at\") + 3).trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":149,"author":{"gitId":"ChewyChair"},"content":"        taskList[Task.count] \u003d new Event(str, at);","lastModifiedDate":"2021-08-17"},{"lineNumber":150,"author":{"gitId":"ChewyChair"},"content":"        Task.count +\u003d 1;","lastModifiedDate":"2021-08-17"},{"lineNumber":151,"author":{"gitId":"ChewyChair"},"content":"        System.out.println(line + \"\u003e Added: \" + \"\\n\\t\" + Task.count + \". \" + taskList[Task.count - 1].toString());","lastModifiedDate":"2021-08-17"},{"lineNumber":152,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":153,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":154,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":155,"author":{"gitId":"ChewyChair"},"content":"     * Function that marks the task with the input number as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"ChewyChair"},"content":"     * If the String given is not a number or is out of bounds, it will print an error message.","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"ChewyChair"},"content":"     * @param taskList Array containing all recorded tasks.","lastModifiedDate":"2021-08-17"},{"lineNumber":158,"author":{"gitId":"ChewyChair"},"content":"     * @param text String that is supposed to be the number of the task.","lastModifiedDate":"2021-08-17"},{"lineNumber":159,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":160,"author":{"gitId":"ChewyChair"},"content":"    public static void doTask(Task[] taskList, String text) {","lastModifiedDate":"2021-08-17"},{"lineNumber":161,"author":{"gitId":"ChewyChair"},"content":"        String str \u003d text.substring(text.indexOf(\"done\") + 4).trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":162,"author":{"gitId":"ChewyChair"},"content":"        if (!isInteger(str)) {","lastModifiedDate":"2021-08-17"},{"lineNumber":163,"author":{"gitId":"ChewyChair"},"content":"            System.out.print(line + \"\u003e Please key in a number :/\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":164,"author":{"gitId":"ChewyChair"},"content":"            return;","lastModifiedDate":"2021-08-17"},{"lineNumber":165,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":166,"author":{"gitId":"ChewyChair"},"content":"        int index \u003d Integer.parseInt(str);","lastModifiedDate":"2021-08-17"},{"lineNumber":167,"author":{"gitId":"ChewyChair"},"content":"        if (index \u003e Task.count) {","lastModifiedDate":"2021-08-17"},{"lineNumber":168,"author":{"gitId":"ChewyChair"},"content":"            System.out.print(line + \"\u003e Oopsie! That task does not exist... yet!\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":169,"author":{"gitId":"ChewyChair"},"content":"        } else if (index \u003c 1) {","lastModifiedDate":"2021-08-17"},{"lineNumber":170,"author":{"gitId":"ChewyChair"},"content":"            System.out.print(line + \"\u003e ...Stop trying to break me :\u003c\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":171,"author":{"gitId":"ChewyChair"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":172,"author":{"gitId":"ChewyChair"},"content":"            taskList[index - 1].markAsDone();","lastModifiedDate":"2021-08-17"},{"lineNumber":173,"author":{"gitId":"ChewyChair"},"content":"            System.out.print(line + \"\u003e Otsukare! You\u0027ve done:\"","lastModifiedDate":"2021-08-17"},{"lineNumber":174,"author":{"gitId":"ChewyChair"},"content":"                    + \"\\n\\t\" + index + \". \" + taskList[index - 1].toString() + \"\\n\" + line);","lastModifiedDate":"2021-08-17"},{"lineNumber":175,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":176,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":177,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":178,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":179,"author":{"gitId":"ChewyChair"},"content":"     * Function to print all tasks in taskList.","lastModifiedDate":"2021-08-17"},{"lineNumber":180,"author":{"gitId":"ChewyChair"},"content":"     * @param taskList Array containing all recorded tasks.","lastModifiedDate":"2021-08-17"},{"lineNumber":181,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":182,"author":{"gitId":"ChewyChair"},"content":"    public static void printTasks(Task[] taskList) {","lastModifiedDate":"2021-08-17"},{"lineNumber":183,"author":{"gitId":"ChewyChair"},"content":"        System.out.println(line + \"\u003e Here is your list of tasks:\") ;","lastModifiedDate":"2021-08-17"},{"lineNumber":184,"author":{"gitId":"ChewyChair"},"content":"        for (int i \u003d 0; i \u003c Task.count; i++) {","lastModifiedDate":"2021-08-17"},{"lineNumber":185,"author":{"gitId":"ChewyChair"},"content":"            System.out.println(\"\\t\" + (i + 1) + \". \" + taskList[i].toString());","lastModifiedDate":"2021-08-17"},{"lineNumber":186,"author":{"gitId":"ChewyChair"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":187,"author":{"gitId":"ChewyChair"},"content":"        System.out.print(line);","lastModifiedDate":"2021-08-17"},{"lineNumber":188,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":189,"author":{"gitId":"ChewyChair"},"content":"}","lastModifiedDate":"2021-08-17"},{"lineNumber":190,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":191,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"ChewyChair":191}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ChewyChair"},"content":"public class Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"ChewyChair"},"content":"    /** Number of tasks recorded. */","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"ChewyChair"},"content":"    public static int count \u003d 0;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"ChewyChair"},"content":"    protected String name;","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"ChewyChair"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"ChewyChair"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"ChewyChair"},"content":"     * Constructor for Task. Initialises an instance of Task with the input values.","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"ChewyChair"},"content":"     * @param name Name of the task.","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"ChewyChair"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"ChewyChair"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"ChewyChair"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"ChewyChair"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"ChewyChair"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"ChewyChair"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"ChewyChair"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"ChewyChair"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"ChewyChair"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"ChewyChair"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"ChewyChair"},"content":"        return \"[\" + getStatus() + \"] \" + name + \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"ChewyChair"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"ChewyChair":30}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ChewyChair"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"ChewyChair"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"ChewyChair"},"content":"        super(name);","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"ChewyChair"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"ChewyChair"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"ChewyChair"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"ChewyChair"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"ChewyChair"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"ChewyChair"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"ChewyChair":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ChewyChair"},"content":"hello","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"ChewyChair"},"content":"todo hello","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"ChewyChair"},"content":"done 0","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"ChewyChair"},"content":"done 2","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"ChewyChair"},"content":"done abc","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"ChewyChair"},"content":"deadline hello","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"ChewyChair"},"content":"deadline hello /by today","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"ChewyChair"},"content":"deadline hello /at hello","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"ChewyChair"},"content":"event hello","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"ChewyChair"},"content":"event hello /by today","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"ChewyChair"},"content":"event hello /at hello","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"ChewyChair"},"content":"done 1","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"ChewyChair"},"content":"done 2","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"ChewyChair"},"content":"done       3","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"ChewyChair"},"content":"todo       hello","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"ChewyChair"},"content":"deadline    hello    /by     today","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"ChewyChair"},"content":"event    hello    /at     today","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"ChewyChair"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"ChewyChair"},"content":"bye","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"ChewyChair"},"content":"hello","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"ChewyChair":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ChewyChair"},"content":"java -classpath ..\\bin Shika \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"ChewyChair":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"ChewyChair"},"content":"java -classpath ../bin Shika \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"ChewyChair":1}}]
