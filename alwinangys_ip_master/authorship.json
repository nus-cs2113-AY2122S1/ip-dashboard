[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"# Atlas User Guide","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"Atlas is a personal task manager which manages tasks, deadlines and events, optimised for use via a Command","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"Line Interface (CLI).","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"## Setting up","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version.","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"1. Download `atlas.jar` into an empty folder.","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"2. Using a terminal (e.g. `cmd`), run Atlas with the following command: `java -jar atlas.jar`.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"## Using Atlas","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"When you run Atlas, you should see the following message:","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"Hello from","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"    #    ####### #          #     #####","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"   # #      #    #         # #   #     #","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"  #   #     #    #        #   #  #","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":" #     #    #    #       #     #  #####","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":" #######    #    #       #######       #","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":" #     #    #    #       #     # #     #","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":" #     #    #    ####### #     #  #####","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"alwinangys"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"alwinangys"},"content":"Hello! I\u0027m Atlas!","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"alwinangys"},"content":"What can I do for you today?","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"alwinangys"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"alwinangys"},"content":"```","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"alwinangys"},"content":"If you run Atlas for the very first time on your computer, you should see the following message before:","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"alwinangys"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"alwinangys"},"content":"File not yet created, I\u0027ll create one for you now!","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"alwinangys"},"content":"```","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"alwinangys"},"content":"\u003eNotes about the command format:","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"alwinangys"},"content":"\u003e ","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"alwinangys"},"content":"\u003e- Words in `UPPER_CASE` are the parameters to be supplied by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"alwinangys"},"content":"\u003e- Items in square brackets are optional.","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":43,"author":{"gitId":"alwinangys"},"content":"### Adding a todo task: `todo`","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":45,"author":{"gitId":"alwinangys"},"content":"Adds a todo task to the list.","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"alwinangys"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":49,"author":{"gitId":"alwinangys"},"content":"Example of usage:","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"alwinangys"},"content":"- `todo buy bread`","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"alwinangys"},"content":"### Adding a deadline task: `deadline`","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"alwinangys"},"content":"Adds a deadline task to the list. Deadlines contain a task description and a date and/or time representing a deadline.","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"alwinangys"},"content":"Format: `deadline DESCRIPTION /by DATE [TIME]`","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"alwinangys"},"content":"`DATE` format: **dd/mm/yyyy**","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"alwinangys"},"content":"`TIME` format: **hh:mm**","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"alwinangys"},"content":"- `deadline return book /by 30/12/2021`","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"alwinangys"},"content":"- `deadline return book /by 30/12/2021 12:00`","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"alwinangys"},"content":"### Adding an event task: `event`","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"alwinangys"},"content":"Adds an event task to the list. Events contain a task description and a date and/or time representing the starting time.","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"alwinangys"},"content":"Format: `event DESCRIPTION /at DATE [TIME]`","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"alwinangys"},"content":"`DATE` format: **dd/mm/yyyy**","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":77,"author":{"gitId":"alwinangys"},"content":"`TIME` format: **hh:mm**","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":79,"author":{"gitId":"alwinangys"},"content":"Example of usage:","lastModifiedDate":"2021-09-27"},{"lineNumber":80,"author":{"gitId":"alwinangys"},"content":"- `event project meeting /at 30/12/2021`","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"alwinangys"},"content":"- `event project meeting /at 30/12/2021 12:00`","lastModifiedDate":"2021-09-27"},{"lineNumber":82,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"alwinangys"},"content":"### Marking a task as done: `done`","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"alwinangys"},"content":"Marks an undone task at a specific index as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"alwinangys"},"content":"Format: `done TASK_INDEX`","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"alwinangys"},"content":"- `TASK_INDEX` must be an integer greater than 1 and less than or equal to the total number of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"alwinangys"},"content":"Example of usage:","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"alwinangys"},"content":"- `done 1`","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"alwinangys"},"content":"### Marking a task as undone: `undo`","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"alwinangys"},"content":"Marks a done task at a specific index as undone.","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":100,"author":{"gitId":"alwinangys"},"content":"Format: `undo TASK_INDEX`","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"alwinangys"},"content":"- `TASK_INDEX` must be an integer greater than 1 and less than or equal to the total number of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"alwinangys"},"content":"Example of usage:","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"alwinangys"},"content":"- `undo 1`","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"alwinangys"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"alwinangys"},"content":"Shows a list of all tasks and their given fields.","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"alwinangys"},"content":"Format: `list`","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":115,"author":{"gitId":"alwinangys"},"content":"list","lastModifiedDate":"2021-09-27"},{"lineNumber":116,"author":{"gitId":"alwinangys"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":117,"author":{"gitId":"alwinangys"},"content":"Here are the tasks in your list: ","lastModifiedDate":"2021-09-27"},{"lineNumber":118,"author":{"gitId":"alwinangys"},"content":"1.[T][ ] buy bread","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"alwinangys"},"content":"2.[D][ ] return book (by: Dec 30 2021 12:00)","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"alwinangys"},"content":"3.[E][ ] project meeting (at: Dec 30 2021 12:00)","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"alwinangys"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":123,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"alwinangys"},"content":"### Finding a task: `find`","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"alwinangys"},"content":"Finds all tasks containing given keyword(s).","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"alwinangys"},"content":"Format: `find TASK_KEYWORDS`","lastModifiedDate":"2021-09-27"},{"lineNumber":129,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"alwinangys"},"content":"- All user input will be treated as lowercase e.g. `Bread` will be treated as `bread`","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"alwinangys"},"content":"Example of usage:","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"alwinangys"},"content":"- `find bread`","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"alwinangys"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"alwinangys"},"content":"Deletes a task at a specific index.","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"alwinangys"},"content":"Format: `delete TASK_INDEX`","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"alwinangys"},"content":"- `TASK_INDEX` must be an integer greater than 1 and less than or equal to the total number of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"alwinangys"},"content":"Example of usage: ","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"alwinangys"},"content":"- `delete 1`","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"alwinangys"},"content":"### Deleting all tasks: `delete all`","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"alwinangys"},"content":"Deletes all tasks from the list.","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"alwinangys"},"content":"Format: `delete all`","lastModifiedDate":"2021-09-27"},{"lineNumber":155,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":156,"author":{"gitId":"alwinangys"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2021-09-27"},{"lineNumber":157,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"alwinangys"},"content":"Exits the program.","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"alwinangys"},"content":"Format: `bye`","lastModifiedDate":"2021-09-27"},{"lineNumber":161,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"alwinangys"},"content":"### Saving the data","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"alwinangys"},"content":"Tasks are saved in the hard disk when you exit Atlas. They will be loaded again the next time you run Atlas and you","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"alwinangys"},"content":"can view them by typing `list` after the program starts.","lastModifiedDate":"2021-09-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"-":27,"alwinangys":139}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"        Storage.loadTaskFile(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"        Ui.greetUser();","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"        String userInput;","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"        boolean isBye \u003d false;","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"        while (!isBye) {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"            userInput \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"            String command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"            if (command.equals(\"bye\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"alwinangys"},"content":"                isBye \u003d true;","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"alwinangys"},"content":"                Ui.printFarewellMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"alwinangys"},"content":"                Storage.saveTaskFile(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"alwinangys"},"content":"            } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"alwinangys"},"content":"                Parser.parseCommand(userInput, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"alwinangys"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"alwinangys":30}},{"path":"src/main/java/duke/exception/InvalidDoOrUndoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.exception;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"public class InvalidDoOrUndoException extends Exception {","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"    public InvalidDoOrUndoException (String message) {","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"        super(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alwinangys":8}},{"path":"src/main/java/duke/exception/InvalidTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.exception;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"public class InvalidTaskDescriptionException extends Exception {","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"    public InvalidTaskDescriptionException(String message) {","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"        super(message);","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"alwinangys":8}},{"path":"src/main/java/duke/exception/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.exception;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"public class TaskNotFoundException extends Exception {","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"    public TaskNotFoundException(String message) {","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"        super(message);","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"alwinangys":8}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"import duke.exception.InvalidTaskDescriptionException;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"import java.time.temporal.TemporalAccessor;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"public class Parser {","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"    private static final String DATE_AND_TIME_FORMAT \u003d \"dd/MM/yyyy[ HH:mm]\";","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"    private static final String PRINT_DATE_AND_TIME_FORMAT \u003d \"MMM dd yyyy HH:mm\";","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"     * Extracts the command from input provided by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"alwinangys"},"content":"     * @return command extracted from user input","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"alwinangys"},"content":"    public static String getCommand(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"alwinangys"},"content":"        String[] input \u003d userInput.trim().toLowerCase().split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"alwinangys"},"content":"        return input[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"alwinangys"},"content":"     * Processes extracted command and description from input provided by the user and executes the task if the input is valid.","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"alwinangys"},"content":"     * An error message will be printed if the extracted command is invalid, or if the description of the task is invalid,","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"alwinangys"},"content":"     * or if the user tries to find a task that does not exist in the list.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"alwinangys"},"content":"    public static void parseCommand(String userInput, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"alwinangys"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"alwinangys"},"content":"            String command \u003d getCommand(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"alwinangys"},"content":"            switch (command) {","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"alwinangys"},"content":"            case (\"bye\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"alwinangys"},"content":"                Ui.printFarewellMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"alwinangys"},"content":"            case (\"list\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"alwinangys"},"content":"                TaskList.requestList(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"alwinangys"},"content":"            case (\"done\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"alwinangys"},"content":"            case (\"undo\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"alwinangys"},"content":"                TaskList.changeDoneStatus(userInput, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"alwinangys"},"content":"            case (\"todo\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"alwinangys"},"content":"                TaskList.addTodo(userInput, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"alwinangys"},"content":"            case (\"deadline\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"alwinangys"},"content":"            case (\"event\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"alwinangys"},"content":"                TaskList.addDeadlineOrEvent(userInput, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"alwinangys"},"content":"            case (\"delete\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"alwinangys"},"content":"                TaskList.deleteTask(userInput, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"alwinangys"},"content":"            case (\"find\"):","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"alwinangys"},"content":"                String filteredInput \u003d getFindDescription(userInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"alwinangys"},"content":"                TaskList.findTasks(filteredInput, tasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"alwinangys"},"content":"            default:","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"alwinangys"},"content":"                Ui.printErrorMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"alwinangys"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"alwinangys"},"content":"        } catch (InvalidTaskDescriptionException | TaskNotFoundException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":76,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"alwinangys"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"alwinangys"},"content":"     * Extracts a substring containing the description of a Todo task.","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"alwinangys"},"content":"     * @return string containing task description of a Todo","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"alwinangys"},"content":"    public static String getTodoDescription(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"alwinangys"},"content":"        int descriptionPosition \u003d userInput.trim().indexOf(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"alwinangys"},"content":"        return userInput.trim().substring(descriptionPosition);","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"alwinangys"},"content":"     * Returns an int representing the starting position of the description and deadline of","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"alwinangys"},"content":"     * a Deadline or Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"alwinangys"},"content":"     * @return starting position of task description for Deadline or Event tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"alwinangys"},"content":"    public static int DeadlineOrEventDescriptionPosition(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"alwinangys"},"content":"        return userInput.trim().indexOf(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"alwinangys"},"content":"     * Returns an int representing the starting position of the deadline for a Deadline or Event","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"alwinangys"},"content":"     * task.","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"alwinangys"},"content":"     * This method distinguishes between a Deadline and Event task. For example, if a Deadline task","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"alwinangys"},"content":"     * if passed into this method, indexOf(\"/at\") will have a value of -1 as the /at attribute is for","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"alwinangys"},"content":"     * an Event task. indexOf(\"/by\"), for a Deadline task, is guaranteed to be more than 0.","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"alwinangys"},"content":"     * @return starting position of the date and/or time deadline for a Deadline or Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":113,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":114,"author":{"gitId":"alwinangys"},"content":"    public static int DeadlineOrEventTimePosition(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"alwinangys"},"content":"        return Math.max(userInput.trim().indexOf(\"/by\"), userInput.trim().indexOf(\"/at\"));","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"alwinangys"},"content":"     * Extracts a substring containing the description of a Deadline or Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":121,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":122,"author":{"gitId":"alwinangys"},"content":"     * @return string containing Deadline or Event description","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"alwinangys"},"content":"    public static String getDeadlineOrEventDescription(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"alwinangys"},"content":"        int descriptionPosition \u003d DeadlineOrEventDescriptionPosition(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"alwinangys"},"content":"        int timePosition \u003d DeadlineOrEventTimePosition(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"alwinangys"},"content":"        return userInput.substring(descriptionPosition, timePosition);","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"alwinangys"},"content":"     * Extracts date and time deadline from a Deadline task, or duration from an Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"alwinangys"},"content":"     * @return string containing date and time for a Deadline or Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"alwinangys"},"content":"    public static String getDateAndTimeSubstring(String userInput) {","lastModifiedDate":"2021-09-26"},{"lineNumber":137,"author":{"gitId":"alwinangys"},"content":"        int timePosition \u003d DeadlineOrEventTimePosition(userInput);","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"alwinangys"},"content":"        return userInput.substring(timePosition + 3).trim();","lastModifiedDate":"2021-09-26"},{"lineNumber":139,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":140,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":141,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":142,"author":{"gitId":"alwinangys"},"content":"     * Converts date and time from a string to a LocalDateTime object. The string must","lastModifiedDate":"2021-09-27"},{"lineNumber":143,"author":{"gitId":"alwinangys"},"content":"     * contain the date in the required format, while the time attribute is optional. Otherwise,","lastModifiedDate":"2021-09-27"},{"lineNumber":144,"author":{"gitId":"alwinangys"},"content":"     * an error message will be shown prompting the date and time to be entered in a specific format.","lastModifiedDate":"2021-09-27"},{"lineNumber":145,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing date and time for a Deadline or Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"alwinangys"},"content":"     * @return LocalDateTime object representing date and time for given task.","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"alwinangys"},"content":"    public static LocalDateTime convertSubStringToDateAndTime(String input) {","lastModifiedDate":"2021-09-26"},{"lineNumber":150,"author":{"gitId":"alwinangys"},"content":"        LocalDateTime dateAndTime \u003d null;","lastModifiedDate":"2021-09-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        //@@author alwinangys-reused","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        //Reused from https://stackoverflow.com/questions/48280447/java-8-datetimeformatter-with-optional-part","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // with minor modifications","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_AND_TIME_FORMAT);","lastModifiedDate":"2021-09-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            TemporalAccessor temporalAccessor \u003d formatter.parseBest(input, LocalDateTime::from, LocalDate::from);","lastModifiedDate":"2021-09-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            if (temporalAccessor instanceof LocalDateTime) {","lastModifiedDate":"2021-09-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                dateAndTime \u003d (LocalDateTime) temporalAccessor;","lastModifiedDate":"2021-09-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                dateAndTime \u003d ((LocalDate) temporalAccessor).atStartOfDay();","lastModifiedDate":"2021-09-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            System.out.println(\"Enter date and or time in this format: dd/MM/yyyy HH:mm (time is optional)\");","lastModifiedDate":"2021-09-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        //@@author","lastModifiedDate":"2021-09-27"},{"lineNumber":168,"author":{"gitId":"alwinangys"},"content":"        return dateAndTime;","lastModifiedDate":"2021-09-26"},{"lineNumber":169,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":170,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":171,"author":{"gitId":"alwinangys"},"content":"    public static String printDateAndTimeAsString(LocalDateTime dateAndTime) {","lastModifiedDate":"2021-09-26"},{"lineNumber":172,"author":{"gitId":"alwinangys"},"content":"        return dateAndTime.format(DateTimeFormatter.ofPattern(PRINT_DATE_AND_TIME_FORMAT));","lastModifiedDate":"2021-09-26"},{"lineNumber":173,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":174,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":175,"author":{"gitId":"alwinangys"},"content":"    public static String storeDateAndTimeAsString(LocalDateTime dateAndTime) {","lastModifiedDate":"2021-09-26"},{"lineNumber":176,"author":{"gitId":"alwinangys"},"content":"        return dateAndTime.format(DateTimeFormatter.ofPattern(DATE_AND_TIME_FORMAT));","lastModifiedDate":"2021-09-26"},{"lineNumber":177,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":180,"author":{"gitId":"alwinangys"},"content":"     * Extracts task number when the user tries to do or undo tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":181,"author":{"gitId":"alwinangys"},"content":"     * +1 in taskNumberPosition is to account for the whitespace between the command and task number.","lastModifiedDate":"2021-09-27"},{"lineNumber":182,"author":{"gitId":"alwinangys"},"content":"     * -1 in the return value is to accommodate for the 0-based ArrayList of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":184,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":185,"author":{"gitId":"alwinangys"},"content":"     * @return int representing task number.","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":187,"author":{"gitId":"alwinangys"},"content":"    public static int getTaskNumber(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"alwinangys"},"content":"        int taskNumberPosition \u003d userInput.trim().indexOf(\" \") + 1;","lastModifiedDate":"2021-09-27"},{"lineNumber":189,"author":{"gitId":"alwinangys"},"content":"        return Integer.parseInt(userInput.trim().substring(taskNumberPosition)) - 1;","lastModifiedDate":"2021-09-27"},{"lineNumber":190,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"alwinangys"},"content":"    public static boolean isValidTaskDescription(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"alwinangys"},"content":"        String[] description \u003d userInput.trim().split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"alwinangys"},"content":"        return description.length \u003e 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"alwinangys"},"content":"    public static boolean isValidDeadlineOrEventDescription(String userInput, String description) {","lastModifiedDate":"2021-09-26"},{"lineNumber":198,"author":{"gitId":"alwinangys"},"content":"        if (!isValidDeadlineFormat(userInput) \u0026\u0026 !isValidEventFormat(userInput)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"alwinangys"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"alwinangys"},"content":"        } else if (description.isEmpty()) {","lastModifiedDate":"2021-09-26"},{"lineNumber":201,"author":{"gitId":"alwinangys"},"content":"            return false;","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"alwinangys"},"content":"        return true;","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"alwinangys"},"content":"    public static boolean isValidDeadlineFormat(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"alwinangys"},"content":"        return userInput.contains(\"/by\");","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"alwinangys"},"content":"    public static boolean isValidEventFormat(String userInput) {","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"alwinangys"},"content":"        return userInput.contains(\"/at\");","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":215,"author":{"gitId":"alwinangys"},"content":"     * Extracts keyword to find any tasks containing the keyword. This method reuses","lastModifiedDate":"2021-09-27"},{"lineNumber":216,"author":{"gitId":"alwinangys"},"content":"     * getTodoDescription but under a different name to better suit the Find command.","lastModifiedDate":"2021-09-27"},{"lineNumber":217,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":218,"author":{"gitId":"alwinangys"},"content":"     * @param userInput input from user from the command line interface","lastModifiedDate":"2021-09-27"},{"lineNumber":219,"author":{"gitId":"alwinangys"},"content":"     * @return string containing keyword to search for tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":220,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":221,"author":{"gitId":"alwinangys"},"content":"    public static String getFindDescription(String userInput) {","lastModifiedDate":"2021-09-24"},{"lineNumber":222,"author":{"gitId":"alwinangys"},"content":"        return getTodoDescription(userInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":223,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":224,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":225,"author":{"gitId":"alwinangys"},"content":"    public static boolean isDeleteAll(String userInput) {","lastModifiedDate":"2021-09-26"},{"lineNumber":226,"author":{"gitId":"alwinangys"},"content":"        return userInput.trim().equalsIgnoreCase(\"delete all\");","lastModifiedDate":"2021-09-26"},{"lineNumber":227,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":228,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"-":17,"alwinangys":211}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.storage;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"import java.io.File;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"public class Storage {","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"    private static final String FILE_PATH \u003d \"data/atlasData.txt\";","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"     * Processes tasks from the main ArrayList of tasks and stores them in the save file.","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"     * Method stores tasks in the .txt file in the following format:","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"     * T | 0 | task description and/or deadline","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"alwinangys"},"content":"     * The first index indicates the type of task, the second indicates whether a task is done by storing a 1 and","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"alwinangys"},"content":"     * 0 if undone. The last field contains the description and/or deadline containing the type of task. If the last","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"alwinangys"},"content":"     * field contains a deadline, the format of the last field will be: task description | deadline.","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"alwinangys"},"content":"     * If an error occurs while writing to the file, an error message is printed.","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"alwinangys"},"content":"     * @throws IOException throws an IOException","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"alwinangys"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"alwinangys"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"alwinangys"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"alwinangys"},"content":"            String taskAsString \u003d String.valueOf(task);","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"alwinangys"},"content":"            String taskType \u003d taskAsString.substring(1, 2);","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"alwinangys"},"content":"            String taskStatus \u003d task.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"alwinangys"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"alwinangys"},"content":"            case (\"T\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"alwinangys"},"content":"                fw.write(\"T | \" + taskStatus + \" |\" + task.getDescription());","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"alwinangys"},"content":"            case (\"D\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"alwinangys"},"content":"                Deadline deadlineTask \u003d (Deadline) task;","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"alwinangys"},"content":"                String deadlineString \u003d Parser.storeDateAndTimeAsString(deadlineTask.getDeadline());","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"alwinangys"},"content":"                fw.write(\"D | \" + taskStatus + \" |\" + task.getDescription() + \"| \" + deadlineString);","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"alwinangys"},"content":"            case (\"E\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"alwinangys"},"content":"                Event eventTask \u003d (Event) task;","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"alwinangys"},"content":"                String eventDuration \u003d Parser.storeDateAndTimeAsString(eventTask.getDuration());","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"alwinangys"},"content":"                fw.write(\"E | \" + taskStatus + \" |\" + task.getDescription() + \"| \" + eventDuration);","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"alwinangys"},"content":"            default:","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"alwinangys"},"content":"                System.out.println(\"Something went wrong!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"alwinangys"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"alwinangys"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"alwinangys"},"content":"            fw.write(System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"alwinangys"},"content":"        fw.close();","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":65,"author":{"gitId":"alwinangys"},"content":"     * Checks if the directory and file to save the list of tasks in exists. If not, the directory","lastModifiedDate":"2021-09-27"},{"lineNumber":66,"author":{"gitId":"alwinangys"},"content":"     * or file will be created, depending on which is/are missing.","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"alwinangys"},"content":"     * Prints an error message if the file cannot be created successfully.","lastModifiedDate":"2021-09-27"},{"lineNumber":68,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"alwinangys"},"content":"    public static void checkDirectoryExists() {","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"alwinangys"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"alwinangys"},"content":"            File directory \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"alwinangys"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"alwinangys"},"content":"                directory.getParentFile().mkdirs();","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"alwinangys"},"content":"                directory.createNewFile();","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"alwinangys"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"alwinangys"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"File not created.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"alwinangys"},"content":"    public static void saveTaskFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"alwinangys"},"content":"        checkDirectoryExists();","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"alwinangys"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"alwinangys"},"content":"            writeToFile(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"alwinangys"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"alwinangys"},"content":"     * Populates empty task ArrayList given contents of the save file.","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"alwinangys"},"content":"     * This method processes tasks from the save file format to the same format as a user would input","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"alwinangys"},"content":"     * into the command line, one by one.","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"alwinangys"},"content":"     * @param input string representing one task from the save file","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks to be populated","lastModifiedDate":"2021-09-27"},{"lineNumber":97,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"alwinangys"},"content":"    public static void fillArrayListFromFile(String input, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"alwinangys"},"content":"        String[] taskContent \u003d input.split( \"\\\\|\");","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"alwinangys"},"content":"        String taskType \u003d taskContent[0].trim();","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"alwinangys"},"content":"        String isDone \u003d taskContent[1].trim();","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"alwinangys"},"content":"        String description \u003d taskContent[2];","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"alwinangys"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"alwinangys"},"content":"        case (\"T\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"alwinangys"},"content":"            tasks.add(new Todo(description));","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"alwinangys"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"alwinangys"},"content":"        case (\"D\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"alwinangys"},"content":"            String taskDeadline \u003d taskContent[3];","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"alwinangys"},"content":"            LocalDateTime deadlineDateAndTime \u003d Parser.convertSubStringToDateAndTime(taskDeadline.trim());","lastModifiedDate":"2021-09-26"},{"lineNumber":111,"author":{"gitId":"alwinangys"},"content":"            tasks.add(new Deadline(description, deadlineDateAndTime));","lastModifiedDate":"2021-09-26"},{"lineNumber":112,"author":{"gitId":"alwinangys"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"alwinangys"},"content":"        case (\"E\"):","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"alwinangys"},"content":"            String taskDuration \u003d taskContent[3];","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"alwinangys"},"content":"            LocalDateTime eventDateAndTime \u003d Parser.convertSubStringToDateAndTime(taskDuration.trim());","lastModifiedDate":"2021-09-26"},{"lineNumber":116,"author":{"gitId":"alwinangys"},"content":"            tasks.add(new Event(description, eventDateAndTime));","lastModifiedDate":"2021-09-26"},{"lineNumber":117,"author":{"gitId":"alwinangys"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"alwinangys"},"content":"        default:","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"Something went wrong!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"alwinangys"},"content":"            break;","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"alwinangys"},"content":"        // Current task will always be at the end of the ArrayList, so the marking of a task as done can be done after","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"alwinangys"},"content":"        // exiting the switch statement","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"alwinangys"},"content":"        if (isDone.equals(\"1\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"alwinangys"},"content":"            tasks.get(tasks.size() - 1).markAsDone();","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"alwinangys"},"content":"     * Takes in the save file and passes tasks individually to be processed to be added to the list of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":132,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks to be populated.","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"alwinangys"},"content":"     * @throws FileNotFoundException throws a FileNotFoundException","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"alwinangys"},"content":"    public static void readTaskFile(ArrayList\u003cTask\u003e tasks) throws FileNotFoundException {","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"alwinangys"},"content":"        File taskFile \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"alwinangys"},"content":"        Scanner scan \u003d new Scanner(taskFile);","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"alwinangys"},"content":"        while (scan.hasNext()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"alwinangys"},"content":"            String taskToAdd \u003d scan.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"alwinangys"},"content":"            fillArrayListFromFile(taskToAdd, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"alwinangys"},"content":"     * Loads the save file for processing into the main ArrayList of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"alwinangys"},"content":"     * Done at the very beginning when the program is run. Creates a file if the save file is not","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"alwinangys"},"content":"     * yet created (usually done when the program is run by a new user for the first time).","lastModifiedDate":"2021-09-27"},{"lineNumber":149,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"alwinangys"},"content":"     * @param tasks empty ArrayLIst of tasks to be populated.","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"alwinangys"},"content":"    public static void loadTaskFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"alwinangys"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"alwinangys"},"content":"            readTaskFile(tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"alwinangys"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"File not yet created, I\u0027ll create one for you now!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"alwinangys":159}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"    public LocalDateTime getDeadline() {","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"        return deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + Parser.printDateAndTimeAsString(deadline) + \")\";","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"alwinangys":24}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"    private final LocalDateTime duration;","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"    public Event(String description, LocalDateTime duration) {","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"    public LocalDateTime getDuration() {","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"        return duration;","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + Parser.printDateAndTimeAsString(duration) + \")\";","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"alwinangys":24}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"    //...","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"alwinangys"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"alwinangys"},"content":"        return isDone;","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"alwinangys"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"alwinangys"},"content":"        return description;","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"alwinangys"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"alwinangys"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"alwinangys"},"content":"        return getStatusIcon() + description;","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"alwinangys":37}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.task;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"alwinangys":13}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.tasklist;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"import duke.exception.InvalidDoOrUndoException;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"import duke.exception.InvalidTaskDescriptionException;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"public class TaskList {","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"     * Adds a Todo task to the ArrayList of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing description of Todo task","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"     * @throws InvalidTaskDescriptionException if no description is provided by the user","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"alwinangys"},"content":"    public static void addTodo(String input, ArrayList\u003cTask\u003e tasks) throws InvalidTaskDescriptionException {","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"alwinangys"},"content":"        if (!Parser.isValidTaskDescription(input)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"alwinangys"},"content":"            throw new InvalidTaskDescriptionException(\"Task description is invalid!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"alwinangys"},"content":"        String description \u003d Parser.getTodoDescription(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"alwinangys"},"content":"        Todo newTodo \u003d new Todo(description);","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"alwinangys"},"content":"        tasks.add(newTodo);","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"alwinangys"},"content":"        Ui.printAddedTaskMessage(newTodo, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"alwinangys"},"content":"     * Adds a Deadline or Event task to the ArrayList of tasks. As the format of Deadline and Event","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"alwinangys"},"content":"     * tasks are very similar, adding these two types of tasks are condensed into one method.","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing description and date and/or time of Deadline or Event task","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"alwinangys"},"content":"     * @throws InvalidTaskDescriptionException if no description is provided by the user, or the input by","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"alwinangys"},"content":"     * the user does not contain \"/by\" for a Deadline task or \"/at\" for an Event task.","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"alwinangys"},"content":"     * @see Deadline","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"alwinangys"},"content":"     * @see Event","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"alwinangys"},"content":"    public static void addDeadlineOrEvent(String input, ArrayList\u003cTask\u003e tasks) throws InvalidTaskDescriptionException {","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"alwinangys"},"content":"        String taskType \u003d Parser.getCommand(input);","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"alwinangys"},"content":"        String description \u003d Parser.getDeadlineOrEventDescription(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"alwinangys"},"content":"        String timeAsString \u003d Parser.getDateAndTimeSubstring(input);","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"alwinangys"},"content":"        LocalDateTime time \u003d Parser.convertSubStringToDateAndTime(timeAsString.trim());","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"alwinangys"},"content":"        if (!Parser.isValidDeadlineOrEventDescription(input, description)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"alwinangys"},"content":"            throw new InvalidTaskDescriptionException(\"Invalid or missing task detail!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"alwinangys"},"content":"        if (taskType.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"alwinangys"},"content":"            Deadline newDeadline \u003d new Deadline(description, time);","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"alwinangys"},"content":"            tasks.add(newDeadline);","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"alwinangys"},"content":"            Ui.printAddedTaskMessage(newDeadline, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"alwinangys"},"content":"        } else if (taskType.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"alwinangys"},"content":"            Event newEvent \u003d new Event(description, time);","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"alwinangys"},"content":"            tasks.add(newEvent);","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"alwinangys"},"content":"            Ui.printAddedTaskMessage(newEvent, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":69,"author":{"gitId":"alwinangys"},"content":"     * Marks an undone task as done.","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":71,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing \"done\" and the task number to be marked as done","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"alwinangys"},"content":"     * @throws InvalidDoOrUndoException if the user tries to mark an already completed task as done","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":75,"author":{"gitId":"alwinangys"},"content":"    public static void inputDone(String input, ArrayList\u003cTask\u003e tasks) throws InvalidDoOrUndoException {","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"alwinangys"},"content":"        int taskNumber \u003d Parser.getTaskNumber(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"alwinangys"},"content":"        Task t \u003d tasks.get(taskNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"alwinangys"},"content":"        if (t.isDone()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"alwinangys"},"content":"            throw new InvalidDoOrUndoException(\"This task has already been done, complete something else!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"alwinangys"},"content":"        t.markAsDone();","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"alwinangys"},"content":"        Ui.printDoneTask(t);","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"alwinangys"},"content":"     * Reverts a completed task to undone state.","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing \"undo\" and the task number to be marked as undone","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":91,"author":{"gitId":"alwinangys"},"content":"     * @throws InvalidDoOrUndoException if the user tries to revert an undone task to undone state","lastModifiedDate":"2021-09-27"},{"lineNumber":92,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"alwinangys"},"content":"    public static void undoDone(String input, ArrayList\u003cTask\u003e tasks) throws InvalidDoOrUndoException {","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"alwinangys"},"content":"        int taskNumber \u003d Parser.getTaskNumber(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"alwinangys"},"content":"        Task t \u003d tasks.get(taskNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"alwinangys"},"content":"        if (!t.isDone()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"alwinangys"},"content":"            throw new InvalidDoOrUndoException(\"This task has not been done yet!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"alwinangys"},"content":"        t.markAsNotDone();","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"alwinangys"},"content":"        Ui.printUndoneTask(t);","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"alwinangys"},"content":"     * Processes inputs which marks tasks as done or undone.","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"alwinangys"},"content":"     * Prints an error message if the input does not contain a number, attempting to mark a done task as done, attempting to","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"alwinangys"},"content":"     * undo an undone task, or if the task number is out of the range of the current number of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":109,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing either \"done\" or \"undo\" and the task number to have its status changed.","lastModifiedDate":"2021-09-27"},{"lineNumber":110,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":111,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":112,"author":{"gitId":"alwinangys"},"content":"    public static void changeDoneStatus(String input, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"alwinangys"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"alwinangys"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"alwinangys"},"content":"            if (splitInput[0].equalsIgnoreCase(\"done\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"alwinangys"},"content":"                inputDone(input, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"alwinangys"},"content":"            } else if (splitInput[0].equalsIgnoreCase(\"undo\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"alwinangys"},"content":"                undoDone(input, tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"alwinangys"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"alwinangys"},"content":"        } catch (NumberFormatException invalidTaskNumber) {","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"Indicate the task number you\u0027d like to do or undo!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"alwinangys"},"content":"        } catch (InvalidDoOrUndoException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"alwinangys"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"alwinangys"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"No such task number exists!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":133,"author":{"gitId":"alwinangys"},"content":"     * Deletes a task given a task number.","lastModifiedDate":"2021-09-27"},{"lineNumber":134,"author":{"gitId":"alwinangys"},"content":"     * Prints an error message if the task number to delete is out of range of the current number of tasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing which task to delete.","lastModifiedDate":"2021-09-27"},{"lineNumber":137,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":138,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"alwinangys"},"content":"    public static void deleteTask(String input, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"alwinangys"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":141,"author":{"gitId":"alwinangys"},"content":"            if (Parser.isDeleteAll(input)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":142,"author":{"gitId":"alwinangys"},"content":"                tasks.clear();","lastModifiedDate":"2021-09-26"},{"lineNumber":143,"author":{"gitId":"alwinangys"},"content":"                Ui.printDeleteAllMessage();","lastModifiedDate":"2021-09-26"},{"lineNumber":144,"author":{"gitId":"alwinangys"},"content":"                return;","lastModifiedDate":"2021-09-26"},{"lineNumber":145,"author":{"gitId":"alwinangys"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":146,"author":{"gitId":"alwinangys"},"content":"            int taskNumber \u003d Parser.getTaskNumber(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"alwinangys"},"content":"            Ui.printDeleteMessage(tasks.get(taskNumber), tasks);","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"alwinangys"},"content":"            tasks.remove(taskNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"alwinangys"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"No such task number exists!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":152,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":153,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":154,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":157,"author":{"gitId":"alwinangys"},"content":"     * Displays the current list of tasks. Each line will display the type of task, its done state, and","lastModifiedDate":"2021-09-27"},{"lineNumber":158,"author":{"gitId":"alwinangys"},"content":"     * its description.","lastModifiedDate":"2021-09-27"},{"lineNumber":159,"author":{"gitId":"alwinangys"},"content":"     * Prints a message to inform the user if the task list is empty.","lastModifiedDate":"2021-09-27"},{"lineNumber":160,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":161,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":162,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":163,"author":{"gitId":"alwinangys"},"content":"    public static void requestList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"alwinangys"},"content":"        Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"alwinangys"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"alwinangys"},"content":"            System.out.println(\"There are no tasks!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"alwinangys"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"alwinangys"},"content":"            return;","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"alwinangys"},"content":"        System.out.println(\"Here are the tasks in your list: \");","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"alwinangys"},"content":"        Ui.printList(tasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":172,"author":{"gitId":"alwinangys"},"content":"        Ui.printHorizontalLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":175,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":176,"author":{"gitId":"alwinangys"},"content":"     * Finds and returns all tasks containing a given keyword provided by the user.","lastModifiedDate":"2021-09-27"},{"lineNumber":177,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":178,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing keyword of desired tasks to find","lastModifiedDate":"2021-09-27"},{"lineNumber":179,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":180,"author":{"gitId":"alwinangys"},"content":"     * @throws TaskNotFoundException if no tasks in the list of tasks contains the provided keyword","lastModifiedDate":"2021-09-27"},{"lineNumber":181,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":182,"author":{"gitId":"alwinangys"},"content":"    public static void findTasks(String input, ArrayList\u003cTask\u003e tasks) throws TaskNotFoundException {","lastModifiedDate":"2021-09-27"},{"lineNumber":183,"author":{"gitId":"alwinangys"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d filterTasksByString(input, tasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":184,"author":{"gitId":"alwinangys"},"content":"        if (filteredList.isEmpty()) {","lastModifiedDate":"2021-09-24"},{"lineNumber":185,"author":{"gitId":"alwinangys"},"content":"            throw new TaskNotFoundException(\"I can\u0027t find any matching tasks! Try again!\");","lastModifiedDate":"2021-09-27"},{"lineNumber":186,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":187,"author":{"gitId":"alwinangys"},"content":"        Ui.printFilteredTaskList(filteredList);","lastModifiedDate":"2021-09-24"},{"lineNumber":188,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":189,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":190,"author":{"gitId":"alwinangys"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":191,"author":{"gitId":"alwinangys"},"content":"     * Filters the entire list of tasks and returns a new list of tasks that contains the","lastModifiedDate":"2021-09-27"},{"lineNumber":192,"author":{"gitId":"alwinangys"},"content":"     * given keyword.","lastModifiedDate":"2021-09-27"},{"lineNumber":193,"author":{"gitId":"alwinangys"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":194,"author":{"gitId":"alwinangys"},"content":"     * @param input string containing keyword of desired tasks to find","lastModifiedDate":"2021-09-27"},{"lineNumber":195,"author":{"gitId":"alwinangys"},"content":"     * @param tasks ArrayList of tasks","lastModifiedDate":"2021-09-27"},{"lineNumber":196,"author":{"gitId":"alwinangys"},"content":"     * @return ArrayList of tasks containing the provided keyword.","lastModifiedDate":"2021-09-27"},{"lineNumber":197,"author":{"gitId":"alwinangys"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":198,"author":{"gitId":"alwinangys"},"content":"    public static ArrayList\u003cTask\u003e filterTasksByString(String input, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":199,"author":{"gitId":"alwinangys"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d (ArrayList\u003cTask\u003e) tasks.stream()","lastModifiedDate":"2021-09-24"},{"lineNumber":200,"author":{"gitId":"alwinangys"},"content":"                .filter((task) -\u003e task.getDescription().toLowerCase().contains(input))","lastModifiedDate":"2021-09-24"},{"lineNumber":201,"author":{"gitId":"alwinangys"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-09-24"},{"lineNumber":202,"author":{"gitId":"alwinangys"},"content":"        return filteredList;","lastModifiedDate":"2021-09-24"},{"lineNumber":203,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":204,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"alwinangys":204}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"package duke.ui;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"public class Ui {","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"    private static final String LOGO \u003d \"    #    ####### #          #     #####\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"            + \"   # #      #    #         # #   #     #\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"            + \"  #   #     #    #        #   #  #\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"            + \" #     #    #    #       #     #  #####\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"            + \" #######    #    #       #######       #\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"alwinangys"},"content":"            + \" #     #    #    #       #     # #     #\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"alwinangys"},"content":"            + \" #     #    #    ####### #     #  #####\\n\";","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"alwinangys"},"content":"    private static final String WELCOME_MESSAGE \u003d HORIZONTAL_LINE + \"Hello! I\u0027m Atlas!\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"alwinangys"},"content":"            + \"What can I do for you today?\\n\" + HORIZONTAL_LINE;","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"alwinangys"},"content":"    private static final String DONE_TASK \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"alwinangys"},"content":"    private static final String UNDONE_TASK \u003d \"I\u0027ve undone this task for you:\";","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"alwinangys"},"content":"    private static final String REMOVE_TASK \u003d \"Noted. I\u0027ve removed this task: \";","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"alwinangys"},"content":"    private static final String DELETE_ALL_TASKS \u003d \"I\u0027ve deleted all tasks!\";","lastModifiedDate":"2021-09-26"},{"lineNumber":23,"author":{"gitId":"alwinangys"},"content":"    private static final String FAREWELL_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"alwinangys"},"content":"    private static final String ERROR_MESSAGE \u003d \"I don\u0027t understand that. Please try again!\";","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"alwinangys"},"content":"    public static void greetUser() {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"alwinangys"},"content":"        System.out.print(\"Hello from\\n\" + LOGO + WELCOME_MESSAGE);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"alwinangys"},"content":"    public static void printAddedTaskMessage(Task task, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + \"Understood. I\u0027ve added this task: \" + System.lineSeparator()","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"alwinangys"},"content":"                + task + System.lineSeparator() + \"Now you have \" + tasks.size()","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"alwinangys"},"content":"                + \" tasks in the list.\" + System.lineSeparator() + HORIZONTAL_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"alwinangys"},"content":"    public static void printDoneTask(Task task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + DONE_TASK + task","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"alwinangys"},"content":"                + System.lineSeparator() + HORIZONTAL_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"alwinangys"},"content":"    public static void printUndoneTask(Task task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + UNDONE_TASK + task","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"alwinangys"},"content":"                + System.lineSeparator() + HORIZONTAL_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"alwinangys"},"content":"    public static void printDeleteMessage(Task task, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + REMOVE_TASK + task","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"alwinangys"},"content":"                + System.lineSeparator() + \"Now you have \" + (tasks.size() - 1)","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"alwinangys"},"content":"                + \" tasks in the list.\" + System.lineSeparator() + HORIZONTAL_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"alwinangys"},"content":"    public static void printDeleteAllMessage() {","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + DELETE_ALL_TASKS + System.lineSeparator()","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"alwinangys"},"content":"                + HORIZONTAL_LINE);","lastModifiedDate":"2021-09-26"},{"lineNumber":57,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":58,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"alwinangys"},"content":"    public static void printFarewellMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + FAREWELL_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"alwinangys"},"content":"                + HORIZONTAL_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"alwinangys"},"content":"    public static void printErrorMessage() {","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + ERROR_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"alwinangys"},"content":"                + HORIZONTAL_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"alwinangys"},"content":"    public static void printHorizontalLine() {","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"alwinangys"},"content":"    public static void printList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"alwinangys"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"alwinangys"},"content":"            System.out.println((i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"alwinangys"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"alwinangys"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"alwinangys"},"content":"    public static void printFilteredTaskList(ArrayList\u003cTask\u003e filteredTasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE + \"Here are the matching tasks I found: \"","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"alwinangys"},"content":"                + System.lineSeparator());","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"alwinangys"},"content":"        printList(filteredTasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"alwinangys"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"alwinangys"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"alwinangys"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"alwinangys":85}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"alwinangys"},"content":"list","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"alwinangys"},"content":"abc","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"alwinangys"},"content":"todo borrow book","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"alwinangys"},"content":"deadline return book /by December 1st","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"alwinangys"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"alwinangys"},"content":"list","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"alwinangys"},"content":"done 1","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"alwinangys"},"content":"done 2","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"alwinangys"},"content":"done 2","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"list","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"alwinangys"},"content":"undo 1","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"alwinangys"},"content":"undo 1","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"alwinangys"},"content":"list","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"alwinangys"},"content":"bye","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"alwinangys":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"alwinangys"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"alwinangys":1}}]
