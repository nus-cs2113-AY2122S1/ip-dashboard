[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"import duke.*;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"    private Storage storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"    private TaskHandler taskHandler;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"    private Ui ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    public Duke() {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"        this.taskHandler \u003d new TaskHandler(this.storage);","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    public void run() {","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        ui.sayHello();","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        while (!isExit) {","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"            try {","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"                userInput \u003d ui.readCommand();","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"                isExit \u003d ui.isExit(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"                if (!isExit) {","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"                    ui.handleUserInput(taskHandler, userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"                }","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"            } catch (IllegalArgumentException | InvalidCommandException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"                ui.show(e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"            } finally {","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"                ui.showLine();","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"        ui.sayBye();","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"    /** Entry point to the programme. */","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"        new Duke().run();","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"astralum":39,"-":4}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":" * An enum class Command that contains the various commands that Duke recognises.","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"public enum Command {","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"    EXIT,","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"    LIST,","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    FIND,","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    CLEAR,","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    ADD_TODO,","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    ADD_DEADLINE,","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    ADD_EVENT,","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    DO_TASK,","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    DELETE,","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    INVALID","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"astralum":17}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":" * Implements the class Deadline, which has a description, a done status","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":" * and a detail stating when it is to be completed by.","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    private final String taskType \u003d \"D\";","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    /** The time the Deadline has to be completed by. */","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    protected String by;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"        super(description);","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    public Deadline(String description, String by, boolean isDone) {","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"        super(description);","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        super.setDone(isDone);","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    public boolean contains(String search) {","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"        boolean descriptionContains \u003d super.contains(search);","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"        boolean byContains \u003d by.toLowerCase().contains(search);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        return descriptionContains || byContains;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"    public String taskString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"        return this.taskType + \" | \" + super.getStatusIcon() + \" | \" + super.description + \" | \" + this.by;","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"astralum":40}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":" * Implements the class Event, which has a description, a done status","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":" * and a detail stating when or where it is at.","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    private final String taskType \u003d \"E\";","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    /** The time or venue of the event. */","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    protected String at;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"        super(description);","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    public Event(String description, String at, boolean isDone) {","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"        super(description);","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        super.setDone(isDone);","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    public boolean contains(String search) {","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"        boolean descriptionContains \u003d super.contains(search);","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"        boolean atContains \u003d at.toLowerCase().contains(search);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        return descriptionContains || atContains;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"    public String taskString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"        return this.taskType + \" | \" + super.getStatusIcon() + \" | \" + super.description + \" | \" + this.at;","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"astralum":40}},{"path":"src/main/java/duke/Formatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":" * Formats the input and output of Duke.","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"public class Formatter {","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"    /* Input and output formatting strings */","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    private static final String INPUT_START \u003d \"\u003e\u003e\u003e \";","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    private static final String OUTPUT_START \u003d \"  \";","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    private static final String OUTPUT_SEPARATOR \u003d \"********************************************\";","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"     * Returns the formatted text before an input.","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"     * @return formatted text before an input","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    public static String returnInputStart() {","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"        return INPUT_START;","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"     * Returns the formatted text before an output.","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"     * @return formatted text before an output","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    public static String returnOutputStart() {","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"        return OUTPUT_START;","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    /** Prints the formatted text before an input. */","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"    public static void printInputStart() {","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"        System.out.print(INPUT_START);","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"    /** Prints the formatted text before an output. */","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"    public static void printOutputStart() {","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"        System.out.print(OUTPUT_START);","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"    /** Prints the formatted separator line between lines of output. */","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"    public static void printOutputSeparator() {","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"        System.out.println(OUTPUT_SEPARATOR);","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"    /** Prints the formatted output to the standard output. */","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"    public static void printFormattedOutput(String output) {","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"        String[] outputLines \u003d output.split(System.lineSeparator());","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"        Formatter.printOutputSeparator();","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"        for (String line : outputLines) {","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"            Formatter.printOutputStart();","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"            System.out.println(line);","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"astralum":54}},{"path":"src/main/java/duke/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"        super(message);","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"astralum":8}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":" * Parses the user input to recognise commands, statuses and command details.","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"public class Parser {","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"    /** Error messages */","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    public String COMMAND_UNKNOWN_ERROR_MESSAGE \u003d \"I cannot comprehend, my liege.\";","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    private String COMMAND_MISSING_DESCRIPTION_ERROR_MESSAGE \u003d \"My liege, there is no description!\";","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    private String COMMAND_MISSING_BY_ERROR_MESSAGE \u003d \"By when, my liege?\";","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    private String COMMAND_MISSING_AT_ERROR_MESSAGE \u003d \"When or where is this event, my liege?\";","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    private String COMMAND_MISSING_VALUE_ERROR_MESSAGE \u003d \"My liege, there is no value!\";","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"     * Reads the user input and returns the type of Command it is.","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"     * @param line the line of user input","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"     * @return the type of Command","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    public Command returnCommand(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        Command command;","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        if (inputIsBye(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"            command \u003d Command.EXIT;","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"        } else if (inputIsList(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"            command \u003d Command.LIST;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"        } else if (inputIsFind(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"            command \u003d Command.FIND;","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        } else if (inputIsClear(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"            command \u003d Command.CLEAR;","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"        } else if (inputIsTodo(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"            command \u003d Command.ADD_TODO;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"        } else if (inputIsDeadline(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"            command \u003d Command.ADD_DEADLINE;","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"        } else if (inputIsEvent(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"            command \u003d Command.ADD_EVENT;","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"        } else if (inputIsDone(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"            command \u003d Command.DO_TASK;","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        } else if (inputIsDelete(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"            command \u003d Command.DELETE;","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"        } else {","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"            command \u003d Command.INVALID;","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"        return command;","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"    /** Returns true if input is the exit command \"bye\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"    public boolean inputIsBye(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"        return line.equalsIgnoreCase(\"bye\");","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"todo\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"    public boolean inputIsTodo(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().startsWith(\"todo\");","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"find\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"    public boolean inputIsFind(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().startsWith(\"find\");","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"delete\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"    public boolean inputIsDelete(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().startsWith(\"delete\");","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"deadline\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"    public boolean inputIsDeadline(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().startsWith(\"deadline\");","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"astralum"},"content":"    /** Returns true if the deadline command contains by. */","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"astralum"},"content":"    public boolean deadlineContainsBy(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().contains(\"/by\");","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"event\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"    public boolean inputIsEvent(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().startsWith(\"event\");","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"    /** Returns true if the event command is contains at. */","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"    public boolean eventContainsAt(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().contains(\"/at\");","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"done\", or do task. */","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"    public boolean inputIsDone(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().startsWith(\"done\");","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"clear\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"astralum"},"content":"    public boolean inputIsClear(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"astralum"},"content":"        return line.toLowerCase().startsWith(\"clear\");","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":95,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"astralum"},"content":"    /** Returns true if command is \"list\". */","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"astralum"},"content":"    public boolean inputIsList(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"astralum"},"content":"        return line.equalsIgnoreCase(\"list\");","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"astralum"},"content":"     * Parses a todo command to extract its description.","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"astralum"},"content":"     * @param line the line containing the command","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"astralum"},"content":"     * @return the description of the Todo","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no description","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"astralum"},"content":"    public String parseTodo(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"astralum"},"content":"        if (line.length() \u003c\u003d 5) {","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_DESCRIPTION_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"astralum"},"content":"        String description \u003d line.substring(5).trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"astralum"},"content":"        return description;","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"astralum"},"content":"     * Parses a deadline command to extract its description and by.","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"astralum"},"content":"     * @param line the line containing the command","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"astralum"},"content":"     * @return a String[] containing the description and by","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no description or by","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"astralum"},"content":"    public String[] parseDeadline(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"astralum"},"content":"        if (!deadlineContainsBy(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_BY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"astralum"},"content":"        int dividerPosition \u003d line.toLowerCase().indexOf(\"/by\");","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"astralum"},"content":"        String description \u003d line.substring(9, dividerPosition).trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"astralum"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_DESCRIPTION_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"astralum"},"content":"        String by \u003d line.substring(dividerPosition + 3).trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"astralum"},"content":"        if (by.isEmpty()) {","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_BY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"astralum"},"content":"        String[] taskComponents \u003d new String[2];","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"astralum"},"content":"        taskComponents[0] \u003d description;","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"astralum"},"content":"        taskComponents[1] \u003d by;","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"astralum"},"content":"        return taskComponents;","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"astralum"},"content":"     * Parses an event command to extract its description and at.","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"astralum"},"content":"     * @param line the line containing the command","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"astralum"},"content":"     * @return a String[] containing the description and at","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no description or at","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"astralum"},"content":"    public String[] parseEvent(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"astralum"},"content":"        if (!eventContainsAt(line)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_AT_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"astralum"},"content":"        int dividerPosition \u003d line.toLowerCase().indexOf(\"/at\");","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"astralum"},"content":"        String description \u003d line.substring(6, dividerPosition).trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"astralum"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_DESCRIPTION_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"astralum"},"content":"        String at \u003d line.substring(dividerPosition + 3).trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"astralum"},"content":"        if (at.isEmpty()) {","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_AT_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"astralum"},"content":"        String[] taskComponents \u003d new String[2];","lastModifiedDate":"2021-10-01"},{"lineNumber":166,"author":{"gitId":"astralum"},"content":"        taskComponents[0] \u003d description;","lastModifiedDate":"2021-10-01"},{"lineNumber":167,"author":{"gitId":"astralum"},"content":"        taskComponents[1] \u003d at;","lastModifiedDate":"2021-10-01"},{"lineNumber":168,"author":{"gitId":"astralum"},"content":"        return taskComponents;","lastModifiedDate":"2021-10-01"},{"lineNumber":169,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":170,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":171,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"astralum"},"content":"     * Parses a do task command to extract the ID of the Task.","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"astralum"},"content":"     * @param line the line containing the command","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"astralum"},"content":"     * @return the Task\u0027s ID","lastModifiedDate":"2021-10-01"},{"lineNumber":175,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no ID found","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":177,"author":{"gitId":"astralum"},"content":"    public int parseDoTask(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"astralum"},"content":"        if (line.length() \u003c\u003d 4) {","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_VALUE_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":180,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":181,"author":{"gitId":"astralum"},"content":"        String inputNumStr \u003d line.toLowerCase().replace(\"done\", \"\").trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":182,"author":{"gitId":"astralum"},"content":"        int inputNum \u003d Integer.parseInt(inputNumStr);","lastModifiedDate":"2021-10-01"},{"lineNumber":183,"author":{"gitId":"astralum"},"content":"        return inputNum;","lastModifiedDate":"2021-10-01"},{"lineNumber":184,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":185,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":186,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":187,"author":{"gitId":"astralum"},"content":"     * Parses a delete task command to extract the ID of the Task.","lastModifiedDate":"2021-10-01"},{"lineNumber":188,"author":{"gitId":"astralum"},"content":"     * @param line the line containing the command","lastModifiedDate":"2021-10-01"},{"lineNumber":189,"author":{"gitId":"astralum"},"content":"     * @return the Task\u0027s ID","lastModifiedDate":"2021-10-01"},{"lineNumber":190,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no ID found","lastModifiedDate":"2021-10-01"},{"lineNumber":191,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":192,"author":{"gitId":"astralum"},"content":"    public int parseDeleteTask(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":193,"author":{"gitId":"astralum"},"content":"        if (line.length() \u003c\u003d 6) {","lastModifiedDate":"2021-10-01"},{"lineNumber":194,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_VALUE_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":195,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":196,"author":{"gitId":"astralum"},"content":"        String inputNumStr \u003d line.toLowerCase().replace(\"delete\", \"\").trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":197,"author":{"gitId":"astralum"},"content":"        int inputNum \u003d Integer.parseInt(inputNumStr);","lastModifiedDate":"2021-10-01"},{"lineNumber":198,"author":{"gitId":"astralum"},"content":"        return inputNum;","lastModifiedDate":"2021-10-01"},{"lineNumber":199,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":200,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":201,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":202,"author":{"gitId":"astralum"},"content":"     * Parses a find command to extract the search term.","lastModifiedDate":"2021-10-01"},{"lineNumber":203,"author":{"gitId":"astralum"},"content":"     * @param line the line containing the command","lastModifiedDate":"2021-10-01"},{"lineNumber":204,"author":{"gitId":"astralum"},"content":"     * @return the search term","lastModifiedDate":"2021-10-01"},{"lineNumber":205,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no search term found","lastModifiedDate":"2021-10-01"},{"lineNumber":206,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":207,"author":{"gitId":"astralum"},"content":"    public String parseFind(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":208,"author":{"gitId":"astralum"},"content":"        if (line.length() \u003c\u003d 4) {","lastModifiedDate":"2021-10-01"},{"lineNumber":209,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(COMMAND_MISSING_VALUE_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":210,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":211,"author":{"gitId":"astralum"},"content":"        String search \u003d line.toLowerCase().replace(\"find\", \"\").trim();","lastModifiedDate":"2021-10-01"},{"lineNumber":212,"author":{"gitId":"astralum"},"content":"        return search;","lastModifiedDate":"2021-10-01"},{"lineNumber":213,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":214,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"astralum":214}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"import java.util.List;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":" * Manages the data storage for tasks. Creates, adds to, edits or deletes","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":" * from the data in the external file.","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"public class Storage {","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    /** Path to the external file */","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    private Path dataPath;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    public Storage() {","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        openFile();","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"     * Attempts to open the external file that is to hold data. Creates such","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"     * a file if it does not exist.","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    public void openFile() {","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"            String home \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"            Path dataDirPath \u003d Paths.get(home, \"/data/\");","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"            Files.createDirectories(dataDirPath);","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"            Path dataPath \u003d Paths.get(home, \"/data/duke.txt\");","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"            if (!Files.exists(dataPath)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"                Files.createFile(dataPath);","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"            this.dataPath \u003d dataPath;","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"            System.err.println(\"Open failure: \" + e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"     * Loads the stored data into an ArrayList of Tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"     * @return an ArrayList of Tasks if there is data;","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"     *         an empty ArrayList otherwise","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"        List\u003cString\u003e lines \u003d this.getAllLines();","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"        if (lines.isEmpty()) {","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"            return tasks;","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"            Task task \u003d convertFileLineToTask(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"            tasks.add(task);","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"        return tasks;","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"     * Converts a line of text in the file into a Task.","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"     * @param line the line of text in the file to be converted; should be in","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"     *             the format `task type | done | description | detail`","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"     * @return the converted Task","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"    public Task convertFileLineToTask(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"astralum"},"content":"        String[] taskComponents \u003d line.split(\"\\\\|\");","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"astralum"},"content":"        for (String component : taskComponents) {","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"astralum"},"content":"            component.strip();","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"astralum"},"content":"        String taskType \u003d taskComponents[0];","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"        String done \u003d taskComponents[1];","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"        String description \u003d taskComponents[2];","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"astralum"},"content":"        String detail \u003d taskComponents[3];","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"        Task task;","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"        boolean isDone \u003d done.equals(\"X\");","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"        switch (taskType) {","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"            case \"D\":","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"                task \u003d new Deadline(description, detail, isDone);","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"                break;","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"            case \"E\":","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"                task \u003d new Event(description, detail, isDone);","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"                break;","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"            default:","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"astralum"},"content":"                task \u003d new Todo(description, isDone);","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"astralum"},"content":"        return task;","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"astralum"},"content":"     * Reads all the data in the file and returns it as a List\u003cString\u003e.","lastModifiedDate":"2021-10-01"},{"lineNumber":95,"author":{"gitId":"astralum"},"content":"     * @return a List\u003cString\u003e of all the data in the file","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"astralum"},"content":"    private List\u003cString\u003e getAllLines() {","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"astralum"},"content":"        List\u003cString\u003e lines \u003d List.of();","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"astralum"},"content":"            lines \u003d Files.readAllLines(dataPath);","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"astralum"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"astralum"},"content":"            System.err.println(\"Read failure: \" + e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"astralum"},"content":"        return lines;","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"astralum"},"content":"     * Adds the details of a Task to the external file.","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"astralum"},"content":"     * @param task the Task whose details are to be added","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"astralum"},"content":"    public void addTaskToFileData(Task task) {","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"astralum"},"content":"        appendLineToFileData(task.taskString());","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"astralum"},"content":"     * Appends the given line to the external file.","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"astralum"},"content":"     * @param line the line to be appended","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"astralum"},"content":"    public void appendLineToFileData(String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"astralum"},"content":"            List\u003cString\u003e lines \u003d getAllLines();","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"astralum"},"content":"            lines.add(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"astralum"},"content":"            Files.write(dataPath, lines);","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"astralum"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"astralum"},"content":"            System.err.println(\"Write failure: \" + e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"astralum"},"content":"     * Returns the line at the given index.","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"astralum"},"content":"     * @param index the index of the line to be returned","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"astralum"},"content":"     * @return the line at the given index","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"astralum"},"content":"    public String getLine(int index) {","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"astralum"},"content":"        List\u003cString\u003e lines \u003d getAllLines();","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"astralum"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"astralum"},"content":"            output \u003d lines.get(index);","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"astralum"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"astralum"},"content":"            System.err.println(\"Index out of bounds failure: \" + e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"astralum"},"content":"        return output;","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"astralum"},"content":"     * Sets a Task as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"astralum"},"content":"     * @param id the (id - 1) of the task, corresponding to the line to edit","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"astralum"},"content":"    public void setDone(int id) {","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"astralum"},"content":"        String newFileDataLine \u003d getLine(id);","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"astralum"},"content":"        char[] newFileDataLineChars \u003d newFileDataLine.toCharArray();","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"astralum"},"content":"        newFileDataLineChars[3] \u003d \u0027X\u0027;","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"astralum"},"content":"        replaceFileData(id, String.valueOf(newFileDataLineChars));","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"astralum"},"content":"     * Replaces a line in the external file with the given line.","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"astralum"},"content":"     * @param index the index of the line to be replaced","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"astralum"},"content":"     * @param line the line to replace","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"astralum"},"content":"    public void replaceFileData(int index, String line) {","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"astralum"},"content":"            List\u003cString\u003e lines \u003d getAllLines();","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"astralum"},"content":"            lines.set(index, line);","lastModifiedDate":"2021-10-01"},{"lineNumber":166,"author":{"gitId":"astralum"},"content":"            Files.write(dataPath, lines);","lastModifiedDate":"2021-10-01"},{"lineNumber":167,"author":{"gitId":"astralum"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":168,"author":{"gitId":"astralum"},"content":"            System.err.println(\"Write failure: \" + e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":169,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":170,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":171,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"astralum"},"content":"     * Deletes a line at the given index from the external file.","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"astralum"},"content":"     * @param index the index of the line to be deleted","lastModifiedDate":"2021-10-01"},{"lineNumber":175,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"astralum"},"content":"    public void deleteLineFromFileData(int index) {","lastModifiedDate":"2021-10-01"},{"lineNumber":177,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"astralum"},"content":"            List\u003cString\u003e lines \u003d getAllLines();","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"astralum"},"content":"            lines.remove(index);","lastModifiedDate":"2021-10-01"},{"lineNumber":180,"author":{"gitId":"astralum"},"content":"            Files.write(dataPath, lines);","lastModifiedDate":"2021-10-01"},{"lineNumber":181,"author":{"gitId":"astralum"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":182,"author":{"gitId":"astralum"},"content":"            System.err.println(\"Write failure: \" + e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":183,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":184,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":185,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":186,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":187,"author":{"gitId":"astralum"},"content":"     * Deletes all the data in the file.","lastModifiedDate":"2021-10-01"},{"lineNumber":188,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":189,"author":{"gitId":"astralum"},"content":"    public void clearFileData() {","lastModifiedDate":"2021-10-01"},{"lineNumber":190,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":191,"author":{"gitId":"astralum"},"content":"            Files.write(dataPath, Collections.EMPTY_LIST);","lastModifiedDate":"2021-10-01"},{"lineNumber":192,"author":{"gitId":"astralum"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":193,"author":{"gitId":"astralum"},"content":"            System.err.println(\"Write failure: \" + e.getMessage());","lastModifiedDate":"2021-10-01"},{"lineNumber":194,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":195,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":196,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"astralum":196}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":" * Implements the abstract class Task, which minimally has a description and","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":" * a status of whether it is done or not.","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"abstract public class Task {","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    protected String description;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"     * Returns the status as an icon of either \"X\" or \" \".","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"     * @return \"X\" if the task is done; \" \" otherwise","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"     * Sets isDone to true.","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"     * Sets isDone to the input value.","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"     * @param isDone the status of the Task","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"     * Finds if the Task contains the given search term.","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"     * @param search the search term","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"     * @return true if the Task contains the search term; false otherwise","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"    public boolean contains(String search) {","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"        return description.toLowerCase().contains(search.toLowerCase());","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"    /** The formatted String to be stored in the external file */","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"    public abstract String taskString();","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"    ","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"        if (obj instanceof Task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"            @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"            Task t \u003d (Task) obj;","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"            return this.description.equals(t.description) \u0026\u0026 this.isDone \u003d\u003d (t.isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"astralum":67}},{"path":"src/main/java/duke/TaskHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"public class TaskHandler {","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"    /** Success messages */","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"    private final String ADD_TASK_SUCCESS_MESSAGE \u003d \"As you command. Added: \";","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"    private final String DO_TASK_SUCCESS_MESSAGE \u003d \"Transcendent, my liege. You have completed: \";","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    private final String DELETED_TASK_MESSAGE \u003d \"I have removed this unworthy task from your magnificent sight, my liege:\";","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    private final String CLEAR_SUCCESS_MESSAGE \u003d \"A clean slate, my liege!\";","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    /** Error messages */","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    private final String INPUT_OUT_OF_RANGE_ERROR_MESSAGE \u003d \"Have mercy, for that is beyond my knowledge.\";","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    private final String NONZERO_INPUT_IS_ZERO_ERROR_MESSAGE \u003d \"There are none, my liege.\";","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    /** Attributes */","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    private Parser parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    private Storage storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    public TaskHandler(Storage storage) {","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"        this.tasks \u003d storage.load();","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"     * Handles the commands relating to Tasks and returns a String of the","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"     * output to be formatted and printed on the standard output.","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"     * @param line the line containing the command","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"     * @return the output to be formatted and printed","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if the parameters are missing or invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"     * @throws InvalidCommandException if the command is not recognised","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"    public String handleTasks(String line) throws IllegalArgumentException, InvalidCommandException {","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"        Command command \u003d parser.returnCommand(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"        switch (command) {","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"        case LIST:","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"            result \u003d listTasks();","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"        case FIND:","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"            result \u003d find(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"        case CLEAR:","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"            result \u003d clearTasks();","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"        case ADD_TODO:","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"            result \u003d addTodo(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"        case ADD_DEADLINE:","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"            result \u003d addDeadline(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"        case ADD_EVENT:","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"            result \u003d addEvent(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"        case DO_TASK:","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"            result \u003d doTask(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"        case DELETE:","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"            result \u003d deleteTask(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"        default:","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"            throw new InvalidCommandException(parser.COMMAND_UNKNOWN_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"astralum"},"content":"     * Deletes all Tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"     * @return a successful clear message","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"astralum"},"content":"    private String clearTasks() {","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"astralum"},"content":"        this.tasks.clear();","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"        storage.clearFileData();","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"        return CLEAR_SUCCESS_MESSAGE;","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"     * Adds the input line as a Todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"     * @param line the command to be converted into a Todo and added","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"     * @return a successful add message","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no description","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"    public String addTodo(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-09-09"},{"lineNumber":88,"author":{"gitId":"astralum"},"content":"        String description \u003d parser.parseTodo(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"astralum"},"content":"        Todo newTodo \u003d new Todo(description);","lastModifiedDate":"2021-09-09"},{"lineNumber":91,"author":{"gitId":"astralum"},"content":"        tasks.add(newTodo);","lastModifiedDate":"2021-09-16"},{"lineNumber":92,"author":{"gitId":"astralum"},"content":"        storage.addTaskToFileData(newTodo);","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"astralum"},"content":"        return ADD_TASK_SUCCESS_MESSAGE + newTodo.toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":95,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":96,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"astralum"},"content":"     * Adds the input line as a Deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"astralum"},"content":"     * @param line the command to be converted into a Deadline and added","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"astralum"},"content":"     * @return a successful add message","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no description or by","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"astralum"},"content":"    public String addDeadline(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-09-09"},{"lineNumber":103,"author":{"gitId":"astralum"},"content":"        String[] taskComponents \u003d parser.parseDeadline(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"astralum"},"content":"        String description \u003d taskComponents[0];","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"astralum"},"content":"        String by \u003d taskComponents[1];","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"astralum"},"content":"        Deadline newDeadline \u003d new Deadline(description, by);","lastModifiedDate":"2021-09-02"},{"lineNumber":108,"author":{"gitId":"astralum"},"content":"        tasks.add(newDeadline);","lastModifiedDate":"2021-09-16"},{"lineNumber":109,"author":{"gitId":"astralum"},"content":"        storage.addTaskToFileData(newDeadline);","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"astralum"},"content":"        return ADD_TASK_SUCCESS_MESSAGE + newDeadline.toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":112,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":113,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"astralum"},"content":"     * Adds the input line as an Event.","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"astralum"},"content":"     * @param line the command to be converted into an Event and added","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"astralum"},"content":"     * @return a successful add message","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if there is no description or at","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"astralum"},"content":"    public String addEvent(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-09-09"},{"lineNumber":120,"author":{"gitId":"astralum"},"content":"        String[] taskComponents \u003d parser.parseEvent(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"astralum"},"content":"        String description \u003d taskComponents[0];","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"astralum"},"content":"        String at \u003d taskComponents[1];","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"astralum"},"content":"        Event newEvent \u003d new Event(description, at);","lastModifiedDate":"2021-09-02"},{"lineNumber":125,"author":{"gitId":"astralum"},"content":"        tasks.add(newEvent);","lastModifiedDate":"2021-09-16"},{"lineNumber":126,"author":{"gitId":"astralum"},"content":"        storage.addTaskToFileData(newEvent);","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"astralum"},"content":"        return ADD_TASK_SUCCESS_MESSAGE + newEvent.toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":129,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":130,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"astralum"},"content":"     * Does the Task whose ID is specified in the given line.","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"astralum"},"content":"     * @param line the command containing the ID","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"astralum"},"content":"     * @return a successful do task message","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if the ID is missing or invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"astralum"},"content":"    public String doTask(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"astralum"},"content":"        if (tasks.size() \u003c\u003d 0) {","lastModifiedDate":"2021-09-16"},{"lineNumber":138,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(NONZERO_INPUT_IS_ZERO_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":140,"author":{"gitId":"astralum"},"content":"        int inputNum \u003d parser.parseDoTask(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"astralum"},"content":"        if (!(inputNum \u003e 0 \u0026\u0026 inputNum \u003c\u003d tasks.size())) {","lastModifiedDate":"2021-09-16"},{"lineNumber":142,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(INPUT_OUT_OF_RANGE_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":144,"author":{"gitId":"astralum"},"content":"        int id \u003d inputNum - 1;","lastModifiedDate":"2021-09-02"},{"lineNumber":145,"author":{"gitId":"astralum"},"content":"        tasks.get(id).setDone();","lastModifiedDate":"2021-09-16"},{"lineNumber":146,"author":{"gitId":"astralum"},"content":"        storage.setDone(id);","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"astralum"},"content":"        return DO_TASK_SUCCESS_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"astralum"},"content":"                + Formatter.returnOutputStart() + tasks.get(id).toString();","lastModifiedDate":"2021-09-16"},{"lineNumber":149,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":150,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":151,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"astralum"},"content":"     * Deletes the Task whose ID is specified in the given line.","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"astralum"},"content":"     * @param line the command containing the ID","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"astralum"},"content":"     * @return a successful delete task message","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if the ID is missing or invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"astralum"},"content":"    public String deleteTask(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"astralum"},"content":"        if (tasks.size() \u003c\u003d 0) {","lastModifiedDate":"2021-09-16"},{"lineNumber":159,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(NONZERO_INPUT_IS_ZERO_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":161,"author":{"gitId":"astralum"},"content":"        int inputNum \u003d parser.parseDeleteTask(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"astralum"},"content":"        if (!(inputNum \u003e 0 \u0026\u0026 inputNum \u003c\u003d tasks.size())) {","lastModifiedDate":"2021-09-16"},{"lineNumber":163,"author":{"gitId":"astralum"},"content":"            throw new IllegalArgumentException(INPUT_OUT_OF_RANGE_ERROR_MESSAGE);","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":165,"author":{"gitId":"astralum"},"content":"        int id \u003d inputNum - 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":166,"author":{"gitId":"astralum"},"content":"        Task deletedTask \u003d tasks.remove(id);","lastModifiedDate":"2021-09-16"},{"lineNumber":167,"author":{"gitId":"astralum"},"content":"        storage.deleteLineFromFileData(id);","lastModifiedDate":"2021-10-01"},{"lineNumber":168,"author":{"gitId":"astralum"},"content":"        return DELETED_TASK_MESSAGE + System.lineSeparator()","lastModifiedDate":"2021-10-01"},{"lineNumber":169,"author":{"gitId":"astralum"},"content":"                + Formatter.returnOutputStart() + deletedTask.toString();","lastModifiedDate":"2021-09-16"},{"lineNumber":170,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":171,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":172,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"astralum"},"content":"     * Lists all the Tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"astralum"},"content":"     * @return a String containing all the Tasks","lastModifiedDate":"2021-10-01"},{"lineNumber":175,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"astralum"},"content":"    public String listTasks() {","lastModifiedDate":"2021-09-02"},{"lineNumber":177,"author":{"gitId":"astralum"},"content":"        String out \u003d \"Your magnificent tasks:\";","lastModifiedDate":"2021-09-02"},{"lineNumber":178,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"astralum"},"content":"            out +\u003d System.lineSeparator() + i + \".\" + tasks.get(i - 1).toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":180,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":181,"author":{"gitId":"astralum"},"content":"        return out;","lastModifiedDate":"2021-09-02"},{"lineNumber":182,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":183,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":184,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":185,"author":{"gitId":"astralum"},"content":"     * Finds the Tasks which match the given search term.","lastModifiedDate":"2021-10-01"},{"lineNumber":186,"author":{"gitId":"astralum"},"content":"     * @param line the command containing the search term","lastModifiedDate":"2021-10-01"},{"lineNumber":187,"author":{"gitId":"astralum"},"content":"     * @return a String containing all the found Tasks","lastModifiedDate":"2021-10-01"},{"lineNumber":188,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if the ID is missing or invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":189,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":190,"author":{"gitId":"astralum"},"content":"    public String find(String line) throws IllegalArgumentException {","lastModifiedDate":"2021-10-01"},{"lineNumber":191,"author":{"gitId":"astralum"},"content":"        String search \u003d parser.parseFind(line);","lastModifiedDate":"2021-10-01"},{"lineNumber":192,"author":{"gitId":"astralum"},"content":"        String out \u003d \"Here are the marvellously matching tasks in your list:\";","lastModifiedDate":"2021-10-01"},{"lineNumber":193,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2021-10-01"},{"lineNumber":194,"author":{"gitId":"astralum"},"content":"            Task currentTask \u003d tasks.get(i - 1);","lastModifiedDate":"2021-10-01"},{"lineNumber":195,"author":{"gitId":"astralum"},"content":"            if (currentTask.contains(search)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":196,"author":{"gitId":"astralum"},"content":"                out +\u003d System.lineSeparator() + i + \".\" + currentTask.toString();","lastModifiedDate":"2021-10-01"},{"lineNumber":197,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-01"},{"lineNumber":198,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":199,"author":{"gitId":"astralum"},"content":"        return out;","lastModifiedDate":"2021-10-01"},{"lineNumber":200,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":201,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"astralum":201}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":" * Implements the class Todo, which has a description and a done status.","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"    private final String taskType \u003d \"T\";","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        super(description);","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"        super(description);","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"        super.setDone(isDone);","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    public String taskString() {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        return this.taskType + \" | \" + super.getStatusIcon() + \" | \" + super.description + \" | \";","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"astralum":28}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package duke;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":" * Deals with interactions with user. Takes in user input from the standard","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":" * input and outputs formatted text to the standard output.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"public class Ui {","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    Scanner scanner;","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    Parser parser;","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    private final String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    public Ui() {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    /** Prints a greeting message to the standard output. */","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"    public void sayHello() {","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"        System.out.println(\"Greetings from\" + System.lineSeparator() + logo);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        System.out.println(\"What can I do for you, my liege?\");","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"    /** Prints a farewell message to the standard output. */","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"    public void sayBye() {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"        Formatter.printFormattedOutput(\"Farewell, my liege. Happy hunting!\");","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"     * Reads user input from the standard input.","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"     * @return user input from the standard input","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"    public String readCommand() {","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"        Formatter.printInputStart();","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"        return userInput;","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"     * Prints the formatted output to the standard output.","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"     * @param output the output to be formatted and printed","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"    public void show(String output) {","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"        Formatter.printFormattedOutput(output);","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"     * Prints a formatted line to the standard output.","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"    public void showLine() {","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"        Formatter.printOutputSeparator();","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"     * Finds if the user has input an exit command.","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"     * @param userInput the user input","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"     * @return true if the input is an exit command and false otherwise","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"astralum"},"content":"    public boolean isExit(String userInput) {","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"astralum"},"content":"        return parser.inputIsBye(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"     * Extracts the command from the user input and acts upon it.","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"     * For valid commands, handles the tasks and displays the output of the commmand.","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"astralum"},"content":"     * For invalid commands, displays an invalid command message.","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"astralum"},"content":"     * @param taskHandler the TaskHandler to operate on the command","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"     * @param userInput the user input to be operated on","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"     * @throws IllegalArgumentException if the parameters are missing or invalid","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"     * @throws InvalidCommandException if the command is not recognised","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"    public void handleUserInput(TaskHandler taskHandler, String userInput)","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"            throws IllegalArgumentException, InvalidCommandException {","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"        Command command \u003d parser.returnCommand(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"        if (command.equals(Command.INVALID)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"            show(\"I do not comprehend, my liege.\");","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"            return;","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"astralum"},"content":"        String output \u003d taskHandler.handleTasks(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"astralum"},"content":"        show(output);","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"astralum":91}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"hi","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"done","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"todo eat cake","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"deadline execute peasant","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"deadline execute peasant /by noon","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"event royal council","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"event royal council /at throne room, 12PM","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"done 2","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"done 3","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"done 4","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"done 0","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"done -1","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"astralum":16}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"#cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"astralum":2,"-":36}}]
