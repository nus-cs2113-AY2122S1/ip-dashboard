[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"# Duke User Guide","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":"Duke is a chatbot designed to keep track of all your tasks via a Command Line Interface (CLI). This user guide will help you get acquainted with the usage of this tool.","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"* [Requirements](#requirements)","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"* [Getting started](#getting-started)","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"* [List of Commands](#list-of-commands)","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"* [Details \u0026 Usage of Commands](#details---usage-of-commands)","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"  + [Storing task](#storing-task)","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"    - [Todo](#todo)","lastModifiedDate":"2021-09-27"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"    - [Event](#event)","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"    - [Deadline](#deadline)","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"  + [Listing tasks](#listing-tasks)","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"  + [Marking tasks as done](#marking-tasks-as-done)","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"  + [Deleting task](#deleting-task)","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"  + [Searching for tasks](#searching-for-tasks)","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"  + [Exiting the program](#exiting-the-program)","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"+ [Warning](#warning)","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"## Requirements","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"1. Ensure you have `Java 11`","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"2. Download the latest release of `ip.jar`","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"## Getting started","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"In the same directory as \u0027ip.jar\u0027, enter \u0027java -jar ip.jar\u0027 in a terminal to run Duke. If successful, Duke will appear as such on startup:","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"![](welcome.png)","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"giterator"},"content":"## List of Commands","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"giterator"},"content":"***Please follow the format of the given commands exactly to ensure correct operation of Duke.*** ","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"giterator"},"content":"| Command    | Result                                                   | Usage                               |","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"giterator"},"content":"| ---------- | -------------------------------------------------------- | ----------------------------------- |","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"giterator"},"content":"| `todo`     | Add a task with just a description                       | `todo \u003cdescription\u003e`                |","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"giterator"},"content":"| `event`    | Add a task with a description and a timing               | `event \u003cdescription\u003e /at \u003ctime\u003e`    |","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"giterator"},"content":"| `deadline` | Add a task with a description and a finishing time       | `deadline \u003cdescription\u003e /by \u003ctime\u003e` |","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"giterator"},"content":"| `list`     | List all the tasks stored by Duke                        | `list`                              |","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"giterator"},"content":"| `done`     | Mark a particular task as complete                       | `done \u003ctask number\u003e`                |","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"giterator"},"content":"| `delete`   | Delete a particular task from the task list              | `delete \u003ctask number\u003e`              |","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"giterator"},"content":"| `find`     | Print all tasks whose description contains a given query | `find \u003cquery\u003e`                      |","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"giterator"},"content":"| `bye`      | Exit Duke                                                | `bye`                               |","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"giterator"},"content":"## Details \u0026 Usage of Commands","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"giterator"},"content":"### Storing task","lastModifiedDate":"2021-09-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"giterator"},"content":"Duke supports 3 types of tasks: Todo, Event, Deadline. ","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":64,"author":{"gitId":"giterator"},"content":"1. #### Todo","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"giterator"},"content":"   A Todo is a simple task without a time constraint. It can be added using the command:","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"giterator"},"content":"   General Format: `todo \u003cdescription\u003e` ","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"giterator"},"content":"   For example,  `todo get a life`","lastModifiedDate":"2021-09-18"},{"lineNumber":71,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"giterator"},"content":"2. #### Event","lastModifiedDate":"2021-09-18"},{"lineNumber":73,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":74,"author":{"gitId":"giterator"},"content":"   An Event is a task that occurs at a specific time. It can be added using the command:","lastModifiedDate":"2021-09-18"},{"lineNumber":75,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":76,"author":{"gitId":"giterator"},"content":"   General Format: `event \u003cdescription\u003e /at \u003ctime\u003e` ","lastModifiedDate":"2021-09-18"},{"lineNumber":77,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":78,"author":{"gitId":"giterator"},"content":"   For example,  `event lecture /at Tuesday 9 AM`","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"giterator"},"content":"3. #### Deadline","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"giterator"},"content":"   A Deadline is a task that must be completed by a specific time. It can be added using the command:","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"giterator"},"content":"   General Format: `deadline \u003cdescription\u003e /by \u003ctime\u003e` ","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"giterator"},"content":"   For example,  `deadline assignment /by Tuesday 9 AM`","lastModifiedDate":"2021-09-18"},{"lineNumber":87,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":88,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"giterator"},"content":"### Listing tasks","lastModifiedDate":"2021-09-18"},{"lineNumber":91,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":92,"author":{"gitId":"giterator"},"content":"All tasks stored by Duke can be printed using the command `list`","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":94,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":95,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"giterator"},"content":"### Marking tasks as done","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":98,"author":{"gitId":"giterator"},"content":"Any task that is stored by Duke can be marked complete by calling the command:","lastModifiedDate":"2021-09-18"},{"lineNumber":99,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":100,"author":{"gitId":"giterator"},"content":"General Format: `done \u003ctask number\u003e` ","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":102,"author":{"gitId":"giterator"},"content":"For example,  `done 1`","lastModifiedDate":"2021-09-18"},{"lineNumber":103,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"giterator"},"content":"Please do not attempt to mark a task as done if it is not stored by Duke.","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":106,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"giterator"},"content":"### Deleting task","lastModifiedDate":"2021-09-18"},{"lineNumber":109,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":110,"author":{"gitId":"giterator"},"content":"Any task that is stored by Duke can be deleted by calling the command:","lastModifiedDate":"2021-09-18"},{"lineNumber":111,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":112,"author":{"gitId":"giterator"},"content":"General Format: `delete \u003ctask number\u003e` ","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":114,"author":{"gitId":"giterator"},"content":"For example,  `delete 1`","lastModifiedDate":"2021-09-18"},{"lineNumber":115,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":116,"author":{"gitId":"giterator"},"content":"Please do not attempt to delete a task if it is not stored by Duke.","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":118,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":119,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":120,"author":{"gitId":"giterator"},"content":"### Searching for tasks","lastModifiedDate":"2021-09-18"},{"lineNumber":121,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":122,"author":{"gitId":"giterator"},"content":"Given a query phrase, Duke can filter and print the stored tasks whose descriptions contain the query phrase. This can be achieved by calling the command:","lastModifiedDate":"2021-09-18"},{"lineNumber":123,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"giterator"},"content":"General Format: `find \u003cquery\u003e` ","lastModifiedDate":"2021-09-27"},{"lineNumber":125,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"giterator"},"content":"For example,  `find exam`","lastModifiedDate":"2021-09-27"},{"lineNumber":127,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":129,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":130,"author":{"gitId":"giterator"},"content":"### Exiting the program ","lastModifiedDate":"2021-09-18"},{"lineNumber":131,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":132,"author":{"gitId":"giterator"},"content":"Duke can be closed by entering the command: `bye`","lastModifiedDate":"2021-09-18"},{"lineNumber":133,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":134,"author":{"gitId":"giterator"},"content":"*Any changes made to the stored tasks are written to file, retaining task progress even when Duke is closed. Pre-existing tasks are reloaded into Duke upon restarting the application.*","lastModifiedDate":"2021-09-27"},{"lineNumber":135,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":136,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":137,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":138,"author":{"gitId":"giterator"},"content":"### Warning","lastModifiedDate":"2021-09-27"},{"lineNumber":139,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":140,"author":{"gitId":"giterator"},"content":"**It is NOT recommended for the user to modify the `duke.txt` file directly as this may cause Duke to crash.**","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"giterator":122,"-":18}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":" * Deadline class that is a type of Task.","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":"    public static final char TASK_TYPE \u003d \u0027D\u0027;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"    public static final String SIGNATURE \u003d \"deadline\";","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"    public static final String DELIMITER \u003d \"/by\";","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"    private String by;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"     * Constructor for the Deadline class.","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"     * @param description Details of a Deadline object.","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"     * @param by          Finishing time of the Deadline object.","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"     * Returns a String object representing the Deadline.","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"     * @return The String representation of the Deadline.","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"        completeStatus \u003d isComplete ? COMPLETE_CHARACTER : INCOMPLETE_CHARACTER;","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"        return \"[\" + TASK_TYPE + \"]\" + \"[\" + completeStatus + \"] \" + description + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"     * Returns a String object representing the Deadline in a format that can be used to read and write","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"     * the Deadline from/to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"     * @return The String representation of the Deadline that be used to read and write from/to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"giterator"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"giterator"},"content":"    public String getEncodedFormat() {","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"giterator"},"content":"        return Character.toString(completeStatus) + SIGNATURE + description + DELIMITER + by;","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"giterator":43}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":" * Duke class acts as the main class of the program.","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"     * Entry point of program upon startup.","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"     * @param args User input argument.","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"        Storage.setupStorage();","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"        Ui.greet();","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"        String input;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"        do {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"            input \u003d Ui.getInput();","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"            Parser.parseInput(input);","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"        } while (!input.startsWith(Parser.COMMAND_BYE));","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"giterator":19,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"giterator":2}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":" * Event class that is a type of Task.","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":"    public static final char TASK_TYPE \u003d \u0027E\u0027;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"    public static final String SIGNATURE \u003d \"event\";","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"    public static final String DELIMITER \u003d \"/at\";","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"    private String at;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"     * Constructor for the Event class.","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"     * @param description Details of an Event object.","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"     * @param at          Finishing time of the Event object.","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"     * Returns a String object representing the Event.","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"     * @return The String representation of the Event.","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"        completeStatus \u003d isComplete ? COMPLETE_CHARACTER : INCOMPLETE_CHARACTER;","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"        return \"[\" + TASK_TYPE + \"]\" + \"[\" + completeStatus + \"] \" + description + \" (at: \" + at + \")\";","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"     * Returns a String object representing the Event in a format that can be used to read and write","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"     * the Event from/to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"     * @return The String representation of the Event that be used to read and write from/to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"giterator"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"giterator"},"content":"    public String getEncodedFormat() {","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"giterator"},"content":"        return Character.toString(completeStatus) + SIGNATURE + description + DELIMITER + at;","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"giterator":42}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":" * Parser class interprets the user\u0027s command.","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":"public class Parser {","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":"    public static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"    public static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"     * Parses the input command given by the user to determine which functionality to execute.","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"     * @param input String entered by the user, denoting instructions for the program.","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"    public static void parseInput(String input) {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"        String[] inputParts \u003d input.split(\" \");","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"        String instruction \u003d inputParts[0];","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"        switch (instruction) {","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"            TaskList.markComplete(Integer.parseInt(inputParts[1]), true);","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"            Ui.bye();","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"            TaskList.list();","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"            TaskList.deleteTask(Integer.parseInt(inputParts[1]));","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"            TaskList.findTask(inputParts[1]);","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"        default:","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"            store(input);","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"giterator"},"content":"            break;","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"giterator"},"content":"     * Attempts to store the given user input as a task. If the input does not correspond to todo, deadline or event,","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"giterator"},"content":"     * a DukeException is caught, indicating failed storing. This signifies a wrong input command or an incomplete","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"giterator"},"content":"     * description of the given task.","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"giterator"},"content":"     * @param input Input command given by the user","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"giterator"},"content":"    private static void store(String input) {","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"giterator"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"giterator"},"content":"            Task newTask \u003d TaskList.createTask(input);","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"giterator"},"content":"            TaskList.storeTask(newTask, true);","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"giterator"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"giterator"},"content":"            Ui.echo(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"giterator"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":56,"author":{"gitId":"giterator"},"content":"            Ui.echo(\"OOPS!!! The description of a task cannot be empty.\");","lastModifiedDate":"2021-09-18"},{"lineNumber":57,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":58,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":59,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"giterator":59}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":"import java.io.File;","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-14"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":" * Storage class facilitates loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"    private static final String STORAGE_PATH \u003d \"duke.txt\";","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"    private static final int FILE_ERROR_EXIT_CODE \u003d 0;","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"    public static final char COMPLETE_CHARACTER \u003d \u0027X\u0027;","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"     * Loads stored tasks from file.","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"     * @param storedTasks File at STORED_PATH.","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"     * @throws FileNotFoundException If the file at STORED_PATH does not exist.","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"    private static void loadStoredTasks(File storedTasks) throws FileNotFoundException {","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"        Scanner scanner \u003d new Scanner(storedTasks);","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"            scanner.nextLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"            System.out.println(STORAGE_PATH + \" is empty\");","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"            String line \u003d scanner.nextLine();","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"            char completionStatus \u003d line.charAt(0);","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"            String taskDescription \u003d line.substring(1);","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"            try {","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"giterator"},"content":"                Task newTask \u003d TaskList.createTask(taskDescription);","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"giterator"},"content":"                TaskList.storeTask(newTask, false);","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"giterator"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"giterator"},"content":"                System.out.println(STORAGE_PATH + \" is corrupted. Please delete duke.txt and restart the program.\");","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"giterator"},"content":"                System.exit(FILE_ERROR_EXIT_CODE);","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"giterator"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"giterator"},"content":"            if (completionStatus \u003d\u003d COMPLETE_CHARACTER) {","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"giterator"},"content":"                int TaskListSize \u003d TaskList.getTaskListSize();","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"giterator"},"content":"                TaskList.markComplete(TaskListSize, false);","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"giterator"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":53,"author":{"gitId":"giterator"},"content":"     * Loads pre-existing tasks from file at STORAGE_PATH or creates a new file if it does not exist.","lastModifiedDate":"2021-09-18"},{"lineNumber":54,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":55,"author":{"gitId":"giterator"},"content":"    public static void setupStorage() {","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"giterator"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"giterator"},"content":"            File storedTasks \u003d new File(STORAGE_PATH);","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"giterator"},"content":"            if (storedTasks.createNewFile()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"giterator"},"content":"                System.out.println(\"File created: \" + storedTasks.getName());","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"giterator"},"content":"            } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"giterator"},"content":"                System.out.println(\"Loading from \" + STORAGE_PATH);","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"giterator"},"content":"                loadStoredTasks(storedTasks);","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"giterator"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"giterator"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"giterator"},"content":"            System.out.println(\"An error in reading \" + STORAGE_PATH + \" occurred.\");","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"giterator"},"content":"            System.exit(FILE_ERROR_EXIT_CODE);","lastModifiedDate":"2021-09-27"},{"lineNumber":67,"author":{"gitId":"giterator"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"giterator"},"content":"            System.out.println(\"An error in creating \" + STORAGE_PATH + \" occurred.\");","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"giterator"},"content":"            System.exit(FILE_ERROR_EXIT_CODE);","lastModifiedDate":"2021-09-27"},{"lineNumber":70,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":74,"author":{"gitId":"giterator"},"content":"     * Overwrites the file at STORAGE_PATH with the tasks from the inputTasks list in the TaskList class.","lastModifiedDate":"2021-09-18"},{"lineNumber":75,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":76,"author":{"gitId":"giterator"},"content":"    public static void writeTasksToFile() {","lastModifiedDate":"2021-09-18"},{"lineNumber":77,"author":{"gitId":"giterator"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"giterator"},"content":"            FileWriter fw \u003d new FileWriter(STORAGE_PATH, false);","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"giterator"},"content":"            ArrayList\u003cTask\u003e inputTasks \u003d TaskList.getInputTasks();","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"giterator"},"content":"            for (Task task : inputTasks) {","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"giterator"},"content":"                fw.write(\u0027\\n\u0027 + task.getEncodedFormat());","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"giterator"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"giterator"},"content":"            fw.close();","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"giterator"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":85,"author":{"gitId":"giterator"},"content":"            System.out.println(STORAGE_PATH + \" can\u0027t be overwritten. Changes will be lost when the program is closed\");","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":87,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":90,"author":{"gitId":"giterator"},"content":"     * Appends a new task to the file at STORAGE_PATH.","lastModifiedDate":"2021-09-18"},{"lineNumber":91,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":92,"author":{"gitId":"giterator"},"content":"     * @param newTask Task to append to the file at STORAGE_PATH.","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":94,"author":{"gitId":"giterator"},"content":"    public static void appendTaskToFile(Task newTask) {","lastModifiedDate":"2021-09-18"},{"lineNumber":95,"author":{"gitId":"giterator"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"giterator"},"content":"            FileWriter fw \u003d new FileWriter(STORAGE_PATH, true);","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"giterator"},"content":"            fw.write(\u0027\\n\u0027 + newTask.getEncodedFormat());","lastModifiedDate":"2021-09-18"},{"lineNumber":98,"author":{"gitId":"giterator"},"content":"            fw.close();","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"giterator"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":100,"author":{"gitId":"giterator"},"content":"            System.out.println(STORAGE_PATH + \" cannot be updated. Changes will be lost when the program is closed\");","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":102,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"giterator":103}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":" * Task abstract class to be the parent of Event, Deadline, Todo classes.","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":"    protected String description;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"    protected boolean isComplete;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"    protected char completeStatus;","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"    public static final char COMPLETE_CHARACTER \u003d \u0027X\u0027;","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"    public static final char INCOMPLETE_CHARACTER \u003d \u0027 \u0027;","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"     * Constuctor for the Task class.","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"     * @param inputTask String description of a Task.","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"    public Task(String inputTask) {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"        description \u003d inputTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"        isComplete \u003d false;","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"        completeStatus \u003d INCOMPLETE_CHARACTER;","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"     * Sets a Task to be completed.","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"    public void markComplete() {","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"        isComplete \u003d true;","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"        completeStatus \u003d COMPLETE_CHARACTER;","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"     * Returns a String object representing the Task in a format that can be used to read and write","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"     * the Task from/to file. It is overridden for each child of the Task class.","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"     * @return The String representation of the Task that be used to read and write from/to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"    public abstract String getEncodedFormat();","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"giterator":37}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":" * TaskList class contains and facilitate operations on the inputTasks.","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"public class TaskList {","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"    private static ArrayList\u003cTask\u003e inputTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"    private static String acknowledgeMessage;","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"    public static int getTaskListSize() {","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"        return inputTasks.size();","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"    public static ArrayList\u003cTask\u003e getInputTasks() {","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"        return inputTasks;","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"    private static Todo createTodo(String input) {","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"        return new Todo(input.substring(Todo.SIGNATURE.length()).trim());","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"    private static Event createEvent(String input) {","lastModifiedDate":"2021-09-27"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"        String[] inputSlices \u003d input.substring(Event.SIGNATURE.length()).trim().split(Event.DELIMITER);","lastModifiedDate":"2021-09-27"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"        return new Event(inputSlices[0].trim(), inputSlices[1].trim());","lastModifiedDate":"2021-09-27"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"    private static Deadline createDeadline(String input) {","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"        String[] inputSlices \u003d input.substring(Deadline.SIGNATURE.length()).trim().split(Deadline.DELIMITER);","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"        return new Deadline(inputSlices[0].trim(), inputSlices[1].trim());","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"     * Instantiates a new Task object corresponding to todo/event/deadline by parsing user input.","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"     * @param input Command entered by the user.","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"     * @return A new Task object containing data from user input.","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"     * @throws DukeException If neither todo, deadline or event correspond to the input String.","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"giterator"},"content":"    public static Task createTask(String input) throws DukeException {","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"giterator"},"content":"        Task newTask;","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"giterator"},"content":"        if (input.startsWith(Todo.SIGNATURE)) {","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"giterator"},"content":"            newTask \u003d createTodo(input);","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"giterator"},"content":"        } else if (input.startsWith(Deadline.SIGNATURE)) {","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"giterator"},"content":"            newTask \u003d createDeadline(input);","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"giterator"},"content":"        } else if (input.startsWith(Event.SIGNATURE)) {","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"giterator"},"content":"            newTask \u003d createEvent(input);","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"giterator"},"content":"        } else {","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"giterator"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-18"},{"lineNumber":49,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":50,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":51,"author":{"gitId":"giterator"},"content":"        return newTask;","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"giterator"},"content":"     * Stores a given task corresponding to todo/event/deadline.","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"giterator"},"content":"     * @param newTask            Latest Task to be stored.","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"giterator"},"content":"     * @param shouldAppendToFile Flag to indicate whether the newTask should be appended to file.","lastModifiedDate":"2021-09-27"},{"lineNumber":59,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":60,"author":{"gitId":"giterator"},"content":"    public static void storeTask(Task newTask, boolean shouldAppendToFile) {","lastModifiedDate":"2021-09-27"},{"lineNumber":61,"author":{"gitId":"giterator"},"content":"        inputTasks.add(newTask);","lastModifiedDate":"2021-09-18"},{"lineNumber":62,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":63,"author":{"gitId":"giterator"},"content":"        acknowledgeMessage \u003d \"Got it. I\u0027ve added this task: \\n  \" + inputTasks.get(inputTasks.size() - 1) + \"\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":64,"author":{"gitId":"giterator"},"content":"                + \"Now you have: \" + inputTasks.size() + \" tasks in the list\";","lastModifiedDate":"2021-09-18"},{"lineNumber":65,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":66,"author":{"gitId":"giterator"},"content":"        Ui.echo(acknowledgeMessage);","lastModifiedDate":"2021-09-18"},{"lineNumber":67,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":68,"author":{"gitId":"giterator"},"content":"        if (shouldAppendToFile) {","lastModifiedDate":"2021-09-18"},{"lineNumber":69,"author":{"gitId":"giterator"},"content":"            Storage.appendTaskToFile(newTask);","lastModifiedDate":"2021-09-18"},{"lineNumber":70,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":71,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":72,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":73,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":74,"author":{"gitId":"giterator"},"content":"     * Deletes a task from the list inputTasks based on its index.","lastModifiedDate":"2021-09-18"},{"lineNumber":75,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":76,"author":{"gitId":"giterator"},"content":"     * @param taskNumber Index of the task in inputTasks to be deleted.","lastModifiedDate":"2021-09-18"},{"lineNumber":77,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":78,"author":{"gitId":"giterator"},"content":"    public static void deleteTask(int taskNumber) {","lastModifiedDate":"2021-09-18"},{"lineNumber":79,"author":{"gitId":"giterator"},"content":"        int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-09-18"},{"lineNumber":80,"author":{"gitId":"giterator"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":81,"author":{"gitId":"giterator"},"content":"            acknowledgeMessage \u003d \"Noted. I\u0027ve removed this task: \\n\" + inputTasks.get(taskIndex) + \"\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":82,"author":{"gitId":"giterator"},"content":"                    + \"Now you have: \" + (inputTasks.size() - 1) + \" tasks in the list\";","lastModifiedDate":"2021-09-18"},{"lineNumber":83,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":84,"author":{"gitId":"giterator"},"content":"            inputTasks.remove(taskIndex);","lastModifiedDate":"2021-09-18"},{"lineNumber":85,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":86,"author":{"gitId":"giterator"},"content":"            Ui.echo(acknowledgeMessage);","lastModifiedDate":"2021-09-18"},{"lineNumber":87,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":88,"author":{"gitId":"giterator"},"content":"            Storage.writeTasksToFile();","lastModifiedDate":"2021-09-18"},{"lineNumber":89,"author":{"gitId":"giterator"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":90,"author":{"gitId":"giterator"},"content":"            Ui.echo(\"Please enter a task number from the list\");","lastModifiedDate":"2021-09-18"},{"lineNumber":91,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":92,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":93,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":94,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":95,"author":{"gitId":"giterator"},"content":"     * Prints all tasks in inputTasks that contain a given query String in their descriptions.","lastModifiedDate":"2021-09-27"},{"lineNumber":96,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":97,"author":{"gitId":"giterator"},"content":"     * @param query Substring to search for within each task\u0027s description.","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":99,"author":{"gitId":"giterator"},"content":"    public static void findTask(String query) {","lastModifiedDate":"2021-09-18"},{"lineNumber":100,"author":{"gitId":"giterator"},"content":"        System.out.println(Ui.getLine());","lastModifiedDate":"2021-09-18"},{"lineNumber":101,"author":{"gitId":"giterator"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-18"},{"lineNumber":102,"author":{"gitId":"giterator"},"content":"        int taskNumber \u003d 1;","lastModifiedDate":"2021-09-18"},{"lineNumber":103,"author":{"gitId":"giterator"},"content":"        for (Task task : inputTasks) {","lastModifiedDate":"2021-09-18"},{"lineNumber":104,"author":{"gitId":"giterator"},"content":"            if (task.description.contains(query)) {","lastModifiedDate":"2021-09-18"},{"lineNumber":105,"author":{"gitId":"giterator"},"content":"                System.out.println(taskNumber + \". \" + task);","lastModifiedDate":"2021-09-18"},{"lineNumber":106,"author":{"gitId":"giterator"},"content":"                taskNumber++;","lastModifiedDate":"2021-09-18"},{"lineNumber":107,"author":{"gitId":"giterator"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":108,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":109,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":110,"author":{"gitId":"giterator"},"content":"        System.out.println(Ui.getLine());","lastModifiedDate":"2021-09-18"},{"lineNumber":111,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":112,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":113,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":114,"author":{"gitId":"giterator"},"content":"     * Prints all tasks in inputTasks.","lastModifiedDate":"2021-09-27"},{"lineNumber":115,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":116,"author":{"gitId":"giterator"},"content":"    public static void list() {","lastModifiedDate":"2021-09-18"},{"lineNumber":117,"author":{"gitId":"giterator"},"content":"        System.out.println(Ui.getLine());","lastModifiedDate":"2021-09-18"},{"lineNumber":118,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":119,"author":{"gitId":"giterator"},"content":"        for (int i \u003d 0; i \u003c inputTasks.size(); i++) {","lastModifiedDate":"2021-09-18"},{"lineNumber":120,"author":{"gitId":"giterator"},"content":"            System.out.println((i + 1) + \". \" + inputTasks.get(i));","lastModifiedDate":"2021-09-18"},{"lineNumber":121,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":122,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":123,"author":{"gitId":"giterator"},"content":"        System.out.println(Ui.getLine());","lastModifiedDate":"2021-09-18"},{"lineNumber":124,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":125,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":126,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":127,"author":{"gitId":"giterator"},"content":"     * Marks a pre-existing task in the inputTasks list as completed.","lastModifiedDate":"2021-09-18"},{"lineNumber":128,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":129,"author":{"gitId":"giterator"},"content":"     * @param completedTask     Index of the task in inputTasks to be marked as complete.","lastModifiedDate":"2021-09-18"},{"lineNumber":130,"author":{"gitId":"giterator"},"content":"     * @param shouldWriteToFile Flag indicating whether the updated inputTasks list should be written to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":131,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":132,"author":{"gitId":"giterator"},"content":"    public static void markComplete(int completedTask, boolean shouldWriteToFile) {","lastModifiedDate":"2021-09-18"},{"lineNumber":133,"author":{"gitId":"giterator"},"content":"        try {","lastModifiedDate":"2021-09-18"},{"lineNumber":134,"author":{"gitId":"giterator"},"content":"            inputTasks.get(completedTask - 1).markComplete();","lastModifiedDate":"2021-09-18"},{"lineNumber":135,"author":{"gitId":"giterator"},"content":"            Ui.echo(\"Nice! I\u0027ve marked this task as done: \\n\" + inputTasks.get(completedTask - 1));","lastModifiedDate":"2021-09-18"},{"lineNumber":136,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":137,"author":{"gitId":"giterator"},"content":"            if (shouldWriteToFile) {","lastModifiedDate":"2021-09-18"},{"lineNumber":138,"author":{"gitId":"giterator"},"content":"                Storage.writeTasksToFile();","lastModifiedDate":"2021-09-18"},{"lineNumber":139,"author":{"gitId":"giterator"},"content":"            }","lastModifiedDate":"2021-09-18"},{"lineNumber":140,"author":{"gitId":"giterator"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-18"},{"lineNumber":141,"author":{"gitId":"giterator"},"content":"            Ui.echo(\"Please enter a task number from the list\");","lastModifiedDate":"2021-09-18"},{"lineNumber":142,"author":{"gitId":"giterator"},"content":"        }","lastModifiedDate":"2021-09-18"},{"lineNumber":143,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":144,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"giterator":144}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":" * Todo class that is a type of Task.","lastModifiedDate":"2021-09-18"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":"    public static final char TASK_TYPE \u003d \u0027T\u0027;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"    public static final String SIGNATURE \u003d \"todo\";","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"     * Constructor for the Todo class.","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"     * @param description Details of a Todo object.","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"     * Returns a String object representing the Todo.","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"     * @return The String representation of the Todo.","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"        completeStatus \u003d isComplete ? COMPLETE_CHARACTER : INCOMPLETE_CHARACTER;","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"        return \"[\" + TASK_TYPE + \"]\" + \"[\" + completeStatus + \"] \" + description;","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"     * Returns a String object representing the Todo in a format that can be used to read and write","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"     * the Todo from/to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"     * @return The String representation of the Todo that be used to read and write from/to file.","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"    public String getEncodedFormat() {","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"        return Character.toString(completeStatus) + SIGNATURE + description;","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"giterator":38}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"giterator"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"giterator"},"content":"/**","lastModifiedDate":"2021-09-18"},{"lineNumber":4,"author":{"gitId":"giterator"},"content":" * Ui class handles interactions with the user.","lastModifiedDate":"2021-09-18"},{"lineNumber":5,"author":{"gitId":"giterator"},"content":" */","lastModifiedDate":"2021-09-18"},{"lineNumber":6,"author":{"gitId":"giterator"},"content":"public class Ui {","lastModifiedDate":"2021-09-18"},{"lineNumber":7,"author":{"gitId":"giterator"},"content":"    private static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-18"},{"lineNumber":8,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":9,"author":{"gitId":"giterator"},"content":"    public static String getLine() {","lastModifiedDate":"2021-09-18"},{"lineNumber":10,"author":{"gitId":"giterator"},"content":"        return LINE;","lastModifiedDate":"2021-09-18"},{"lineNumber":11,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":12,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":13,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":14,"author":{"gitId":"giterator"},"content":"     * Welcome message to the user upon startup of the program.","lastModifiedDate":"2021-09-18"},{"lineNumber":15,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":16,"author":{"gitId":"giterator"},"content":"    public static void greet() {","lastModifiedDate":"2021-09-18"},{"lineNumber":17,"author":{"gitId":"giterator"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":18,"author":{"gitId":"giterator"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":19,"author":{"gitId":"giterator"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":20,"author":{"gitId":"giterator"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-18"},{"lineNumber":21,"author":{"gitId":"giterator"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-18"},{"lineNumber":22,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":23,"author":{"gitId":"giterator"},"content":"        String greeting \u003d LINE + \"\\n\" +","lastModifiedDate":"2021-09-18"},{"lineNumber":24,"author":{"gitId":"giterator"},"content":"                \" Hello! I\u0027m Duke\\n\" +","lastModifiedDate":"2021-09-18"},{"lineNumber":25,"author":{"gitId":"giterator"},"content":"                \" What can I do for you?\\n\";","lastModifiedDate":"2021-09-18"},{"lineNumber":26,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":27,"author":{"gitId":"giterator"},"content":"        System.out.println(logo + greeting);","lastModifiedDate":"2021-09-18"},{"lineNumber":28,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":29,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":30,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":31,"author":{"gitId":"giterator"},"content":"     * Closing message to the user before exiting the program.","lastModifiedDate":"2021-09-18"},{"lineNumber":32,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":33,"author":{"gitId":"giterator"},"content":"    public static void bye() {","lastModifiedDate":"2021-09-18"},{"lineNumber":34,"author":{"gitId":"giterator"},"content":"        echo(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-18"},{"lineNumber":35,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":36,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":37,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-18"},{"lineNumber":38,"author":{"gitId":"giterator"},"content":"     * Prints the given input String enclosed between two horizontal lines.","lastModifiedDate":"2021-09-18"},{"lineNumber":39,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-18"},{"lineNumber":40,"author":{"gitId":"giterator"},"content":"     * @param input String to be printed.","lastModifiedDate":"2021-09-18"},{"lineNumber":41,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-18"},{"lineNumber":42,"author":{"gitId":"giterator"},"content":"    public static void echo(String input) {","lastModifiedDate":"2021-09-18"},{"lineNumber":43,"author":{"gitId":"giterator"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-18"},{"lineNumber":44,"author":{"gitId":"giterator"},"content":"        System.out.println(input);","lastModifiedDate":"2021-09-18"},{"lineNumber":45,"author":{"gitId":"giterator"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-18"},{"lineNumber":46,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-18"},{"lineNumber":47,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-18"},{"lineNumber":48,"author":{"gitId":"giterator"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"giterator"},"content":"    /**","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"giterator"},"content":"     * Scans standard input for user entered data.","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"giterator"},"content":"     *","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"giterator"},"content":"     * @return The raw user input as a String.","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"giterator"},"content":"     */","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"giterator"},"content":"    public static String getInput() {","lastModifiedDate":"2021-09-27"},{"lineNumber":55,"author":{"gitId":"giterator"},"content":"        Scanner scan \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-27"},{"lineNumber":56,"author":{"gitId":"giterator"},"content":"        return scan.nextLine();","lastModifiedDate":"2021-09-27"},{"lineNumber":57,"author":{"gitId":"giterator"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"giterator"},"content":"}","lastModifiedDate":"2021-09-18"}],"authorContributionMap":{"giterator":58}}]
