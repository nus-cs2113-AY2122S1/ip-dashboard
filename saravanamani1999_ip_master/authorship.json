[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"# duke.Duke project template","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"saravanamani1999":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.command.TaskList;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"/** Represents the main class of Duke where all the classes are run through this. */","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"public class Duke {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"    public static boolean hasUserExited \u003d false;","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"    public static String file \u003d \"data/duke.txt\";","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"    private static TaskList taskList;","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"    private static Ui ui;","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"     * Constructs {@code ui, storage} and {@code tasklist} to instantiate","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"     * the start of the program when user launches duke.","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"     * @param filePath File path indicating the location of text file in the directory","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"        Storage storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"        Ui.sendWelcomeMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"            storage.readFile(file, TaskList.tasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"            ui.fileNotFoundMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"saravanamani1999"},"content":"        ui.tasksQuantity(TaskList.tasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"saravanamani1999"},"content":"     * Method to run the full flow of Duke starting with the welcome message,","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"saravanamani1999"},"content":"     * followed by running the execution of the user commands and sends the exit message","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"saravanamani1999"},"content":"     * when the user inputs {@code bye}.","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":47,"author":{"gitId":"saravanamani1999"},"content":"    private void run() {","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"saravanamani1999"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"saravanamani1999"},"content":"        while (!hasUserExited) {","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"saravanamani1999"},"content":"            String fullCommand \u003d ui.readCommand(in);","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"saravanamani1999"},"content":"            String userCommand \u003d Parser.getCommandWord(fullCommand);","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"saravanamani1999"},"content":"            try {","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"saravanamani1999"},"content":"                taskList.executeCommand(fullCommand, userCommand);","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"saravanamani1999"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"saravanamani1999"},"content":"                if (userCommand.equals(\"done\") || userCommand.equals(\"delete\")) {","lastModifiedDate":"2021-09-24"},{"lineNumber":56,"author":{"gitId":"saravanamani1999"},"content":"                    InvalidTaskNumberException.sendErrorMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"saravanamani1999"},"content":"                }","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"saravanamani1999"},"content":"                else {","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"saravanamani1999"},"content":"                    ui.indexOutOfBoundsMessage(userCommand);","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"saravanamani1999"},"content":"                }","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"saravanamani1999"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"saravanamani1999"},"content":"                InvalidTaskNumberException.sendErrorMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"saravanamani1999"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"saravanamani1999"},"content":"                e.sendErrorMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"saravanamani1999"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"saravanamani1999"},"content":"                Ui.ioExceptionMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"saravanamani1999"},"content":"            } catch (InvalidTaskNumberException e) {","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"saravanamani1999"},"content":"                InvalidTaskNumberException.sendErrorMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"saravanamani1999"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"saravanamani1999"},"content":"        ui.sendExitMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"saravanamani1999"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"saravanamani1999"},"content":"        new Duke(file).run();","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"saravanamani1999":81}},{"path":"src/main/java/duke/command/DeadLineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.DateTimeFormatException;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.DeadlineTimingException;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"/** Includes the operations needed to execute {@code deadline} user command while managing any input errors. */","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"public class DeadLineCommand extends TaskList {","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     * Executes the command {@code deadline} on the task list and adds deadline tasks to task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"     * @param getUserInput The input given by the user to carry out on tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"     * @throws DeadlineTimingException If the parameter of timing for deadline is missing","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"     * @throws DateTimeFormatException If the deadline timing does not meet the format: \"dd-MM-yyyy HH:mm\"","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"    public static void executeUserCommand(String getUserInput)","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"            throws DeadlineTimingException, DateTimeFormatException {","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"        int by \u003d getUserInput.indexOf(\"/\");","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"        separate \u003d getUserInput.split(\"/by\");","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"        description \u003d separate[0].trim().split(\"deadline \");","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"        if ((by \u003d\u003d -1 \u0026\u0026 (description[1] !\u003d null))","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"                || (separate.length \u003d\u003d 1)","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"                || (separate[1].trim().isEmpty())) {","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"            throw new DeadlineTimingException();","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"        } else if (!isValidDateTime(separate[1].trim())) {","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"            throw new DateTimeFormatException();","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"        } else {","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"            LocalDateTime dueDate \u003d LocalDateTime.parse(separate[1].trim(), formatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"            addTask(new Deadline(description[1], dueDate));","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"saravanamani1999":36}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/** Includes the operations needed to execute {@code delete} user command while managing any input errors. */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"public class DeleteCommand extends TaskList {","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"     * Executes the command {@code delete} on the task list and deletes the specified task","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"     * based on the task number provided from the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"     * @param getUserInput The input given by the user to carry out on tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     * @param taskNumber The Task ID which needs ot be deleted from the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     * @throws InvalidTaskNumberException 1. If the task ID is larger or lower than the","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"     * range of the size of the task list 2. If the task ID is missing from the user input","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"    public static void executeUserCommand(String getUserInput, int taskNumber) throws InvalidTaskNumberException {","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"        description \u003d getUserInput.split(\" \");","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"        if (description.length \u003c 2 || Integer.parseInt(description[1]) \u003d\u003d 0) {","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"        taskNumber \u003d Integer.parseInt(description[1]) - 1;","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"        if (tasks.get(taskNumber) \u003d\u003d null) {","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"        } else {","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"            deleteTask(taskNumber);","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"saravanamani1999":30}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"/** Includes the operations needed to execute {@code done} user command while managing any input errors. */","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"public class DoneCommand extends TaskList {","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"     * Executes the command {@code done} on the task list and marks the specified task based","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     * on the user input as done with the use of \"X\" based on the task number provided from the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"     * @param getUserInput The input given by the user to carry out on tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"     * @param taskNumber The Task ID which needs ot be deleted from the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"     * @throws InvalidTaskNumberException 1. If the task ID is larger or lower than the","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"     * range of the size of the task list. 2. If the task ID is missing from the user input","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"    public static void executeUserCommand(String getUserInput, int taskNumber) throws InvalidTaskNumberException {","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"        description \u003d getUserInput.split(\"done \");","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"        if (description.length \u003c 2 || Integer.parseInt(description[1]) \u003d\u003d 0) {","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"        taskNumber \u003d Integer.parseInt(description[1]) - 1;","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"        if (tasks.get(taskNumber) \u003d\u003d null) {","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"        if (tasks.get(taskNumber).getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"            Ui.markedAsDone();","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"        } else {","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"            tasks.get(taskNumber).markAsDone();","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"            Storage.saveToFile(Duke.file);","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"            System.out.println(tasks.get(taskNumber).printDone());","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"saravanamani1999":38}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.DateTimeFormatException;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.DeadlineTimingException;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.EventTimingException;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"/** Includes the operations needed to execute {@code event} user command while managing any input errors. */","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"public class EventCommand extends TaskList {","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     * Executes the command {@code event} on the task list and adds event tasks to task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"     * @param getUserInput The input given by the user to carry out on tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"     * @throws EventTimingException If the parameter of timing for event is missing","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"     * @throws DateTimeFormatException If the event timing does not meet the format: \"dd-MM-yyyy HH:mm\"","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"    public static void executeUserCommand(String getUserInput)","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"            throws DateTimeFormatException, EventTimingException {","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"        int at \u003d getUserInput.indexOf(\"/\");","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"        separate \u003d getUserInput.split(\"/at\");","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"        description \u003d separate[0].trim().split(\"event \");","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"        if ((at \u003d\u003d -1 \u0026\u0026 (description[1] !\u003d null))","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"                || (separate.length \u003d\u003d 1)","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"                || (separate[1].trim().isEmpty())) {","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"            throw new EventTimingException();","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"        } else if (!isValidDateTime(separate[1].trim())) {","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"            throw new DateTimeFormatException();","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"        } else {","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"            LocalDateTime eventTiming \u003d LocalDateTime.parse(separate[1].trim(), formatter);","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"            addTask(new Event(description[1], eventTiming));","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"saravanamani1999":37}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/** Includes the operations needed to execute {@code find} user command. */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"public class FindCommand extends TaskList {","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"     * Executes the command {@code find} on the task list and finds matching tasks in the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"     * based on the \"description\" which represents the user\u0027s query.","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"     * @param getUserInput The input given by the user to carry out on tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     * @throws IndexOutOfBoundsException If specified index is out of the range of the size of the tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"    public static void executeUserCommand(String getUserInput) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"        description \u003d getUserInput.split(\"find \");","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"        if (description[1].trim().isEmpty()) {","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"        getMatches(description[1],tasks);","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"        int taskId \u003d 0;","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"        Ui.printLineTop();","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"        Ui.matchesListHeader();","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"        if (matches.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"            Ui.noMatchesMessage();","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"        for (int i \u003d 0; i \u003c matches.size(); i++) {","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"            taskId \u003d i + 1;","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"            System.out.println(\" \" + taskId + matches.get(i).printTask());","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"        Ui.printLineBottom();","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"saravanamani1999":34}},{"path":"src/main/java/duke/command/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.command;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":" * Represents the Duke task manager where it includes the methods to execute","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":" * the user\u0027s command while also including add, delete and listing of tasks.","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"public class TaskList {","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"    public static ArrayList\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"    protected static int taskCount \u003d 0;","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"    protected static String[] description;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"    protected static String[] separate;","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"    private static boolean isPlural \u003d false;","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"    private static final String LIST \u003d \"list\";","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"    private static final String EXIT \u003d \"bye\";","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"    private static final String TODO \u003d \"todo\";","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"    private static final String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"    private static final String EVENT \u003d \"event\";","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"    private static final String DONE \u003d \"done\";","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"    private static final String DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"    private static final String FIND \u003d \"find\";","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"    public static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"saravanamani1999"},"content":"     * Performs the adding of task to the task list based on its task type.","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"saravanamani1999"},"content":"     * @param newTask The task of class {@code Task} which is to be added onto the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"saravanamani1999"},"content":"    public static void addTask(Task newTask) {","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"saravanamani1999"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"saravanamani1999"},"content":"        Storage.saveToFile(Duke.file);","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"saravanamani1999"},"content":"        taskCount \u003d tasks.size();","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"saravanamani1999"},"content":"        if (taskCount \u003e 1) {","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"saravanamani1999"},"content":"            isPlural \u003d true;","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(newTask.printOk() + taskCount + (isPlural ? \" tasks\" : \" task\")","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"saravanamani1999"},"content":"                + \" in the list.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"saravanamani1999"},"content":"        Ui.printLineBottom();","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"saravanamani1999"},"content":"    /** Lists the tasks to the user on the terminal when user inputs {@code list}. */","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"saravanamani1999"},"content":"    public void listTasks() {","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"saravanamani1999"},"content":"        Ui.printLineTop();","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"saravanamani1999"},"content":"        Ui.taskListHeader();","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"saravanamani1999"},"content":"        if(tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"saravanamani1999"},"content":"            Ui.noTasks();","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"saravanamani1999"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"saravanamani1999"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"saravanamani1999"},"content":"            taskNumber \u003d i + 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"saravanamani1999"},"content":"            System.out.println(\" \" + taskNumber + tasks.get(i).printTask());","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"saravanamani1999"},"content":"        Ui.printLineBottom();","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"saravanamani1999"},"content":"     * Performs the removing of the specified task from the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"saravanamani1999"},"content":"     * @param taskNumber The task ID of the task which is to be removed from the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"saravanamani1999"},"content":"    public static void deleteTask(int taskNumber) {","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"saravanamani1999"},"content":"        taskCount \u003d tasks.size() - 1;","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"saravanamani1999"},"content":"        isPlural \u003d tasks.size() !\u003d 2;","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(\" \" + tasks.get(taskNumber).printDelete() + \"\\nNow you have \"","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"saravanamani1999"},"content":"                + taskCount + (isPlural ? \" tasks\" : \" task\")","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"saravanamani1999"},"content":"                + \" in the list.\");","lastModifiedDate":"2021-09-22"},{"lineNumber":82,"author":{"gitId":"saravanamani1999"},"content":"        Ui.printLineBottom();","lastModifiedDate":"2021-09-22"},{"lineNumber":83,"author":{"gitId":"saravanamani1999"},"content":"        tasks.remove(taskNumber);","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"saravanamani1999"},"content":"        Storage.saveToFile(Duke.file);","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":86,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"saravanamani1999"},"content":"     * Checks if the format of the date and time is correct when","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"saravanamani1999"},"content":"     * user adds tasks of type {@code Deadline} and {@code Event}.","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"saravanamani1999"},"content":"     * @param dateTime The string which the user inputs under the parameter of","lastModifiedDate":"2021-09-24"},{"lineNumber":92,"author":{"gitId":"saravanamani1999"},"content":"     *                 timing for tasks of type {@code Deadline} and {@code Event}","lastModifiedDate":"2021-09-24"},{"lineNumber":93,"author":{"gitId":"saravanamani1999"},"content":"     * @return True when the format of the user timing input is correct and false when it\u0027s wrong","lastModifiedDate":"2021-09-24"},{"lineNumber":94,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"saravanamani1999"},"content":"    public static boolean isValidDateTime(String dateTime) {","lastModifiedDate":"2021-09-22"},{"lineNumber":96,"author":{"gitId":"saravanamani1999"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"saravanamani1999"},"content":"            LocalDateTime.parse(dateTime, formatter);","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"saravanamani1999"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"saravanamani1999"},"content":"            return false;","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"saravanamani1999"},"content":"        return true;","lastModifiedDate":"2021-09-22"},{"lineNumber":102,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":105,"author":{"gitId":"saravanamani1999"},"content":"     * Gets the tasks which matches the user\u0027s query when user inputs {@code find}.","lastModifiedDate":"2021-09-24"},{"lineNumber":106,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":107,"author":{"gitId":"saravanamani1999"},"content":"     * @param query The string which user inputs to be found from the list of tasks on Duke","lastModifiedDate":"2021-09-24"},{"lineNumber":108,"author":{"gitId":"saravanamani1999"},"content":"     * @param list The array list of tasks found oen Duke","lastModifiedDate":"2021-09-24"},{"lineNumber":109,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":110,"author":{"gitId":"saravanamani1999"},"content":"    public static void getMatches(String query, ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2021-09-24"},{"lineNumber":111,"author":{"gitId":"saravanamani1999"},"content":"        matches.clear();","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"saravanamani1999"},"content":"        for(Task task: list) {","lastModifiedDate":"2021-09-22"},{"lineNumber":113,"author":{"gitId":"saravanamani1999"},"content":"            if (task.description.contains(query)) {","lastModifiedDate":"2021-09-24"},{"lineNumber":114,"author":{"gitId":"saravanamani1999"},"content":"                matches.add(task);","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"saravanamani1999"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":118,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":119,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":120,"author":{"gitId":"saravanamani1999"},"content":"     * Executes the specific commands on the task list on duke.","lastModifiedDate":"2021-09-24"},{"lineNumber":121,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":122,"author":{"gitId":"saravanamani1999"},"content":"     * @param getUserInput The input given by the user to carry out on tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":123,"author":{"gitId":"saravanamani1999"},"content":"     * @param userCommand The specific user command to carry out on the tasks list on duke","lastModifiedDate":"2021-09-24"},{"lineNumber":124,"author":{"gitId":"saravanamani1999"},"content":"     * @throws DukeException The custom exceptions for specific errors","lastModifiedDate":"2021-09-24"},{"lineNumber":125,"author":{"gitId":"saravanamani1999"},"content":"     * @throws IOException Signals that an I/O exception of some sort has occurred","lastModifiedDate":"2021-09-24"},{"lineNumber":126,"author":{"gitId":"saravanamani1999"},"content":"     * @throws InvalidTaskNumberException 1. If the task ID is larger or lower than the","lastModifiedDate":"2021-09-24"},{"lineNumber":127,"author":{"gitId":"saravanamani1999"},"content":"     * range of the size of the task list. 2. If the task ID is missing from the user input","lastModifiedDate":"2021-09-24"},{"lineNumber":128,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":129,"author":{"gitId":"saravanamani1999"},"content":"    public void executeCommand(String getUserInput, String userCommand)","lastModifiedDate":"2021-09-24"},{"lineNumber":130,"author":{"gitId":"saravanamani1999"},"content":"            throws DukeException, IOException, InvalidTaskNumberException {","lastModifiedDate":"2021-09-24"},{"lineNumber":131,"author":{"gitId":"saravanamani1999"},"content":"        int taskNumber \u003d 0;","lastModifiedDate":"2021-09-24"},{"lineNumber":132,"author":{"gitId":"saravanamani1999"},"content":"        switch (userCommand) {","lastModifiedDate":"2021-09-07"},{"lineNumber":133,"author":{"gitId":"saravanamani1999"},"content":"        case EXIT:","lastModifiedDate":"2021-09-22"},{"lineNumber":134,"author":{"gitId":"saravanamani1999"},"content":"            Duke.hasUserExited \u003d true;","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"saravanamani1999"},"content":"        case LIST:","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"saravanamani1999"},"content":"            listTasks();","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"saravanamani1999"},"content":"        case DONE:","lastModifiedDate":"2021-09-22"},{"lineNumber":140,"author":{"gitId":"saravanamani1999"},"content":"            DoneCommand.executeUserCommand(getUserInput,taskNumber);","lastModifiedDate":"2021-09-24"},{"lineNumber":141,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"saravanamani1999"},"content":"        case TODO:","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"saravanamani1999"},"content":"             ToDoCommand.executeUserCommand(getUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":144,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-07"},{"lineNumber":145,"author":{"gitId":"saravanamani1999"},"content":"        case DEADLINE:","lastModifiedDate":"2021-09-22"},{"lineNumber":146,"author":{"gitId":"saravanamani1999"},"content":"            DeadLineCommand.executeUserCommand(getUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":147,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-07"},{"lineNumber":148,"author":{"gitId":"saravanamani1999"},"content":"        case EVENT:","lastModifiedDate":"2021-09-22"},{"lineNumber":149,"author":{"gitId":"saravanamani1999"},"content":"            EventCommand.executeUserCommand(getUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":150,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-07"},{"lineNumber":151,"author":{"gitId":"saravanamani1999"},"content":"        case DELETE:","lastModifiedDate":"2021-09-22"},{"lineNumber":152,"author":{"gitId":"saravanamani1999"},"content":"            DeleteCommand.executeUserCommand(getUserInput,taskNumber);","lastModifiedDate":"2021-09-24"},{"lineNumber":153,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":154,"author":{"gitId":"saravanamani1999"},"content":"        case FIND:","lastModifiedDate":"2021-09-22"},{"lineNumber":155,"author":{"gitId":"saravanamani1999"},"content":"            FindCommand.executeUserCommand(getUserInput);","lastModifiedDate":"2021-09-24"},{"lineNumber":156,"author":{"gitId":"saravanamani1999"},"content":"            break;","lastModifiedDate":"2021-09-22"},{"lineNumber":157,"author":{"gitId":"saravanamani1999"},"content":"        default:","lastModifiedDate":"2021-09-07"},{"lineNumber":158,"author":{"gitId":"saravanamani1999"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":159,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":160,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":161,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":162,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":163,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":164,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"saravanamani1999":164}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.command;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/** Includes the operations needed to execute {@code todo} user command. */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"public class ToDoCommand extends TaskList {","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"     * Executes the command {@code todo} which adds todo tasks to the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"     * where \"description\" is the description of the task.","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"     * @param getUserInput The input given by the user to carry out on tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     * @throws IndexOutOfBoundsException If specified index is out of the range of the size of the tasks list","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"    public static void executeUserCommand(String getUserInput) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"        description \u003d getUserInput.split(\"todo \");","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"        if (description[1].trim().isEmpty()) {","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"        addTask(new ToDo(description[1]));","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"saravanamani1999":23}},{"path":"src/main/java/duke/exceptions/DateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/** Custom exception to catch formatting errors in regard to the deadline and event timings input by user. */","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"public class DateTimeFormatException extends DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    @Override","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"    public void sendErrorMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(Ui.HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! The date and timing format is wrong.\\n \"","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"                + \"Please represent date and time as: dd-mm-yyyy hh:mm\\n\"","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"                + Ui.HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"saravanamani1999":16}},{"path":"src/main/java/duke/exceptions/DeadlineTimingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/** Custom exception to catch missing deadline timings in the user input. */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"public class DeadlineTimingException extends DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"    public void sendErrorMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(Ui.HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! The deadline timing is missing.\\n\"","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"                + Ui.HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"saravanamani1999":15}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":" * Super class exception which contains the method {@code sendErrorMessage()} which is then","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":" * overridden by its subclasses to send custom message for each custom exception.","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"    /** Custom error message for custom exceptions. */","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"    public void sendErrorMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(Ui.HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! ...Error message...\\n\"","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"                + Ui.HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"saravanamani1999":18}},{"path":"src/main/java/duke/exceptions/EventTimingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/** Custom exception to catch missing event timings in the user input. */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"public class EventTimingException extends DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"    public void sendErrorMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(Ui.HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! The event timing is missing.\\n\"","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"                + Ui.HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"saravanamani1999":15}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/** Custom exception to catch any unfamiliar command words in the user input. */","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    public void sendErrorMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(Ui.HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\"","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"                + Ui.HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"saravanamani1999":14}},{"path":"src/main/java/duke/exceptions/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":" * Custom exception to catch when user input is missing the task number","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":" * parameter or if the task number provided is invalid where it is out","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":" * of range of the size of the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"public class InvalidTaskNumberException extends Throwable {","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"    public static void sendErrorMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(Ui.HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! Please input a valid task number.\\n\"","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"                + Ui.HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"saravanamani1999":18}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.parser;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"/** Parses the given user command to make sense of it by getting the key user command. */","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"public class Parser {","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"     * Splits the full string of user input into to 2 parts to get","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"     * the command word which needs to be executed. The command words","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"     * are \"list\",\"bye\",\"delete\",\"done\",\"deadline\",\"event\",\"find\" and \"todo\".","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"     * @param fullCommand Full string of user input provided in CLI","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"     * @return The command word that needs to be executed","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"    public static String getCommandWord(String fullCommand) {","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"        String[] separate;","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"        separate \u003d fullCommand.split(\" \");","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"        return separate[0];","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"saravanamani1999":20}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.storage;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.command.TaskList;","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"import java.io.File;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"/**","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":" * Storage class contains the operations required to store","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":" * the tasks into a text file and update the task list each","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":" * time Duke is launched using the text file.","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":" */","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"public class Storage {","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"    protected String filePath;","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"    protected static String[] description;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"    protected static String[] separate;","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"     * Constructs {@code storage} to start saving the tasks to the text file found in the file path.","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"     * @param filePath File path indicating the location of text file in the directory","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"saravanamani1999"},"content":"     * Checks if the tasks in the text file is marked as done,","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"saravanamani1999"},"content":"     * and if it is, it marks that task as done in the Duke task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"saravanamani1999"},"content":"     * @param fileContents Array list of the tasks found in the text file","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"saravanamani1999"},"content":"     * @param tasks Array list of the tasks updated onto Duke when launched","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"saravanamani1999"},"content":"     * @param taskId The task number of each task","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"saravanamani1999"},"content":"    public static void checkDone(ArrayList\u003cString\u003e fileContents, ArrayList\u003cTask\u003e tasks, int taskId) {","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"saravanamani1999"},"content":"        if (fileContents.get(taskId).contains(\"[X]\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":48,"author":{"gitId":"saravanamani1999"},"content":"            tasks.get(taskId).markAsDone();","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":53,"author":{"gitId":"saravanamani1999"},"content":"     * Loads the tasks based on what type of task it is from","lastModifiedDate":"2021-09-24"},{"lineNumber":54,"author":{"gitId":"saravanamani1999"},"content":"     * the text file and updates it onto the Duke task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":55,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":56,"author":{"gitId":"saravanamani1999"},"content":"     * @param tasks Array list of the tasks updated onto Duke when launched","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"saravanamani1999"},"content":"     * @param fileContents Array list of the tasks found in the text file","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"saravanamani1999"},"content":"    public static void loadTasks(ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e fileContents) {","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"saravanamani1999"},"content":"        for (int i \u003d 0; i \u003c fileContents.size(); i++) {","lastModifiedDate":"2021-09-22"},{"lineNumber":61,"author":{"gitId":"saravanamani1999"},"content":"            if (fileContents.get(i).startsWith(\"T\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"saravanamani1999"},"content":"                description \u003d fileContents.get(i).split(\"]\");","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"saravanamani1999"},"content":"                tasks.add(new ToDo(description[1].trim()));","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"saravanamani1999"},"content":"                checkDone(fileContents, tasks, i);","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"saravanamani1999"},"content":"            } else if (fileContents.get(i).startsWith(\"D\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":66,"author":{"gitId":"saravanamani1999"},"content":"                separate \u003d fileContents.get(i).split(\"by:\");","lastModifiedDate":"2021-09-22"},{"lineNumber":67,"author":{"gitId":"saravanamani1999"},"content":"                description \u003d separate[0].trim().split(\"]\");","lastModifiedDate":"2021-09-22"},{"lineNumber":68,"author":{"gitId":"saravanamani1999"},"content":"                LocalDateTime dueDate \u003d LocalDateTime.parse(separate[1].trim());","lastModifiedDate":"2021-09-22"},{"lineNumber":69,"author":{"gitId":"saravanamani1999"},"content":"                tasks.add(new Deadline(description[1].trim(), dueDate));","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"saravanamani1999"},"content":"                checkDone(fileContents, tasks, i);","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"saravanamani1999"},"content":"            } else if (fileContents.get(i).startsWith(\"E\")) {","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"saravanamani1999"},"content":"                separate \u003d fileContents.get(i).split(\"at:\");","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"saravanamani1999"},"content":"                description \u003d separate[0].trim().split(\"]\");","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"saravanamani1999"},"content":"                LocalDateTime eventTiming \u003d LocalDateTime.parse(separate[1].trim());","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"saravanamani1999"},"content":"                tasks.add(new Event(description[1].trim(), eventTiming));","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"saravanamani1999"},"content":"                checkDone(fileContents, tasks, i);","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"saravanamani1999"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":80,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"saravanamani1999"},"content":"     * Reads the file when Duke is launched and loads the tasks onto Duke.","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"saravanamani1999"},"content":"     * @param filePath File path indicating the location of text file in the directory","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"saravanamani1999"},"content":"     * @param tasks Array list of the tasks updated onto Duke when launched","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"saravanamani1999"},"content":"     * @throws FileNotFoundException If the file is not found in the specified location","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"saravanamani1999"},"content":"    public void readFile(String filePath, ArrayList\u003cTask\u003e tasks) throws FileNotFoundException {","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"saravanamani1999"},"content":"        ArrayList\u003cString\u003e fileContents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"saravanamani1999"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":91,"author":{"gitId":"saravanamani1999"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"saravanamani1999"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"saravanamani1999"},"content":"            fileContents.add(s.nextLine());","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"saravanamani1999"},"content":"        loadTasks(tasks, fileContents);","lastModifiedDate":"2021-09-24"},{"lineNumber":96,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":99,"author":{"gitId":"saravanamani1999"},"content":"     * Writes to the text file the task which the user has input onto Duke.","lastModifiedDate":"2021-09-24"},{"lineNumber":100,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":101,"author":{"gitId":"saravanamani1999"},"content":"     * @param filePath File path indicating the location of text file in the directory","lastModifiedDate":"2021-09-24"},{"lineNumber":102,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":103,"author":{"gitId":"saravanamani1999"},"content":"    public static void writeToFile(String filePath) {","lastModifiedDate":"2021-09-22"},{"lineNumber":104,"author":{"gitId":"saravanamani1999"},"content":"        try {","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"saravanamani1999"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"saravanamani1999"},"content":"            for (Task task : TaskList.tasks) {","lastModifiedDate":"2021-09-24"},{"lineNumber":107,"author":{"gitId":"saravanamani1999"},"content":"                String formattedTask \u003d null;","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"saravanamani1999"},"content":"                formattedTask \u003d task.fileContent();","lastModifiedDate":"2021-09-22"},{"lineNumber":109,"author":{"gitId":"saravanamani1999"},"content":"                fw.write(formattedTask + System.lineSeparator());","lastModifiedDate":"2021-09-22"},{"lineNumber":110,"author":{"gitId":"saravanamani1999"},"content":"            }","lastModifiedDate":"2021-09-22"},{"lineNumber":111,"author":{"gitId":"saravanamani1999"},"content":"            fw.close();","lastModifiedDate":"2021-09-22"},{"lineNumber":112,"author":{"gitId":"saravanamani1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-22"},{"lineNumber":113,"author":{"gitId":"saravanamani1999"},"content":"            Ui.ioExceptionMessage();","lastModifiedDate":"2021-09-22"},{"lineNumber":114,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":116,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":117,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":118,"author":{"gitId":"saravanamani1999"},"content":"     * Creates the text file in the specified path in the directory.","lastModifiedDate":"2021-09-24"},{"lineNumber":119,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":120,"author":{"gitId":"saravanamani1999"},"content":"     * @param filePath File path indicating the location of text file in the directory","lastModifiedDate":"2021-09-24"},{"lineNumber":121,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":122,"author":{"gitId":"saravanamani1999"},"content":"    public static void createFilePath(String filePath) {","lastModifiedDate":"2021-09-22"},{"lineNumber":123,"author":{"gitId":"saravanamani1999"},"content":"        File folder \u003d new File(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":124,"author":{"gitId":"saravanamani1999"},"content":"        if (!folder.exists()) {","lastModifiedDate":"2021-09-22"},{"lineNumber":125,"author":{"gitId":"saravanamani1999"},"content":"            folder.getParentFile().mkdirs();","lastModifiedDate":"2021-09-22"},{"lineNumber":126,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":127,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":128,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":129,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":130,"author":{"gitId":"saravanamani1999"},"content":"     * Runs the creating of file path if it doesn\u0027t exist and saves the tasks to the file.","lastModifiedDate":"2021-09-25"},{"lineNumber":131,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":132,"author":{"gitId":"saravanamani1999"},"content":"     * @param filePath File path indicating the location of text file in the directory","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"saravanamani1999"},"content":"    public static void saveToFile(String filePath) {","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"saravanamani1999"},"content":"        createFilePath(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"saravanamani1999"},"content":"        writeToFile(filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":137,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":139,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"saravanamani1999":139}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"/** Represents a {@code Task} which is of type Deadline where it has a specified deadline. */","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"    protected LocalDateTime dueTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"    protected String by;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     * Constructs a {@code Deadline} task with the basic information of","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     * its description and the deadline time of the task.","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"     * @param description Description of the task found in the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"        super(description);","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"        this.dueTime \u003d by;","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"        this.by \u003d by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\"));","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"        return \"D\";","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"    public String printOk() {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"        return super.printOkStart() + \"  [D][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"                + description + \" (by: \" + by + \")\\n\"  + super.printOkEnd();","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"        return \".\" + \"[\" + getTaskType() + \"]\" + \"[\"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"    public String printDone() {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE+ \" Nice! I\u0027ve marked this task as done:\\n   [\" + getTaskType() + \"][\"","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + \" (by: \" + by + \")\" + HORIZONTAL_LINE;","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"saravanamani1999"},"content":"    public String printDelete() {","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE+ \" Noted. I\u0027ve removed this task:\\n   [\" + getTaskType() + \"][\"","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + \" (by: \" + by + \")\";","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"saravanamani1999"},"content":"    public String fileContent() {","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"saravanamani1999"},"content":"        return \"D [\" + getStatusIcon() + \"] \" + description + \" by: \" + dueTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"saravanamani1999":52}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"/** Represents a {@code Task} which is of type Event where it has a specified event timing. */","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"    protected String at;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"    LocalDateTime dueTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     * Constructs a {@code Event} task with the basic information of","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     * its description and the event timing of the task.","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"     * @param description Description of the task found in the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"    public Event(String description, LocalDateTime at) {","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"        super(description);","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"        this.dueTime \u003d at;","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"        this.at \u003d at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\"));","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"        return \"E\";","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"    public String printOk() {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"         return super.printOkStart() + \"  [E][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"                 + description + \" (at: \" + at + \")\\n\" + super.printOkEnd();","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"        return \".\" + \"[\" + getTaskType() + \"]\" + \"[\"","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"    public String printDone() {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE + \" Nice! I\u0027ve marked this task as done:\\n   [\" + getTaskType() + \"][\"","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + \" (at: \" + at + \")\" + HORIZONTAL_LINE;","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"saravanamani1999"},"content":"    public String printDelete() {","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE + \" Noted. I\u0027ve removed this task:\\n   [\" + getTaskType() + \"][\"","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + \" (at: \" + at + \")\";","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"saravanamani1999"},"content":"    public String fileContent() {","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"saravanamani1999"},"content":"        return \"E [\" + getStatusIcon() + \"] \" + description + \" at: \" + dueTime;","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"saravanamani1999":52}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"/** Represents the parent task of Deadline, Event and ToDo. */","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"    public String description;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"    protected String HORIZONTAL_LINE \u003d \"\\n____________________________________________________________\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"     * Constructs a{@code Task} with details such as the description of","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"     * the task and the status of whether it is marked as done.","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"     * @param description Description of the task found in the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"    public Task(String description) {","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"     * Finds the status icon of a specified task, ie whether it\u0027s marked with \"X\" or not.","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"     * @return The status icon \"X\" or \" \"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"    /** Sets the status icon of a task to \"X\". */","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"     * Checks if a task is marked as done.","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"     * @return True if task is marked as done, false if it is not.","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"saravanamani1999"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"saravanamani1999"},"content":"        return isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"saravanamani1999"},"content":"     * Checks the task type of the specified task and prints it to indicate the type of task.","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":47,"author":{"gitId":"saravanamani1999"},"content":"     * @return The task type \"T\", \"D\" OR \"E\" of the task in its subclasses","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"saravanamani1999"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"saravanamani1999"},"content":"        return \" \";","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":54,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the details of the tasks in the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":55,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":56,"author":{"gitId":"saravanamani1999"},"content":"     * @return The full details of the task with the task type, status icon and description of task","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"saravanamani1999"},"content":"    public String printTask() {","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"saravanamani1999"},"content":"        return \".\" + \"[\" + getTaskType() + \"]\" + \"[\"","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the acknowledgment after adding a task to the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"saravanamani1999"},"content":"     * @return The acknowledgement of adding a task to Duke","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"saravanamani1999"},"content":"    public String printOk() {","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE + \" added: \" + description + HORIZONTAL_LINE;","lastModifiedDate":"2021-09-22"},{"lineNumber":70,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the header of the acknowledgement message from Duke after adding a task.","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"saravanamani1999"},"content":"     * @return The starting of the message of the acknowledgment message","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"saravanamani1999"},"content":"    public String printOkStart() {","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE + \" Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the footer of the acknowledgement message from Duke after adding a task.","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"saravanamani1999"},"content":"     * @return The ending part of the message of the acknowledgment message","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"saravanamani1999"},"content":"    public String printOkEnd() {","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"saravanamani1999"},"content":"        return \" Now you have \";","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the acknowledgment after marking a task as done.","lastModifiedDate":"2021-09-24"},{"lineNumber":92,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":93,"author":{"gitId":"saravanamani1999"},"content":"     * @return The acknowledgement of marking the specified task as done","lastModifiedDate":"2021-09-24"},{"lineNumber":94,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":95,"author":{"gitId":"saravanamani1999"},"content":"    public String printDone() {","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE + \" Nice! I\u0027ve marked this task as done:\\n   [\" + getTaskType() + \"][\"","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + HORIZONTAL_LINE;","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":101,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the acknowledgment after removing a task from the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":102,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":103,"author":{"gitId":"saravanamani1999"},"content":"     * @return The acknowledgement of removing a task from Duke","lastModifiedDate":"2021-09-24"},{"lineNumber":104,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":105,"author":{"gitId":"saravanamani1999"},"content":"    public String printDelete() {","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE + \" Noted. I\u0027ve removed this task:\\n   [\" + getTaskType() + \"][\"","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-09-13"},{"lineNumber":108,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":109,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":111,"author":{"gitId":"saravanamani1999"},"content":"     * Reformats the code to match the format which is to be","lastModifiedDate":"2021-09-24"},{"lineNumber":112,"author":{"gitId":"saravanamani1999"},"content":"     * added onto the text file which saves the tasks.","lastModifiedDate":"2021-09-24"},{"lineNumber":113,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":114,"author":{"gitId":"saravanamani1999"},"content":"     * @return The details of the task which needs to be saved onto the text file","lastModifiedDate":"2021-09-24"},{"lineNumber":115,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":116,"author":{"gitId":"saravanamani1999"},"content":"    public String fileContent() {","lastModifiedDate":"2021-09-14"},{"lineNumber":117,"author":{"gitId":"saravanamani1999"},"content":"        return \" [\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":120,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"saravanamani1999":120}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"/** Represents a {@code Task} which is of type ToDo. */","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"     * Constructs a {@code ToDo} task with the basic information of its description.","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"     * @param description Description of the task found in the task list","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"        super(description);","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"        return \"T\";","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"    public String printOk() {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"        return super.printOkStart() + \"  [T][\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"                + description + \"\\n\" + super.printOkEnd();","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"    public String printDone() {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"        return HORIZONTAL_LINE + \" Nice! I\u0027ve marked this task as done:\\n   [\" + getTaskType() + \"][\"","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"                + getStatusIcon() + \"] \" + description + HORIZONTAL_LINE;","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"    public String fileContent() {","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"        return \"T [\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"saravanamani1999":33}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"package duke.ui;","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"/** Includes the messages which is communicated to user after the user\u0027s inputs. */","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"saravanamani1999"},"content":"public class Ui {","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"saravanamani1999"},"content":"    public static final String HORIZONTAL_LINE_TOP \u003d \"\\n______________________________\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"saravanamani1999"},"content":"            \"______________________________\";","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"saravanamani1999"},"content":"    public static final String HORIZONTAL_LINE_BOTTOM \u003d \"______________________________\" +","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"saravanamani1999"},"content":"            \"______________________________\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"saravanamani1999"},"content":"    public String readCommand(Scanner in) {","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"saravanamani1999"},"content":"        return in.nextLine();","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"saravanamani1999"},"content":"    public static void printLineTop() {","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(HORIZONTAL_LINE_TOP);","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"saravanamani1999"},"content":"    public static void printLineBottom() {","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints the welcome message when user enters Duke. */","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"saravanamani1999"},"content":"    public static void sendWelcomeMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"saravanamani1999"},"content":"        String logo \u003d \" DDDDD           kk\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"                + \" DD  DD  uu   uu kk  kk   eee\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"saravanamani1999"},"content":"                + \" DD   DD uu   uu kkkkk  ee   e\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"saravanamani1999"},"content":"                + \" DD   DD uu   uu kk kk  eeeee\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"saravanamani1999"},"content":"                + \" DDDDDD   uuuu u kk  kk  eeeee\\n\";","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"saravanamani1999"},"content":"        System.out.print(\" Hello from\\n\\n\" + logo);","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n Hello! I\u0027m Duke, your friendly neighbourhood task manager!\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"saravanamani1999"},"content":"                + \" How can I help you?\\n\" + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints the exit message when the user inputs {@code bye} and exits duke. */","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"saravanamani1999"},"content":"    public void sendExitMessage() {","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(HORIZONTAL_LINE_TOP + \"\\n Bye. Hope to see you again soon!\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"saravanamani1999"},"content":"                + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints an error message when Duke catches any IO exceptions. */","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"saravanamani1999"},"content":"    public static void ioExceptionMessage() {","lastModifiedDate":"2021-09-22"},{"lineNumber":49,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! Something went wrong!.\" + \"\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":51,"author":{"gitId":"saravanamani1999"},"content":"                + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"saravanamani1999"},"content":"    public void indexOutOfBoundsMessage(String command) {","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(HORIZONTAL_LINE_TOP","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"saravanamani1999"},"content":"                + \"\\n ☹ OOPS!!! The description of a \" + command + \" cannot be empty.\\n\"","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"saravanamani1999"},"content":"                + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":58,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":59,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":60,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints error message when the text file saving the tasks is not found in specified file path. */","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"saravanamani1999"},"content":"    public void fileNotFoundMessage() {","lastModifiedDate":"2021-09-22"},{"lineNumber":62,"author":{"gitId":"saravanamani1999"},"content":"        System.out.print(\" File not found\\n\" + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":65,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the number of tasks found in the task list.","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"saravanamani1999"},"content":"     *","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"saravanamani1999"},"content":"     * @param tasks Array list of the tasks updated onto Duke when launched","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"saravanamani1999"},"content":"    public void tasksQuantity(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-22"},{"lineNumber":71,"author":{"gitId":"saravanamani1999"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-22"},{"lineNumber":72,"author":{"gitId":"saravanamani1999"},"content":"            System.out.println(\" No tasks found in the task file\\n\" + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":73,"author":{"gitId":"saravanamani1999"},"content":"        } else {","lastModifiedDate":"2021-09-22"},{"lineNumber":74,"author":{"gitId":"saravanamani1999"},"content":"            System.out.println(\" You have \" + tasks.size()","lastModifiedDate":"2021-09-22"},{"lineNumber":75,"author":{"gitId":"saravanamani1999"},"content":"                    +  \" tasks.\\n\" + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-22"},{"lineNumber":76,"author":{"gitId":"saravanamani1999"},"content":"        }","lastModifiedDate":"2021-09-22"},{"lineNumber":77,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":78,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":79,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints the message of acknowledgement when the task is marked as done. */","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"saravanamani1999"},"content":"    public static void markedAsDone() {","lastModifiedDate":"2021-09-22"},{"lineNumber":81,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(HORIZONTAL_LINE_TOP + \"\\n I\u0027ve already marked the task as done!\\n\"","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"saravanamani1999"},"content":"                + HORIZONTAL_LINE_BOTTOM);","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":84,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":85,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints the message to user when there are no tasks in the text file or duke task list. */","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"saravanamani1999"},"content":"    public static void noTasks() {","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(\" You have no tasks!\");","lastModifiedDate":"2021-09-22"},{"lineNumber":88,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":89,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":90,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints the header part of the acknowledgement message when user inputs {@code list}. */","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"saravanamani1999"},"content":"    public static void taskListHeader() {","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(\" Here are the tasks in your list:\");","lastModifiedDate":"2021-09-22"},{"lineNumber":93,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"saravanamani1999"},"content":"    /** Prints the header part of the acknowledgement message when user inputs {@code find}. */","lastModifiedDate":"2021-09-24"},{"lineNumber":96,"author":{"gitId":"saravanamani1999"},"content":"    public static void matchesListHeader() {","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(\" Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":99,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"saravanamani1999"},"content":"    /**","lastModifiedDate":"2021-09-24"},{"lineNumber":101,"author":{"gitId":"saravanamani1999"},"content":"     * Prints the message when there are no tasks found which matches the","lastModifiedDate":"2021-09-24"},{"lineNumber":102,"author":{"gitId":"saravanamani1999"},"content":"     * query of the user when the user inputs {@code find}.","lastModifiedDate":"2021-09-24"},{"lineNumber":103,"author":{"gitId":"saravanamani1999"},"content":"     */","lastModifiedDate":"2021-09-24"},{"lineNumber":104,"author":{"gitId":"saravanamani1999"},"content":"    public static void noMatchesMessage() {","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"saravanamani1999"},"content":"        System.out.println(\"\\n ☹ There are no matching tasks found!\");","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"saravanamani1999"},"content":"    }","lastModifiedDate":"2021-09-22"},{"lineNumber":107,"author":{"gitId":"saravanamani1999"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":108,"author":{"gitId":"saravanamani1999"},"content":"}","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"saravanamani1999":108}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"saravanamani1999"},"content":"todo read book","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"saravanamani1999"},"content":"deadline return book /by 26 Sept","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"saravanamani1999"},"content":"event Project meeting /at 6pm today","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"saravanamani1999"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"saravanamani1999"},"content":"done 1","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"saravanamani1999"},"content":"done 2","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"saravanamani1999"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"saravanamani1999"},"content":"bye","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"saravanamani1999":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"saravanamani1999"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"saravanamani1999":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"saravanamani1999"},"content":"## convert to UNIX format","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"saravanamani1999"},"content":"#diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"saravanamani1999":2,"-":37}}]
