[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.command.CommandManager;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":" * Main class that is started on project run.","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":" * Prints welcome message and enters a loop","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":" * that passes user input to \u003ccode\u003eCommandManager\u003c/code\u003e using a static Scanner \u003ccode\u003eIN\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":" * if \u003ccode\u003ehandleCommand()\u003c/code\u003e function returns false thenclose scanner","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":" * and print exit message.","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"    private static final Scanner IN \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"        if(!IoManager.initialiseSaveFile()){","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"            return;","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"        Message.printWelcome();","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"        String userInput;","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"        do {","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"            userInput \u003d IN.nextLine();","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"        } while (CommandManager.handleCommand(userInput));","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"        IN.close();","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"        Message.printEnd();","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"SeanRobertDH":29,"-":3}},{"path":"src/main/java/duke/IoManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.exception.LoadTaskException;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"import java.io.File;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"import java.nio.file.FileAlreadyExistsException;","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":" * Class for handling all file operations","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eSAVE_FOLDER\u003c/code\u003e corresponds to the directory to save the save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eFILE_NAME\u003c/code\u003e corresponds to the name of te save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"public class IoManager {","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String SAVE_FOLDER \u003d \"data\";","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String DIRECTORY \u003d System.getProperty(\"user.dir\") + \u0027/\u0027 + SAVE_FOLDER;","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String FILE_NAME \u003d DIRECTORY + \"/duke.txt\";","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String SAVE_FILE_CREATED_MESSAGE \u003d \"Save file created: \" + FILE_NAME;","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String LOAD_CREATED_SAVE_FILE_MESSAGE \u003d \"Loading previously created save file.\";","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String INVALID_DIRECTORY_PATH_MESSAGE \u003d String.format(\"Directory path \u0027%s\u0027 is invalid.\", DIRECTORY);","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String FILE_NAME_ALREADY_USED_MESSAGE \u003d String.format(\"Please remove file \u0027%s\u0027 in project directory!)\", SAVE_FOLDER);","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String NO_PERMISSION_MESSAGE \u003d \"Program does not have permission to create directory/file.\";","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String IO_EXCEPTION_MESSAGE \u003d \"IO exception occurred during Directory/File creation.\";","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String SAVE_FILE_CORRUPTED_MESSAGE \u003d String.format(\"Save file \u0027%s\u0027 has been corrupted!\", FILE_NAME);","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String OVERWRITE_IO_EXCEPTION_MESSAGE \u003d \"Unable to Write to save file, IO exception encountered.\";","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"     * Initialises the save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"     * if a new save file needs to be created, create one and inform the user,","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"     * else it attempts to load the save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"    public static boolean initialiseSaveFile() {","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"            Path path \u003d Paths.get(DIRECTORY);","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"            Files.createDirectories(path);","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"            File saveFile \u003d new File(FILE_NAME);","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"            if (saveFile.createNewFile()) {","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"                System.out.println(SAVE_FILE_CREATED_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"SeanRobertDH"},"content":"            } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"SeanRobertDH"},"content":"                System.out.println(LOAD_CREATED_SAVE_FILE_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"SeanRobertDH"},"content":"                TaskManager.loadTasks();","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"SeanRobertDH"},"content":"            return true;","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(INVALID_DIRECTORY_PATH_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (FileAlreadyExistsException faee) {","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(FILE_NAME_ALREADY_USED_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (SecurityException se) {","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(NO_PERMISSION_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(IO_EXCEPTION_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":61,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (IllegalArgumentException | LoadTaskException e) {","lastModifiedDate":"2021-09-27"},{"lineNumber":62,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(SAVE_FILE_CORRUPTED_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"SeanRobertDH"},"content":"        return false;","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"SeanRobertDH"},"content":"     * Creates a String ArrayList and read the lines from the scanner into the ArrayList.","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"SeanRobertDH"},"content":"     * @return All lines read from Scanner in an ArrayList.","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"SeanRobertDH"},"content":"     * @throws FileNotFoundException If Scanner was unable to find save file (should not happen because we just created it)","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"SeanRobertDH"},"content":"    public static ArrayList\u003cString\u003e loadFile() throws FileNotFoundException {","lastModifiedDate":"2021-09-27"},{"lineNumber":73,"author":{"gitId":"SeanRobertDH"},"content":"        ArrayList\u003cString\u003e loadedTasks \u003d new ArrayList\u003c\u003e(TaskManager.MAX_TASKS);","lastModifiedDate":"2021-09-27"},{"lineNumber":74,"author":{"gitId":"SeanRobertDH"},"content":"        File file \u003d new File(FILE_NAME);","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"SeanRobertDH"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"SeanRobertDH"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"SeanRobertDH"},"content":"            loadedTasks.add(scanner.nextLine());","lastModifiedDate":"2021-09-27"},{"lineNumber":78,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"SeanRobertDH"},"content":"        scanner.close();","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"SeanRobertDH"},"content":"        return loadedTasks;","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":84,"author":{"gitId":"SeanRobertDH"},"content":"     * Overwrites the contents of the save file (does not append, overwrites everything!)","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"SeanRobertDH"},"content":"     * @param toWrite the whole String that would be used to overwrite the current contents in the save file","lastModifiedDate":"2021-09-28"},{"lineNumber":86,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":87,"author":{"gitId":"SeanRobertDH"},"content":"    public static void overwriteFile(String toWrite) {","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"SeanRobertDH"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"SeanRobertDH"},"content":"            FileWriter writer \u003d new FileWriter(FILE_NAME);","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"SeanRobertDH"},"content":"            writer.write(toWrite);","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"SeanRobertDH"},"content":"            writer.close();","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(OVERWRITE_IO_EXCEPTION_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":94,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"SeanRobertDH":96}},{"path":"src/main/java/duke/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * General Class for handling welcome/leaving messages and printing utility functions.","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"public class Message {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___| inc.\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String INTRO \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String END \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String SPACER \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in a string and prints it in-between two lines of {@link #SPACER}.","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"     * @param message String to print encapsulated in spacers.","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"    public static void printWithSpacers(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"        //If message does not end in newline, insert newline","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"        if (message.charAt(message.length() - 1) !\u003d \u0027\\n\u0027) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"            message +\u003d \u0027\\n\u0027;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"        System.out.print(SPACER + message + SPACER);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"    public static void printWelcome() {","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"        System.out.print(LOGO);","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"        printWithSpacers(INTRO);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"    public static void printEnd() {","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"        printWithSpacers(END);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"SeanRobertDH":37}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * General Class for handling parsing of Strings and String Arrays.","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"public class Parser {","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String WHITESPACE_REGEX \u003d \"\\\\s+\";","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String PIPE_REGEX \u003d \"\\\\|\";","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String FIRST_ARGUMENT_REGEX \u003d \"^%s\\\\s*\";","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in a String and returns a String Array split between all whitespace.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"     * @param message String to be split.","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"     * @return String Array of split message.","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    public static String[] splitWhitespace(String message) {","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"        return message.split(WHITESPACE_REGEX);","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in a String and returns a String Array split between all \u0027|\u0027 characters.","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"     * @param message String to be split.","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"     * @return String Array of split message.","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"    public static String[] splitPipe(String message) {","lastModifiedDate":"2021-09-27"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"        return message.split(PIPE_REGEX);","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in a String and returns a String of the first String after having split them by whitespace.","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"     * @param message String to have first String extracted from.","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"     * @return first String before whitespace.","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"    public static String getFirstArgument(String message) {","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"        return message.split(WHITESPACE_REGEX)[0];","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in a String and returns a String of everything after the first string and trailing whitespace.","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"     * @param message String to have first String extracted out.","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"     * @return Everything after the first string and trailing whitespace","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"    public static String removeFirstArgument(String message) {","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"        String[] userInputSplit \u003d splitWhitespace(message);","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"        return message.replaceAll(String.format(FIRST_ARGUMENT_REGEX, userInputSplit), \"\");","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in a user input and split String. Splits the user input based on the \u003ccode\u003esplit\u003c/code\u003e String","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"SeanRobertDH"},"content":"     * along with any whitespace before and after the split. returns the split Array.","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"SeanRobertDH"},"content":"     * @param userInput String to be split.","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"SeanRobertDH"},"content":"     * @param split What to use to split user input String.","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"SeanRobertDH"},"content":"     * @return Array of Strings that have been split bu the \u003ccode\u003esplit\u003c/code\u003e string including whitespace.","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"SeanRobertDH"},"content":"    public static String[] splitOnArgument(String userInput, String split){","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"SeanRobertDH"},"content":"        return userInput.split(WHITESPACE_REGEX + split + WHITESPACE_REGEX);","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"SeanRobertDH":59}},{"path":"src/main/java/duke/Utility.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * General Class for utility functions","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"public class Utility {","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String INTEGER_REGEX \u003d \"\\\\d+$\";","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"     * Checks that String is an Integer","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"     * @param message String to be checked.","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"     * @return Boolean on whether the String is an Integer.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    public static boolean isInteger(String message){","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"        return message.matches(INTEGER_REGEX);","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"SeanRobertDH":17}},{"path":"src/main/java/duke/command/Bye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.command;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"public class Bye extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"    static final String NAME \u003d \"bye\";","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String USAGE \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    Bye(String argument) {","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"        super(NAME, USAGE, argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"    boolean isValid(){","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"        return argument.length() \u003d\u003d 0;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"    boolean execute() {","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"        return false;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"SeanRobertDH":19}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.command;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * Abstract Class to represent a Command.","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003ename\u003c/code\u003e corresponds to name of command.","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eusage\u003c/code\u003e corresponds to the mesasge that would be appended to \u003ccode\u003ename\u003c/code\u003e when displaying proper usage.","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eargument\u003c/code\u003e corresponds to argument entered by user when using command.","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String USAGE_MESSAGE \u003d \"Wrong argument(s). Usage: \";","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"    private final String name;","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"    private final String usage;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    final String argument;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    Command(String name, String usage, String argument){","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"        this.usage \u003d usage;","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"        this.argument \u003d argument;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"     * Returns usage message","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"     * @return the usage message followed by the name of te command and anything to be appended after in \u003ccode\u003eusage\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"    String getUsage() {","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"        return USAGE_MESSAGE + name + usage;","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"    public String toString(){","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"        return name;","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"     * Returns boolean on whether the command argument is valid","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"     * @return boolean command is valid","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"    abstract boolean isValid();","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"     * code to be executed by function and returns a","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"     * boolean on whether the program should continue running.","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"     * @return boolean program should continue running","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"    abstract boolean execute();","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"SeanRobertDH":47}},{"path":"src/main/java/duke/command/CommandManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.command;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Message;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.Type;","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"public class CommandManager {","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String UNKNOWN_COMMAND_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"    private static Command getCommand(String commandString, String argumentString) throws InvalidCommandException {","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"        switch (commandString.toLowerCase()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"        case Bye.NAME:","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"            return new Bye(argumentString);","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"        case List.NAME:","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"            return new List(argumentString);","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"        case Done.NAME:","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"            return new Done(argumentString);","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"        case Delete.NAME:","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"            return new Delete(argumentString);","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"        case Find.NAME:","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"            return new Find(argumentString);","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"        default:","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"            throw new InvalidCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"    public static boolean handleCommand(String userInput) {","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"        if (userInput.matches(Type.getTaskTypesRegex())) {","lastModifiedDate":"2021-09-28"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"            TaskManager.newTask(userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"            return true;","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"        String commandString \u003d Parser.getFirstArgument(userInput);","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"        String argumentString \u003d Parser.removeFirstArgument(userInput);","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"        try {","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"            Command command \u003d getCommand(commandString, argumentString);","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"            if (!command.isValid()) {","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"                throw new InvalidCommandException(command.getUsage());","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"            return command.execute();","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"                InvalidCommandException ive) {","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(ive.getMessage());","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"        return true;","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"SeanRobertDH":49}},{"path":"src/main/java/duke/command/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.command;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Utility;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"public class Delete extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    static final String NAME \u003d \"delete\";","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String USAGE \u003d \" \u003ctask number\u003e\";","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    Delete(String argument) {","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"        super(NAME, USAGE, argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    boolean isValid(){","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"        return Utility.isInteger(argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    boolean execute() {","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"        int index \u003d Integer.parseInt(argument) - 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"        TaskManager.deleteTask(index);","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"        return true;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"SeanRobertDH":24}},{"path":"src/main/java/duke/command/Done.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.command;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Utility;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"public class Done extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    static final String NAME \u003d \"done\";","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String USAGE \u003d \" \u003ctask number\u003e\";","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    Done(String argument) {","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"        super(NAME, USAGE, argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    boolean isValid(){","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"        return Utility.isInteger(argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    boolean execute(){","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"        int index \u003d Integer.parseInt(argument) - 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"        TaskManager.taskDone(index);","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"        return true;","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"SeanRobertDH":24}},{"path":"src/main/java/duke/command/Find.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.command;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"public class Find extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    static final String NAME \u003d \"find\";","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String USAGE \u003d \" \u003cDescription\u003e\";","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    Find(String argument) {","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"        super(NAME, USAGE, argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    boolean isValid(){","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"        return argument.length() !\u003d 0;","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    boolean execute() {","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"        TaskManager.findTasks(argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"        return true;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"SeanRobertDH":23}},{"path":"src/main/java/duke/command/List.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.command;","lastModifiedDate":"2021-09-28"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"public class List extends Command {","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"    static final String NAME \u003d \"list\";","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String USAGE \u003d \"\";","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    List(String argument) {","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"        super(NAME, USAGE, argument);","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"    boolean isValid(){","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"        return argument.length() \u003d\u003d 0;","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"    boolean execute() {","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"        TaskManager.printTasks();","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"        return true;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"SeanRobertDH":22}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":" * Exception to be thrown when the command entered by a user is invalid.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"public class InvalidCommandException extends Exception{","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"    public InvalidCommandException(String message){","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"        super(message);","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"SeanRobertDH":10}},{"path":"src/main/java/duke/exception/ListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":" * Exception to be thrown when attempting to print tasks from an empty list.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"public class ListEmptyException extends Exception{","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"    private static String MESSAGE \u003d \"List is empty!\";","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"    public ListEmptyException(){","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"        super(MESSAGE);","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"SeanRobertDH":12}},{"path":"src/main/java/duke/exception/LoadTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":" * Exception to be thrown when Loading an invalid task from save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"public class LoadTaskException extends Exception{","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    public LoadTaskException(){","lastModifiedDate":"2021-09-27"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"        super();","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"SeanRobertDH":11}},{"path":"src/main/java/duke/exception/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":" * Exception to be thrown when attempting to add a task that has no description.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"public class NoDescriptionException extends Exception{","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String MESSAGE \u003d \"The description of %s cannot be empty!\";","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String WHITESPACE_AFTER_COMMAND_REGEX \u003d \"\\\\s+$\";","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in user input and strips it to the command to be inserted","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"     * into the exception message and be printed back to user.","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"     * @param userInput Message that was entered by user.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    public NoDescriptionException(String userInput){","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"        super(String.format(MESSAGE, userInput.replaceAll(WHITESPACE_AFTER_COMMAND_REGEX, \"\")));","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"SeanRobertDH":18}},{"path":"src/main/java/duke/exception/WrongNumberOfArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.exception;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.task.Type;","lastModifiedDate":"2021-09-27"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-27"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":" * Exception to be thrown when attempting to add a timed","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":" * task (deadline / event) that is formatted incorrectly.","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"public class WrongNumberOfArgumentsException extends Exception {","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    private final static String MESSAGE \u003d \"Wrong arguments. Usage: %s \u003caction\u003e /%s \u003cdatetime\u003e\";","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"     * Takes in a task type to print the proper usage of","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"     * the command for the corresponding timed task.","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"     * @param type Task type that user used wrong arguments for.","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    public WrongNumberOfArgumentsException(Type type) {","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"        super(String.format(MESSAGE, type, type.PREPOSITION));","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"SeanRobertDH":20}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.task;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":" * Represents a Deadline task.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eType\u003c/code\u003e enum corresponds to respective class.","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"class Deadline extends TimedTask {","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    private static final Type type \u003d Type.DEADLINE;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"     * Deadline constructor with \u003ccode\u003eisDone\u003c/code\u003e set to \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"     * @param dateTime String that describes the dateTime of the task.","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"    Deadline(String description, String dateTime) {","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"        super(description, dateTime, type);","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"     * Deadline constructor","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"     * @param isDone boolean to show whether task is completed.","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"     * @param dateTime String that descripes the dateTime of the task.","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"    Deadline(boolean isDone, String description, String dateTime) {","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"        super(isDone, description, dateTime, type);","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"SeanRobertDH":29}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.task;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":" * Represents an Event task.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eType\u003c/code\u003e enum corresponds to respective class.","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"class Event extends TimedTask {","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    private static final Type type \u003d Type.EVENT;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"     * Event constructor with \u003ccode\u003eisDone\u003c/code\u003e set to \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"     * @param dateTime String that describes the dateTime of the task.","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"    Event(String description, String dateTime) {","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"        super(description, dateTime, type);","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"     * Event constructor","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"     * @param isDone boolean to show whether task is completed.","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"     * @param dateTime String that descripes the dateTime of the task.","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"    Event(boolean isDone, String description, String dateTime) {","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"        super(isDone, description, dateTime, type);","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"SeanRobertDH":29}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.task;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Message;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":" * Abstract class to represent a task,","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eisDone\u003c/code\u003e boolean corresponds to whether the task is done.","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003edescription\u003c/code\u003e String corresponds to the task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003etype\u003c/code\u003e enum corresponds to respective class.","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"public class Task {","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"    private String description;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    final Type type;","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String MARK_AS_DONE_STRING \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-09-27"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String TO_STRING_REGEX \u003d \"[%c][%c] %s\";","lastModifiedDate":"2021-09-27"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String SAVE_FILE_FORMAT \u003d \"%c|%d|%s\";","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"    private static final char IS_DONE_CHAR \u003d \u0027X\u0027;","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"    private static final char IS_NOT_DONE_CHAR \u003d \u0027 \u0027;","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"     * Task constructor with \u003ccode\u003eisDone\u003c/code\u003e set to \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"     * @param type enum that corresponds to task","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"    Task(String description, Type type) {","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"     * Task constructor","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"     * @param isDone boolean to show whether task is completed.","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"     * @param type enum that corresponds to task","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"    Task(boolean isDone, String description, Type type) {","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"SeanRobertDH"},"content":"    String getDescription() {","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"SeanRobertDH"},"content":"        return description;","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"SeanRobertDH"},"content":"    private char getIsDoneChar() {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"SeanRobertDH"},"content":"        return isDone ? IS_DONE_CHAR : IS_NOT_DONE_CHAR;","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"SeanRobertDH"},"content":"     * set the \u003ccode\u003eisDone\u003c/code\u003e boolean value of the task to \u003ccode\u003etrue\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":58,"author":{"gitId":"SeanRobertDH"},"content":"     * and print the task done message.","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"SeanRobertDH"},"content":"    void markAsDone() {","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"SeanRobertDH"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"SeanRobertDH"},"content":"        Message.printWithSpacers(MARK_AS_DONE_STRING + this);","lastModifiedDate":"2021-09-27"},{"lineNumber":63,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"SeanRobertDH"},"content":"     * get the string for printing in the specified format of \u003ccode\u003eTO_STRING_REGEX\u003c/code\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"SeanRobertDH"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"SeanRobertDH"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"SeanRobertDH"},"content":"        return String.format(TO_STRING_REGEX, type.getChar(), getIsDoneChar(), description);","lastModifiedDate":"2021-09-27"},{"lineNumber":72,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":75,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":76,"author":{"gitId":"SeanRobertDH"},"content":"     * get the formatted string to be used in the save file in","lastModifiedDate":"2021-09-28"},{"lineNumber":77,"author":{"gitId":"SeanRobertDH"},"content":"     * the specified format of \u003ccode\u003eSAVE_FILE_FORMAT\u003c/code\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"SeanRobertDH"},"content":"    String getFormattedString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"SeanRobertDH"},"content":"        return String.format(SAVE_FILE_FORMAT, type.getChar(), isDone ? 1 : 0, description);","lastModifiedDate":"2021-09-27"},{"lineNumber":81,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"SeanRobertDH":83}},{"path":"src/main/java/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.task;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Message;","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import duke.IoManager;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"import duke.exception.LoadTaskException;","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"import duke.exception.ListEmptyException;","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"import duke.exception.NoDescriptionException;","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"import duke.exception.WrongNumberOfArgumentsException;","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":" * Manages tasks that are created in an ArrayList of \u003ccode\u003etasks\u003c/code\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":" * and provides functionality such as create, read and delete.","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"    public static final int MAX_TASKS \u003d 100;","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"    private static final String ARRAY_OUT_OF_BOUNDS_EXCEPTION_MESSAGE \u003d \"That number does not correspond to any task!\";","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String TASK_MODIFIED_MESSAGE \u003d \"%s\\nNow you have %d tasks in the list.\";","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String TASK_CREATED_MESSAGE \u003d \"Got it, I\u0027ve added this task:\\n\";","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String TASK_DELETED_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String PRINT_INDIVIDUAL_TASK_REGEX \u003d \"%d.%s\\n\";","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String FOUND_TASKS_MESSAGE \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-09-28"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(MAX_TASKS);","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"     * A class to be passed into a function to allow lambda code to be executed","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"    private interface Lambda {","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"        void execute();","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"     * A function that is used by both \u003ccode\u003etaskDone()\u003c/code\u003e and \u003ccode\u003edeleteTask()\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"     * \u003ccode\u003elambda.execute()\u003c/code\u003e is replaced by the lambda function that is passed","lastModifiedDate":"2021-09-28"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"     * into the \u003ccode\u003erun()\u003c/code\u003e function.","lastModifiedDate":"2021-09-28"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"     * @param id index of the task that is to be modified.","lastModifiedDate":"2021-09-28"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"    //This allows both functions to \u0027share code\u0027 preventing errors","lastModifiedDate":"2021-09-28"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"    // where one function code was modified but the other was forgotten.","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"    private static class runTasks {","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"        private final int id;","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"SeanRobertDH"},"content":"        private runTasks(int id) {","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"SeanRobertDH"},"content":"            this.id \u003d id;","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"SeanRobertDH"},"content":"        private void run(Lambda lambda) {","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"SeanRobertDH"},"content":"            try {","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"SeanRobertDH"},"content":"                if (id \u003e tasks.size() - 1) {","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"SeanRobertDH"},"content":"                    throw new ArrayIndexOutOfBoundsException(ARRAY_OUT_OF_BOUNDS_EXCEPTION_MESSAGE);","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"SeanRobertDH"},"content":"                }","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"SeanRobertDH"},"content":"                //replaced function","lastModifiedDate":"2021-09-28"},{"lineNumber":59,"author":{"gitId":"SeanRobertDH"},"content":"                lambda.execute();","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"SeanRobertDH"},"content":"                saveTasks();","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"SeanRobertDH"},"content":"            } catch (ArrayIndexOutOfBoundsException aiobe) {","lastModifiedDate":"2021-09-10"},{"lineNumber":62,"author":{"gitId":"SeanRobertDH"},"content":"                Message.printWithSpacers(aiobe.getMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":63,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":64,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"SeanRobertDH"},"content":"     * Marks the task indicated by \u003ccode\u003eid\u003c/code\u003e as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"SeanRobertDH"},"content":"     * @param id index of the task that is to be marked as done.","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"SeanRobertDH"},"content":"    public static void taskDone(int id) {","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"SeanRobertDH"},"content":"        new runTasks(id)","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"SeanRobertDH"},"content":"                .run(() -\u003e tasks.get(id).markAsDone());","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":78,"author":{"gitId":"SeanRobertDH"},"content":"     * Deletes the task indicated by \u003ccode\u003eid\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"SeanRobertDH"},"content":"     * @param id index of the task that is to be deleted.","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"SeanRobertDH"},"content":"    public static void deleteTask(int id) {","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"SeanRobertDH"},"content":"        new runTasks(id)","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"SeanRobertDH"},"content":"                .run(() -\u003e printTaskDeleted(tasks.remove(id)));","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":87,"author":{"gitId":"SeanRobertDH"},"content":"     * Gets the task type based off of the first string in user input.","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"SeanRobertDH"},"content":"     * @param userInput user input of user to console","lastModifiedDate":"2021-09-28"},{"lineNumber":89,"author":{"gitId":"SeanRobertDH"},"content":"     * @return Task type entered by user","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":91,"author":{"gitId":"SeanRobertDH"},"content":"    private static Type getTaskTypeFromUserInput(String userInput) {","lastModifiedDate":"2021-09-28"},{"lineNumber":92,"author":{"gitId":"SeanRobertDH"},"content":"        String commandString \u003d Parser.getFirstArgument(userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":93,"author":{"gitId":"SeanRobertDH"},"content":"        return Type.valueOf(commandString.toUpperCase());","lastModifiedDate":"2021-09-27"},{"lineNumber":94,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":95,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":96,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":97,"author":{"gitId":"SeanRobertDH"},"content":"     * Gets the arguments (strings after the first argument) entered by user.","lastModifiedDate":"2021-09-28"},{"lineNumber":98,"author":{"gitId":"SeanRobertDH"},"content":"     * @param userInput user input of user to console","lastModifiedDate":"2021-09-28"},{"lineNumber":99,"author":{"gitId":"SeanRobertDH"},"content":"     * @return Arguments after first command and trailing whitespace","lastModifiedDate":"2021-09-28"},{"lineNumber":100,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":101,"author":{"gitId":"SeanRobertDH"},"content":"    private static String getCommandArguments(String userInput) throws NoDescriptionException {","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"SeanRobertDH"},"content":"        String arguments \u003d Parser.removeFirstArgument(userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"SeanRobertDH"},"content":"        if (arguments.length() \u003d\u003d 0) {","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"SeanRobertDH"},"content":"            throw new NoDescriptionException(userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":106,"author":{"gitId":"SeanRobertDH"},"content":"        //Removes command from userInput.","lastModifiedDate":"2021-09-27"},{"lineNumber":107,"author":{"gitId":"SeanRobertDH"},"content":"        return arguments;","lastModifiedDate":"2021-09-27"},{"lineNumber":108,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":111,"author":{"gitId":"SeanRobertDH"},"content":"     * User input handler for creation of new tasks.","lastModifiedDate":"2021-09-28"},{"lineNumber":112,"author":{"gitId":"SeanRobertDH"},"content":"     * Gets the user input, passes it to the appropriate functions for parsing","lastModifiedDate":"2021-09-28"},{"lineNumber":113,"author":{"gitId":"SeanRobertDH"},"content":"     * and calls the appropriate function to insert new task, \u003ccode\u003eTodo()\u003c/code\u003e","lastModifiedDate":"2021-09-28"},{"lineNumber":114,"author":{"gitId":"SeanRobertDH"},"content":"     * constructor for todo and \u003ccode\u003enewTimedTask()\u003c/code\u003e for creating a timed task","lastModifiedDate":"2021-09-28"},{"lineNumber":115,"author":{"gitId":"SeanRobertDH"},"content":"     * (deadline or event).","lastModifiedDate":"2021-09-28"},{"lineNumber":116,"author":{"gitId":"SeanRobertDH"},"content":"     * Prints the new task created and finally saves the tasks.","lastModifiedDate":"2021-09-28"},{"lineNumber":117,"author":{"gitId":"SeanRobertDH"},"content":"     * @param userInput user input of user to console","lastModifiedDate":"2021-09-28"},{"lineNumber":118,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":119,"author":{"gitId":"SeanRobertDH"},"content":"    public static void newTask(String userInput) {","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"SeanRobertDH"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"SeanRobertDH"},"content":"            Type command \u003d getTaskTypeFromUserInput(userInput);","lastModifiedDate":"2021-09-28"},{"lineNumber":122,"author":{"gitId":"SeanRobertDH"},"content":"            userInput \u003d getCommandArguments(userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":123,"author":{"gitId":"SeanRobertDH"},"content":"            Task createdTask;","lastModifiedDate":"2021-09-27"},{"lineNumber":124,"author":{"gitId":"SeanRobertDH"},"content":"            if (command \u003d\u003d Type.TODO) {","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"SeanRobertDH"},"content":"                createdTask \u003d new Todo(userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":126,"author":{"gitId":"SeanRobertDH"},"content":"            } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":127,"author":{"gitId":"SeanRobertDH"},"content":"                createdTask \u003d TimedTask.newTimedTask(command, userInput);","lastModifiedDate":"2021-09-27"},{"lineNumber":128,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"SeanRobertDH"},"content":"            tasks.add(createdTask);","lastModifiedDate":"2021-09-27"},{"lineNumber":130,"author":{"gitId":"SeanRobertDH"},"content":"            printTaskCreated(createdTask);","lastModifiedDate":"2021-09-27"},{"lineNumber":131,"author":{"gitId":"SeanRobertDH"},"content":"            saveTasks();","lastModifiedDate":"2021-09-14"},{"lineNumber":132,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (NoDescriptionException nde) {","lastModifiedDate":"2021-09-10"},{"lineNumber":133,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(nde.getMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":134,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (WrongNumberOfArgumentsException wnoae) {","lastModifiedDate":"2021-09-10"},{"lineNumber":135,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(wnoae.getMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":136,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":137,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":138,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":139,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":140,"author":{"gitId":"SeanRobertDH"},"content":"     * Gets the task type based off the loaded file from the save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":141,"author":{"gitId":"SeanRobertDH"},"content":"     * @param loadedTaskSplit a single loaded task that has been split by the separator used in save file.","lastModifiedDate":"2021-09-28"},{"lineNumber":142,"author":{"gitId":"SeanRobertDH"},"content":"     * @return Task type in save file for respective task.","lastModifiedDate":"2021-09-28"},{"lineNumber":143,"author":{"gitId":"SeanRobertDH"},"content":"     * @throws LoadTaskException If task type invalid or there are the wrong number of arguments.","lastModifiedDate":"2021-09-28"},{"lineNumber":144,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":145,"author":{"gitId":"SeanRobertDH"},"content":"    private static Type getTaskTypeFromLoadedTask(String[] loadedTaskSplit) throws LoadTaskException {","lastModifiedDate":"2021-09-27"},{"lineNumber":146,"author":{"gitId":"SeanRobertDH"},"content":"        Type taskType \u003d Type.getType(loadedTaskSplit[0]);","lastModifiedDate":"2021-09-27"},{"lineNumber":147,"author":{"gitId":"SeanRobertDH"},"content":"        boolean isInvalidTask \u003d taskType \u003d\u003d null;","lastModifiedDate":"2021-09-27"},{"lineNumber":148,"author":{"gitId":"SeanRobertDH"},"content":"        boolean hasWrongNumberOfArguments  \u003d taskType.NUMBER_OF_ARGUMENTS !\u003d loadedTaskSplit.length - 1;","lastModifiedDate":"2021-09-28"},{"lineNumber":149,"author":{"gitId":"SeanRobertDH"},"content":"        if (isInvalidTask || hasWrongNumberOfArguments) {","lastModifiedDate":"2021-09-27"},{"lineNumber":150,"author":{"gitId":"SeanRobertDH"},"content":"            throw new LoadTaskException();","lastModifiedDate":"2021-09-27"},{"lineNumber":151,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":152,"author":{"gitId":"SeanRobertDH"},"content":"        return taskType;","lastModifiedDate":"2021-09-25"},{"lineNumber":153,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":154,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":156,"author":{"gitId":"SeanRobertDH"},"content":"     * For all the tasks in the safe file, function split them and pass them into","lastModifiedDate":"2021-09-28"},{"lineNumber":157,"author":{"gitId":"SeanRobertDH"},"content":"     * \u003ccode\u003egetTaskTypeFromLoadedTask()\u003c/code\u003e to get task type.","lastModifiedDate":"2021-09-28"},{"lineNumber":158,"author":{"gitId":"SeanRobertDH"},"content":"     * With task type, it will add the respective task to \u003ccode\u003etasks\u003c/code\u003e ArrayList.","lastModifiedDate":"2021-09-28"},{"lineNumber":159,"author":{"gitId":"SeanRobertDH"},"content":"     * @throws IllegalArgumentException If \u003ccode\u003eparseInt()\u003c/code\u003e fails.","lastModifiedDate":"2021-09-28"},{"lineNumber":160,"author":{"gitId":"SeanRobertDH"},"content":"     * @throws FileNotFoundException throws from \u003ccode\u003eloadFile()\u003c/code\u003e function.","lastModifiedDate":"2021-09-28"},{"lineNumber":161,"author":{"gitId":"SeanRobertDH"},"content":"     * @throws LoadTaskException throws from \u003ccode\u003egetTaskTypeFromLoadedTask()\u003c/code\u003e function.","lastModifiedDate":"2021-09-28"},{"lineNumber":162,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":163,"author":{"gitId":"SeanRobertDH"},"content":"    public static void loadTasks() throws IllegalArgumentException, FileNotFoundException, LoadTaskException {","lastModifiedDate":"2021-09-27"},{"lineNumber":164,"author":{"gitId":"SeanRobertDH"},"content":"        for (String loadedTask : IoManager.loadFile()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":165,"author":{"gitId":"SeanRobertDH"},"content":"            String[] loadedTaskSplit \u003d Parser.splitPipe(loadedTask);","lastModifiedDate":"2021-09-27"},{"lineNumber":166,"author":{"gitId":"SeanRobertDH"},"content":"            Type taskType \u003d getTaskTypeFromLoadedTask(loadedTaskSplit);","lastModifiedDate":"2021-09-27"},{"lineNumber":167,"author":{"gitId":"SeanRobertDH"},"content":"            boolean isDone \u003d Integer.parseInt(loadedTaskSplit[1]) \u003d\u003d 1;","lastModifiedDate":"2021-09-25"},{"lineNumber":168,"author":{"gitId":"SeanRobertDH"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-13"},{"lineNumber":169,"author":{"gitId":"SeanRobertDH"},"content":"            case DEADLINE:","lastModifiedDate":"2021-09-13"},{"lineNumber":170,"author":{"gitId":"SeanRobertDH"},"content":"                tasks.add(new Deadline(isDone, loadedTaskSplit[2], loadedTaskSplit[3]));","lastModifiedDate":"2021-09-25"},{"lineNumber":171,"author":{"gitId":"SeanRobertDH"},"content":"                break;","lastModifiedDate":"2021-09-13"},{"lineNumber":172,"author":{"gitId":"SeanRobertDH"},"content":"            case EVENT:","lastModifiedDate":"2021-09-13"},{"lineNumber":173,"author":{"gitId":"SeanRobertDH"},"content":"                tasks.add(new Event(isDone, loadedTaskSplit[2], loadedTaskSplit[3]));","lastModifiedDate":"2021-09-25"},{"lineNumber":174,"author":{"gitId":"SeanRobertDH"},"content":"                break;","lastModifiedDate":"2021-09-13"},{"lineNumber":175,"author":{"gitId":"SeanRobertDH"},"content":"            case TODO:","lastModifiedDate":"2021-09-13"},{"lineNumber":176,"author":{"gitId":"SeanRobertDH"},"content":"                tasks.add(new Todo(isDone, loadedTaskSplit[2]));","lastModifiedDate":"2021-09-25"},{"lineNumber":177,"author":{"gitId":"SeanRobertDH"},"content":"                break;","lastModifiedDate":"2021-09-13"},{"lineNumber":178,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":179,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":180,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":181,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":182,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":183,"author":{"gitId":"SeanRobertDH"},"content":"     * Creates the string to b written to save file","lastModifiedDate":"2021-09-28"},{"lineNumber":184,"author":{"gitId":"SeanRobertDH"},"content":"     * to save all modified tasks.","lastModifiedDate":"2021-09-28"},{"lineNumber":185,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":186,"author":{"gitId":"SeanRobertDH"},"content":"    public static void saveTasks() {","lastModifiedDate":"2021-09-13"},{"lineNumber":187,"author":{"gitId":"SeanRobertDH"},"content":"        String message \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":188,"author":{"gitId":"SeanRobertDH"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-09-13"},{"lineNumber":189,"author":{"gitId":"SeanRobertDH"},"content":"            message +\u003d task.getFormattedString() + \u0027\\n\u0027;","lastModifiedDate":"2021-09-13"},{"lineNumber":190,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":191,"author":{"gitId":"SeanRobertDH"},"content":"        IoManager.overwriteFile(message);","lastModifiedDate":"2021-09-13"},{"lineNumber":192,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":193,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":194,"author":{"gitId":"SeanRobertDH"},"content":"    private static String getTaskModifiedString(Task task) {","lastModifiedDate":"2021-09-13"},{"lineNumber":195,"author":{"gitId":"SeanRobertDH"},"content":"        return String.format(TASK_MODIFIED_MESSAGE, task, tasks.size());","lastModifiedDate":"2021-09-28"},{"lineNumber":196,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":197,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":198,"author":{"gitId":"SeanRobertDH"},"content":"    private static void printTaskCreated(Task task) {","lastModifiedDate":"2021-09-27"},{"lineNumber":199,"author":{"gitId":"SeanRobertDH"},"content":"        Message.printWithSpacers(TASK_CREATED_MESSAGE + getTaskModifiedString(task));","lastModifiedDate":"2021-09-28"},{"lineNumber":200,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":201,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":202,"author":{"gitId":"SeanRobertDH"},"content":"    private static void printTaskDeleted(Task task) {","lastModifiedDate":"2021-09-13"},{"lineNumber":203,"author":{"gitId":"SeanRobertDH"},"content":"        Message.printWithSpacers(TASK_DELETED_MESSAGE + getTaskModifiedString(task));","lastModifiedDate":"2021-09-28"},{"lineNumber":204,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":205,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":206,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":207,"author":{"gitId":"SeanRobertDH"},"content":"     * prints all current tasks in \u003ccode\u003etasks\u003c/code\u003e ArrayList","lastModifiedDate":"2021-09-28"},{"lineNumber":208,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":209,"author":{"gitId":"SeanRobertDH"},"content":"    public static void printTasks() {","lastModifiedDate":"2021-08-29"},{"lineNumber":210,"author":{"gitId":"SeanRobertDH"},"content":"        printTasks(\"\", tasks);","lastModifiedDate":"2021-09-26"},{"lineNumber":211,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":212,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":213,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":214,"author":{"gitId":"SeanRobertDH"},"content":"     * prints all current tasks in \u003ccode\u003etasksToPrint\u003c/code\u003e ArrayList","lastModifiedDate":"2021-09-28"},{"lineNumber":215,"author":{"gitId":"SeanRobertDH"},"content":"     * with \u003ccode\u003emessage\u003c/code\u003e appended in front.","lastModifiedDate":"2021-09-28"},{"lineNumber":216,"author":{"gitId":"SeanRobertDH"},"content":"     * @param message message to be appended in front of tasks to be printed.","lastModifiedDate":"2021-09-28"},{"lineNumber":217,"author":{"gitId":"SeanRobertDH"},"content":"     * @param tasksToPrint ArrayList of tasks to be printed.","lastModifiedDate":"2021-09-28"},{"lineNumber":218,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":219,"author":{"gitId":"SeanRobertDH"},"content":"    public static void printTasks(String message, ArrayList\u003cTask\u003e tasksToPrint) {","lastModifiedDate":"2021-09-26"},{"lineNumber":220,"author":{"gitId":"SeanRobertDH"},"content":"        try {","lastModifiedDate":"2021-09-10"},{"lineNumber":221,"author":{"gitId":"SeanRobertDH"},"content":"            if (tasksToPrint.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-26"},{"lineNumber":222,"author":{"gitId":"SeanRobertDH"},"content":"                throw new ListEmptyException();","lastModifiedDate":"2021-09-10"},{"lineNumber":223,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-09-10"},{"lineNumber":224,"author":{"gitId":"SeanRobertDH"},"content":"            int count \u003d 1;","lastModifiedDate":"2021-08-29"},{"lineNumber":225,"author":{"gitId":"SeanRobertDH"},"content":"            for (Task task : tasksToPrint) {","lastModifiedDate":"2021-09-26"},{"lineNumber":226,"author":{"gitId":"SeanRobertDH"},"content":"                message +\u003d String.format(PRINT_INDIVIDUAL_TASK_REGEX, count++, task);","lastModifiedDate":"2021-09-28"},{"lineNumber":227,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":228,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":229,"author":{"gitId":"SeanRobertDH"},"content":"        } catch (ListEmptyException lee) {","lastModifiedDate":"2021-09-10"},{"lineNumber":230,"author":{"gitId":"SeanRobertDH"},"content":"            Message.printWithSpacers(lee.getMessage());","lastModifiedDate":"2021-09-10"},{"lineNumber":231,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":232,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":233,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":234,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":235,"author":{"gitId":"SeanRobertDH"},"content":"     * prints tasks found to have the description","lastModifiedDate":"2021-09-28"},{"lineNumber":236,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description description of tasks to be printed from \u003ccode\u003etasks\u003c/code\u003e ArrayList.","lastModifiedDate":"2021-09-28"},{"lineNumber":237,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":238,"author":{"gitId":"SeanRobertDH"},"content":"    public static void findTasks(String description) {","lastModifiedDate":"2021-09-26"},{"lineNumber":239,"author":{"gitId":"SeanRobertDH"},"content":"        ArrayList\u003cTask\u003e tasksToPrint \u003d new ArrayList\u003c\u003e(MAX_TASKS);","lastModifiedDate":"2021-09-26"},{"lineNumber":240,"author":{"gitId":"SeanRobertDH"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-09-26"},{"lineNumber":241,"author":{"gitId":"SeanRobertDH"},"content":"            if (task.getDescription().contains(description)) {","lastModifiedDate":"2021-09-26"},{"lineNumber":242,"author":{"gitId":"SeanRobertDH"},"content":"                tasksToPrint.add(task);","lastModifiedDate":"2021-09-26"},{"lineNumber":243,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":244,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":245,"author":{"gitId":"SeanRobertDH"},"content":"        printTasks(FOUND_TASKS_MESSAGE, tasksToPrint);","lastModifiedDate":"2021-09-28"},{"lineNumber":246,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-26"},{"lineNumber":247,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":248,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"SeanRobertDH":248}},{"path":"src/main/java/duke/task/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.task;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"import duke.Parser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":"import duke.exception.WrongNumberOfArgumentsException;","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":" * Abstract class to represent a timed task (deadline or event).","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eisDone\u003c/code\u003e boolean corresponds to whether the task is done.","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003edescription\u003c/code\u003e String corresponds to the task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003edateTime\u003c/code\u003e String corresponds to datetime specifications of task.","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003etype\u003c/code\u003e enum corresponds to respective class.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"abstract class TimedTask extends Task {","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"    public static final String PRINT_TASK_REGEX_FORMAT \u003d \"%s (%s: %s)\";","lastModifiedDate":"2021-09-28"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    public static final char PREPOSITION_PREFIX \u003d \u0027/\u0027;","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"    public static final char SAVE_FILE_SEPARATOR \u003d \u0027|\u0027;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    private String dateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"     * TimedTask constructor with \u003ccode\u003eisDone\u003c/code\u003e set to \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"     * @param dateTime String that descripes the dateTime of the task.","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"     * @param type enum that corresponds to task.","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"    TimedTask(String description, String dateTime, Type type) {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"        super(description, type);","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"     * TimedTask constructor.","lastModifiedDate":"2021-09-28"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"     * @param isDone boolean to show whether task is completed.","lastModifiedDate":"2021-09-28"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"     * @param dateTime String that descripes the dateTime of the task.","lastModifiedDate":"2021-09-28"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"     * @param type enum that corresponds to task.","lastModifiedDate":"2021-09-28"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"    TimedTask(boolean isDone, String description, String dateTime, Type type) {","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"        super(isDone, description, type);","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"     * Helper function to split the arguments.","lastModifiedDate":"2021-09-28"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"     * Uses the task type enum to get the preposition (by or at) to split the \u003ccode\u003eargumentString\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":48,"author":{"gitId":"SeanRobertDH"},"content":"     * @param taskType enum that corresponds to task.","lastModifiedDate":"2021-09-28"},{"lineNumber":49,"author":{"gitId":"SeanRobertDH"},"content":"     * @param argumentString argument to be split.","lastModifiedDate":"2021-09-28"},{"lineNumber":50,"author":{"gitId":"SeanRobertDH"},"content":"     * @throws WrongNumberOfArgumentsException if the number of argument !\u003d the number of arguments for the task.","lastModifiedDate":"2021-09-28"},{"lineNumber":51,"author":{"gitId":"SeanRobertDH"},"content":"     * @return arguments String array.","lastModifiedDate":"2021-09-28"},{"lineNumber":52,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":53,"author":{"gitId":"SeanRobertDH"},"content":"    private static String[] getArguments(Type taskType, String argumentString) throws WrongNumberOfArgumentsException {","lastModifiedDate":"2021-09-28"},{"lineNumber":54,"author":{"gitId":"SeanRobertDH"},"content":"        String[] arguments \u003d Parser.splitOnArgument(argumentString, PREPOSITION_PREFIX + taskType.PREPOSITION);","lastModifiedDate":"2021-09-28"},{"lineNumber":55,"author":{"gitId":"SeanRobertDH"},"content":"        // \u0027NUMBER_OF_ARGUMENTS - 1\u0027 because the first argument [deadline || event] is excluded.","lastModifiedDate":"2021-09-28"},{"lineNumber":56,"author":{"gitId":"SeanRobertDH"},"content":"        if (arguments.length !\u003d taskType.NUMBER_OF_ARGUMENTS - 1) {","lastModifiedDate":"2021-09-28"},{"lineNumber":57,"author":{"gitId":"SeanRobertDH"},"content":"            throw new WrongNumberOfArgumentsException(taskType);","lastModifiedDate":"2021-09-27"},{"lineNumber":58,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"SeanRobertDH"},"content":"        return arguments;","lastModifiedDate":"2021-09-28"},{"lineNumber":60,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":63,"author":{"gitId":"SeanRobertDH"},"content":"     * Creates and uses the task type enum to get the preposition","lastModifiedDate":"2021-09-28"},{"lineNumber":64,"author":{"gitId":"SeanRobertDH"},"content":"     * (by or at) to split the \u003ccode\u003eargumentString\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":65,"author":{"gitId":"SeanRobertDH"},"content":"     * @param taskType enum that corresponds to task","lastModifiedDate":"2021-09-28"},{"lineNumber":66,"author":{"gitId":"SeanRobertDH"},"content":"     * @param argumentString argument to be split","lastModifiedDate":"2021-09-28"},{"lineNumber":67,"author":{"gitId":"SeanRobertDH"},"content":"     * @return new TimedTask (deadline or event) created","lastModifiedDate":"2021-09-28"},{"lineNumber":68,"author":{"gitId":"SeanRobertDH"},"content":"     * @throws WrongNumberOfArgumentsException throws from \u003ccode\u003egetArguments()\u003c/code\u003e function.","lastModifiedDate":"2021-09-28"},{"lineNumber":69,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":70,"author":{"gitId":"SeanRobertDH"},"content":"    public static TimedTask newTimedTask(Type taskType, String argumentString) throws WrongNumberOfArgumentsException {","lastModifiedDate":"2021-09-28"},{"lineNumber":71,"author":{"gitId":"SeanRobertDH"},"content":"        String[] parsedInputs \u003d getArguments(taskType, argumentString);","lastModifiedDate":"2021-09-28"},{"lineNumber":72,"author":{"gitId":"SeanRobertDH"},"content":"        if (taskType \u003d\u003d Type.EVENT) {","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"SeanRobertDH"},"content":"            return new Event(parsedInputs[0], parsedInputs[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"SeanRobertDH"},"content":"        return new Deadline(parsedInputs[0], parsedInputs[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":79,"author":{"gitId":"SeanRobertDH"},"content":"     * adds the preposition and dateTime to","lastModifiedDate":"2021-09-28"},{"lineNumber":80,"author":{"gitId":"SeanRobertDH"},"content":"     * the \u003ccode\u003etoString()\u003c/code\u003e function in task.","lastModifiedDate":"2021-09-28"},{"lineNumber":81,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":82,"author":{"gitId":"SeanRobertDH"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"SeanRobertDH"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"SeanRobertDH"},"content":"        return String.format(PRINT_TASK_REGEX_FORMAT, super.toString(), type.PREPOSITION, dateTime);","lastModifiedDate":"2021-09-28"},{"lineNumber":85,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":88,"author":{"gitId":"SeanRobertDH"},"content":"     * adds the preposition and dateTime to the","lastModifiedDate":"2021-09-28"},{"lineNumber":89,"author":{"gitId":"SeanRobertDH"},"content":"     * \u003ccode\u003egetFormattedString()\u003c/code\u003e function in task.","lastModifiedDate":"2021-09-28"},{"lineNumber":90,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":91,"author":{"gitId":"SeanRobertDH"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"SeanRobertDH"},"content":"    String getFormattedString() {","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"SeanRobertDH"},"content":"        return super.getFormattedString() + SAVE_FILE_SEPARATOR + dateTime;","lastModifiedDate":"2021-09-28"},{"lineNumber":94,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"SeanRobertDH":96}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.task;","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":" * Represents a Todo task.","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eType\u003c/code\u003e enum corresponds to respective class.","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":"class Todo extends Task {","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":"    private static final Type type \u003d Type.TODO;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"     * Todo constructor with \u003ccode\u003eisDone\u003c/code\u003e set to \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2021-09-28"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    Todo(String description) {","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"        super(description, type);","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"     * Todo constructor","lastModifiedDate":"2021-09-28"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"     *","lastModifiedDate":"2021-09-28"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"     * @param isDone boolean to show whether task is completed.","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"     * @param description Task description.","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"    Todo(boolean isDone, String description) {","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"        super(isDone, description, type);","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"SeanRobertDH":27}},{"path":"src/main/java/duke/task/Type.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeanRobertDH"},"content":"package duke.task;","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"SeanRobertDH"},"content":"/**","lastModifiedDate":"2021-09-28"},{"lineNumber":4,"author":{"gitId":"SeanRobertDH"},"content":" * Enum to represent the different task types","lastModifiedDate":"2021-09-28"},{"lineNumber":5,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003eNUMBER_OF_ARGUMENTS\u003c/code\u003e int corresponds to number of arguments for respective task (including task itself).","lastModifiedDate":"2021-09-28"},{"lineNumber":6,"author":{"gitId":"SeanRobertDH"},"content":" * \u003ccode\u003ePREPOSITION\u003c/code\u003e String corresponds to preposition for TimedTasks (by or at).","lastModifiedDate":"2021-09-28"},{"lineNumber":7,"author":{"gitId":"SeanRobertDH"},"content":" */","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"SeanRobertDH"},"content":"public enum Type {","lastModifiedDate":"2021-09-27"},{"lineNumber":9,"author":{"gitId":"SeanRobertDH"},"content":"    DEADLINE(3, \"by\"),","lastModifiedDate":"2021-09-27"},{"lineNumber":10,"author":{"gitId":"SeanRobertDH"},"content":"    EVENT(3, \"at\"),","lastModifiedDate":"2021-09-27"},{"lineNumber":11,"author":{"gitId":"SeanRobertDH"},"content":"    TODO(2, \"\");","lastModifiedDate":"2021-09-27"},{"lineNumber":12,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":13,"author":{"gitId":"SeanRobertDH"},"content":"    public final int NUMBER_OF_ARGUMENTS;","lastModifiedDate":"2021-09-28"},{"lineNumber":14,"author":{"gitId":"SeanRobertDH"},"content":"    public final String PREPOSITION;","lastModifiedDate":"2021-09-27"},{"lineNumber":15,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"SeanRobertDH"},"content":"    Type(int numberOfArguments, String preposition){","lastModifiedDate":"2021-09-28"},{"lineNumber":17,"author":{"gitId":"SeanRobertDH"},"content":"        NUMBER_OF_ARGUMENTS \u003d numberOfArguments;","lastModifiedDate":"2021-09-28"},{"lineNumber":18,"author":{"gitId":"SeanRobertDH"},"content":"        PREPOSITION \u003d preposition;","lastModifiedDate":"2021-09-27"},{"lineNumber":19,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":20,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":21,"author":{"gitId":"SeanRobertDH"},"content":"    /**","lastModifiedDate":"2021-09-28"},{"lineNumber":22,"author":{"gitId":"SeanRobertDH"},"content":"     * Returns a regex that matches any of the task types regardless of case.","lastModifiedDate":"2021-09-28"},{"lineNumber":23,"author":{"gitId":"SeanRobertDH"},"content":"     * @return String regex that matches all task types.","lastModifiedDate":"2021-09-28"},{"lineNumber":24,"author":{"gitId":"SeanRobertDH"},"content":"     */","lastModifiedDate":"2021-09-28"},{"lineNumber":25,"author":{"gitId":"SeanRobertDH"},"content":"    public static String getTaskTypesRegex() {","lastModifiedDate":"2021-09-28"},{"lineNumber":26,"author":{"gitId":"SeanRobertDH"},"content":"        String regex \u003d \"(?i:\";","lastModifiedDate":"2021-09-27"},{"lineNumber":27,"author":{"gitId":"SeanRobertDH"},"content":"        for (Type type : Type.values()) {","lastModifiedDate":"2021-09-27"},{"lineNumber":28,"author":{"gitId":"SeanRobertDH"},"content":"            regex +\u003d type.toString() + \".*|\";","lastModifiedDate":"2021-09-27"},{"lineNumber":29,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":30,"author":{"gitId":"SeanRobertDH"},"content":"        return regex.substring(0, regex.length() - 1) + \u0027)\u0027;","lastModifiedDate":"2021-09-27"},{"lineNumber":31,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":32,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":33,"author":{"gitId":"SeanRobertDH"},"content":"    @Override","lastModifiedDate":"2021-09-27"},{"lineNumber":34,"author":{"gitId":"SeanRobertDH"},"content":"    public String toString() {","lastModifiedDate":"2021-09-27"},{"lineNumber":35,"author":{"gitId":"SeanRobertDH"},"content":"        return super.toString().toLowerCase();","lastModifiedDate":"2021-09-27"},{"lineNumber":36,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":37,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":38,"author":{"gitId":"SeanRobertDH"},"content":"    char getChar() {","lastModifiedDate":"2021-09-27"},{"lineNumber":39,"author":{"gitId":"SeanRobertDH"},"content":"        return super.toString().charAt(0);","lastModifiedDate":"2021-09-27"},{"lineNumber":40,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":41,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":42,"author":{"gitId":"SeanRobertDH"},"content":"    static Type getType(String task){","lastModifiedDate":"2021-09-27"},{"lineNumber":43,"author":{"gitId":"SeanRobertDH"},"content":"        if (task.length() \u003d\u003d 0){","lastModifiedDate":"2021-09-27"},{"lineNumber":44,"author":{"gitId":"SeanRobertDH"},"content":"            return null;","lastModifiedDate":"2021-09-27"},{"lineNumber":45,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":46,"author":{"gitId":"SeanRobertDH"},"content":"        for(Type type : values()){","lastModifiedDate":"2021-09-27"},{"lineNumber":47,"author":{"gitId":"SeanRobertDH"},"content":"            if(task.charAt(0) \u003d\u003d type.getChar()){","lastModifiedDate":"2021-09-27"},{"lineNumber":48,"author":{"gitId":"SeanRobertDH"},"content":"                return type;","lastModifiedDate":"2021-09-27"},{"lineNumber":49,"author":{"gitId":"SeanRobertDH"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":50,"author":{"gitId":"SeanRobertDH"},"content":"        }","lastModifiedDate":"2021-09-27"},{"lineNumber":51,"author":{"gitId":"SeanRobertDH"},"content":"        return null;","lastModifiedDate":"2021-09-27"},{"lineNumber":52,"author":{"gitId":"SeanRobertDH"},"content":"    }","lastModifiedDate":"2021-09-27"},{"lineNumber":53,"author":{"gitId":"SeanRobertDH"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":54,"author":{"gitId":"SeanRobertDH"},"content":"}","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"SeanRobertDH":54}}]
