[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owensoh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"owensoh"},"content":" * This represents the subclass Deadline under superclass Task in each element of Task[] list in Duke.java.","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"owensoh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"owensoh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"owensoh"},"content":"    protected String by;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"owensoh"},"content":"     * This function initialises the deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"owensoh"},"content":"     * @param description description input by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"owensoh"},"content":"     * @param by date to complete event by","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"owensoh"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"owensoh"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"owensoh"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"owensoh"},"content":"     * This function modifies the output format.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"owensoh"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"owensoh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"owensoh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"owensoh"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"owensoh"},"content":"    public String toFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"owensoh"},"content":"        return \"D\" + FILE_STRING_SEPARATOR + super.toFile() + FILE_STRING_SEPARATOR + by + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"owensoh"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"owensoh":31}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owensoh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"owensoh"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"owensoh"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"owensoh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"owensoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"owensoh"},"content":"import java.io.File;","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"owensoh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"owensoh"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"owensoh"},"content":" * This represents the Duke Chat bot.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"owensoh"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"owensoh"},"content":"    private static boolean isDukeDone \u003d false;","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"owensoh"},"content":"    private static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"owensoh"},"content":"    private final static String LINES \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"owensoh"},"content":"    private final static String TAB \u003d \"    \";","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"owensoh"},"content":"    private final static String GREETING \u003d TAB + \"Hello... I\u0027m Sadge Duke\\n    What can I do for you? :(\";","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"owensoh"},"content":"    private final static String GOODBYE \u003d TAB + \"Please don\u0027t go... I\u0027ll miss you...\";","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"owensoh"},"content":"    private final static String INVALID_GENERAL \u003d TAB + \"I\u0027m really sorry... This is an invalid input...\";","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"owensoh"},"content":"    private final static String INVALID_DONE \u003d TAB + \"I\u0027m sorry... This is an incorrect done input...\\n\"","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"owensoh"},"content":"            + TAB + \"Please use \u0027list\u0027 to see what number can be used...\";","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"owensoh"},"content":"    private final static String INVALID_DELETE \u003d TAB + \"Why would you delete a task... Your delete statement is an \"","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"owensoh"},"content":"            + \"incorrect input too...\";","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"owensoh"},"content":"    private final static String INVALID_TASK \u003d \"Your task is really weird... I don\u0027t think I like it...\";","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"owensoh"},"content":"    private final static String TODO \u003d \"todo\";","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"owensoh"},"content":"    private final static String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"owensoh"},"content":"    private final static String EVENT \u003d \"event\";","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"owensoh"},"content":"    private final static String FILE_PATH \u003d \"./data/tasks.txt\";","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"owensoh"},"content":"    private final static int DESCRIPTION \u003d 0;","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"owensoh"},"content":"    private final static int DATETIME \u003d 1;","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"owensoh"},"content":"    private final static int TASK_TYPE_INDEX \u003d 0;","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"owensoh"},"content":"    private final static int IS_DONE_INDEX \u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"owensoh"},"content":"    private final static int TASK_INDEX \u003d 2;","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"owensoh"},"content":"    private final static int BY_AT_INDEX \u003d 3;","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"owensoh"},"content":"     * Main function that is called upon program execution.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"owensoh"},"content":"     * @param args System Arguments added to program.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"owensoh"},"content":"        printWelcomeBanner();","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"owensoh"},"content":"        readSavedTasks();","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"owensoh"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"owensoh"},"content":"        while (!isDukeDone) {","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"owensoh"},"content":"            System.out.println(LINES);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"owensoh"},"content":"            String input \u003d in.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"owensoh"},"content":"            try {","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"owensoh"},"content":"                parseInput(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"owensoh"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"owensoh"},"content":"                System.out.println(INVALID_GENERAL);","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"owensoh"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"owensoh"},"content":"            System.out.println(LINES);","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":61,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":62,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"owensoh"},"content":"     * This function parses the input given by user and prints the appropriate response.","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"owensoh"},"content":"    private static void parseInput(String input) throws InvalidInputException {","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"owensoh"},"content":"        if (input.equalsIgnoreCase(\"Bye\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"owensoh"},"content":"            System.out.println(GOODBYE);","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"owensoh"},"content":"            setDukeDone();","lastModifiedDate":"2021-09-06"},{"lineNumber":71,"author":{"gitId":"owensoh"},"content":"        } else if (input.equalsIgnoreCase(\"List\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"owensoh"},"content":"            printList();","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"owensoh"},"content":"        } else if (isValidDoneInput(input)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"owensoh"},"content":"            handleDoneInput(input);","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"owensoh"},"content":"        } else if (isValidTodoInput(input)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"owensoh"},"content":"            addToList(input, TODO);","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"owensoh"},"content":"        } else if (isValidDeadlineInput(input)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"owensoh"},"content":"            addToList(input, DEADLINE);","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"owensoh"},"content":"        } else if (isValidEventInput(input)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":80,"author":{"gitId":"owensoh"},"content":"            addToList(input, EVENT);","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"owensoh"},"content":"        } else if (isValidDeleteInput(input)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"owensoh"},"content":"            handleDeleteInput(input);","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"owensoh"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"owensoh"},"content":"            throw new InvalidInputException();","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"owensoh"},"content":"     * This function adds the input description into list accordingly, based on its task type.","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"owensoh"},"content":"     * @param input    input given by the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"owensoh"},"content":"     * @param taskType task type identified beforehand (DEADLINE/EVENT/TODO).","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"owensoh"},"content":"    private static void addToList(String input, String taskType) {","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"owensoh"},"content":"        String[] parameters \u003d new String[2];","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"owensoh"},"content":"        //getParameters(parameters, input, taskType);","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"owensoh"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"owensoh"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"owensoh"},"content":"            case TODO:","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"owensoh"},"content":"                getParameters(parameters, input, TODO);","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"owensoh"},"content":"                Todo todo \u003d new Todo(parameters[DESCRIPTION]);","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"owensoh"},"content":"                list.add(todo);","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"owensoh"},"content":"                saveTaskInFile(todo);","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"owensoh"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":106,"author":{"gitId":"owensoh"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-30"},{"lineNumber":107,"author":{"gitId":"owensoh"},"content":"                getParameters(parameters, input, DEADLINE);","lastModifiedDate":"2021-08-30"},{"lineNumber":108,"author":{"gitId":"owensoh"},"content":"                Deadline deadline \u003d new Deadline(parameters[DESCRIPTION], parameters[DATETIME]);","lastModifiedDate":"2021-09-13"},{"lineNumber":109,"author":{"gitId":"owensoh"},"content":"                list.add(deadline);","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"owensoh"},"content":"                saveTaskInFile(deadline);","lastModifiedDate":"2021-09-13"},{"lineNumber":111,"author":{"gitId":"owensoh"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"owensoh"},"content":"            case EVENT:","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"owensoh"},"content":"                getParameters(parameters, input, EVENT);","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"owensoh"},"content":"                Event event \u003d new Event(parameters[DESCRIPTION], parameters[DATETIME]);","lastModifiedDate":"2021-09-13"},{"lineNumber":115,"author":{"gitId":"owensoh"},"content":"                list.add(event);","lastModifiedDate":"2021-09-13"},{"lineNumber":116,"author":{"gitId":"owensoh"},"content":"                saveTaskInFile(event);","lastModifiedDate":"2021-09-13"},{"lineNumber":117,"author":{"gitId":"owensoh"},"content":"                break;","lastModifiedDate":"2021-08-30"},{"lineNumber":118,"author":{"gitId":"owensoh"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":119,"author":{"gitId":"owensoh"},"content":"            printAddedMessage();","lastModifiedDate":"2021-09-06"},{"lineNumber":120,"author":{"gitId":"owensoh"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"owensoh"},"content":"            System.out.println(INVALID_TASK);","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"owensoh"},"content":"        } catch (InvalidTaskException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"owensoh"},"content":"            System.out.println(INVALID_TASK);","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"owensoh"},"content":"     * This function prints the message when task is added to list.","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"owensoh"},"content":"    private static void printAddedMessage() {","lastModifiedDate":"2021-08-30"},{"lineNumber":131,"author":{"gitId":"owensoh"},"content":"        System.out.println(TAB + \"Okay... I guess I\u0027ll add this task... \");","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"owensoh"},"content":"        System.out.println(TAB + TAB + list.get(list.size() - 1));","lastModifiedDate":"2021-09-13"},{"lineNumber":133,"author":{"gitId":"owensoh"},"content":"        System.out.println(TAB + String.format(\"Now you have %d tasks in the list...\", list.size()));","lastModifiedDate":"2021-09-14"},{"lineNumber":134,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":137,"author":{"gitId":"owensoh"},"content":"     * This function handles the done input by marking task as done.","lastModifiedDate":"2021-09-06"},{"lineNumber":138,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-09-06"},{"lineNumber":140,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":141,"author":{"gitId":"owensoh"},"content":"    private static void handleDoneInput(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":142,"author":{"gitId":"owensoh"},"content":"        int index \u003d getIndex(input);","lastModifiedDate":"2021-09-13"},{"lineNumber":143,"author":{"gitId":"owensoh"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":144,"author":{"gitId":"owensoh"},"content":"            list.get(index).markAsDone();","lastModifiedDate":"2021-09-13"},{"lineNumber":145,"author":{"gitId":"owensoh"},"content":"            System.out.print(TAB + \"Nice... I guess I will mark this task as done...:\"","lastModifiedDate":"2021-09-07"},{"lineNumber":146,"author":{"gitId":"owensoh"},"content":"                    + System.lineSeparator() + TAB + TAB);","lastModifiedDate":"2021-09-07"},{"lineNumber":147,"author":{"gitId":"owensoh"},"content":"            System.out.println(list.get(index));","lastModifiedDate":"2021-09-13"},{"lineNumber":148,"author":{"gitId":"owensoh"},"content":"            refreshFile();","lastModifiedDate":"2021-09-13"},{"lineNumber":149,"author":{"gitId":"owensoh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":150,"author":{"gitId":"owensoh"},"content":"            System.out.println(INVALID_DONE);","lastModifiedDate":"2021-09-07"},{"lineNumber":151,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":152,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":153,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":154,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":155,"author":{"gitId":"owensoh"},"content":"     * This function handles the delete input by deleting it.","lastModifiedDate":"2021-09-13"},{"lineNumber":156,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":157,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":158,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":159,"author":{"gitId":"owensoh"},"content":"    private static void handleDeleteInput(String input) {","lastModifiedDate":"2021-09-13"},{"lineNumber":160,"author":{"gitId":"owensoh"},"content":"        int index \u003d getIndex(input);","lastModifiedDate":"2021-09-13"},{"lineNumber":161,"author":{"gitId":"owensoh"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":162,"author":{"gitId":"owensoh"},"content":"            Task temp \u003d list.get(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":163,"author":{"gitId":"owensoh"},"content":"            list.remove(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":164,"author":{"gitId":"owensoh"},"content":"            System.out.print(TAB + \"Are you sure about this? I\u0027ll just delete this anyway...\"","lastModifiedDate":"2021-09-13"},{"lineNumber":165,"author":{"gitId":"owensoh"},"content":"                    + System.lineSeparator() + TAB + TAB);","lastModifiedDate":"2021-09-13"},{"lineNumber":166,"author":{"gitId":"owensoh"},"content":"            System.out.println(temp);","lastModifiedDate":"2021-09-13"},{"lineNumber":167,"author":{"gitId":"owensoh"},"content":"            System.out.println(TAB + String.format(\"Now you have %d tasks in the list...\", list.size()));","lastModifiedDate":"2021-09-14"},{"lineNumber":168,"author":{"gitId":"owensoh"},"content":"            refreshFile();","lastModifiedDate":"2021-09-13"},{"lineNumber":169,"author":{"gitId":"owensoh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":170,"author":{"gitId":"owensoh"},"content":"            System.out.println(INVALID_DELETE);","lastModifiedDate":"2021-09-13"},{"lineNumber":171,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":172,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":173,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":174,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":175,"author":{"gitId":"owensoh"},"content":"     * This function prints the individual elements in list.","lastModifiedDate":"2021-08-30"},{"lineNumber":176,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"owensoh"},"content":"    private static void printList() {","lastModifiedDate":"2021-08-30"},{"lineNumber":178,"author":{"gitId":"owensoh"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2021-09-13"},{"lineNumber":179,"author":{"gitId":"owensoh"},"content":"            System.out.format(TAB + \"% 3d.\", i + 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":180,"author":{"gitId":"owensoh"},"content":"            System.out.println(list.get(i));","lastModifiedDate":"2021-09-13"},{"lineNumber":181,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":182,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":183,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":184,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":185,"author":{"gitId":"owensoh"},"content":"     * This function sets isDukeDone to true, stopping while loop and signifying the end of program.","lastModifiedDate":"2021-09-06"},{"lineNumber":186,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":187,"author":{"gitId":"owensoh"},"content":"    private static void setDukeDone() {","lastModifiedDate":"2021-09-06"},{"lineNumber":188,"author":{"gitId":"owensoh"},"content":"        isDukeDone \u003d true;","lastModifiedDate":"2021-09-06"},{"lineNumber":189,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":190,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":191,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":192,"author":{"gitId":"owensoh"},"content":"     * This function check if done statement and index in done statement is valid.","lastModifiedDate":"2021-08-30"},{"lineNumber":193,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":194,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":195,"author":{"gitId":"owensoh"},"content":"     * @return returns the validity of the done input.","lastModifiedDate":"2021-08-30"},{"lineNumber":196,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":197,"author":{"gitId":"owensoh"},"content":"    private static boolean isValidDoneInput(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":198,"author":{"gitId":"owensoh"},"content":"        return Pattern.matches(\"^done \\\\d+$\", input.toLowerCase());","lastModifiedDate":"2021-09-07"},{"lineNumber":199,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":200,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":201,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":202,"author":{"gitId":"owensoh"},"content":"     * This function check if done statement and index in delete statement is valid.","lastModifiedDate":"2021-09-13"},{"lineNumber":203,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":204,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":205,"author":{"gitId":"owensoh"},"content":"     * @return returns the validity of the delete input.","lastModifiedDate":"2021-09-13"},{"lineNumber":206,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":207,"author":{"gitId":"owensoh"},"content":"    private static boolean isValidDeleteInput(String input) {","lastModifiedDate":"2021-09-13"},{"lineNumber":208,"author":{"gitId":"owensoh"},"content":"        return Pattern.matches(\"^delete \\\\d+$\", input.toLowerCase());","lastModifiedDate":"2021-09-13"},{"lineNumber":209,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":210,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":211,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":212,"author":{"gitId":"owensoh"},"content":"     * This function retrieves the index given in done/delete statement.","lastModifiedDate":"2021-09-13"},{"lineNumber":213,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":214,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":215,"author":{"gitId":"owensoh"},"content":"     * @return returns the index given in done/delete statement","lastModifiedDate":"2021-09-13"},{"lineNumber":216,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":217,"author":{"gitId":"owensoh"},"content":"    private static int getIndex(String input) {","lastModifiedDate":"2021-09-13"},{"lineNumber":218,"author":{"gitId":"owensoh"},"content":"        String[] parts \u003d input.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":219,"author":{"gitId":"owensoh"},"content":"        return Integer.parseInt(parts[1]) - 1;","lastModifiedDate":"2021-08-30"},{"lineNumber":220,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":221,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":222,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":223,"author":{"gitId":"owensoh"},"content":"     * This function uses regex to check if to do statement is valid.","lastModifiedDate":"2021-08-30"},{"lineNumber":224,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":225,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":226,"author":{"gitId":"owensoh"},"content":"     * @return returns validity of the to do statement.","lastModifiedDate":"2021-08-30"},{"lineNumber":227,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":228,"author":{"gitId":"owensoh"},"content":"    private static boolean isValidTodoInput(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":229,"author":{"gitId":"owensoh"},"content":"        return Pattern.matches(\"todo [:a-z0-9\\\\s]+\", input.toLowerCase());","lastModifiedDate":"2021-09-06"},{"lineNumber":230,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":231,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":232,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":233,"author":{"gitId":"owensoh"},"content":"     * This function uses regex to check if deadline statement is valid.","lastModifiedDate":"2021-08-30"},{"lineNumber":234,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":235,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":236,"author":{"gitId":"owensoh"},"content":"     * @return returns validity of the deadline statement.","lastModifiedDate":"2021-08-30"},{"lineNumber":237,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":238,"author":{"gitId":"owensoh"},"content":"    private static boolean isValidDeadlineInput(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":239,"author":{"gitId":"owensoh"},"content":"        return Pattern.matches(\"deadline [a-z0-9\\\\s]+\\\\b /by .+\", input.toLowerCase());","lastModifiedDate":"2021-08-30"},{"lineNumber":240,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":241,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":242,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":243,"author":{"gitId":"owensoh"},"content":"     * This function uses regex to check if event statement is valid.","lastModifiedDate":"2021-08-30"},{"lineNumber":244,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":245,"author":{"gitId":"owensoh"},"content":"     * @param input input given by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":246,"author":{"gitId":"owensoh"},"content":"     * @return returns validity of the event statement.","lastModifiedDate":"2021-08-30"},{"lineNumber":247,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":248,"author":{"gitId":"owensoh"},"content":"    private static boolean isValidEventInput(String input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":249,"author":{"gitId":"owensoh"},"content":"        return Pattern.matches(\"event [a-z0-9\\\\s]+\\\\b /at .+\", input.toLowerCase());","lastModifiedDate":"2021-08-30"},{"lineNumber":250,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":251,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":252,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":253,"author":{"gitId":"owensoh"},"content":"     * This function gets the parameters for the Task subclasses by slicing input.","lastModifiedDate":"2021-08-30"},{"lineNumber":254,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":255,"author":{"gitId":"owensoh"},"content":"     * @param parameters Array of string of fixed size 2 to store parameters for Task subclasses.","lastModifiedDate":"2021-08-30"},{"lineNumber":256,"author":{"gitId":"owensoh"},"content":"     * @param input      User\u0027s input into command line.","lastModifiedDate":"2021-08-30"},{"lineNumber":257,"author":{"gitId":"owensoh"},"content":"     * @param taskType   String that is pre-identified (DEADLINE/EVENT/TODO)","lastModifiedDate":"2021-08-30"},{"lineNumber":258,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":259,"author":{"gitId":"owensoh"},"content":"    private static void getParameters(String[] parameters, String input, String taskType) throws InvalidTaskException {","lastModifiedDate":"2021-09-07"},{"lineNumber":260,"author":{"gitId":"owensoh"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-30"},{"lineNumber":261,"author":{"gitId":"owensoh"},"content":"        case TODO:","lastModifiedDate":"2021-08-30"},{"lineNumber":262,"author":{"gitId":"owensoh"},"content":"            String[] todoParts \u003d input.split(\"(?i)todo \");","lastModifiedDate":"2021-08-30"},{"lineNumber":263,"author":{"gitId":"owensoh"},"content":"            parameters[DESCRIPTION] \u003d todoParts[1];","lastModifiedDate":"2021-08-30"},{"lineNumber":264,"author":{"gitId":"owensoh"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":265,"author":{"gitId":"owensoh"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-30"},{"lineNumber":266,"author":{"gitId":"owensoh"},"content":"            String[] initDeadlineParts \u003d input.split(\"(?i)deadline \");","lastModifiedDate":"2021-08-30"},{"lineNumber":267,"author":{"gitId":"owensoh"},"content":"            String[] deadlineParts \u003d initDeadlineParts[1].split(\" /by \");","lastModifiedDate":"2021-08-30"},{"lineNumber":268,"author":{"gitId":"owensoh"},"content":"            if (deadlineParts.length !\u003d 2) {","lastModifiedDate":"2021-09-07"},{"lineNumber":269,"author":{"gitId":"owensoh"},"content":"                throw new InvalidTaskException();","lastModifiedDate":"2021-09-07"},{"lineNumber":270,"author":{"gitId":"owensoh"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":271,"author":{"gitId":"owensoh"},"content":"            parameters[DESCRIPTION] \u003d deadlineParts[0];","lastModifiedDate":"2021-08-30"},{"lineNumber":272,"author":{"gitId":"owensoh"},"content":"            parameters[DATETIME] \u003d deadlineParts[1];","lastModifiedDate":"2021-08-30"},{"lineNumber":273,"author":{"gitId":"owensoh"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":274,"author":{"gitId":"owensoh"},"content":"        case EVENT:","lastModifiedDate":"2021-08-30"},{"lineNumber":275,"author":{"gitId":"owensoh"},"content":"            String[] initEventParts \u003d input.split(\"(?i)event \");","lastModifiedDate":"2021-08-30"},{"lineNumber":276,"author":{"gitId":"owensoh"},"content":"            String[] eventParts \u003d initEventParts[1].split(\" /at \");","lastModifiedDate":"2021-08-30"},{"lineNumber":277,"author":{"gitId":"owensoh"},"content":"            if (eventParts.length !\u003d 2) {","lastModifiedDate":"2021-09-07"},{"lineNumber":278,"author":{"gitId":"owensoh"},"content":"                throw new InvalidTaskException();","lastModifiedDate":"2021-09-07"},{"lineNumber":279,"author":{"gitId":"owensoh"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":280,"author":{"gitId":"owensoh"},"content":"            parameters[DESCRIPTION] \u003d eventParts[0];","lastModifiedDate":"2021-08-30"},{"lineNumber":281,"author":{"gitId":"owensoh"},"content":"            parameters[DATETIME] \u003d eventParts[1];","lastModifiedDate":"2021-08-30"},{"lineNumber":282,"author":{"gitId":"owensoh"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":283,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":284,"author":{"gitId":"owensoh"},"content":"        if (Objects.equals(parameters[DESCRIPTION], \"\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":285,"author":{"gitId":"owensoh"},"content":"            throw new InvalidTaskException();","lastModifiedDate":"2021-09-07"},{"lineNumber":286,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":287,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":288,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":289,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":290,"author":{"gitId":"owensoh"},"content":"     * This function prints the welcome banner.","lastModifiedDate":"2021-09-06"},{"lineNumber":291,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":292,"author":{"gitId":"owensoh"},"content":"    private static void printWelcomeBanner() {","lastModifiedDate":"2021-09-06"},{"lineNumber":293,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":294,"author":{"gitId":"owensoh"},"content":"        String sadge \u003d \":( :( :( :( :( :( :( :( :( :( :( :(\\n\"","lastModifiedDate":"2021-09-14"},{"lineNumber":295,"author":{"gitId":"owensoh"},"content":"                + \"D: D: D: D: D: D: D: D: D: D: D: D:\\n\"","lastModifiedDate":"2021-09-14"},{"lineNumber":296,"author":{"gitId":"owensoh"},"content":"                + \":( :( :( :( :( :( :( :( :( :( :( :(\\n\"","lastModifiedDate":"2021-09-14"},{"lineNumber":297,"author":{"gitId":"owensoh"},"content":"                + \"D: D: D: D: D: D: D: D: D: D: D: D:\\n\"","lastModifiedDate":"2021-09-14"},{"lineNumber":298,"author":{"gitId":"owensoh"},"content":"                + \":( :( :( :( :( :( :( :( :( :( :( :(\\n\"","lastModifiedDate":"2021-09-14"},{"lineNumber":299,"author":{"gitId":"owensoh"},"content":"                + \"D: D: D: D: D: D: D: D: D: D: D: D:\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":300,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":301,"author":{"gitId":"owensoh"},"content":"        String text \u003d \"SADGE DUKE\";","lastModifiedDate":"2021-09-14"},{"lineNumber":302,"author":{"gitId":"owensoh"},"content":"        System.out.println(\"Hello from\\n\" + sadge + text);","lastModifiedDate":"2021-09-06"},{"lineNumber":303,"author":{"gitId":"owensoh"},"content":"        System.out.println(LINES);","lastModifiedDate":"2021-09-06"},{"lineNumber":304,"author":{"gitId":"owensoh"},"content":"        System.out.println(GREETING);","lastModifiedDate":"2021-09-06"},{"lineNumber":305,"author":{"gitId":"owensoh"},"content":"        System.out.println(LINES);","lastModifiedDate":"2021-09-06"},{"lineNumber":306,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":307,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":308,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":309,"author":{"gitId":"owensoh"},"content":"     * This function adds saved tasks to list.","lastModifiedDate":"2021-09-13"},{"lineNumber":310,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":311,"author":{"gitId":"owensoh"},"content":"    private static void readSavedTasks() {","lastModifiedDate":"2021-09-13"},{"lineNumber":312,"author":{"gitId":"owensoh"},"content":"        File dataFile \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-13"},{"lineNumber":313,"author":{"gitId":"owensoh"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":314,"author":{"gitId":"owensoh"},"content":"            Scanner lineScanner \u003d new Scanner(dataFile);","lastModifiedDate":"2021-09-13"},{"lineNumber":315,"author":{"gitId":"owensoh"},"content":"            while (lineScanner.hasNext()) {","lastModifiedDate":"2021-09-13"},{"lineNumber":316,"author":{"gitId":"owensoh"},"content":"                AddLineTask(lineScanner.nextLine());","lastModifiedDate":"2021-09-13"},{"lineNumber":317,"author":{"gitId":"owensoh"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":318,"author":{"gitId":"owensoh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":319,"author":{"gitId":"owensoh"},"content":"            createFile();","lastModifiedDate":"2021-09-13"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":321,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":322,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":323,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":324,"author":{"gitId":"owensoh"},"content":"    private static void AddLineTask(String line) {","lastModifiedDate":"2021-09-13"},{"lineNumber":325,"author":{"gitId":"owensoh"},"content":"        String[] lineContents \u003d line.split(\" \\\\| \");","lastModifiedDate":"2021-09-13"},{"lineNumber":326,"author":{"gitId":"owensoh"},"content":"        switch (lineContents[TASK_TYPE_INDEX]) {","lastModifiedDate":"2021-09-13"},{"lineNumber":327,"author":{"gitId":"owensoh"},"content":"        case \"T\":","lastModifiedDate":"2021-09-13"},{"lineNumber":328,"author":{"gitId":"owensoh"},"content":"            Todo todo \u003d new Todo(lineContents[TASK_INDEX]);","lastModifiedDate":"2021-09-13"},{"lineNumber":329,"author":{"gitId":"owensoh"},"content":"            list.add(todo);","lastModifiedDate":"2021-09-13"},{"lineNumber":330,"author":{"gitId":"owensoh"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":331,"author":{"gitId":"owensoh"},"content":"        case \"D\":","lastModifiedDate":"2021-09-13"},{"lineNumber":332,"author":{"gitId":"owensoh"},"content":"            Deadline deadline \u003d new Deadline(lineContents[TASK_INDEX], lineContents[BY_AT_INDEX]);","lastModifiedDate":"2021-09-13"},{"lineNumber":333,"author":{"gitId":"owensoh"},"content":"            list.add(deadline);","lastModifiedDate":"2021-09-13"},{"lineNumber":334,"author":{"gitId":"owensoh"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":335,"author":{"gitId":"owensoh"},"content":"        case \"E\":","lastModifiedDate":"2021-09-13"},{"lineNumber":336,"author":{"gitId":"owensoh"},"content":"            Event event \u003d new Event(lineContents[TASK_INDEX], lineContents[BY_AT_INDEX]);","lastModifiedDate":"2021-09-13"},{"lineNumber":337,"author":{"gitId":"owensoh"},"content":"            list.add(event);","lastModifiedDate":"2021-09-13"},{"lineNumber":338,"author":{"gitId":"owensoh"},"content":"            break;","lastModifiedDate":"2021-09-13"},{"lineNumber":339,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":340,"author":{"gitId":"owensoh"},"content":"        if (lineContents[IS_DONE_INDEX].equals(\"1\")) {","lastModifiedDate":"2021-09-13"},{"lineNumber":341,"author":{"gitId":"owensoh"},"content":"            list.get(list.size() - 1).markAsDone();","lastModifiedDate":"2021-09-13"},{"lineNumber":342,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":343,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":344,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":345,"author":{"gitId":"owensoh"},"content":"    private static void refreshFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":346,"author":{"gitId":"owensoh"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":347,"author":{"gitId":"owensoh"},"content":"            FileWriter file \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-13"},{"lineNumber":348,"author":{"gitId":"owensoh"},"content":"            for (Task task : list) {","lastModifiedDate":"2021-09-13"},{"lineNumber":349,"author":{"gitId":"owensoh"},"content":"                file.write(task.toFile());","lastModifiedDate":"2021-09-13"},{"lineNumber":350,"author":{"gitId":"owensoh"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":351,"author":{"gitId":"owensoh"},"content":"            file.close();","lastModifiedDate":"2021-09-13"},{"lineNumber":352,"author":{"gitId":"owensoh"},"content":"        } catch (java.io.IOException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":353,"author":{"gitId":"owensoh"},"content":"            System.out.println(\"Unable to write to file...\");","lastModifiedDate":"2021-09-13"},{"lineNumber":354,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":355,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":356,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":357,"author":{"gitId":"owensoh"},"content":"    private static void createFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":358,"author":{"gitId":"owensoh"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":359,"author":{"gitId":"owensoh"},"content":"            File newFile \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-13"},{"lineNumber":360,"author":{"gitId":"owensoh"},"content":"            newFile.getParentFile().mkdirs();","lastModifiedDate":"2021-09-13"},{"lineNumber":361,"author":{"gitId":"owensoh"},"content":"            newFile.createNewFile();","lastModifiedDate":"2021-09-13"},{"lineNumber":362,"author":{"gitId":"owensoh"},"content":"        } catch (java.io.IOException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":363,"author":{"gitId":"owensoh"},"content":"            System.out.println(\"Unable to create file...\");","lastModifiedDate":"2021-09-13"},{"lineNumber":364,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":365,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":366,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":367,"author":{"gitId":"owensoh"},"content":"    private static void saveTaskInFile(Task task) {","lastModifiedDate":"2021-09-13"},{"lineNumber":368,"author":{"gitId":"owensoh"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":369,"author":{"gitId":"owensoh"},"content":"            FileWriter file \u003d new FileWriter(FILE_PATH, true);","lastModifiedDate":"2021-09-13"},{"lineNumber":370,"author":{"gitId":"owensoh"},"content":"            file.write(task.toFile());","lastModifiedDate":"2021-09-13"},{"lineNumber":371,"author":{"gitId":"owensoh"},"content":"            file.close();","lastModifiedDate":"2021-09-13"},{"lineNumber":372,"author":{"gitId":"owensoh"},"content":"        } catch (java.io.IOException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":373,"author":{"gitId":"owensoh"},"content":"            System.out.println(\"Unable to write to file...\");","lastModifiedDate":"2021-09-13"},{"lineNumber":374,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":376,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-13"},{"lineNumber":377,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":378,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"owensoh":373,"-":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owensoh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"owensoh"},"content":" * This represents the subclass Event under superclass Task in each element of Task[] list in Duke.java.","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"owensoh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"owensoh"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"owensoh"},"content":"    protected String at;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"owensoh"},"content":"     * This function initialises the deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"owensoh"},"content":"     * @param description description input by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"owensoh"},"content":"     * @param at date of event","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"owensoh"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"owensoh"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"owensoh"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"owensoh"},"content":"     * This function modifies the output format.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"owensoh"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"owensoh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"owensoh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"owensoh"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"owensoh"},"content":"    public String toFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"owensoh"},"content":"        return \"E\" + FILE_STRING_SEPARATOR + super.toFile() + FILE_STRING_SEPARATOR + at + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"owensoh"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"owensoh":31}},{"path":"src/main/java/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owensoh"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"owensoh"},"content":" * This represents Exception when an Invalid Input occurs.","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"owensoh"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"owensoh"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"owensoh"},"content":"    // no other code needed","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"owensoh"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"owensoh":6}},{"path":"src/main/java/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owensoh"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"owensoh"},"content":" * This represents Exception when an Invalid Task is produced by input.","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"owensoh"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"owensoh"},"content":"public class InvalidTaskException extends Exception {","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"owensoh"},"content":"    // no other code needed","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"owensoh"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"owensoh":6}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owensoh"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"owensoh"},"content":" * This represents the superclass Task in each element of Task[] list in Duke.java.","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"owensoh"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"owensoh"},"content":"public class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"owensoh"},"content":"    protected String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"owensoh"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"owensoh"},"content":"    public final static String FILE_STRING_SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"owensoh"},"content":"     * This function initialises the task input by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"owensoh"},"content":"     * @param description description input by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"owensoh"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"owensoh"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"owensoh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"owensoh"},"content":"     * This function returns a relevant status icon.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"owensoh"},"content":"     * @return \"X\" if task is done, \" \" if it is not.","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"owensoh"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"owensoh"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"owensoh"},"content":"     * This function marks a given task as done, and prints a message letting the user know.","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"owensoh"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"owensoh"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"owensoh"},"content":"     * This function is a getter for task description.","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"owensoh"},"content":"     * @return description of the task.","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"owensoh"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"owensoh"},"content":"        return description;","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"owensoh"},"content":"     * This function modifies the output format.","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"owensoh"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"owensoh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"owensoh"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"owensoh"},"content":"    public String toFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"owensoh"},"content":"        String fileString \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"owensoh"},"content":"        if (isDone) {","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"owensoh"},"content":"            fileString +\u003d \"1\" + FILE_STRING_SEPARATOR;","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"owensoh"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"owensoh"},"content":"            fileString +\u003d \"0\" + FILE_STRING_SEPARATOR;","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"owensoh"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"owensoh"},"content":"        fileString +\u003d getDescription();","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"owensoh"},"content":"        return fileString;","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"owensoh"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"owensoh":64}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owensoh"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"owensoh"},"content":" * This represents the subclass To Do under superclass Task in each element of Task[] list in Duke.java.","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"owensoh"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"owensoh"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"owensoh"},"content":"     * This function initialises the deadline.","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"owensoh"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"owensoh"},"content":"     * @param description description input by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"owensoh"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"owensoh"},"content":"        super(description);","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"owensoh"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"owensoh"},"content":"     * This function modifies the output format.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"owensoh"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"owensoh"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"owensoh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"owensoh"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"owensoh"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"owensoh"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"owensoh"},"content":"    public String toFile() {","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"owensoh"},"content":"        return \"T\" + FILE_STRING_SEPARATOR + super.toFile() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"owensoh"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"owensoh"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"owensoh":27}}]
