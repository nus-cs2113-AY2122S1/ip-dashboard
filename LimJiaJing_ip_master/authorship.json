[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"## Setting Up","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"Place `\"ip.jar\"` in an empty folder.","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"### Launching Duke","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"Launch the terminal and change the directory to that of the folder \"ip.jar\" is in.","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"Enter the command below into the terminal to run the program.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"java -jar ip.jar","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"### Add task","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"Add a task. A task can be one of the following:","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"1. Todo - A simple task.","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"2. Deadline - A task with a date to complete by.","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"3. Event - A task with a start and end datetime.","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"### Delete task","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"Delete a task.","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"### Find task","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"Find tasks with which includes the provided substring.","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"### Mark done","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"Mark the task as complete.","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"### List","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"List all the tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"### `todo` - Add a todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"Add a todo for duke to track.","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"LimJiaJing"},"content":"`todo read book`","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"LimJiaJing"},"content":"Expected outcome:","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"LimJiaJing"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"LimJiaJing"},"content":"    [T][ ] read book","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"LimJiaJing"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"LimJiaJing"},"content":"### `deadline` - Add a deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"LimJiaJing"},"content":"Add a deadline for duke to track.","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"LimJiaJing"},"content":"Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"LimJiaJing"},"content":"`deadline return book /by 11 August`","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"LimJiaJing"},"content":"Expected outcome:","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"LimJiaJing"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"LimJiaJing"},"content":"    [D][ ] return book (by: 11 August)","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"LimJiaJing"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"LimJiaJing"},"content":"### `event` - Add an event.","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"LimJiaJing"},"content":"Add an event for duke to track.","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"LimJiaJing"},"content":"Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"LimJiaJing"},"content":"`event project meeting /at 11 August from 9pm to 11pm`","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"LimJiaJing"},"content":"Expected outcome:","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"LimJiaJing"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"LimJiaJing"},"content":"    [E][ ] project meeting (at: 11 August from 9pm to 11pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"LimJiaJing"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"LimJiaJing"},"content":"### `done` - Mark a task as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":88,"author":{"gitId":"LimJiaJing"},"content":"Mark a task as complete.","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":92,"author":{"gitId":"LimJiaJing"},"content":"`done 1`","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":96,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"LimJiaJing"},"content":"Nice. I\u0027ve marked this task as done:","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"LimJiaJing"},"content":"    [T][X] read book","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"LimJiaJing"},"content":"### `delete` - Delete a task.","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"LimJiaJing"},"content":"Delete a task. After delete, the task will no longer be tracked by Duke.","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"LimJiaJing"},"content":"Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"LimJiaJing"},"content":"`delete 1`","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"LimJiaJing"},"content":"Expected outcome:","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"LimJiaJing"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"LimJiaJing"},"content":"    [T][X] read book","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"LimJiaJing"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"LimJiaJing"},"content":"### `list` - List all tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"LimJiaJing"},"content":"List all tasks currently tracked by Duke.","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"LimJiaJing"},"content":"Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"LimJiaJing"},"content":"`list`","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"LimJiaJing"},"content":"Expected outcome:","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"LimJiaJing"},"content":"Here are the tasks in your list","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"LimJiaJing"},"content":"1.[D][X] return book (by: 11 August)","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"LimJiaJing"},"content":"Here are the tasks in your list","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"LimJiaJing"},"content":"2.[E][ ] project meeting (at: 11 August from 9pm to 11pm)","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"LimJiaJing"},"content":"### `find` - Find tasks which contains given substring.","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"LimJiaJing"},"content":"Find, among tasks that are currently tracked by duke, those that contain a given substring.","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"LimJiaJing"},"content":"Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"LimJiaJing"},"content":"`find book`","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"LimJiaJing"},"content":"Expected outcome:","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"LimJiaJing"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"LimJiaJing"},"content":"1.[D][X] return book (by: 11 August)","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"LimJiaJing"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"LimJiaJing"},"content":"### `bye` - Close duke.","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"LimJiaJing"},"content":"End the duke session, tasks tracked at point of exit will still exist in the next launch.","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"LimJiaJing"},"content":"Example of usage:","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"LimJiaJing"},"content":"`bye`","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":157,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":158,"author":{"gitId":"LimJiaJing"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"-":26,"LimJiaJing":133}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-16"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"     * Entry point of program.","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"     * @param args","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(logo);","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"        try {","lastModifiedDate":"2021-09-16"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"            ArrayList\u003cString\u003e tasksString \u003d Storage.read();","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"            TaskList.convertTaskStringToTasks(tasksString);","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"            TaskList.convertTaskStringToTasks(null);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"        Greet.openingGreet();","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"        Ui.talkToUser();","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"        Greet.closingGreet();","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"LimJiaJing":27,"-":9}},{"path":"src/main/java/duke/FormatLines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"public class FormatLines {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"    public static final String divider \u003d \"\\t__________________________________________________________\";","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LimJiaJing":5}},{"path":"src/main/java/duke/Greet.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"public class Greet {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"     * Prints opening greet.","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"    public static void openingGreet() {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\tHello! I\u0027m Duke\\n\\tWhat can I do for you?\");","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(FormatLines.divider);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"     * Prints closing greet.","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"    public static void closingGreet() {","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(FormatLines.divider);","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"LimJiaJing":20}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke;","lastModifiedDate":"2021-09-16"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"import java.io.*;","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-16"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"public class Storage {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"     * Writes the elements in ArrayList, tasks to an output file called \"tasks.txt\".","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"     * @param tasks ArrayList which contains the most updated information about the tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"     * @throws IOException If the filename of the file to be written to is a directory rather than a regular file.","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"    public static void write(ArrayList\u003cTodo\u003e tasks) throws IOException {","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(\"tasks.txt\"));","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"        for (Todo task : tasks) {","lastModifiedDate":"2021-09-16"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"            writer.write(count + \".\" + task.toString());","lastModifiedDate":"2021-09-16"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"            writer.newLine();","lastModifiedDate":"2021-09-16"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"            count++;","lastModifiedDate":"2021-09-16"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"        writer.flush();","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"        writer.close();","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"     * Reads file which should contain descriptions of tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"     * Each from the file is converted into a string and added into an array.","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"     * @return A array of strings which are descriptions of tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"LimJiaJing"},"content":"    public static ArrayList\u003cString\u003e read() throws FileNotFoundException {","lastModifiedDate":"2021-09-16"},{"lineNumber":38,"author":{"gitId":"LimJiaJing"},"content":"        ArrayList\u003cString\u003e tasksString \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"LimJiaJing"},"content":"        File tasksFile \u003d new File(\"tasks.txt\");","lastModifiedDate":"2021-09-16"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"        Scanner reader \u003d new Scanner(tasksFile);","lastModifiedDate":"2021-09-16"},{"lineNumber":41,"author":{"gitId":"LimJiaJing"},"content":"        while (reader.hasNextLine()) {","lastModifiedDate":"2021-09-16"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"            String taskString \u003d reader.nextLine();","lastModifiedDate":"2021-09-16"},{"lineNumber":43,"author":{"gitId":"LimJiaJing"},"content":"            tasksString.add(taskString);","lastModifiedDate":"2021-09-16"},{"lineNumber":44,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":45,"author":{"gitId":"LimJiaJing"},"content":"        return tasksString;","lastModifiedDate":"2021-09-16"},{"lineNumber":46,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":47,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-09-16"},{"lineNumber":48,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":49,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"LimJiaJing":49}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.command;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":" * Valid user commands in Duke.","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"public enum Command {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"    TODO, DEADLINE, EVENT, LIST, BYE, DONE, DELETE, FIND","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LimJiaJing":9}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.exception;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"/**","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":" * A custom exception to catch user inputs which are invalid.","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":" */","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"     * Returns an InvalidInputException.","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"     * @param errorMessage Message of the error.","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"    public InvalidInputException(String errorMessage) {","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"LimJiaJing":15}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"public class Deadline extends Todo {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"    String deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"     * Returns a Deadline object.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"     * @param name Name of the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"     * @param deadline Deadline of the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"        super(name);","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"        setDeadline(deadline);","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"     * Returns deadline of the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"     * @return Deadline of the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"    public String getDeadline() {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"        return deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"     * Sets the deadline of the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"     * @param deadline Deadline of the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"    public void setDeadline(String deadline) {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"LimJiaJing"},"content":"     * Returns a formatted string which contains information about the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"LimJiaJing"},"content":"     * @returnm Formatted string which contains information about the deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"LimJiaJing"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"        String boolString \u003d super.getIsDone() ? \"X\" : \" \";","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"LimJiaJing"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", boolString, super.getName(), deadline);","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LimJiaJing":45}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"public class Event extends Todo {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"    String time;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"     * Returns an Event object.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"     * @param name Name of the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"     * @param time Time of the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"    public Event(String name, String time) {","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"        super(name);","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"        setTime(time);","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"     * Returns the time of the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"     * @return Time of the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"    public String getTime() {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"        return time;","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"     * Sets the time of the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"     * @param time Time of the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"    public void setTime(String time) {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"LimJiaJing"},"content":"     * Returns a formatted string which contains information about the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"LimJiaJing"},"content":"     * @return Formatted string which contins information about the event.","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"LimJiaJing"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"        String boolString \u003d super.getIsDone() ? \"X\" : \" \";","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"LimJiaJing"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", boolString, super.getName(), time);","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LimJiaJing":47}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-16"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-16"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"import duke.Storage;","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"public class TaskList {","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"    private static ArrayList\u003cTodo\u003e tasks \u003d new ArrayList\u003cTodo\u003e();","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"     * Adds a Todo object to the ArrayList, tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"     * If userInput has less than 5 characters, an InvalidInputException is thrown.","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"     * If InvalidInputException is caught, print error message and return.","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"     * @param userInput String which user inputted to add a Todo task, should contain information about the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"    public static void addTodo(String userInput) {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"        try {","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"            if (userInput.length() \u003c 5) {","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"                throw new InvalidInputException(\"OOPS!!! Description of todo cannot be empty :(\");","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"            Todo newTask \u003d new Todo(userInput.substring(5));","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"            tasks.add(newTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"            printTaskAddedConfirmation(newTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"            updateFile();","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(e.toString().substring(38));","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"     * Adds a Deadline object to the ArrayList, tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"LimJiaJing"},"content":"     * If userInput has less than 9 characters, an InvalidInputException is thrown.","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"LimJiaJing"},"content":"     * If userInput has no substring \"/by\", an InvalidInputException is thrown.","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"LimJiaJing"},"content":"     * If InvalidInputException is caught, print error message and return.","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"     * @param userInput String which user inputted to add a Deadline task, should contain information about the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"    public static void addDeadline(String userInput) {","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"LimJiaJing"},"content":"        try {","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"LimJiaJing"},"content":"            if (userInput.length() \u003c 9) {","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"LimJiaJing"},"content":"                throw new InvalidInputException(\"OOPS!!! Description of deadline cannot be empty :(\");","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"LimJiaJing"},"content":"            if (!userInput.contains(\"/by \")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"LimJiaJing"},"content":"                throw new InvalidInputException(\"OOPS!! Please input date of deadline\");","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"LimJiaJing"},"content":"            int startIndexOfTask \u003d userInput.indexOf(\u0027 \u0027) + 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"LimJiaJing"},"content":"            int endIndexOfTask \u003d userInput.indexOf(\u0027/\u0027) - 1;","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"LimJiaJing"},"content":"            int startIndexOfDeadline \u003d userInput.indexOf(\u0027/\u0027) + 4;","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"LimJiaJing"},"content":"            String taskName \u003d userInput.substring(startIndexOfTask, endIndexOfTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"LimJiaJing"},"content":"            String deadline \u003d userInput.substring(startIndexOfDeadline);","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"LimJiaJing"},"content":"            Deadline newTask \u003d new Deadline(taskName, deadline);","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"LimJiaJing"},"content":"            tasks.add(newTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"LimJiaJing"},"content":"            printTaskAddedConfirmation(newTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"LimJiaJing"},"content":"            updateFile();","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"LimJiaJing"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":61,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(e.toString().substring(38));","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"LimJiaJing"},"content":"     * Adds an Event object to the ArrayList, tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"LimJiaJing"},"content":"     * If userInput has less than 6 characters, an InvalidInputException is thrown.","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"LimJiaJing"},"content":"     * If userInput has no substring \"/at\", an InvalidInputException is thrown.","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"LimJiaJing"},"content":"     * If InvalidInputException is caught, print error message and return.","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"LimJiaJing"},"content":"     * @param userInput String which user inputted to add an Event task, should contain information about the task.","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"LimJiaJing"},"content":"    public static void addEvent(String userInput) {","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"LimJiaJing"},"content":"        try {","lastModifiedDate":"2021-09-09"},{"lineNumber":75,"author":{"gitId":"LimJiaJing"},"content":"            if (userInput.length() \u003c 6) {","lastModifiedDate":"2021-09-09"},{"lineNumber":76,"author":{"gitId":"LimJiaJing"},"content":"                throw new InvalidInputException(\"OOPS!!! Description of event cannot be empty :(\");","lastModifiedDate":"2021-09-09"},{"lineNumber":77,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":78,"author":{"gitId":"LimJiaJing"},"content":"            if (!userInput.contains(\"/at \")) {","lastModifiedDate":"2021-09-09"},{"lineNumber":79,"author":{"gitId":"LimJiaJing"},"content":"                throw new InvalidInputException(\"OOPS!! Please input time of event\");","lastModifiedDate":"2021-09-09"},{"lineNumber":80,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-09-09"},{"lineNumber":81,"author":{"gitId":"LimJiaJing"},"content":"            int startIndexOfTask \u003d userInput.indexOf(\u0027 \u0027) + 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":82,"author":{"gitId":"LimJiaJing"},"content":"            int endIndexOfTask \u003d userInput.indexOf(\u0027/\u0027) - 1;","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"LimJiaJing"},"content":"            int startIndexOfDate \u003d userInput.indexOf(\u0027/\u0027) + 4;","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"LimJiaJing"},"content":"            String taskName \u003d userInput.substring(startIndexOfTask, endIndexOfTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"LimJiaJing"},"content":"            String deadline \u003d userInput.substring(startIndexOfDate);","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"LimJiaJing"},"content":"            Event newTask \u003d new Event(taskName, deadline);","lastModifiedDate":"2021-09-15"},{"lineNumber":87,"author":{"gitId":"LimJiaJing"},"content":"            tasks.add(newTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"LimJiaJing"},"content":"            printTaskAddedConfirmation(newTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"LimJiaJing"},"content":"            updateFile();","lastModifiedDate":"2021-09-16"},{"lineNumber":90,"author":{"gitId":"LimJiaJing"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2021-09-09"},{"lineNumber":91,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(e.toString().substring(38));","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-09"},{"lineNumber":93,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":94,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"LimJiaJing"},"content":"     * Prints the elements in the ArrayList, tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"LimJiaJing"},"content":"     * If there are no elements in the ArrayList, prints \"No tasks added\".","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"LimJiaJing"},"content":"    public static void printTasks() {","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"LimJiaJing"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":102,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(\"\\tNo tasks added\");","lastModifiedDate":"2021-08-31"},{"lineNumber":103,"author":{"gitId":"LimJiaJing"},"content":"            return;","lastModifiedDate":"2021-08-31"},{"lineNumber":104,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":105,"author":{"gitId":"LimJiaJing"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":106,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\tHere are the tasks in your list\");","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"LimJiaJing"},"content":"        for (Todo task : tasks) {","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(\"\\t\" + count + \".\" + task);","lastModifiedDate":"2021-09-16"},{"lineNumber":109,"author":{"gitId":"LimJiaJing"},"content":"            count++;","lastModifiedDate":"2021-09-16"},{"lineNumber":110,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":113,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"LimJiaJing"},"content":"     * Marks the task specified by userInput as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"LimJiaJing"},"content":"     * Casts the userInput as integer.","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"LimJiaJing"},"content":"     * If the integer is larger than the size of the ArrayList, tasks, print \"No such task\".","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"LimJiaJing"},"content":"     * First task corresponds to index 1.","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"LimJiaJing"},"content":"     * @param userInput Index of the task to be mark as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"LimJiaJing"},"content":"    public static void markDone(String userInput) {","lastModifiedDate":"2021-08-31"},{"lineNumber":122,"author":{"gitId":"LimJiaJing"},"content":"        int indexOfTaskNumber \u003d userInput.indexOf(\u0027 \u0027) + 1;","lastModifiedDate":"2021-08-31"},{"lineNumber":123,"author":{"gitId":"LimJiaJing"},"content":"        int taskNumber \u003d Integer.parseInt(userInput.substring(indexOfTaskNumber));","lastModifiedDate":"2021-08-31"},{"lineNumber":124,"author":{"gitId":"LimJiaJing"},"content":"        if (taskNumber \u003e tasks.size() || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":125,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(\"\\tNo such task\");","lastModifiedDate":"2021-08-31"},{"lineNumber":126,"author":{"gitId":"LimJiaJing"},"content":"            return;","lastModifiedDate":"2021-08-31"},{"lineNumber":127,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":128,"author":{"gitId":"LimJiaJing"},"content":"        Todo task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":129,"author":{"gitId":"LimJiaJing"},"content":"        task.setIsDone();","lastModifiedDate":"2021-08-31"},{"lineNumber":130,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-31"},{"lineNumber":131,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\t\\t\" + task);","lastModifiedDate":"2021-09-16"},{"lineNumber":132,"author":{"gitId":"LimJiaJing"},"content":"        updateFile();","lastModifiedDate":"2021-09-16"},{"lineNumber":133,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":134,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":135,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"LimJiaJing"},"content":"     * Deletes the task specified by userInput.","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"LimJiaJing"},"content":"     * Casts the userInput as integer.","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"LimJiaJing"},"content":"     * If the integer is larger than the size of the ArrayList, tasks, print \"No such task\".","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"LimJiaJing"},"content":"     * First task corresponds to index 1.","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"LimJiaJing"},"content":"     * @param userInput Index of the task to be deleted.","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"LimJiaJing"},"content":"    public static void deleteTask(String userInput) {","lastModifiedDate":"2021-09-16"},{"lineNumber":144,"author":{"gitId":"LimJiaJing"},"content":"        int indexOfTaskNumber \u003d userInput.indexOf(\u0027 \u0027) + 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":145,"author":{"gitId":"LimJiaJing"},"content":"        int taskNumber \u003d Integer.parseInt(userInput.substring(indexOfTaskNumber));","lastModifiedDate":"2021-09-16"},{"lineNumber":146,"author":{"gitId":"LimJiaJing"},"content":"        if (taskNumber \u003e tasks.size() || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2021-09-16"},{"lineNumber":147,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(\"\\tNo such task\");","lastModifiedDate":"2021-09-16"},{"lineNumber":148,"author":{"gitId":"LimJiaJing"},"content":"            return;","lastModifiedDate":"2021-09-16"},{"lineNumber":149,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":150,"author":{"gitId":"LimJiaJing"},"content":"        Todo task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2021-09-16"},{"lineNumber":151,"author":{"gitId":"LimJiaJing"},"content":"        tasks.remove(taskNumber - 1);","lastModifiedDate":"2021-09-16"},{"lineNumber":152,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-09-16"},{"lineNumber":153,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\t\\t\" + task.toString());","lastModifiedDate":"2021-09-16"},{"lineNumber":154,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\t Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-16"},{"lineNumber":155,"author":{"gitId":"LimJiaJing"},"content":"        updateFile();","lastModifiedDate":"2021-09-16"},{"lineNumber":156,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":157,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":158,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"LimJiaJing"},"content":"    public static void findTasksWithSubstring(String userInput) {","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"LimJiaJing"},"content":"        int startIndexOfTargetSubstring \u003d userInput.indexOf(\u0027 \u0027) + 1;","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"LimJiaJing"},"content":"        String targetSubString \u003d userInput.substring(startIndexOfTargetSubstring);","lastModifiedDate":"2021-10-01"},{"lineNumber":162,"author":{"gitId":"LimJiaJing"},"content":"        ArrayList\u003cTodo\u003e listOfTasksWithSubstring \u003d new ArrayList\u003cTodo\u003e();","lastModifiedDate":"2021-10-01"},{"lineNumber":163,"author":{"gitId":"LimJiaJing"},"content":"        for (Todo task : tasks) {","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"LimJiaJing"},"content":"            if (task.getName().contains(targetSubString)) {","lastModifiedDate":"2021-10-01"},{"lineNumber":165,"author":{"gitId":"LimJiaJing"},"content":"                listOfTasksWithSubstring.add(task);","lastModifiedDate":"2021-10-01"},{"lineNumber":166,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-10-01"},{"lineNumber":167,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":168,"author":{"gitId":"LimJiaJing"},"content":"        printTasksWithSubstring(listOfTasksWithSubstring);","lastModifiedDate":"2021-10-01"},{"lineNumber":169,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":170,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":171,"author":{"gitId":"LimJiaJing"},"content":"    private static void printTasksWithSubstring(ArrayList\u003cTodo\u003e listOfTasks) {","lastModifiedDate":"2021-10-01"},{"lineNumber":172,"author":{"gitId":"LimJiaJing"},"content":"        if (listOfTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-01"},{"lineNumber":173,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(\"\\tNo tasks with target substring\");","lastModifiedDate":"2021-10-01"},{"lineNumber":174,"author":{"gitId":"LimJiaJing"},"content":"            return;","lastModifiedDate":"2021-10-01"},{"lineNumber":175,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":176,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\tHere are the matching tasks in your list:\");","lastModifiedDate":"2021-10-01"},{"lineNumber":177,"author":{"gitId":"LimJiaJing"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-10-01"},{"lineNumber":178,"author":{"gitId":"LimJiaJing"},"content":"        for (Todo task : listOfTasks) {","lastModifiedDate":"2021-10-01"},{"lineNumber":179,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(\"\\t\" + count + \".\" + task);","lastModifiedDate":"2021-10-01"},{"lineNumber":180,"author":{"gitId":"LimJiaJing"},"content":"            count++;","lastModifiedDate":"2021-10-01"},{"lineNumber":181,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":182,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":183,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":184,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":185,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":186,"author":{"gitId":"LimJiaJing"},"content":"     * Prints the task that was added.","lastModifiedDate":"2021-10-01"},{"lineNumber":187,"author":{"gitId":"LimJiaJing"},"content":"     * Helper method for addDeadline(), addEvent() and addTodo() methods.","lastModifiedDate":"2021-10-01"},{"lineNumber":188,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":189,"author":{"gitId":"LimJiaJing"},"content":"     * @param task Task that was added into the ArrayList, tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":190,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":191,"author":{"gitId":"LimJiaJing"},"content":"    private static void printTaskAddedConfirmation(Todo task) {","lastModifiedDate":"2021-09-16"},{"lineNumber":192,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2021-09-16"},{"lineNumber":193,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(\"\\t\\t\" + task);","lastModifiedDate":"2021-09-16"},{"lineNumber":194,"author":{"gitId":"LimJiaJing"},"content":"        System.out.format(\"\\tNow you have %d tasks in the list.\\n\", tasks.size());","lastModifiedDate":"2021-09-16"},{"lineNumber":195,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":196,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":197,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":198,"author":{"gitId":"LimJiaJing"},"content":"     * Updates the text file to the current situation.","lastModifiedDate":"2021-10-01"},{"lineNumber":199,"author":{"gitId":"LimJiaJing"},"content":"     * Helper method for addDeadline(), addEvent(), addTodo, deleteTask(), markDone() methods.","lastModifiedDate":"2021-10-01"},{"lineNumber":200,"author":{"gitId":"LimJiaJing"},"content":"     * In short, helper method for any methods which modifies the ArrayList, tasks or the elements in it.","lastModifiedDate":"2021-10-01"},{"lineNumber":201,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":202,"author":{"gitId":"LimJiaJing"},"content":"    private static void updateFile() {","lastModifiedDate":"2021-09-16"},{"lineNumber":203,"author":{"gitId":"LimJiaJing"},"content":"        try {","lastModifiedDate":"2021-09-16"},{"lineNumber":204,"author":{"gitId":"LimJiaJing"},"content":"            Storage.write(tasks);","lastModifiedDate":"2021-10-01"},{"lineNumber":205,"author":{"gitId":"LimJiaJing"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-16"},{"lineNumber":206,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(e);","lastModifiedDate":"2021-09-16"},{"lineNumber":207,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":208,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":209,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":210,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":211,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":212,"author":{"gitId":"LimJiaJing"},"content":"     * Converts the strings in the ArrayList to the corresponding objects.","lastModifiedDate":"2021-10-01"},{"lineNumber":213,"author":{"gitId":"LimJiaJing"},"content":"     * The objects can be of type Todo, Deadline, or Event.","lastModifiedDate":"2021-10-01"},{"lineNumber":214,"author":{"gitId":"LimJiaJing"},"content":"     * Adds the objects to the ArrayList, tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":215,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":216,"author":{"gitId":"LimJiaJing"},"content":"     * @param tasksString ArrayList which contains strings which are descriptions of tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":217,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":218,"author":{"gitId":"LimJiaJing"},"content":"    public static void convertTaskStringToTasks(ArrayList\u003cString\u003e tasksString) {","lastModifiedDate":"2021-09-16"},{"lineNumber":219,"author":{"gitId":"LimJiaJing"},"content":"        if (tasksString \u003d\u003d null) {","lastModifiedDate":"2021-09-16"},{"lineNumber":220,"author":{"gitId":"LimJiaJing"},"content":"            return;","lastModifiedDate":"2021-09-16"},{"lineNumber":221,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":222,"author":{"gitId":"LimJiaJing"},"content":"        if (tasksString.isEmpty()) {","lastModifiedDate":"2021-09-16"},{"lineNumber":223,"author":{"gitId":"LimJiaJing"},"content":"            return;","lastModifiedDate":"2021-09-16"},{"lineNumber":224,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":225,"author":{"gitId":"LimJiaJing"},"content":"        int startIndexOfTask;","lastModifiedDate":"2021-09-16"},{"lineNumber":226,"author":{"gitId":"LimJiaJing"},"content":"        int endIndexOfTask;","lastModifiedDate":"2021-09-16"},{"lineNumber":227,"author":{"gitId":"LimJiaJing"},"content":"        int startIndexOfDate;","lastModifiedDate":"2021-09-16"},{"lineNumber":228,"author":{"gitId":"LimJiaJing"},"content":"        int endIndexOfDate;","lastModifiedDate":"2021-09-16"},{"lineNumber":229,"author":{"gitId":"LimJiaJing"},"content":"        String date;","lastModifiedDate":"2021-09-16"},{"lineNumber":230,"author":{"gitId":"LimJiaJing"},"content":"        String taskName;","lastModifiedDate":"2021-09-16"},{"lineNumber":231,"author":{"gitId":"LimJiaJing"},"content":"        for (String taskString : tasksString) {","lastModifiedDate":"2021-09-16"},{"lineNumber":232,"author":{"gitId":"LimJiaJing"},"content":"            char type \u003d taskString.charAt(3);","lastModifiedDate":"2021-09-16"},{"lineNumber":233,"author":{"gitId":"LimJiaJing"},"content":"            switch (type) {","lastModifiedDate":"2021-09-16"},{"lineNumber":234,"author":{"gitId":"LimJiaJing"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2021-09-16"},{"lineNumber":235,"author":{"gitId":"LimJiaJing"},"content":"                startIndexOfTask \u003d 9;","lastModifiedDate":"2021-09-16"},{"lineNumber":236,"author":{"gitId":"LimJiaJing"},"content":"                taskName \u003d taskString.substring(startIndexOfTask);","lastModifiedDate":"2021-09-16"},{"lineNumber":237,"author":{"gitId":"LimJiaJing"},"content":"                Todo newTodo \u003d new Todo(taskName);","lastModifiedDate":"2021-09-16"},{"lineNumber":238,"author":{"gitId":"LimJiaJing"},"content":"                tasks.add(newTodo);","lastModifiedDate":"2021-09-16"},{"lineNumber":239,"author":{"gitId":"LimJiaJing"},"content":"                if (taskString.charAt(6) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-09-16"},{"lineNumber":240,"author":{"gitId":"LimJiaJing"},"content":"                    newTodo.setIsDone();","lastModifiedDate":"2021-09-16"},{"lineNumber":241,"author":{"gitId":"LimJiaJing"},"content":"                }","lastModifiedDate":"2021-09-16"},{"lineNumber":242,"author":{"gitId":"LimJiaJing"},"content":"                continue;","lastModifiedDate":"2021-09-16"},{"lineNumber":243,"author":{"gitId":"LimJiaJing"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2021-09-16"},{"lineNumber":244,"author":{"gitId":"LimJiaJing"},"content":"                startIndexOfTask \u003d 9;","lastModifiedDate":"2021-09-16"},{"lineNumber":245,"author":{"gitId":"LimJiaJing"},"content":"                endIndexOfTask \u003d taskString.indexOf(\u0027(\u0027) - 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":246,"author":{"gitId":"LimJiaJing"},"content":"                startIndexOfDate \u003d endIndexOfTask + 6;","lastModifiedDate":"2021-09-16"},{"lineNumber":247,"author":{"gitId":"LimJiaJing"},"content":"                endIndexOfDate \u003d taskString.indexOf(\u0027)\u0027);","lastModifiedDate":"2021-09-16"},{"lineNumber":248,"author":{"gitId":"LimJiaJing"},"content":"                taskName \u003d taskString.substring(startIndexOfTask, endIndexOfTask);","lastModifiedDate":"2021-09-16"},{"lineNumber":249,"author":{"gitId":"LimJiaJing"},"content":"                date \u003d taskString.substring(startIndexOfDate, endIndexOfDate);","lastModifiedDate":"2021-09-16"},{"lineNumber":250,"author":{"gitId":"LimJiaJing"},"content":"                Deadline newDeadline \u003d new Deadline(taskName, date);","lastModifiedDate":"2021-09-16"},{"lineNumber":251,"author":{"gitId":"LimJiaJing"},"content":"                tasks.add(newDeadline);","lastModifiedDate":"2021-09-16"},{"lineNumber":252,"author":{"gitId":"LimJiaJing"},"content":"                if (taskString.charAt(6) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-09-16"},{"lineNumber":253,"author":{"gitId":"LimJiaJing"},"content":"                    newDeadline.setIsDone();","lastModifiedDate":"2021-09-16"},{"lineNumber":254,"author":{"gitId":"LimJiaJing"},"content":"                }","lastModifiedDate":"2021-09-16"},{"lineNumber":255,"author":{"gitId":"LimJiaJing"},"content":"                continue;","lastModifiedDate":"2021-09-16"},{"lineNumber":256,"author":{"gitId":"LimJiaJing"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2021-09-16"},{"lineNumber":257,"author":{"gitId":"LimJiaJing"},"content":"                startIndexOfTask \u003d 9;","lastModifiedDate":"2021-09-16"},{"lineNumber":258,"author":{"gitId":"LimJiaJing"},"content":"                endIndexOfTask \u003d taskString.indexOf(\u0027(\u0027) - 1;","lastModifiedDate":"2021-09-16"},{"lineNumber":259,"author":{"gitId":"LimJiaJing"},"content":"                startIndexOfDate \u003d endIndexOfTask + 6;","lastModifiedDate":"2021-09-16"},{"lineNumber":260,"author":{"gitId":"LimJiaJing"},"content":"                endIndexOfDate \u003d taskString.indexOf(\u0027)\u0027);","lastModifiedDate":"2021-09-16"},{"lineNumber":261,"author":{"gitId":"LimJiaJing"},"content":"                taskName \u003d taskString.substring(startIndexOfTask, endIndexOfTask);","lastModifiedDate":"2021-09-16"},{"lineNumber":262,"author":{"gitId":"LimJiaJing"},"content":"                date \u003d taskString.substring(startIndexOfDate, endIndexOfDate);","lastModifiedDate":"2021-09-16"},{"lineNumber":263,"author":{"gitId":"LimJiaJing"},"content":"                Event newEvent \u003d new Event(taskName, date);","lastModifiedDate":"2021-09-16"},{"lineNumber":264,"author":{"gitId":"LimJiaJing"},"content":"                tasks.add(newEvent);","lastModifiedDate":"2021-09-16"},{"lineNumber":265,"author":{"gitId":"LimJiaJing"},"content":"                if (taskString.charAt(6) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-09-16"},{"lineNumber":266,"author":{"gitId":"LimJiaJing"},"content":"                    newEvent.setIsDone();","lastModifiedDate":"2021-09-16"},{"lineNumber":267,"author":{"gitId":"LimJiaJing"},"content":"                }","lastModifiedDate":"2021-09-16"},{"lineNumber":268,"author":{"gitId":"LimJiaJing"},"content":"                continue;","lastModifiedDate":"2021-09-16"},{"lineNumber":269,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-09-16"},{"lineNumber":270,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":271,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-09-16"},{"lineNumber":272,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":273,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LimJiaJing":273}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.task;","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"public class Todo {","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"    private String name;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"     * Returns a Todo object.","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"     * @param name Name of the Todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"        setName(name);","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"     * Returns the name of the Todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"     * @return Name of the Todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"    public String getName() {","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"        return name;","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"     * Sets the name of the Todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"     * @param name Name of the Todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"    public void setName(String name) {","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"     * Returns status of the todo, whether is it done or not.","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"LimJiaJing"},"content":"     * @return Status of the todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"LimJiaJing"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"        return isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"LimJiaJing"},"content":"     * Sets status of the todo to true.","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"LimJiaJing"},"content":"    public void setIsDone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"LimJiaJing"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"LimJiaJing"},"content":"     * Returns a formatted string which contains information about the todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"LimJiaJing"},"content":"     * @return Formatted string which contains information about the todo.","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"LimJiaJing"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"LimJiaJing"},"content":"        String boolString \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"LimJiaJing"},"content":"        return String.format(\"[T][%s] %s\", boolString, name);","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LimJiaJing":60}},{"path":"src/main/java/duke/ui/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"import duke.command.Command;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"public class Parser {","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"     * Processes the user\u0027s input.","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"     * Retrieves the command the user gave.","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"     * Calls corresponding methods from TaskList to handle the command.","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"     * If the command in invalid, a NullPointerException is thrown implicitly.","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"     * If NullPointerException is caught, does nothing and returns true.","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"     * Main error handling is done in helper method, retrieveUserCommand().","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"     * @param userInput User\u0027s input.","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"     * @return A boolean value which indicates whether the userInput the program should continue running.","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"    public static boolean processUserInput(String userInput) {","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"            Command userCommand \u003d retrieveUserCommand(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"            switch (userCommand) {","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"            case DONE:","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"                TaskList.markDone(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"            case LIST:","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"                TaskList.printTasks();","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"            case TODO:","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"                TaskList.addTodo(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"            case EVENT:","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"                TaskList.addEvent(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"            case DEADLINE:","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"LimJiaJing"},"content":"                TaskList.addDeadline(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"LimJiaJing"},"content":"            case DELETE:","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"LimJiaJing"},"content":"                TaskList.deleteTask(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"LimJiaJing"},"content":"            case FIND:","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"                TaskList.findTasksWithSubstring(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"LimJiaJing"},"content":"            case BYE:","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"LimJiaJing"},"content":"                return false;","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"LimJiaJing"},"content":"            default:","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"LimJiaJing"},"content":"                return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"LimJiaJing"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"LimJiaJing"},"content":"            return true;","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":55,"author":{"gitId":"LimJiaJing"},"content":"     * Retrieves the user\u0027s command from the user\u0027s input.","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"LimJiaJing"},"content":"     * If command is not valid, throws an IllegalArgumentException.","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"LimJiaJing"},"content":"     * If IllegalArgumentException is caught, prints error message and returns null.","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"LimJiaJing"},"content":"     * If no IllegalArgumentException is thrown, returns a Command type enum.","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"LimJiaJing"},"content":"     * A helper method for processUserInput().","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"LimJiaJing"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"LimJiaJing"},"content":"     * @param userInput User\u0027s input.","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"LimJiaJing"},"content":"     * @return An enum of type Command.","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"LimJiaJing"},"content":"    private static Command retrieveUserCommand(String userInput) {","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"LimJiaJing"},"content":"        String commandString;","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"LimJiaJing"},"content":"        int indexOfSpace \u003d userInput.indexOf(\u0027 \u0027);","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"LimJiaJing"},"content":"        if (indexOfSpace \u003d\u003d -1) {","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"LimJiaJing"},"content":"            commandString \u003d userInput.substring(0);","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"LimJiaJing"},"content":"        } else {","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"LimJiaJing"},"content":"            commandString \u003d userInput.substring(0, indexOfSpace);","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"LimJiaJing"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"LimJiaJing"},"content":"            Command userCommand \u003d Command.valueOf(commandString.toUpperCase());","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"LimJiaJing"},"content":"            return userCommand;","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"LimJiaJing"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(\"OOPS!!! I\u0027m sorry but I don\u0027t know what that means\");","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"LimJiaJing"},"content":"            return null;","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"LimJiaJing"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"LimJiaJing":81}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJiaJing"},"content":"package duke.ui;","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"LimJiaJing"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-01"},{"lineNumber":4,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"LimJiaJing"},"content":"import duke.FormatLines;","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"LimJiaJing"},"content":"public class Ui {","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"LimJiaJing"},"content":"    private static Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"LimJiaJing"},"content":"    private static String userInput;","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"LimJiaJing"},"content":"     * Talks to the user.","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"LimJiaJing"},"content":"     * Calls getUserInput() method to read user input from command line.","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"LimJiaJing"},"content":"     * Calls processUserInput() method from Parser class to process the user\u0027s input.","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"LimJiaJing"},"content":"     * If false is returned, means user wants to end the program. Break the loop and return.","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"LimJiaJing"},"content":"     * Else, continue reading command line for user\u0027s input.     *","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"LimJiaJing"},"content":"    public static void talkToUser() {","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"LimJiaJing"},"content":"        boolean ContinueProgram;","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"LimJiaJing"},"content":"        do {","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"LimJiaJing"},"content":"            getUserInput();","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"LimJiaJing"},"content":"            ContinueProgram \u003d Parser.processUserInput(userInput);","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"LimJiaJing"},"content":"            if (!ContinueProgram) {","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"LimJiaJing"},"content":"                return;","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"LimJiaJing"},"content":"            }","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"LimJiaJing"},"content":"            System.out.println(FormatLines.divider);","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"LimJiaJing"},"content":"        } while (true);","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"LimJiaJing"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"LimJiaJing"},"content":"     * Reads user input from the command line.","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"LimJiaJing"},"content":"     * Removes any leading and trailing white spaces in the string read from the command line.","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"LimJiaJing"},"content":"     * Prints a line divider after reading an input.","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"LimJiaJing"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"LimJiaJing"},"content":"    private static void getUserInput() {","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println();","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"LimJiaJing"},"content":"        userInput \u003d in.nextLine();","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"LimJiaJing"},"content":"        userInput \u003d userInput.strip();","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"LimJiaJing"},"content":"        System.out.println(FormatLines.divider);","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"LimJiaJing"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"LimJiaJing"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"LimJiaJing"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"LimJiaJing":43}}]
