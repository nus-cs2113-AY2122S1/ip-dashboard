[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"T | 0 | shopping","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"D | 1 | submit report | Oct 01 2021 11:59","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"brendanlsz":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"Duke is a Command Line Interface (CLI) application that assists you in","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"keeping track of your everyday tasks. ","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"## Quick start guide","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"### To set up in IntelliJ","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"- Please follow the instructions ","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"[here](https://github.com/brendanlsz/ip#readme)","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"to set up Duke on your computer.","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"### To run the jar file","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"1. Install `Java 11` on your computer.","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"2. Download the `ip.jar` file from ","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"[here](https://github.com/brendanlsz/ip/releases/tag/A-Jar).","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"3. Create a new folder and copy the `ip.jar` into this folder.","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"4. Open a terminal (such as `cmd`) in this folder.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"5. To launch Duke, type `java -jar ip.jar` into your terminal.","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"6. Duke will now create a text file `duke.txt` in a folder named `data` ","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"where duke will save your tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"7. Please refer below for the list of commands and features.","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"### Add `Task`","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"Add a new task to the list. \\","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"Duke supports 3 types of `tasks` namely:","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"- `Todo`","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"- `Deadline`","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"- `Event`","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"### List `Task`","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"List out all the current tasks in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"### Mark `Task` as done","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"Once you have completed a `Task`, you can mark it as `done`.","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"### Delete `Task`","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"Delete a `Task` from the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"### Find `Task`","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"List all matching tasks that contain a keyword.","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"### Exit ","lastModifiedDate":"2021-09-21"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"Terminates the Duke program.","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"### Save data to file","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"Converts all current tasks in the list to String form and saves this to","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"`duke.txt`. This is done automatically.","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"### Adding a `Todo`: `todo`","lastModifiedDate":"2021-09-21"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"Adds a Todo task to the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"Format: `todo TASK_NAME`","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2021-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"`todo shopping`","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":" Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"  [T][ ] shopping","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":" Now you have 1 tasks in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"### Adding a `Deadline`: `deadline`","lastModifiedDate":"2021-09-21"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"Adds a Deadline task to the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"Format: `deadline TASK_NAME /by DATE_TIME`","lastModifiedDate":"2021-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"- `deadline assignment /by tonight`","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"- `deadline submit report /by 2021-10-01 11:59`","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":" Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"  [D][ ] submit report (by: Oct 01 2021 11:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":" Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"### Adding an `Event`: `event`","lastModifiedDate":"2021-09-21"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"Adds an Event task to the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"Format: `event TASK_NAME /at DATE_TIME`","lastModifiedDate":"2021-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"Example of usage:","lastModifiedDate":"2021-09-21"},{"lineNumber":110,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"- `event dinner /at tomorrow night 7pm`","lastModifiedDate":"2021-09-21"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"- `event concert /at 2021-12-11 19:00`","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":" Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-21"},{"lineNumber":117,"author":{"gitId":"brendanlsz"},"content":"  [E][ ] concert (at: Dec 11 2021 19:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":" Now you have 3 tasks in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"\u003e **_NOTE:_**  If you wish to store DATE_TIME as a LocalDateTime","lastModifiedDate":"2021-09-21"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"\u003e object, please use the format `YYYY-MM-DD HH:MM`","lastModifiedDate":"2021-09-21"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"### List all `Task`: `list`","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"Lists out all current tasks in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"Format: `list`","lastModifiedDate":"2021-09-21"},{"lineNumber":130,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"Example of usage:","lastModifiedDate":"2021-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"- `list`","lastModifiedDate":"2021-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":135,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":" Here are the tasks in your list:","lastModifiedDate":"2021-09-21"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":" 1.[T][ ] shopping","lastModifiedDate":"2021-09-21"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":" 2.[D][ ] submit report (by: Oct 01 2021 11:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":" 3.[E][ ] concert (at: Dec 11 2021 19:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"### Marking a `Task` as done: `done`","lastModifiedDate":"2021-09-21"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"Marks a task as done. To obtain the task index of the task you wish to mark","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"as done, first use the `list` command.","lastModifiedDate":"2021-09-21"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"Format: `done TASK_INDEX`","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"Example of usage:","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"brendanlsz"},"content":"- `done 2`","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"brendanlsz"},"content":" Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"brendanlsz"},"content":"   [D][X] submit report (by: Oct 01 2021 11:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"brendanlsz"},"content":"### Delete a `Task`: `delete`","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"Deletes a task from the list. To obtain the task index of the task you ","lastModifiedDate":"2021-09-21"},{"lineNumber":165,"author":{"gitId":"brendanlsz"},"content":"wish to delete, first use the `list` command.","lastModifiedDate":"2021-09-21"},{"lineNumber":166,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":167,"author":{"gitId":"brendanlsz"},"content":"Format: `delete TASK_INDEX`","lastModifiedDate":"2021-09-21"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"Example of usage:","lastModifiedDate":"2021-09-21"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"- `delete 3`","lastModifiedDate":"2021-09-21"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":175,"author":{"gitId":"brendanlsz"},"content":" Got it! I\u0027ve removed this task:","lastModifiedDate":"2021-09-21"},{"lineNumber":176,"author":{"gitId":"brendanlsz"},"content":"   [E][ ] concert (at: Dec 11 2021 19:00)","lastModifiedDate":"2021-09-21"},{"lineNumber":177,"author":{"gitId":"brendanlsz"},"content":" Now you have 2 tasks in the list.","lastModifiedDate":"2021-09-21"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"### Find `Task`: `find`","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"Finds all the tasks that contain a keyword.","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":187,"author":{"gitId":"brendanlsz"},"content":"Example of usage:","lastModifiedDate":"2021-09-21"},{"lineNumber":188,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":189,"author":{"gitId":"brendanlsz"},"content":"- `find report`","lastModifiedDate":"2021-09-21"},{"lineNumber":190,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":" Here are the matching tasks in your list:","lastModifiedDate":"2021-09-21"},{"lineNumber":194,"author":{"gitId":"brendanlsz"},"content":" 1.[D][X] submit report (by: Oct 01 2021 11:59)","lastModifiedDate":"2021-09-21"},{"lineNumber":195,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":196,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":197,"author":{"gitId":"brendanlsz"},"content":"### Exit: `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":198,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":199,"author":{"gitId":"brendanlsz"},"content":"Terminates the Duke program.","lastModifiedDate":"2021-09-21"},{"lineNumber":200,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":201,"author":{"gitId":"brendanlsz"},"content":"Format: `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":202,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":203,"author":{"gitId":"brendanlsz"},"content":"Example of usage:","lastModifiedDate":"2021-09-21"},{"lineNumber":204,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":205,"author":{"gitId":"brendanlsz"},"content":"- `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":206,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":207,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":208,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":209,"author":{"gitId":"brendanlsz"},"content":" Bye. Hope to see you again soon!","lastModifiedDate":"2021-09-21"},{"lineNumber":210,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":211,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":212,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":213,"author":{"gitId":"brendanlsz"},"content":"### Exit: `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":214,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":215,"author":{"gitId":"brendanlsz"},"content":"Terminates the Duke program. Upon terminating the program, the current","lastModifiedDate":"2021-09-21"},{"lineNumber":216,"author":{"gitId":"brendanlsz"},"content":"tasks are automatically saved to the file.","lastModifiedDate":"2021-09-21"},{"lineNumber":217,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":218,"author":{"gitId":"brendanlsz"},"content":"Format: `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":219,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":220,"author":{"gitId":"brendanlsz"},"content":"Example of usage:","lastModifiedDate":"2021-09-21"},{"lineNumber":221,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":222,"author":{"gitId":"brendanlsz"},"content":"- `bye`","lastModifiedDate":"2021-09-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":224,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-09-21"},{"lineNumber":225,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":226,"author":{"gitId":"brendanlsz"},"content":" Bye. Hope to see you again soon!","lastModifiedDate":"2021-09-21"},{"lineNumber":227,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":229,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":230,"author":{"gitId":"brendanlsz"},"content":"Current tasks successfully saved at: ","lastModifiedDate":"2021-09-21"},{"lineNumber":231,"author":{"gitId":"brendanlsz"},"content":"C:\\Users\\Brendan Lau\\Desktop\\ip\\data\\duke.txt","lastModifiedDate":"2021-09-21"},{"lineNumber":232,"author":{"gitId":"brendanlsz"},"content":"____________________________________________________________","lastModifiedDate":"2021-09-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"brendanlsz":208,"-":25}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.file.FileManager;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private static final String ROOT \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    private static final Path FILE_PATH \u003d Paths.get(ROOT, \"data\", \"duke.txt\");","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    private static final Path DIRECTORY_PATH \u003d Paths.get(ROOT, \"data\");","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    // Task manager","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    // File manager","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    private FileManager fileManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    // Parser","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    private Parser parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    // Ui","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     * Constructor. Instantiates a TaskManager, FileManager, and Parser.","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    public Duke() {","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"        taskManager \u003d new TaskManager();","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        fileManager \u003d new FileManager(FILE_PATH.toString(), DIRECTORY_PATH.toString());","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        fileManager.initialiseDuke(taskManager, ui);","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"     * Runs the duke program.","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"     * Executes various commands based on user inputs.","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"    public void run() {","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"        ui.printGreeting();","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"        do {","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"            String line \u003d ui.readCommand();","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"            try {","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"                Command c \u003d parser.execute(line);","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"                c.execute(taskManager, ui);","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"                isExit \u003d c.getIsBye();","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"                System.out.println(\"  \" + e.getMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"            System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"        } while (!isExit);","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"        fileManager.saveDuke(taskManager, ui);","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"     * Instantiates an instance of Duke and runs it.","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"     * @param args not utilised for this program.","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"        new Duke().run();","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"brendanlsz":69,"-":3}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":" * Command to add a Deadline.","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    private static final String PARAMETER_BY \u003d \"/by\";","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    private final String line;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     * Constructs an AddDeadlineCommand with the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    public AddDeadlineCommand(String line) {","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        this.line \u003d line;","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     * Executes the AddDeadlineCommand by adding a Deadline to the","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     * ArrayList of tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Used to add the Deadline task.","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Used to print message.","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If the command description is empty.","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        String rawDescription \u003d Parser.parseDescription(line, COMMAND_DEADLINE);","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        int indexBy \u003d rawDescription.indexOf(PARAMETER_BY);","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        String[] details \u003d Parser.splitTaskDetails(rawDescription, COMMAND_DEADLINE, indexBy);","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        Task addedTask \u003d new Deadline(details[0], details[1]);","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"        taskManager.addTask(addedTask);","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"        ui.printAddTask(addedTask, taskManager);","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"brendanlsz":43}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":" * Command to add an Event.","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    private static final String PARAMETER_AT \u003d \"/at\";","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    private final String line;","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     * Constructs an AddEventCommand with the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    public AddEventCommand(String line) {","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        this.line \u003d line;","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     * Executes the AddEventCommand by adding an Event to the","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     * ArrayList of tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Used to add the Event task.","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Used to print message.","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If the command description is empty.","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        String rawDescription \u003d Parser.parseDescription(line, COMMAND_EVENT);","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        int indexAt \u003d rawDescription.indexOf(PARAMETER_AT);","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        String[] details \u003d Parser.splitTaskDetails(rawDescription, COMMAND_EVENT, indexAt);","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        Task addedTask \u003d new Event(details[0], details[1]);","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"        taskManager.addTask(addedTask);","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"        ui.printAddTask(addedTask, taskManager);","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"brendanlsz":43}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":" * Command to add a Todo.","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"public class AddTodoCommand extends Command {","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    private final String line;","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"     * Constructs an AddTodoCommand with the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     * @param description The user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    public AddTodoCommand(String description) {","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"        this.line \u003d description;","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     * Executes the AddTodoCommand by adding a Todo task to the","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     * ArrayList of tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Used to add the Todo task.","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Used to print message.","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If the command description is empty.","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        String rawDescription \u003d Parser.parseDescription(line, COMMAND_TODO);","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        Task addedTask \u003d new Todo(rawDescription);","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        taskManager.addTask(addedTask);","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        ui.printAddTask(addedTask, taskManager);","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"brendanlsz":40}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":" * An abstract class.","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"    protected boolean isBye;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"     * Abstract method","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    abstract public void execute(TaskManager taskManager, Ui ui) throws DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     * Returns a boolean indicating whether user has said \"bye\"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"     * @return Boolean isBye indicating whether user has said \"bye\".","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    public boolean getIsBye() {","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        return isBye;","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":26}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":" * Command to delete a task.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    private final String line;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a DeleteTaskCommand with the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    public DeleteTaskCommand(String line) {","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"        this.line \u003d line;","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"     * Executes the DeleteTaskCommand by deleting the","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"     * task corresponding to the taskId.","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Used to delete task.","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Used to print messages.","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If task ID is invalid.","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"        int taskId \u003d Parser.getTaskId(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        Task deletedTask;","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"            deletedTask \u003d taskManager.deleteTask(taskId);","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"            ui.printInvalidTaskNumber();","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"            throw new DukeException(\"Please try again!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"        ui.printDeleteTask(deletedTask, taskManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":44}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":" * Command to mark a task as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    private final String line;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a DoneCommand with the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    public DoneCommand(String line) {","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"        this.line \u003d line;","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"     * Executes the DoneCommand by marking the task","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"     * corresponding to taskId as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Used to mark task as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Used to print messages.","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If task ID is invalid.","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"        int taskId \u003d Parser.getTaskId(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        Task completedTask;","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"            completedTask \u003d taskManager.markAsDone(taskId);","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"            ui.printInvalidTaskNumber();","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"            throw new DukeException(\"Please try again!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"        ui.printMarkAsDone(completedTask);","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":44}},{"path":"src/main/java/duke/command/FindTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":" * Command to find tasks based on a keyword","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"public class FindTasksCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    private final String line;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a FindTasksCommand with the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    public FindTasksCommand(String line) {","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"        this.line \u003d line;","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"     * Executes the FindTasksCommand by filtering tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"     * based on the keyword.","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Used to filter tasks based on keyword.","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Passed to the findTasks method.","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If keyword is empty.","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"        String keyword \u003d Parser.parseDescription(line, COMMAND_FIND);","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        taskManager.findTasks(keyword, ui);","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":37}},{"path":"src/main/java/duke/command/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":" * Command to list all current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"public class ListTasksCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"     * Executes the ListTasksCommand by printing all","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"     * current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Passed to the listTasks method.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Used to list all tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) {","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"        ui.listTasks(taskManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":22}},{"path":"src/main/java/duke/command/QuitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.command;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":" * Command for quitting duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"public class QuitCommand extends Command {","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"     * Executes the QuitCommand by setting isBye as true, and","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"     * printing a farewell message.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager Not used here.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"     * @param ui          Used to print a farewell message.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    public void execute(TaskManager taskManager, Ui ui) {","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"        isBye \u003d true;","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"        ui.printFarewell();","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":22}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.exception;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":" * Used to handle exceptions that are specific to Duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"    private final String message;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a DukeException with a message s.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"     * @param s The exception message.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    public DukeException(String s) {","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"        this.message \u003d s;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     * Gets the exception message.","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"     * @return Exception message as a String.","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    public String getMessage() {","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"        return message;","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"brendanlsz":27}},{"path":"src/main/java/duke/file/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.file;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import java.io.File;","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":" * Handles dealing with the file and directory used to save current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"public class FileManager {","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    public String filePath;","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    public String directoryPath;","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a FileManager with the file path and directory path.","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"     * @param filePath      The path of the file.","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     * @param directoryPath The path of the directory.","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"    public FileManager(String filePath, String directoryPath) {","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"        this.directoryPath \u003d directoryPath;","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"     * Creates a new file at the filePath.","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O exception has occurred.","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // @@author brendanlsz-reused","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    // Reused from https://www.tutorialspoint.com/java/io/file_createnewfile.htm","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    // with modifications","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void createFile() throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        boolean hasCreatedFile \u003d file.createNewFile();","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (hasCreatedFile) {","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            System.out.println(\"File created at \" + file.getCanonicalPath());","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            System.out.println(\"File already exists at \" + file.getCanonicalPath());","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a directory at directoryPath if it does not exist.","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // @@author brendanlsz-reused","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Reused from https://www.tutorialspoint.com/java/io/file_mkdir.htm","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // with modifications","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void createDirectory() {","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        File directory \u003d new File(directoryPath);","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        boolean hasCreatedDirectory \u003d directory.mkdir();","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (hasCreatedDirectory) {","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            System.out.println(\"New directory created at \" + directoryPath);","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Initialises Duke status by preloading the saved tasks from the file at filePath.","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param taskManager Used to preload the saved tasks from the file.","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @throws IOException If an I/O exception has occurred.","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    // @@author brendanlsz-reused","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    // Reused from https://www.techiedelight.com/how-to-read-a-file-using-bufferedreader-in-java/","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    // with modifications","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void initialiseDukeStatus(TaskManager taskManager) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileInputStream stream;","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        stream \u003d new FileInputStream(filePath);","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        taskManager.preloadTasks(reader);","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        reader.close();","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Saves all the current tasks to the file at filePath.","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @param taskManager Used to convert current tasks to a String.","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws IOException If an I/O exception has occurred.","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    // @@author brendanlsz-reused","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    // Reused from https://www.javatpoint.com/java-filewriter-class","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    // with modifications","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void saveDukeStatus(TaskManager taskManager) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        FileWriter fw;","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String currentTasks;","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            currentTasks \u003d taskManager.convertCurrentTasksToString();","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fw \u003d new FileWriter(file);","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fw.write(currentTasks);","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        fw.close();","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Calls the saveDukeStatus method in order to save the current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Then, print to the user a success message if successful, or an error","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * message otherwise.","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @param taskManager To pass to the saveDukeStatus method.","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @param ui          To print success message if current tasks were successfully saved.","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void saveDuke(TaskManager taskManager, Ui ui) {","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            saveDukeStatus(taskManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            System.out.println(\"File write error\");","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ui.printSuccessfullySavedTasks(filePath.toString());","lastModifiedDate":"2021-09-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Initialises Duke by creating a directory and file if they do not exist, then","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * calls the initialiseDukeStatus method to initialise the status of Duke.","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @param taskManager To pass to the initialiseDukeStatus method","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void initialiseDuke(TaskManager taskManager, Ui ui) {","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        createDirectory();","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            createFile();","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            System.out.println(\"File Error!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            initialiseDukeStatus(taskManager);","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            System.out.println(\"File not found!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            System.out.println(\"File error!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            System.out.println(\"An error occurred while adding task\");","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"brendanlsz":38,"-":110}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.command.DeleteTaskCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.command.QuitCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.command.ListTasksCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import duke.command.FindTasksCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":" * Parses user input to make sense of the input.","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"public class Parser {","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    private static final Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_DONE \u003d \"done\";","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"     * Returns the corresponding command object (to be executed) based","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"     * on user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"     * @return A command object corresponding to the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If the user input is not a valid command.","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"    public Command execute(String line) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        String command \u003d parseCommand(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"        switch (command) {","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"            return new QuitCommand();","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"            return new ListTasksCommand();","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"            return new AddTodoCommand(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"            return new AddDeadlineCommand(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"            return new AddEventCommand(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"            return new DeleteTaskCommand(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"            return new DoneCommand(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"            return new FindTasksCommand(line);","lastModifiedDate":"2021-09-21"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"        default:","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"            ui.printInvalidCommand();","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"            throw new DukeException(\"Please provide a valid command\");","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"     * Obtains and returns the command word from the user input.","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"     * @return The user command (command word).","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If no command word was found.","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"    private static String parseCommand(String line) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"        String[] words \u003d line.split(\" \"); // Convert sentence into array of words","lastModifiedDate":"2021-09-21"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"        String command;","lastModifiedDate":"2021-09-21"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-21"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"            command \u003d words[0];","lastModifiedDate":"2021-09-21"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-21"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"            ui.printInvalidCommand();","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"            throw new DukeException(\"Please provide a valid command\");","lastModifiedDate":"2021-09-21"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"        return command;","lastModifiedDate":"2021-09-21"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"     * Returns the description of the command.","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"     * @param line    The user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"     * @param command The user command.","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"     * @return The description of the command.","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If the command description is empty.","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"    public static String parseDescription(String line, String command) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"        int descriptionIndex \u003d line.indexOf(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"        String description;","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"            description \u003d line.substring(descriptionIndex).strip();","lastModifiedDate":"2021-09-21"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"            ui.printEmptyDescription(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"            throw new DukeException(\"Please provide a description\");","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"        return description.strip();","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"     * Splits the description and timing information. Then, returns","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"     * a String Array of length 2, containing the description and","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"brendanlsz"},"content":"     * timing information for Event and Deadline tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"     * @param rawDescription The entire description (excluding the command).","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"     * @param command        The command (command word) from the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"     * @param indexSplit     The index of \"/at\" or \"/by\"","lastModifiedDate":"2021-09-21"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"     * @return A String Array of length 2, containing the description (task name)","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"     * and timing information.","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If the description format provided is invalid.","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"    public static String[] splitTaskDetails(","lastModifiedDate":"2021-09-21"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"            String rawDescription, String command, int indexSplit)","lastModifiedDate":"2021-09-21"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"            throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"        String[] description \u003d new String[2];","lastModifiedDate":"2021-09-20"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"            description[0] \u003d rawDescription.substring(0, indexSplit - 1).strip();","lastModifiedDate":"2021-09-21"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"            description[1] \u003d rawDescription.substring(indexSplit + 4).strip();","lastModifiedDate":"2021-09-21"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"            ui.printCorrectCommandFormat(command);","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"            throw new DukeException(\"Please try again!\");","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"brendanlsz"},"content":"        return description;","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"brendanlsz"},"content":"     * Returns the task ID as an Integer from the user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"     * @param line The user input.","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":"     * @return The task ID as an Integer.","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"     * @throws DukeException If the task ID from the user input is","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"     *                       not an integer, or if no task ID was provided.","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"    public static Integer getTaskId(String line) throws DukeException {","lastModifiedDate":"2021-09-21"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"        int spaceIndex \u003d line.indexOf(\" \");","lastModifiedDate":"2021-09-21"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"        String taskId \u003d line.substring(spaceIndex + 1).strip();","lastModifiedDate":"2021-09-21"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"        int num;","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"            if (taskId.equals(\"\") || taskId.equals(COMMAND_DONE) || taskId.equals(COMMAND_DELETE)) {","lastModifiedDate":"2021-09-21"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"                throw new DukeException(\"Please provide task ID\");","lastModifiedDate":"2021-09-20"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"            num \u003d Integer.parseInt(taskId);","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"brendanlsz"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"            ui.printInvalidTaskNumberFormat();","lastModifiedDate":"2021-09-20"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"            throw new DukeException(\"Please provide an integer\");","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"        return num - 1;","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":156,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"brendanlsz"},"content":"    private static LocalDate parseDate(String description) {","lastModifiedDate":"2021-09-20"},{"lineNumber":158,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-09-20"},{"lineNumber":159,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"            date \u003d LocalDate.parse(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":161,"author":{"gitId":"brendanlsz"},"content":"        } catch (DateTimeParseException ignore) {","lastModifiedDate":"2021-09-20"},{"lineNumber":162,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"        return date;","lastModifiedDate":"2021-09-20"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"brendanlsz"},"content":"    private static LocalTime parseTime(String description) {","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"brendanlsz"},"content":"        LocalTime time \u003d null;","lastModifiedDate":"2021-09-20"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"            time \u003d LocalTime.parse(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"        } catch (DateTimeParseException ignore) {","lastModifiedDate":"2021-09-20"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"        return time;","lastModifiedDate":"2021-09-20"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":175,"author":{"gitId":"brendanlsz"},"content":"    private static LocalTime getTime(String[] description) {","lastModifiedDate":"2021-09-20"},{"lineNumber":176,"author":{"gitId":"brendanlsz"},"content":"        LocalTime time;","lastModifiedDate":"2021-09-20"},{"lineNumber":177,"author":{"gitId":"brendanlsz"},"content":"        for (String s : description) {","lastModifiedDate":"2021-09-20"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"            time \u003d parseTime(s);","lastModifiedDate":"2021-09-20"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2021-09-20"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"                return time;","lastModifiedDate":"2021-09-20"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"        return null;","lastModifiedDate":"2021-09-20"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"    private static LocalDate getDate(String[] description) {","lastModifiedDate":"2021-09-20"},{"lineNumber":187,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date;","lastModifiedDate":"2021-09-20"},{"lineNumber":188,"author":{"gitId":"brendanlsz"},"content":"        for (String s : description) {","lastModifiedDate":"2021-09-20"},{"lineNumber":189,"author":{"gitId":"brendanlsz"},"content":"            date \u003d parseDate(s);","lastModifiedDate":"2021-09-20"},{"lineNumber":190,"author":{"gitId":"brendanlsz"},"content":"            if (date !\u003d null) {","lastModifiedDate":"2021-09-20"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"                return date;","lastModifiedDate":"2021-09-20"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-09-20"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":194,"author":{"gitId":"brendanlsz"},"content":"        return null;","lastModifiedDate":"2021-09-20"},{"lineNumber":195,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":196,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":197,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":198,"author":{"gitId":"brendanlsz"},"content":"     * Attempts to parse a given String and returns a","lastModifiedDate":"2021-09-21"},{"lineNumber":199,"author":{"gitId":"brendanlsz"},"content":"     * LocalDateTime object if successful.","lastModifiedDate":"2021-09-21"},{"lineNumber":200,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":201,"author":{"gitId":"brendanlsz"},"content":"     * @param line Description String to be parsed.","lastModifiedDate":"2021-09-21"},{"lineNumber":202,"author":{"gitId":"brendanlsz"},"content":"     * @return A LocalDateTime object if successful, returns","lastModifiedDate":"2021-09-21"},{"lineNumber":203,"author":{"gitId":"brendanlsz"},"content":"     * null otherwise.","lastModifiedDate":"2021-09-21"},{"lineNumber":204,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":205,"author":{"gitId":"brendanlsz"},"content":"    public static LocalDateTime parseDateAndTime(String line) {","lastModifiedDate":"2021-09-20"},{"lineNumber":206,"author":{"gitId":"brendanlsz"},"content":"        String[] description \u003d line.split(\" \");","lastModifiedDate":"2021-09-20"},{"lineNumber":207,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d getDate(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":208,"author":{"gitId":"brendanlsz"},"content":"        LocalTime time \u003d getTime(description);","lastModifiedDate":"2021-09-20"},{"lineNumber":209,"author":{"gitId":"brendanlsz"},"content":"        if (date !\u003d null \u0026\u0026 time !\u003d null) {","lastModifiedDate":"2021-09-20"},{"lineNumber":210,"author":{"gitId":"brendanlsz"},"content":"            return LocalDateTime.of(date, time);","lastModifiedDate":"2021-09-20"},{"lineNumber":211,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":212,"author":{"gitId":"brendanlsz"},"content":"        return null;","lastModifiedDate":"2021-09-20"},{"lineNumber":213,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":214,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":214}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":" * Inherits from Task. Represents a Deadline task","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":" * and tracks timing information.","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"    protected String by;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a Deadline task with a description and","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"     * timing information.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"     * @param by          The timing information of the Deadline task.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"        super.setDateAndTime(by);","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"     * Gets the timing information of the Deadline task.","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"     * @return The timing information of the Deadline task.","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    public String getBy() {","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"        return by;","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     * Sets the date and time of the Deadline task.","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"     * @param line String containing timing information.","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"    public void setDateAndTime(String line) {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        super.setDateAndTime(line);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"     * Provides a String representation of the Deadline task. If this Deadline","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     * task has a valid date and time, the timing information will be displayed","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"     * in a different format (MMM dd yyyy HH:mm).","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"     * @return The string representation of the Deadline task, including","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"     * its timing information.","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        if (hasDateTime) {","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"            by \u003d getDateAndTime();","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"brendanlsz":57}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":" * Inherits from Task. Represents an event and","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":" * tracks timing information.","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"    protected String at;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"     * Constructs an Event with a description and","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"     * timing information.","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"     * @param description The description of the Event.","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"     * @param at          The timing information of the Event.","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"        super.setDateAndTime(at);","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"     * Gets the timing information of the Event.","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"     * @return The timing information of the Event.","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    public String getAt() {","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"        return at;","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     * Sets the date and time of the Event task.","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"     * @param line String containing timing information.","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"    public void setDateAndTime(String line) {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        super.setDateAndTime(line);","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"     * Provides a String representation of Event. If this Event task has","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     * a valid date and time, the timing information will be displayed","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"     * in a different format (MMM dd yyyy HH:mm).","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"     * @return A String representation of the Event including","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"     * its timing information.","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        if (hasDateTime) {","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"            at \u003d getDateAndTime();","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"brendanlsz":57}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":" * Representing a task with a description and","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":" * a boolean variable isDone to indicate whether","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":" * the task is done or not.","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"public class Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    protected String description;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    protected boolean hasDateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    protected LocalDateTime dateTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a task with a description.","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"        this.hasDateTime \u003d false;","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     * Set the date and time (dateTime) of the task.","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     * @param line String containing timing information.","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"    protected void setDateAndTime(String line) {","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        dateTime \u003d Parser.parseDateAndTime(line);","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        if (dateTime !\u003d null) {","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"            hasDateTime \u003d true;","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"     * Gets the dateTime and converts it to the specified format. Then,","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     * returns the formatted dateTime as a String.","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"     * @return Formatted dateTime as a String, representing the date and time.","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"    protected String getDateAndTime() {","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"        return dateTime.format(formatter);","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"     * Marks the task as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"     * Gets the description of the task.","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"     * @return The description of the task as a String.","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        return description;","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"     * Gets the status icon of the task based on whether","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"     * the current task is marked as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"     * @return \"[X]\" if the task is marked as done, \"[ ]\" otherwise.","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"     * Indicates whether the task is marked as done or not by returning","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"     * a boolean (true or false).","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"     * @return A boolean indicating whether the task is marked as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"        return isDone;","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"     * Provides a String representation of Task.","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"     * @return A String representation of Task with its","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"     * status and description.","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"        return this.getStatusIcon() + \" \" + this.getDescription();","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"brendanlsz":99}},{"path":"src/main/java/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":" * Contains the ArrayList tasks and methods associated","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":" * with this ArrayList.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    // Constants","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    private static final int MAX_TASKS \u003d 100;","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    private static final String DELIMITER \u003d \" | \";","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    private static final String SYMBOL_TODO \u003d \"T\";","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    private static final String SYMBOL_DEADLINE \u003d \"D\";","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    private static final String SYMBOL_EVENT \u003d \"E\";","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    private static final String SYMBOL_DONE \u003d \"1\";","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    private static final String SYMBOL_NOT_DONE \u003d \"0\";","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    // Task list","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     * Gets the number os tasks in the ArrayList tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     * @return The number of current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"    public int getTasksCount() {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        return tasks.size();","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"     * Adds a task to the ArrayList tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"     * @param task The task object to be added.","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        tasks.add(task);","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"     * Deletes a task from the ArrayList tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"     * @param id The ID of the task to be removed.","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"     * @return The task object that has been removed.","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"    public Task deleteTask(int id) {","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"        Task task \u003d tasks.get(id);","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"        tasks.remove(id);","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"        return task;","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"     * Marks a task as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"     * @param id The ID of the task to be marked as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"     * @return The task object that has been marked as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"    public Task markAsDone(int id) {","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        Task task \u003d tasks.get(id);","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"        task.markAsDone();","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"        return task;","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"     * Preloads tasks from the file.","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"     * @param reader Reads from the file used to save tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O exception occurs.","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    // @@author brendanlsz-reused","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // Reused from https://www.techiedelight.com/how-to-read-a-file-using-bufferedreader-in-java/","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    // with modifications","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void preloadTasks(BufferedReader reader) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        int preloadTaskCount \u003d 0;","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String line;","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            String[] description \u003d line.trim().split(\"\\\\s*[|]\\\\s*\");","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            Task task;","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            switch (description[0]) {","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            case SYMBOL_TODO:","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                task \u003d new Todo(description[2]);","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                break;","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            case SYMBOL_DEADLINE:","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                task \u003d new Deadline(description[2], description[3]);","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                break;","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            case SYMBOL_EVENT:","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                task \u003d new Event(description[2], description[3]);","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                break;","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            default:","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                return;","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            this.addTask(task);","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            if (description[1].strip().equals(SYMBOL_DONE)) {","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                task.markAsDone();","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            preloadTaskCount++;","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        System.out.println(\"Successfully preloaded \" + preloadTaskCount + \" tasks\");","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Converts all the current tasks into a String.","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return The String representing all the current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @throws DukeException If unable to save one or more tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public String convertCurrentTasksToString() throws DukeException {","lastModifiedDate":"2021-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-09-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            String taskType, isDone, description, time;","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            boolean hasTime \u003d false;","lastModifiedDate":"2021-09-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            isDone \u003d task.getIsDone() ? SYMBOL_DONE : SYMBOL_NOT_DONE;","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            description \u003d task.getDescription();","lastModifiedDate":"2021-09-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            if (task instanceof Todo) {","lastModifiedDate":"2021-09-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                taskType \u003d SYMBOL_TODO;","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                time \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2021-09-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                hasTime \u003d true;","lastModifiedDate":"2021-09-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                taskType \u003d SYMBOL_DEADLINE;","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                time \u003d ((Deadline) task).getBy();","lastModifiedDate":"2021-09-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2021-09-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                hasTime \u003d true;","lastModifiedDate":"2021-09-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                taskType \u003d SYMBOL_EVENT;","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                time \u003d ((Event) task).getAt();","lastModifiedDate":"2021-09-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                throw new DukeException(\"Error saving task no.: \" + i);","lastModifiedDate":"2021-09-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            lines.append(taskType).append(DELIMITER).append(isDone).append(DELIMITER)","lastModifiedDate":"2021-09-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                    .append(description).append(hasTime ? DELIMITER + time : \"\")","lastModifiedDate":"2021-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                    .append(System.lineSeparator());","lastModifiedDate":"2021-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return lines.toString();","lastModifiedDate":"2021-09-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Prints out all the tasks in the ArrayList tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void listTasks() {","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2021-09-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            System.out.println(\" \" + i + \".\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                    tasks.get(i - 1));","lastModifiedDate":"2021-09-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Filters all the tasks that contain the keyword. Then,","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * prints all matching tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @param keyword Keyword used to filter tasks by.","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * @param ui      Used to print all matching tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * @throws DukeException If keyword is empty.","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void findTasks(String keyword, Ui ui) throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        if (keyword.equals(\"\")) {","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw new DukeException(\"Please provide a valid keyword\");","lastModifiedDate":"2021-09-20"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                (ArrayList\u003cTask\u003e) tasks.stream()","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                        .filter(t -\u003e t.getDescription().contains(keyword))","lastModifiedDate":"2021-09-20"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2021-09-20"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        ui.printMatchingTasks(matchingTasks);","lastModifiedDate":"2021-09-20"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"brendanlsz":76,"-":95}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.task;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":" * Inherits from Task, and represents a Todo task.","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"     * Constructs a Todo with a description.","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"     * @param description Description of the Todo task.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"        super(description);","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"     * Provides a String representation of Todo.","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     * @return String representation of Todo.","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"brendanlsz":25}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package duke.ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":" * Handles interactions with the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"public class Ui {","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    private static final int LINE_WIDTH \u003d 60;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"     * Prints a horizontal line for improving readability.","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    public void printHorizontalLine() {","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"_\".repeat(LINE_WIDTH));","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"     * Prints message when a file write error has occurred.","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    public void printFileError() {","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"File write error\");","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     * Prints a greeting message to the user","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"    public void printGreeting() {","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        printHorizontalLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        String greeting \u003d \" Hello! I\u0027m Duke\" + System.lineSeparator() +","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"                \" What can I do for you?\";","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(greeting);","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        printHorizontalLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     * Prints the details of the newly added task.","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"     * @param task        Task object that was added.","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager TaskManager object, used to get","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"     *                    task count in this case.","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"    public void printAddTask(Task task, TaskManager taskManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d \" Got it. I\u0027ve added this task:\" + System.lineSeparator() +","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"                \"  \" + task + System.lineSeparator() + \" Now you have \" +","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"                taskManager.getTasksCount() + \" tasks in the list.\";","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"     * Prints a warning message to the user informing the","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"     * user of the correct Task ID type.","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"    public void printInvalidTaskNumberFormat() {","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d \"  Task ID must be an integer!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message to the user informing that there","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"     * is no task corresponding to the given Task ID.","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"    public void printInvalidTaskNumber() {","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d \"  Task ID does not exist!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message containing details of the task","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"     * that was marked as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"     * @param task Task object that was marked as done.","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"    public void printMarkAsDone(Task task) {","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d (\" Nice! I\u0027ve marked this task as done:\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"                System.lineSeparator() + \"   \" + task);","lastModifiedDate":"2021-09-22"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message containing the details of the task","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"     * that was deleted.","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"     * @param task        Task object that was deleted.","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager TaskManager object used to get the","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"     *                    task count in this case.","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"    public void printDeleteTask(Task task, TaskManager taskManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d \" Got it! I\u0027ve removed this task:\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"                System.lineSeparator() + \"   \" + task +","lastModifiedDate":"2021-09-22"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"                System.lineSeparator() + \" Now you have \" +","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"                taskManager.getTasksCount() + \" tasks in the list.\";","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"     * Prints all the current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"     * @param taskManager TaskManager object used to list","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"brendanlsz"},"content":"     *                    all the current tasks.","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"    public void listTasks(TaskManager taskManager) {","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\" Here are the tasks in your list:\");","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"        taskManager.listTasks();","lastModifiedDate":"2021-09-20"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":117,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":"     * Prints a farewell message to the user.","lastModifiedDate":"2021-09-20"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"    public void printFarewell() {","lastModifiedDate":"2021-09-20"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"        String farewell \u003d \" Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(farewell);","lastModifiedDate":"2021-09-20"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"     * Prints the correct command format for adding a","lastModifiedDate":"2021-09-20"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"     * deadline task.","lastModifiedDate":"2021-09-20"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"    public void printDeadlineCommandFormat() {","lastModifiedDate":"2021-09-20"},{"lineNumber":130,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d (\"  Invalid command format!!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-20"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"                \"  Correct format is: \" + \"deadline \u003ctask name\u003e /by \u003cdate\u003e\");","lastModifiedDate":"2021-09-20"},{"lineNumber":132,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":134,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"     * Prints a warning message informing the user that","lastModifiedDate":"2021-09-20"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":"     * a description is required from them.","lastModifiedDate":"2021-09-20"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"     * @param command The corresponding command which the","lastModifiedDate":"2021-09-20"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"     *                user has attempted to use.","lastModifiedDate":"2021-09-20"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"    public void printEmptyDescription(String command) {","lastModifiedDate":"2021-09-20"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"        String emptyDescription \u003d \" ☹ OOPS!!! The description of a \" +","lastModifiedDate":"2021-09-20"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"                command + \" cannot be empty.\";","lastModifiedDate":"2021-09-20"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(emptyDescription);","lastModifiedDate":"2021-09-20"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"     * Prints the correct command format for adding","lastModifiedDate":"2021-09-20"},{"lineNumber":150,"author":{"gitId":"brendanlsz"},"content":"     * an event task.","lastModifiedDate":"2021-09-20"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"    public void printEventCommandFormat() {","lastModifiedDate":"2021-09-20"},{"lineNumber":153,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d (\"  Invalid command format!!\" + System.lineSeparator() +","lastModifiedDate":"2021-09-20"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"                \"  Correct format is: \" + \"event \u003cevent name\u003e /at \u003ctime\u003e\");","lastModifiedDate":"2021-09-20"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":156,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":157,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":158,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":159,"author":{"gitId":"brendanlsz"},"content":"     * Depending on which command (deadline or event) the user has","lastModifiedDate":"2021-09-20"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"     * incorrectly used, call the corresponding method to print the","lastModifiedDate":"2021-09-20"},{"lineNumber":161,"author":{"gitId":"brendanlsz"},"content":"     * correct command format.","lastModifiedDate":"2021-09-20"},{"lineNumber":162,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"     * @param command The command which the user has incorrectly used.","lastModifiedDate":"2021-09-20"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":165,"author":{"gitId":"brendanlsz"},"content":"    public void printCorrectCommandFormat(String command) {","lastModifiedDate":"2021-09-20"},{"lineNumber":166,"author":{"gitId":"brendanlsz"},"content":"        switch (command) {","lastModifiedDate":"2021-09-20"},{"lineNumber":167,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2021-09-20"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"            printDeadlineCommandFormat();","lastModifiedDate":"2021-09-20"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2021-09-20"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"            printEventCommandFormat();","lastModifiedDate":"2021-09-20"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"            break;","lastModifiedDate":"2021-09-20"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"        default:","lastModifiedDate":"2021-09-20"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":175,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":176,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":177,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"     * Reads the user\u0027s inputs (commands).","lastModifiedDate":"2021-09-20"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"     * @return The user\u0027s inputs as a String.","lastModifiedDate":"2021-09-20"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"    public String readCommand() {","lastModifiedDate":"2021-09-20"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"        String line;","lastModifiedDate":"2021-09-20"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-20"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"        line \u003d in.nextLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":187,"author":{"gitId":"brendanlsz"},"content":"        return line;","lastModifiedDate":"2021-09-20"},{"lineNumber":188,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":189,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":190,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"     * Prints message when Duke is unable to understand a command.","lastModifiedDate":"2021-09-20"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":"    public void printInvalidCommand() {","lastModifiedDate":"2021-09-20"},{"lineNumber":194,"author":{"gitId":"brendanlsz"},"content":"        String invalid \u003d \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-20"},{"lineNumber":195,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(invalid);","lastModifiedDate":"2021-09-20"},{"lineNumber":196,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":197,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":198,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-20"},{"lineNumber":199,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message informing that the current tasks have been","lastModifiedDate":"2021-09-20"},{"lineNumber":200,"author":{"gitId":"brendanlsz"},"content":"     * saved successfully and the file location where the tasks have","lastModifiedDate":"2021-09-20"},{"lineNumber":201,"author":{"gitId":"brendanlsz"},"content":"     * been saved to.","lastModifiedDate":"2021-09-20"},{"lineNumber":202,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-20"},{"lineNumber":203,"author":{"gitId":"brendanlsz"},"content":"     * @param filePath File path of the file where the tasks have","lastModifiedDate":"2021-09-20"},{"lineNumber":204,"author":{"gitId":"brendanlsz"},"content":"     *                 been saved to.","lastModifiedDate":"2021-09-20"},{"lineNumber":205,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-20"},{"lineNumber":206,"author":{"gitId":"brendanlsz"},"content":"    public void printSuccessfullySavedTasks(String filePath) {","lastModifiedDate":"2021-09-20"},{"lineNumber":207,"author":{"gitId":"brendanlsz"},"content":"        printHorizontalLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":208,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"Current tasks successfully saved at: \" +","lastModifiedDate":"2021-09-20"},{"lineNumber":209,"author":{"gitId":"brendanlsz"},"content":"                System.lineSeparator() + filePath);","lastModifiedDate":"2021-09-22"},{"lineNumber":210,"author":{"gitId":"brendanlsz"},"content":"        printHorizontalLine();","lastModifiedDate":"2021-09-20"},{"lineNumber":211,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":212,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":213,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":214,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message informing that there were no tasks","lastModifiedDate":"2021-09-21"},{"lineNumber":215,"author":{"gitId":"brendanlsz"},"content":"     * that contain the keyword provided by the user.","lastModifiedDate":"2021-09-21"},{"lineNumber":216,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":217,"author":{"gitId":"brendanlsz"},"content":"    private void printNoMatchingResults() {","lastModifiedDate":"2021-09-20"},{"lineNumber":218,"author":{"gitId":"brendanlsz"},"content":"        String message \u003d \"  Sorry, no matching results found!\";","lastModifiedDate":"2021-09-20"},{"lineNumber":219,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-20"},{"lineNumber":220,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":221,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":222,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-09-21"},{"lineNumber":223,"author":{"gitId":"brendanlsz"},"content":"     * Prints all the matching tasks (tasks that contain the keyword","lastModifiedDate":"2021-09-21"},{"lineNumber":224,"author":{"gitId":"brendanlsz"},"content":"     * provided by the user).","lastModifiedDate":"2021-09-21"},{"lineNumber":225,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-09-21"},{"lineNumber":226,"author":{"gitId":"brendanlsz"},"content":"     * @param matchingTasks ArrayList containing all the matching tasks.","lastModifiedDate":"2021-09-21"},{"lineNumber":227,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-09-21"},{"lineNumber":228,"author":{"gitId":"brendanlsz"},"content":"    public void printMatchingTasks(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2021-09-20"},{"lineNumber":229,"author":{"gitId":"brendanlsz"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-20"},{"lineNumber":230,"author":{"gitId":"brendanlsz"},"content":"            printNoMatchingResults();","lastModifiedDate":"2021-09-20"},{"lineNumber":231,"author":{"gitId":"brendanlsz"},"content":"            return;","lastModifiedDate":"2021-09-20"},{"lineNumber":232,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":233,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\" Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-20"},{"lineNumber":234,"author":{"gitId":"brendanlsz"},"content":"        for (int i \u003d 1; i \u003c\u003d matchingTasks.size(); i++) {","lastModifiedDate":"2021-09-20"},{"lineNumber":235,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\" \" + i + \".\" +","lastModifiedDate":"2021-09-20"},{"lineNumber":236,"author":{"gitId":"brendanlsz"},"content":"                    matchingTasks.get(i - 1).toString());","lastModifiedDate":"2021-09-20"},{"lineNumber":237,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":238,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":239,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":239}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"T | 1 | borrow book","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"D | 0 | return book | Sunday","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"E | 0 | project meeting | Mon 2-4pm","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"T | 0 | borrow book","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"D | 0 | return book | Sunday","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"E | 0 | project meeting | Mon 2-4pm","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"brendanlsz":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"todo borrow book","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"done 1","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"list","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"bye","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"brendanlsz":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"brendanlsz":2,"-":19}}]
