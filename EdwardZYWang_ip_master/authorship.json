[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"# Project Duke","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"Project Duke is a educational software project designed to take you through the steps of building a small software incrementally, while applying as many Java and SE techniques as possible along the way.","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"The project aims to build a product named Duke, a Personal Assistant Chatbot that helps a person to keep track of various things. The name Duke was chosen as a placeholder name, in honor of Duke, the Java Mascot. You may give it any other name and personality you wish.","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"Here is a table containing the command words and a brief description:","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"Command | description","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"------------ | -------------","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"[todo](#todo-command) | adds a task to be completed","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"[event](#event-command) | adds an event + location ","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"[deadline](#deadline-command) | adds a deadline + date + time","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"[list](#list-command) | allows user to see a list of all commitments","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"[find](#find-command) | allows user to filter commitments by a keyword","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"[delete](#delete-command) | allows user to remove a task from the list","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"[done](#done-command) | mark a task as complete","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"[bye](#close-duke-command) | close Duke","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"On startup, the user will be greeted by the following message:","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/tW87ITA.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"Below contains screenshots of the commands Duke can process and the format of the command in the box:","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"#Load saved tasklist from Duke.txt :","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"  list","lastModifiedDate":"2021-09-24"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/vdB5yXK.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"# Todo Command","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"  todo \"description\"","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/3NFVn3U.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"# Event Command","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"  event \"description\" /at \"location\"","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/fcUClHK.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"# Deadline Command","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"  dealine \"description\" /by \"YYYY-MM-DD\" \"HH:MM\"","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/xL42jdE.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"# Done Command","lastModifiedDate":"2021-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"  done \"index_number\"","lastModifiedDate":"2021-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/Hs0F7Ej.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"# Delete Command","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":" delete \"index_number\"","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/1tfECL4.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"# List Command","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"  list","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/BOq0AwX.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"# Find Command","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"EdwardZYWang"},"content":"  find \"index_number\"","lastModifiedDate":"2021-09-24"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/XcLGGCH.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":80,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"# Close DUKE Command","lastModifiedDate":"2021-09-24"},{"lineNumber":82,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":" bye","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/MJVdEue.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"Have fun trialing!!","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"-":6,"EdwardZYWang":82}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"todo return book | 0","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"EdwardZYWang":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"# Project Sassy Duke","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"Project Duke is a educational software project designed to take the user through the steps of building a small software incrementally, while applying as many Java and SE techniques as possible along the way.","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"The project aims to build a product named Duke, a Personal Assistant Chatbot that helps a person to keep track of various things. The name Duke was chosen as a placeholder name, in honor of Duke, the Java Mascot.","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"I have modified Duke to have a sassy attitude. Try not to make any errors as he may be merciless in his teasing!","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"Here is a table containing the command words and a brief description:","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"*Psssstttttt click commands to skip sections!*","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"Command | Brief description of command","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"------------ | -------------","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"[**todo**](#todo-command) | adds a task to be completed","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"[**event**](#event-command) | adds an event + location ","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"[**deadline**](#deadline-command) | adds a deadline + date + time","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"[**list**](#list-command) | prints the list of all commitments","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"[**find**](#find-command) | filters commitments by a keyword and prints them","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"[**delete**](#delete-command) | remove a task from the list","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"[**done**](#done-command) | mark a task as completed","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"[**bye**](#close-duke-command) | close and bids Duke *Au Revoir*","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"On startup, the user will be greeted by the following message:","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/tW87ITA.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"Below contains screenshots of the commands Duke can process and the format of the commands in the box:","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"# Load saved tasklist from Duke.txt :","lastModifiedDate":"2021-09-24"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"  list","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/vdB5yXK.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"# Todo Command","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"  todo \"description\"","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/3NFVn3U.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"# Event Command","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"  event \"description\" /at \"location\"","lastModifiedDate":"2021-09-24"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/fcUClHK.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"# Deadline Command","lastModifiedDate":"2021-09-24"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"  deadline \"description\" /by \"YYYY-MM-DD\" \"HH:MM\"","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/xL42jdE.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"# Done Command","lastModifiedDate":"2021-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"  done \"index_number\"","lastModifiedDate":"2021-09-24"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/Hs0F7Ej.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"# Delete Command","lastModifiedDate":"2021-09-24"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":" delete \"index_number\"","lastModifiedDate":"2021-09-24"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/1tfECL4.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"# List Command","lastModifiedDate":"2021-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"  list","lastModifiedDate":"2021-09-24"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/BOq0AwX.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"# Find Command","lastModifiedDate":"2021-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2021-07-17"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"  find \"keyword\"","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2021-07-17"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/XcLGGCH.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"# Close DUKE Command","lastModifiedDate":"2021-09-24"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":" bye","lastModifiedDate":"2021-09-24"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"   ```","lastModifiedDate":"2021-09-24"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/MJVdEue.jpg)","lastModifiedDate":"2021-09-24"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"Have fun playing!!","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"-":17,"EdwardZYWang":75}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"deadline meet brandon /by 2021-10-12 11:30 | 1","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"event team meeting /at COM1 | 0","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"todo return book | 0","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"event library meeting /at central library | 1","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"deadline go home /by 2021-09-24 23:30 | 0","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"EdwardZYWang":5}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Locale;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"    public LocalDate byDate;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"    public LocalTime byTime;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"    public Deadline(String description, String by, String by1) {","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"        super(description);","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"        this.byDate \u003d LocalDate.parse(by);","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"        this.byTime \u003d LocalTime.parse(by1);","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"        String wantedDate \u003d byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH));","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"        String wantedTime \u003d byTime.format(DateTimeFormatter.ofPattern(\" h:mma\", Locale.ENGLISH));","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"        return \"[D]\" + \"[\" + getStatusIcon() + \"] \"","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"                + description + \" (by: \" +  wantedDate + \" \" + wantedTime + \")\";","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"    @Override","lastModifiedDate":"2021-09-16"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"    public String getStoredDataString() {","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"        String checkDone \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"        return \"deadline \" + description + \" /by \" + byDate + \" \" + byTime + \" | \" + checkDone + System.lineSeparator();","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"EdwardZYWang":31}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String taskDoneChecker \u003d \"0\";","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"        StorageUI.storageWelcomeMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"        Ui.welcomeMessage();","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"        Parser.commandChecker();","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"-":4,"EdwardZYWang":12}},{"path":"src/main/java/DukeExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"public class DukeExceptions extends Exception{","lastModifiedDate":"2021-09-10"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"EdwardZYWang":2}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"    public String at;","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"        super(description);","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"        return \"[E]\" + \"[\" + getStatusIcon() + \"] \" + description + \" (at: \" + at + \")\";","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"    @Override","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"    public String getStoredDataString() {","lastModifiedDate":"2021-09-16"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"        String checkDone \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"        return \"event \" + description + \" /at \" + at + \" | \" + checkDone + System.lineSeparator();","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"EdwardZYWang":20}},{"path":"src/main/java/Keywords.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"/**","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":" * This is a class containing the keywords the user\u0027s input is to be compared to","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":" * in order to call the correct method","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":" *","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":" */","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"public class Keywords {","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_BYE \u003d \"bye\";","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_LIST \u003d \"list\";","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_DONE \u003d \"done\";","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_TODO \u003d \"todo\";","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_EVENT \u003d \"event\";","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_FIND \u003d \"find\";","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"EdwardZYWang":15}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"public class Parser {","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called in the main method to check the command the user inputs.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"     * It checks to see if the String input which is scanned in by scanner contains the","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"     * command keywords stored in Keywords class","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"    public static void commandChecker() {","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"        String input;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"        input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"        while (!(input.equals(Keywords.INPUT_BYE))) {","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"            if (input.equals(Keywords.INPUT_LIST)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d TaskList.printList(in);","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (input.contains(Keywords.INPUT_DONE)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d doneInputCommand(input, in);","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (input.contains(Keywords.INPUT_TODO)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d todoInputCommand(input, in);","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (input.contains(Keywords.INPUT_DEADLINE)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d deadlineInputCommand(input, in);","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (input.contains(Keywords.INPUT_EVENT)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d eventInputCommand(input, in);","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (input.contains(Keywords.INPUT_DELETE)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d deleteInputCommand(input, in);","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (input.contains(Keywords.INPUT_FIND)) {","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"                TaskList.findList(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");//overall error check","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"                input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    Bye! Hope to see you again soon!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called when the user inputs \"delete ...\"","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"     * it calls the testDeleteTask method in TaskList class and the","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"     * replaceAllTasks method in Storage class.","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in scanner input","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s command","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NumberFormatException if delete command does not contain a valid index number of","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"     * task to be deleted","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ArrayIndexOutOfBoundsException if there is no number typed in after delete command","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if there is incorrect input or output","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"    private static String deleteInputCommand(String input, Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d TaskList.testDeleteTask(input, in);","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"            Storage.replaceAllTasks();","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (NumberFormatException e8) {","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Did you type in a number?\");","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (ArrayIndexOutOfBoundsException e9) {","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Finish the command!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e34) {","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"IOexception, incorrect input or output\");","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called when the user inputs \"event ...\"","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"     * it calls the getEventMethod method in TaskList class and the","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"     * appendEvent method in Storage class.","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in scanner input","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s command","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"     * @return input, containing the user\u0027s next commands","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws StringIndexOutOfBoundsException if the user has a typo while typing event","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ArrayIndexOutOfBoundsException if the user\u0027s input does not have the \"/at\"","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"    private static String eventInputCommand(String input, Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"            Storage.appendEvent(input); //add new entry to duke.txt","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"            Task whatEvent \u003d TaskList.getEventMethod(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"    Got it. I\u0027ve added this task:\\n\" + \"    \" + whatEvent + \"\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"EdwardZYWang"},"content":"                    + \"    Now you have \" + Duke.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (StringIndexOutOfBoundsException e6) {","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"input \u003d \" + input + \"\\n☹ OOPS!!! Please retype your input!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (ArrayIndexOutOfBoundsException e7) {","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"you have typed in \u003d \" + input + \"\\nw☹ OOPS!!! where is your /at brother? \");","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called when the user inputs \"deadline ...\"","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"EdwardZYWang"},"content":"     * it calls the getDeadlineMethod method in TaskList class and the","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"EdwardZYWang"},"content":"     * appendDeadline method in Storage class.","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in scanner input","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s command","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"EdwardZYWang"},"content":"     * @return input, containing the user\u0027s next commands","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws StringIndexOutOfBoundsException if the user has a typo while typing event","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ArrayIndexOutOfBoundsException if the user\u0027s input does not have the \"/by\"","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"EdwardZYWang"},"content":"    private static String deadlineInputCommand(String input, Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"EdwardZYWang"},"content":"            Storage.appendDeadline(input); //add new entry to duke.txt","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"EdwardZYWang"},"content":"            Task whatDeadline \u003d TaskList.getDeadlineMethod(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"    Got it. I\u0027ve added this task:\\n\" + \"    \" + whatDeadline + \"\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"EdwardZYWang"},"content":"                    + \"    Now you have \" + Duke.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (StringIndexOutOfBoundsException e1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"input \u003d \" + input + \"\\n☹ OOPS!!! Please retype your input!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (ArrayIndexOutOfBoundsException e2) {","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"you have typed in \u003d \" + input + \"\\n☹ OOPS!!! where is your /by my friend? \");","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called when the user inputs \"todo ...\"","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"EdwardZYWang"},"content":"     * it calls the testInput method in TaskList class and the","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"EdwardZYWang"},"content":"     * appendTodo method in Storage class.","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in scanner input","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s command","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"EdwardZYWang"},"content":"     * @return input, containing the user\u0027s next commands","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws DukeExceptions if description following todo keyword is empty","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"EdwardZYWang"},"content":"    private static String todoInputCommand(String input, Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"EdwardZYWang"},"content":"            TaskList.testInput(input); // test todo input","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"EdwardZYWang"},"content":"            Storage.appendTodo(input); // add new entry to duke.txt","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"EdwardZYWang"},"content":"            Task whatToDo \u003d TaskList.getToDoMethod(input);","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"    Got it. I\u0027ve added this task:\\n\" + \"    \" + whatToDo + \"\\n\"","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"EdwardZYWang"},"content":"                    + \"    Now you have \" + Duke.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (DukeExceptions e5) {","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called when the user inputs \"done...\"","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"EdwardZYWang"},"content":"     * it calls the testTaskDone method in TaskList class and the","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"EdwardZYWang"},"content":"     * replaceAllTasks method in Storage class.","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in scanner input","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s command","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"EdwardZYWang"},"content":"     * @return input, containing the user\u0027s next commands","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NumberFormatException if delete command does not contain a valid index number of","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"EdwardZYWang"},"content":"     * task to be deleted","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ArrayIndexOutOfBoundsException if there is no number typed in after delete command","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if there is incorrect input or output","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"EdwardZYWang"},"content":"    private static String doneInputCommand(String input, Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d TaskList.testTaskDone(input, in);","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"EdwardZYWang"},"content":"            Storage.replaceAllTasks();","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (NumberFormatException e3) {","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Did you type in a number?\");","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (ArrayIndexOutOfBoundsException e4) {","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Finish the command!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e33) {","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"IOexception, incorrect input or output\");","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"EdwardZYWang":208}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.File;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"public class Storage {","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"     *This method is used when delete and done commands are called as it is not possible","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"     * to navigate to specific tasks descriptions in Duke.txt without specialised libraries","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"     * hence it is easier to overwrite the whole text file with the updated task descriptions","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"     * if delete or done command is called, the for-each uses the getStoredDataString method","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"     * in the child classes to format the output. the output is then stored as a String, which","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"     * is then used to overwrite the file with other untouched task descriptions","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"    public static void replaceAllTasks() throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"        String filePath \u003d new File(\"duke.txt\").getAbsolutePath(); //added","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"        FileWriter fw \u003d new FileWriter(filePath, false);","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"        String taskToSave;","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"        for (Task individualTask : Duke.tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"            if (individualTask instanceof Deadline) {","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"                taskToSave \u003d individualTask.getStoredDataString();","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (individualTask instanceof Event) {","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"                taskToSave \u003d individualTask.getStoredDataString();","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"                taskToSave \u003d individualTask.getStoredDataString();","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"            Files.write(Paths.get(filePath), taskToSave.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"     *This method is called by storageWelcomeMessage() in StorageUI class when Duke starts","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"     * up. It will read the text in Duke.txt and scan it with fileScan. fileScan saves the","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"     * text as a String \"data\". \"data\" is then split into arraySplitter and arraySplitter2","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"     * arraySplitter splits \"data\" into one part containing the command eg. \"todo hello\"","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"     * and the other part containing he boolean value of either 1 or 0 , which denotes","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"     * whether the task has been marked as done or not done respectively.","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"     * arraySplitter2 splits \"arraySplitter\" into two parts. One containing the input","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"     * command word eg. \"todo\"","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"     * and the other part contains the description of the task eg. \"hello\"","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"     * Switch statement identifies the input command by checking whether arraySplitter[0]","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"     * has the keywords \"todo, event, dealine\" and calls the respective method in taskList","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"     * class. This in turn calls the respective toString override in the respective classes","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"     * and prints out the list in the required manner","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"    public static void loadFile() throws FileNotFoundException {","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"        String filePath \u003d new File(\"duke.txt\").getAbsolutePath(); //added","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"        Scanner fileScan \u003d new Scanner(f);","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"        String taskType;","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"        int fileScanNumber \u003d 1; //order of tasks in duke text file","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"        while (fileScan.hasNext()) {","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"            String data \u003d fileScan.nextLine(); //scans first line of the file","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"            String[] arraySplitter \u003d data.split(\" \\\\| \");","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"            String[] arraySplitter2 \u003d arraySplitter[0].split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"            taskType \u003d arraySplitter2[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"            case \"todo\":","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"                TaskList.getToDoMethod(arraySplitter[0]);","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"EdwardZYWang"},"content":"                if (arraySplitter[1].equals(\"1\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"                    loadFileDone(fileScanNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"EdwardZYWang"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"EdwardZYWang"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"            case \"deadline\":","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"EdwardZYWang"},"content":"                TaskList.getDeadlineMethod(arraySplitter[0]);","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"                if (arraySplitter[1].equals(\"1\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":"                    loadFileDone(fileScanNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"            case \"event\":","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"                TaskList.getEventMethod(arraySplitter[0]);","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"                if (arraySplitter[1].equals(\"1\")) {","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"                    loadFileDone(fileScanNumber);","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"                }","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"                break;","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"            default:","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"            fileScanNumber++;","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"        fileScan.close();","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called by todoInputCommand when a todo command is typed in by the user","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"     * It adds the new todo task to the list and checks whether the user has marked the task","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"EdwardZYWang"},"content":"     * as done. if isDone is false, a 0 is stored after the \"|\". if isDone is true, a 1 is","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"EdwardZYWang"},"content":"     * stored instead. The method also adds the description of the task by splitting the","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"EdwardZYWang"},"content":"     * String input after the todo command keyword and storing it in addToDoDescription.","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"EdwardZYWang"},"content":"     * The combined string is then added to Duke.txt by the writeToFile method","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input which stores the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if input is wrong","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"EdwardZYWang"},"content":"    public static void appendTodo(String input) {","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"EdwardZYWang"},"content":"        String filePath \u003d new File(\"duke.txt\").getAbsolutePath(); //added","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"EdwardZYWang"},"content":"        String isDone \u003d Duke.taskDoneChecker;","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"EdwardZYWang"},"content":"        String addToDoDescription \u003d input.substring(4).trim(); // \"return book\"","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"EdwardZYWang"},"content":"            writeToFile(filePath,","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"EdwardZYWang"},"content":"                    \"todo \" + addToDoDescription + \" | \" + isDone + System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"IOException error, theres an input/output error\");","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called by eventInputCommand when an event command is typed in by the user","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"EdwardZYWang"},"content":"     * It adds the new event task to the list and checks whether the user has marked the task","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"EdwardZYWang"},"content":"     * as done. if isDone is false, a 0 is stored after the \"|\". if isDone is true, a 1 is","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"EdwardZYWang"},"content":"     * stored instead. The method also adds the description of the task by splitting the","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"EdwardZYWang"},"content":"     * String input after the event command keyword and storing it in addEventDescription.","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"EdwardZYWang"},"content":"     * The location of the event is isolated by taking the first string in the string array","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"EdwardZYWang"},"content":"     * eventSplitterString.","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"EdwardZYWang"},"content":"     * The combined string is then added to Duke.txt by the writeToFile method","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input which stores the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if input is wrong","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"EdwardZYWang"},"content":"    public static void appendEvent(String input) {","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"EdwardZYWang"},"content":"        String filePath \u003d new File(\"duke.txt\").getAbsolutePath(); //added","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"EdwardZYWang"},"content":"        String isDone \u003d Duke.taskDoneChecker;","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"EdwardZYWang"},"content":"        String[] eventSplitterString \u003d input.substring(6).split(\" /at \");","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"EdwardZYWang"},"content":"        String addEventDescription \u003d eventSplitterString[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"EdwardZYWang"},"content":"        String location \u003d eventSplitterString[1];","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"EdwardZYWang"},"content":"            writeToFile(filePath, \"event \" + addEventDescription + \" /at \"","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"EdwardZYWang"},"content":"                    + location + \" | \" + isDone + System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"IOException error, theres an input/output error\");","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called by deadlineInputCommand when an deadline command is typed in by the user","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"EdwardZYWang"},"content":"     * It adds the new deadline task to the list and checks whether the user has marked the task","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"EdwardZYWang"},"content":"     * as done. if isDone is false, a 0 is stored after the \"|\". if isDone is true, a 1 is","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"EdwardZYWang"},"content":"     * stored instead. The method also adds the description of the task by splitting the","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"EdwardZYWang"},"content":"     * String input after the deadline command keyword and storing it in addDeadlineDescription.","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"EdwardZYWang"},"content":"     * The date of the deadline is isolated by taking the first string in the string array","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"EdwardZYWang"},"content":"     * dateTime. The time is the second string in the string array dateTime","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"EdwardZYWang"},"content":"     * The combined string is then added to Duke.txt by the writeToFile method","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input which stores the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if input is wrong","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"EdwardZYWang"},"content":"    public static void appendDeadline(String input) {","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"EdwardZYWang"},"content":"        String filePath \u003d new File(\"duke.txt\").getAbsolutePath(); //added","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"EdwardZYWang"},"content":"        String isDone \u003d Duke.taskDoneChecker;","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"EdwardZYWang"},"content":"        String[] deadlineSplitterString \u003d input.substring(9).split(\" /by \");","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"EdwardZYWang"},"content":"        String addDeadlineDescription \u003d deadlineSplitterString[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"EdwardZYWang"},"content":"        String[] dateTime \u003d deadlineSplitterString[1].split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"EdwardZYWang"},"content":"        String date \u003d dateTime[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"EdwardZYWang"},"content":"        String time \u003d dateTime[1];","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"EdwardZYWang"},"content":"            writeToFile(filePath, \"deadline \" + addDeadlineDescription + \" /by \"","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"EdwardZYWang"},"content":"                    + date + \" \" + time + \" | \" + isDone + System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"IOException error, theres an input/output error\");","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called to write the final string of the appendDeadline, appendEvent and appendTodo","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"EdwardZYWang"},"content":"     * methods to Duke.txt","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"EdwardZYWang"},"content":"     * @param filePath Relative path of Duke.txt","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"EdwardZYWang"},"content":"     * @param textToAdd String to be written to Duke.txt","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if input is wrong","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"EdwardZYWang"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"EdwardZYWang"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"EdwardZYWang"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"EdwardZYWang"},"content":"        fw.close();","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"EdwardZYWang"},"content":"     * This method is called to get the string of the stored tasks in the list so that loadFile() can","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"EdwardZYWang"},"content":"     * print the list and include the isDone field at the same time","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"EdwardZYWang"},"content":"     * @param number the index number of the task in the list","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"EdwardZYWang"},"content":"    public static void loadFileDone(Integer number) {","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"EdwardZYWang"},"content":"        number \u003d number - 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"EdwardZYWang"},"content":"        Task task \u003d Duke.tasks.get(number);","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"EdwardZYWang"},"content":"        task.markAsDone();","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":216,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":217,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"EdwardZYWang":217}},{"path":"src/main/java/StorageUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"public class StorageUI {","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"    public static Integer phase \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"     * The method calls loadFile method stored in Storage class. Also sets the flag \"phase\" to","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"     * integer value 1 only if loadFile can be called so that the welcomeMessage in UI","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"     * will only prompt the user to load memory if there are no errors in the file","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"     * It will print the same message when the file Duke.txt has not been created or when the","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"     * listed information in Duke.txt is stored with incorrect formats, especially the date","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"     * and time of the deadline task descriptions.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FileNotFoundException if there is no pre-existing Duke.txt file","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws DateTimeParseException if the contents of the existing Duke.txt file does not","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"     * follow conventions","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ArrayIndexOutOfBoundsException if the contents of the existing Duke.txt file does not","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"     * follow conventions","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"    public static void storageWelcomeMessage(){","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"            Storage.loadFile();","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"            phase \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (FileNotFoundException e22) {","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"File not found! Continue entering commands for automatic file creation!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (DateTimeParseException e24) {","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(System.lineSeparator() + \"Duke.txt failed to load\" + System.lineSeparator() +","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"                    \"Kindly check if your Duke.txt existing entries follows new deadline conventions! (eg.YYYY-MM-DD HH:MM)\"","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"                    + System.lineSeparator() + \"Loading home screen message...\" + System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (ArrayIndexOutOfBoundsException e25) {","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(System.lineSeparator() + \"Duke.txt failed to load\" + System.lineSeparator() +","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"                    \"Kindly check if your Duke.txt existing entries follows new deadline conventions! (eg.YYYY-MM-DD HH:MM)\"","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"                    + System.lineSeparator() + \"Loading home screen message...\" + System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"EdwardZYWang":39}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"public class Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"    protected String description;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"    public Task(String description) { //for todo","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X, if not its blank","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"        return description;","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"    public String toString() {","lastModifiedDate":"2021-09-16"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"        return description;","lastModifiedDate":"2021-09-16"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"    public String getStoredDataString() {","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"       return \"\";","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"EdwardZYWang":29}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"public class TaskList {","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"    public static int inputCount \u003d 0;","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"     * Returns a print statement of all tasks in the file Duke.txt which contain the keyword","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"     * isolated in \"findSplitter[1]\"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input input command of user","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"     * @return prints list of all tasks which contain keyword","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"    static void findList(String input) {","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"        String[] findSplitter;","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"        int number \u003d 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"        findSplitter \u003d input.split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"        for (Task storageChecker : Duke.tasks) {","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"            if (storageChecker.description.contains(findSplitter[1])) {","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(\"    \" + (number) + \".\" + storageChecker);","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"                number++;","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"        if (number \u003d\u003d 1) {","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"    none of them fool\");","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"     * Returns a print statement of all tasks in the file Duke.txt","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in input of user","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"     * @return prints list of all tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"    static String printList(Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"        String input;","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    Here are the tasks in your list:\");","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"        for (int outputCount \u003d 0; outputCount \u003c Duke.tasks.size(); outputCount++) {","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"    \" + (outputCount + 1) + \".\" + Duke.tasks.get(outputCount));","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"        input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"     * Test if the index number of the user\u0027s input after calling \"done\" is within","lastModifiedDate":"2021-09-23"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"     * the index number of all the tasks in the file. If it is valid,","lastModifiedDate":"2021-09-23"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"     * enter setTaskDone, if not, prints error message","lastModifiedDate":"2021-09-23"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"     * @return setTaskDone or invalid message if index number provided is less than 1,","lastModifiedDate":"2021-09-23"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"     * or more than the last task","lastModifiedDate":"2021-09-23"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"    static String testTaskDone(String input, Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-23"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"        String[] inputSplitter;","lastModifiedDate":"2021-09-23"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"        inputSplitter \u003d input.split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"        taskNumber \u003d Integer.parseInt(inputSplitter[1]);","lastModifiedDate":"2021-09-23"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"        taskNumber \u003d taskNumber - 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"        if (((taskNumber + 1) \u003e 0) \u0026\u0026 ((taskNumber + 1) \u003c\u003d Duke.tasks.size())) { //check for invalid inputs","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d setTaskDone(in, Duke.tasks.get(taskNumber));","lastModifiedDate":"2021-09-23"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"    Invalid input! Please check the list again!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"     * Test if the index number of the user\u0027s input after calling \"delete\" is within","lastModifiedDate":"2021-09-23"},{"lineNumber":77,"author":{"gitId":"EdwardZYWang"},"content":"     * the index number of all the tasks in the file. If it is valid,","lastModifiedDate":"2021-09-23"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"     * enter setTaskDone, if not, prints error message","lastModifiedDate":"2021-09-23"},{"lineNumber":79,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"     * @return setTaskDone or invalid message if index number provided is less than 1,","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"EdwardZYWang"},"content":"     * or more than the last task","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":"    static String testDeleteTask(String input, Scanner in) {","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"        int taskNumber;","lastModifiedDate":"2021-09-23"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"        String[] inputSplitter;","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"        inputSplitter \u003d input.split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"        taskNumber \u003d Integer.parseInt(inputSplitter[1]); //get which task to delete","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"        taskNumber \u003d taskNumber - 1;","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"        if (((taskNumber + 1) \u003e 0) \u0026\u0026 ((taskNumber + 1) \u003c\u003d Duke.tasks.size())) { //check for invalid inputs","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d setTaskDelete(in, Duke.tasks.remove(taskNumber));","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"        } else {","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"    Invalid input! Please check the list again!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":98,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":103,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"     * Sets the task, identified by its index number, to be done, marking an x in its [ ]","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"EdwardZYWang"},"content":"     * when printList is called","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":107,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in   String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":108,"author":{"gitId":"EdwardZYWang"},"content":"     * @param task list of all tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"EdwardZYWang"},"content":"     * @return marks x in [ ] in the list operation when printList is called","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"EdwardZYWang"},"content":"    static String setTaskDone(Scanner in, Task task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"EdwardZYWang"},"content":"        String input;","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    Nice! I\u0027ve marked this task as done:\" + System.lineSeparator());","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    \" + task + \" has been updated to --\u003e\");","lastModifiedDate":"2021-09-23"},{"lineNumber":115,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"EdwardZYWang"},"content":"        task.markAsDone(); //mark x in [ ]","lastModifiedDate":"2021-09-23"},{"lineNumber":117,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    \" + task);","lastModifiedDate":"2021-09-23"},{"lineNumber":119,"author":{"gitId":"EdwardZYWang"},"content":"        input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":120,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":121,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":122,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":123,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"EdwardZYWang"},"content":"     * Deletes the task, identified by its index number, by removing it from task","lastModifiedDate":"2021-09-23"},{"lineNumber":126,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":127,"author":{"gitId":"EdwardZYWang"},"content":"     * @param in   String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":128,"author":{"gitId":"EdwardZYWang"},"content":"     * @param task list of all tasks","lastModifiedDate":"2021-09-23"},{"lineNumber":129,"author":{"gitId":"EdwardZYWang"},"content":"     * @return prints out the task that has been deleted and shows the remaining number","lastModifiedDate":"2021-09-23"},{"lineNumber":130,"author":{"gitId":"EdwardZYWang"},"content":"     * of tasks left.","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"EdwardZYWang"},"content":"    static String setTaskDelete(Scanner in, Task task) {","lastModifiedDate":"2021-09-23"},{"lineNumber":133,"author":{"gitId":"EdwardZYWang"},"content":"        String input;","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-09-23"},{"lineNumber":135,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    \" + task);","lastModifiedDate":"2021-09-23"},{"lineNumber":136,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"    Now you have \" + Duke.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"EdwardZYWang"},"content":"        input \u003d in.nextLine();","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":139,"author":{"gitId":"EdwardZYWang"},"content":"        return input;","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":141,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"EdwardZYWang"},"content":"     * creates a new todo task by using child class Todo and override toString() function","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"EdwardZYWang"},"content":"     * @return tasksToDo which contains the new todo task to be added","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"EdwardZYWang"},"content":"    public static Task getToDoMethod(String input) {","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"EdwardZYWang"},"content":"        String toDoDescription \u003d input.substring(4).trim();","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"EdwardZYWang"},"content":"        Task tasksToDo \u003d new Todo(toDoDescription);","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"EdwardZYWang"},"content":"        Duke.tasks.add(tasksToDo);","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"EdwardZYWang"},"content":"        inputCount++;","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"EdwardZYWang"},"content":"        return tasksToDo;","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"EdwardZYWang"},"content":"     * creates a new deadline method by using child class Deadline and override toString() function","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"EdwardZYWang"},"content":"     * new task entry contains description, date and time components from the user\u0027s input","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"EdwardZYWang"},"content":"     * @return description which contains the new deadline task to be added","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"EdwardZYWang"},"content":"    public static Task getDeadlineMethod(String input) {","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"EdwardZYWang"},"content":"        String[] deadlineSplitter \u003d input.substring(9).split(\" /by \");","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"EdwardZYWang"},"content":"        String deadlineDescription \u003d deadlineSplitter[0]; //before /by","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"EdwardZYWang"},"content":"        String[] dateTimeSplitter \u003d deadlineSplitter[1].split(\" \");","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"EdwardZYWang"},"content":"        String date \u003d dateTimeSplitter[0];","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"EdwardZYWang"},"content":"        String time \u003d dateTimeSplitter[1];","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"EdwardZYWang"},"content":"        String deadlineBy \u003d date; // after /by","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"EdwardZYWang"},"content":"        String deadlineBy1 \u003d time;","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"EdwardZYWang"},"content":"        Task description \u003d new Deadline(deadlineDescription, deadlineBy, deadlineBy1);","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"EdwardZYWang"},"content":"        Duke.tasks.add(description);","lastModifiedDate":"2021-09-23"},{"lineNumber":177,"author":{"gitId":"EdwardZYWang"},"content":"        inputCount++;","lastModifiedDate":"2021-09-23"},{"lineNumber":178,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":179,"author":{"gitId":"EdwardZYWang"},"content":"        return description;","lastModifiedDate":"2021-09-23"},{"lineNumber":180,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":181,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":184,"author":{"gitId":"EdwardZYWang"},"content":"     * creates a new event task by using child class Event and override toString() function","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"EdwardZYWang"},"content":"     * new task entry contains the location \"at\" depending on the user\u0027s input","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":187,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":188,"author":{"gitId":"EdwardZYWang"},"content":"     * @return description which contains the new event task to be added","lastModifiedDate":"2021-09-23"},{"lineNumber":189,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":190,"author":{"gitId":"EdwardZYWang"},"content":"    public static Task getEventMethod(String input) {","lastModifiedDate":"2021-09-23"},{"lineNumber":191,"author":{"gitId":"EdwardZYWang"},"content":"        String[] eventSplitter \u003d input.substring(6).split(\" /at \");","lastModifiedDate":"2021-09-23"},{"lineNumber":192,"author":{"gitId":"EdwardZYWang"},"content":"        String eventDescription \u003d eventSplitter[0]; //before /at","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"EdwardZYWang"},"content":"        String eventAt \u003d eventSplitter[1]; // after /at","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"EdwardZYWang"},"content":"        Task description \u003d new Event(eventDescription, eventAt);","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"EdwardZYWang"},"content":"        Duke.tasks.add(description);","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"EdwardZYWang"},"content":"        inputCount++;","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"EdwardZYWang"},"content":"        return description;","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"EdwardZYWang"},"content":"     * tests to see if the users input for \"todo\" tasks have a valid description after","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"EdwardZYWang"},"content":"     * the command by checking if there are more than 5 characters in the whole command","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"EdwardZYWang"},"content":"     * stored in String input. throws DukeExceptions if the length of input is less than","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"EdwardZYWang"},"content":"     * 5 characters, meaning thats its just a \"todo\", which has no description and is thus","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"EdwardZYWang"},"content":"     * a false input","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input String containing the user command","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"EdwardZYWang"},"content":"     * @return nil, this is a void method","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"EdwardZYWang"},"content":"    public static void testInput(String input) throws DukeExceptions {","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"EdwardZYWang"},"content":"        if (input.length() \u003c 5) { //check for description after todo","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"EdwardZYWang"},"content":"            throw new DukeExceptions();","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":216,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":217,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"EdwardZYWang":217}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"    public Todo(String description, String tasksToDo) {","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"        super(description);","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"        super(description);","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"    public String toString() {","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"        return \"[T]\" + \"[\" + getStatusIcon() + \"]\" + \" \" + description;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"    @Override","lastModifiedDate":"2021-09-16"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"    public String getStoredDataString() {","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"        String checkDone \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"        return \"todo \"  +  description + \" | \"  + checkDone + System.lineSeparator();","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"EdwardZYWang":21}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"public class Ui {","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"     * Prints welcome message when user logs into Duke. Also checks if flag \"phase\" is set to 1,","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"     * before printing prompt for user to access storage","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"     * @return two different print statements which will be printed if requirements are met","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"    public static void welcomeMessage(){","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"                \" .----------------.  .----------------.  .----------------.  .----------------. \\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"                \"| .--------------. || .--------------. || .--------------. || .--------------. |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"                \"| |  ________    | || | _____  _____ | || |  ___  ____   | || |  _________   | |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"                \"| | |_   ___ `.  | || ||_   _||_   _|| || | |_  ||_  _|  | || | |_   ___  |  | |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"                \"| |   | |   `. \\\\ | || |  | |    | |  | || |   | |_/ /    | || |   | |_  \\\\_|  | |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"                \"| |   | |    | | | || |  | \u0027    \u0027 |  | || |   |  __\u0027.    | || |   |  _|  _   | |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"                \"| |  _| |___.\u0027 / | || |   \\\\ `--\u0027 /   | || |  _| |  \\\\ \\\\_  | || |  _| |___/ |  | |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"                \"| | |________.\u0027  | || |    `.__.\u0027    | || | |____||____| | || | |_________|  | |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"                \"| |              | || |              | || |              | || |              | |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"                \"| \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |\\n\" +","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"                \" \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 \\n\");","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\");","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"        if(StorageUI.phase \u003d\u003d 1){","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Please type \u0027list\u0027 to access memory!\");","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"EdwardZYWang":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"todo borrow book","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"done 1","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"done 4","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"list","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"bye","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"EdwardZYWang":8}}]
