[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"# DukeProgram project template","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"3. After that, locate the `src/main/java/DukeProgram.java` file, right-click it, and choose `Run DukeProgram.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LouisLouis19":2,"-":22}},{"path":"savedData/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"T | 1 | buy bread | ","lastModifiedDate":"2021-09-27"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"E | 1 | play | 2002-11-11T18:00","lastModifiedDate":"2021-09-27"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"D | 0 | eat | 2021-12-12T18:00","lastModifiedDate":"2021-09-27"}],"authorContributionMap":{"LouisLouis19":3}},{"path":"src/main/java/Duke/BackEnd/DukeBackEnd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.BackEnd;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Commands.*;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.UI.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.RunFile.DukeProgram.taskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.*;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"public class DukeBackEnd {","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"     * Method checks whether a string is numeric","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"     * upon conversion to integer","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"     * @param strNum the string to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"     * @return true if string is numeric upon conversion to integer, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"    public static boolean isNumeric(String strNum) {","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"        if (strNum \u003d\u003d null) {","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"            int num \u003d Integer.parseInt(strNum);","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"        return true;","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"     * Method extracts out the specific instruction type from user","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"     * input and executes the program accordingly","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord the user input","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"    public static void executeUserInstruction(String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"        String instructionType \u003d DukeParser.getCommandType(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"        switch(instructionType) {","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"        case LIST_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"            UserInterface.printList(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"        case DONE_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"            DoneCommand.manageDoneInstruction(inWord, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"        case EVENT_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"            AddEventCommand.manageEvent(inWord, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"        case TODO_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"            AddTodoCommand.manageTodo(inWord, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"        case DEADLINE_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"            AddDeadlineCommand.manageDeadline(inWord, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"        case DELETE_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"            DeleteCommand.manageDelete(inWord, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"        case HELP_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"LouisLouis19"},"content":"            UserInterface.printDukeHelp();","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"LouisLouis19"},"content":"        case FIND_COMMAND:","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"LouisLouis19"},"content":"            FindCommand.findMatching(inWord, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"LouisLouis19"},"content":"        default:","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"LouisLouis19"},"content":"            UserInterface.generalDukeException();","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":67}},{"path":"src/main/java/Duke/BackEnd/DukeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.BackEnd;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Event;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.*;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"public class DukeParser {","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses the instruction type, which is the first word,","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"     * from the rest of the instruction from user input","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord the user input","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"     * @return returns the instruction type","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"    public static String getCommandType(String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"        String[] instruction \u003d inWord.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"        String instructionType \u003d instruction[0].trim().toLowerCase();","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"        return instructionType;","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses user instruction if instruction is a \"Done\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord \"Done\" type user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"     * @return the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"    public static String[] parseDoneInstruction (String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d inWord.split(\" \");","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"        return commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses user instruction if instruction is a \"Todo\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord \"Todo\" type user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"     * @return the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"    public static String[] parseTodoInstruction (String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d inWord.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"        return commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses user instruction if instruction is an \"Event\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord \"Event\" type user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"     * @return the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"    public static String[] parseEventInstruction (String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d inWord.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"        return commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses the description section of user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"LouisLouis19"},"content":"     * if instruction is an \"Event\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"LouisLouis19"},"content":"     * @param commands the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"LouisLouis19"},"content":"     * @return the newly created Event Object","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"LouisLouis19"},"content":"     * @throws DateTimeParseException If the user input\u0027s date-time format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"LouisLouis19"},"content":"    public static Event parseEventDescription (String[] commands) throws DateTimeParseException{","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"LouisLouis19"},"content":"            String[] details \u003d commands[1].split(EVENT_KEYWORD, 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"LouisLouis19"},"content":"            String description \u003d details[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"LouisLouis19"},"content":"            String at \u003d details[1].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"LouisLouis19"},"content":"            LocalDateTime eventAt \u003d parseDateTime(at, FORMAT_DATE_TIME_INPUT);","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"LouisLouis19"},"content":"            return new Event(description, eventAt);","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"LouisLouis19"},"content":"        } catch (DateTimeParseException dtpException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.dateTimeParseException(dtpException);","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"LouisLouis19"},"content":"            return null;","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses user instruction if instruction is a \"Deadline\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord \"Deadline\" type user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"LouisLouis19"},"content":"     * @return the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"LouisLouis19"},"content":"    public static String[] parseDeadlineInstruction (String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d inWord.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"LouisLouis19"},"content":"        return commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses the description section of user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"LouisLouis19"},"content":"     * if instruction is a \"Deadline\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":95,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":96,"author":{"gitId":"LouisLouis19"},"content":"     * @param commands the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"LouisLouis19"},"content":"     * @return the newly created Deadline Object","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"LouisLouis19"},"content":"     * @throws DateTimeParseException If the user input\u0027s date-time format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"LouisLouis19"},"content":"    public static Deadline parseDeadlineDescription (String[] commands) throws DateTimeParseException {","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"LouisLouis19"},"content":"            String[] details \u003d commands[1].split(DEADLINE_KEYWORD, 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"LouisLouis19"},"content":"            String description \u003d details[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":104,"author":{"gitId":"LouisLouis19"},"content":"            String by \u003d details[1].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"LouisLouis19"},"content":"            LocalDateTime deadlineBy \u003d parseDateTime(by, FORMAT_DATE_TIME_INPUT);","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"LouisLouis19"},"content":"            return new Deadline(description, deadlineBy);","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"LouisLouis19"},"content":"        } catch (DateTimeParseException dtpException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.dateTimeParseException(dtpException);","lastModifiedDate":"2021-09-25"},{"lineNumber":111,"author":{"gitId":"LouisLouis19"},"content":"            return null;","lastModifiedDate":"2021-09-25"},{"lineNumber":112,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":113,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":114,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":115,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":116,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses user instruction if instruction is a \"Delete\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":117,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":118,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord \"Delete\" type user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":119,"author":{"gitId":"LouisLouis19"},"content":"     * @return the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"LouisLouis19"},"content":"    public static String[] parseDeleteInstruction (String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":122,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d inWord.split(\" \");","lastModifiedDate":"2021-09-25"},{"lineNumber":123,"author":{"gitId":"LouisLouis19"},"content":"        return commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":124,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":126,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":127,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":128,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses user instruction if instruction is a \"Find\" type","lastModifiedDate":"2021-09-25"},{"lineNumber":129,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":130,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord \"Find\" type user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":131,"author":{"gitId":"LouisLouis19"},"content":"     * @return the parsed user instruction in a string array","lastModifiedDate":"2021-09-25"},{"lineNumber":132,"author":{"gitId":"LouisLouis19"},"content":"     * @throws DukeException if the Find instruction is of invalid length","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"LouisLouis19"},"content":"    public static String parseFindInstruction (String inWord) throws DukeException {","lastModifiedDate":"2021-09-25"},{"lineNumber":135,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d inWord.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":136,"author":{"gitId":"LouisLouis19"},"content":"        if (commands.length !\u003d 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":137,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-25"},{"lineNumber":138,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":139,"author":{"gitId":"LouisLouis19"},"content":"        return commands[1].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":140,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":141,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":142,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":143,"author":{"gitId":"LouisLouis19"},"content":"     * Method parses user date-time description and converts","lastModifiedDate":"2021-09-25"},{"lineNumber":144,"author":{"gitId":"LouisLouis19"},"content":"     * the string input into LocalDateTime type","lastModifiedDate":"2021-09-25"},{"lineNumber":145,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":146,"author":{"gitId":"LouisLouis19"},"content":"     * @param dateTime User date-time description","lastModifiedDate":"2021-09-25"},{"lineNumber":147,"author":{"gitId":"LouisLouis19"},"content":"     * @param dateTimeFormat the format to convert the user date-time to","lastModifiedDate":"2021-09-25"},{"lineNumber":148,"author":{"gitId":"LouisLouis19"},"content":"     * @return the formatted LocalDateTime object","lastModifiedDate":"2021-09-25"},{"lineNumber":149,"author":{"gitId":"LouisLouis19"},"content":"     * @throws DateTimeParseException if the user date-time description is of an invalid format","lastModifiedDate":"2021-09-25"},{"lineNumber":150,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":151,"author":{"gitId":"LouisLouis19"},"content":"    public static LocalDateTime parseDateTime (String dateTime, String dateTimeFormat) throws DateTimeParseException{","lastModifiedDate":"2021-09-25"},{"lineNumber":152,"author":{"gitId":"LouisLouis19"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(dateTimeFormat);","lastModifiedDate":"2021-09-25"},{"lineNumber":153,"author":{"gitId":"LouisLouis19"},"content":"        return LocalDateTime.parse(dateTime, format);","lastModifiedDate":"2021-09-25"},{"lineNumber":154,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":156,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":157,"author":{"gitId":"LouisLouis19"},"content":"     * Method converts the LocalDateTime object into a string","lastModifiedDate":"2021-09-25"},{"lineNumber":158,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":159,"author":{"gitId":"LouisLouis19"},"content":"     * @param dateTime LocalDateTime object to be converted","lastModifiedDate":"2021-09-25"},{"lineNumber":160,"author":{"gitId":"LouisLouis19"},"content":"     * @param dateTimeFormat the format to convert the LocalDateTime object to","lastModifiedDate":"2021-09-25"},{"lineNumber":161,"author":{"gitId":"LouisLouis19"},"content":"     * @return the formatted date-time string","lastModifiedDate":"2021-09-25"},{"lineNumber":162,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":163,"author":{"gitId":"LouisLouis19"},"content":"    public static String dateTimeToStringConverter (LocalDateTime dateTime, String dateTimeFormat) {","lastModifiedDate":"2021-09-25"},{"lineNumber":164,"author":{"gitId":"LouisLouis19"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(dateTimeFormat);","lastModifiedDate":"2021-09-25"},{"lineNumber":165,"author":{"gitId":"LouisLouis19"},"content":"        return dateTime.format(format);","lastModifiedDate":"2021-09-25"},{"lineNumber":166,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":167,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":167}},{"path":"src/main/java/Duke/Commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.SaveFile.DataSaver;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Task.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.DEADLINE_KEYWORD;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"public class AddDeadlineCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * Method checks if the user \"Deadline\" instruction is valid","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord the user instruction to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"     * @return true if user instruction is of a correct format, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"    public static boolean checkValidDeadline(String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"        if (!inWord.contains(\" \")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"        //split inWord by the first whitespace(s) into 2 separate strings","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseDeadlineInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"        if (commands.length !\u003d 2 || !inWord.contains(DEADLINE_KEYWORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        String[] description \u003d commands[1].split(DEADLINE_KEYWORD, 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"        if (description.length !\u003d 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"        String descriptionDetails \u003d description[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"        String descriptionBy \u003d description[1].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"        return !descriptionDetails.isEmpty() \u0026\u0026 !descriptionBy.isEmpty();","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"     * Method to add Deadline from instruction to task list","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"     * and to the save file","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord The user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the current list of user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"    public static void manageDeadline(String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"            TaskList.addDeadline(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"            DataSaver.manageSave(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"        } catch (DukeException invalidDeadlineException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.invalidDeadlineException();","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":56}},{"path":"src/main/java/Duke/Commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.SaveFile.DataSaver;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Task.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.EVENT_KEYWORD;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"public class AddEventCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * Method checks if the user \"Event\" instruction is valid","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord the user instruction to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"     * @return true if user instruction is of a correct format, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"    public static boolean isValidEvent(String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"        if (!inWord.contains(\" \")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"        //split inWord by the first whitespace(s) into 2 separate strings","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseEventInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"        if (commands.length !\u003d 2 || !inWord.contains(EVENT_KEYWORD)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        String[] description \u003d commands[1].split(EVENT_KEYWORD, 2);","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"        if (description.length !\u003d 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"        String descriptionDetails \u003d description[0].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"        String descriptionAt \u003d description[1].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"        return !descriptionDetails.isEmpty() \u0026\u0026 !descriptionAt.isEmpty();","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"     * Method to add Event from instruction to task list","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"     * and to the save file","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord The user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the current list of user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"    public static void manageEvent(String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"            TaskList.addEvent(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"            DataSaver.manageSave(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"        } catch (DukeException invalidEventException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.invalidEventException();","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":56}},{"path":"src/main/java/Duke/Commands/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.SaveFile.DataSaver;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Task.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"public class AddTodoCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"     * Method checks if the user \"Todo\" instruction is valid","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord the user instruction to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     * @return true if user instruction is of a correct format, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"    public static boolean checkValidTodo(String inWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"        if (!inWord.contains(\" \")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"        //split inWord by the first whitespace(s) into 2 separate strings","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseTodoInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"        String details \u003d commands[1];","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"        boolean isNonEmptyDetails \u003d !details.isEmpty();","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"        return commands.length \u003d\u003d 2 \u0026\u0026 isNonEmptyDetails;","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"     * Method to add Todo from instruction to task list","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"     * and to the save file","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord The user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the current list of user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"    public static void manageTodo(String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"            TaskList.addTodo(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"            DataSaver.manageSave(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"        } catch (DukeException emptyTodoException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.emptyTodoException();","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":45}},{"path":"src/main/java/Duke/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeBackEnd;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.SaveFile.DataSaver;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Task.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"public class DeleteCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * Method checks if the user \"Delete\" instruction is valid","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord The user instruction to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList The current list of user\u0027s task","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"     * @return true if user instruction is of a correct format, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"    public static boolean isValidDeleteInstruction(String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"        if (!inWord.contains(\" \")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseDeleteInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"        if (commands.length !\u003d 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        if(DukeBackEnd.isNumeric(commands[1])) {","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"            int taskDoneIndex \u003d Integer.parseInt(commands[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"            return taskDoneIndex \u003e 0 \u0026\u0026 taskDoneIndex \u003c\u003d taskList.size();","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"        return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"     * Method to Delete from task list","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"     * and from the save file","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord The user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the current list of user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"    public static void manageDelete(String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"            TaskList.deleteTask(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"            DataSaver.manageSave(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"        } catch (DukeException invalidDeleteException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.invalidDeleteException();","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":53}},{"path":"src/main/java/Duke/Commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeBackEnd;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.SaveFile.DataSaver;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Task.TaskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"public class DoneCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * Method checks if the user \"Done\" instruction is valid","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord The user instruction to be checked","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList The current list of user\u0027s task","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"     * @return true if user instruction is of a correct format, false otherwise","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"    public static boolean isValidDoneInstruction(String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"        if (!inWord.contains(\" \")) {","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseDoneInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"        if (commands.length !\u003d 2) {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        if(DukeBackEnd.isNumeric(commands[1])) {","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"            int taskDoneIndex \u003d Integer.parseInt(commands[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"            return taskDoneIndex \u003e 0 \u0026\u0026 taskDoneIndex \u003c\u003d taskList.size();","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"        return false;","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"     * Method to mark instruction as done in task list","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"     * and in the save file","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord The user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the current list of user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"    public static void manageDoneInstruction(String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"            TaskList.printTaskDone(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"            DataSaver.manageSave(taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"        } catch (DukeException invalidDoneException){","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.invalidDoneException();","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":54}},{"path":"src/main/java/Duke/Commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.UI.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"public class ExitCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"     * Method to exit duke program and call goodbye message","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"    public static void dukeExit() {","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.printDukeExit();","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":13}},{"path":"src/main/java/Duke/Commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Commands;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.UI.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"public class FindCommand {","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"     * Method to find if there is a matching keyword in the task list","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"     * @param inWord the user instruction","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the current list of user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"    public static void findMatching (String inWord, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"            try {","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"                String searchedWord \u003d DukeParser.parseFindInstruction(inWord).toLowerCase();","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"                ArrayList\u003cTask\u003e tasksWithQuery \u003d traverseCopy(taskList, searchedWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"                printTasksWithQuery(searchedWord, tasksWithQuery);","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"                DukeException.invalidFindException();","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"     * Execute the query result according to the search results obtained","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"     * @param searchedWord the word that user queries","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"     * @param tasksWithQuery the current list of matching task and query","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"    private static void printTasksWithQuery(String searchedWord, ArrayList\u003cTask\u003e tasksWithQuery) {","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        if (tasksWithQuery.isEmpty()) {","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"            UserInterface.noMatchMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"            UserInterface.printAllMatchingTasks(searchedWord, tasksWithQuery);","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"     * Method fills in a list of matching task and query","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the current list of user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"     * @param searchedWord the word that user queries","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"     * @return the newly created array list of matching task and queery","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"    private static ArrayList\u003cTask\u003e traverseCopy (ArrayList\u003cTask\u003e taskList, String searchedWord) {","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"        ArrayList\u003cTask\u003e tasksWithQuery \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"            if (t.getDescription().toLowerCase().contains(searchedWord)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"                tasksWithQuery.add(t);","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"        return tasksWithQuery;","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":57}},{"path":"src/main/java/Duke/Exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Exception;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.UI.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":" * Class of exceptions in Duke Program","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if user task list is empty","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"    public static void emptyTodoException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.emptyTodoMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if deadline instruction format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidDeadlineException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.invalidDeadlineMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if event instruction format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidEventException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.invalidEventMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidDoneException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.invalidDoneMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if delete instruction format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidDeleteException() {","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.invalidDeleteMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if task is empty","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"    public static void emptyTaskException() {","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.emptyTaskMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if save file is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidSaveFileException() {","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.invalidSaveFileMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if IO exception occurs when creating new file","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"LouisLouis19"},"content":"    public static void createIOException(IOException ioException) {","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.createIOExceptionMessage(ioException);","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if IO exception occurs when saving file","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"LouisLouis19"},"content":"    public static void SaveIOException(IOException ioException) {","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.SaveIOExceptionMessage(ioException);","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if find instruction format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidFindException() {","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.invalidFindMessage();","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"LouisLouis19"},"content":"     * Executes exception message if date-time format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"LouisLouis19"},"content":"    public static void dateTimeParseException(DateTimeParseException dtpException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.createDtpExceptionMessage(dtpException);","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"LouisLouis19":84}},{"path":"src/main/java/Duke/RunFile/DukeProgram.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.RunFile;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeBackEnd;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Commands.*;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.SaveFile.DataSaver;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.UI.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.*;","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":" * Starting point of Duke Program.","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":" * This class encapsulates the application\u0027s","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":" * main entry point.","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"public class DukeProgram {","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"    public static final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"     * The application\u0027s main entry point which takes in user input","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"     * and executes the corresponding instructions until user types","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"     * in \"bye\" to exit the program","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.printDukeGreet();","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"        DataSaver.manageLoad(taskList);","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        String inWord;","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"        Scanner scan \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println();","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        inWord \u003d scan.nextLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"        while (!inWord.equalsIgnoreCase(EXIT_STRING)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"            DukeBackEnd.executeUserInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"            inWord \u003d scan.nextLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"        ExitCommand.dukeExit();","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"LouisLouis19":41,"-":2}},{"path":"src/main/java/Duke/SaveFile/DataSaver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.SaveFile;","lastModifiedDate":"2021-09-14"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Todo;","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Event;","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Deadline;","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"import java.io.File;","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-27"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.BackEnd.DukeParser.parseDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.FORMAT_DATE_TIME_INPUT;","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"public class DataSaver {","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"    private static final String DONE_STATUS \u003d \"1\";","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"    private static final String NOT_DONE_STATUS \u003d \"0\";","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"    private static final String DIRECTORY_PATH \u003d \"savedData\";","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"    private static final String FILE_PATH \u003d \"savedData\\\\duke.txt\";","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"    private static final String DIVIDER \u003d \" | \";","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"    public static void manageLoad(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        Scanner scan \u003d null;","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"            scan \u003d new Scanner(file);","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"        } catch (FileNotFoundException fileNotFoundException) {","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"            createNewFile();","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"        loadFileContents(taskList, scan);","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"    public static void createNewFile() {","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"            Files.createDirectories(Paths.get(DIRECTORY_PATH));","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"            Files.createFile(Paths.get(FILE_PATH));","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.createIOException(ioException);","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"    public static void loadFileContents(ArrayList\u003cTask\u003e taskList, Scanner scan) {","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"        while (scan !\u003d null \u0026\u0026 scan.hasNext()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"            String newTask \u003d scan.nextLine();","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"            try {","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"                addToTaskList(taskList, newTask);","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"LouisLouis19"},"content":"            } catch (DukeException invalidSaveFileException) {","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"LouisLouis19"},"content":"                DukeException.invalidSaveFileException();","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"LouisLouis19"},"content":"    public static void addToTaskList(ArrayList\u003cTask\u003e taskList, String newTask) throws DukeException {","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"LouisLouis19"},"content":"        String[] taskDetails \u003d newTask.split(\"\\\\|\");","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":66,"author":{"gitId":"LouisLouis19"},"content":"        if (!checkValidDetails(taskDetails)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":67,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"LouisLouis19"},"content":"        String type \u003d taskDetails[0].trim();","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"LouisLouis19"},"content":"        switch(type) {","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"LouisLouis19"},"content":"        case \"T\":","lastModifiedDate":"2021-09-14"},{"lineNumber":74,"author":{"gitId":"LouisLouis19"},"content":"            String todoDescription \u003d taskDetails[2].trim();","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"LouisLouis19"},"content":"            Todo addedTodo \u003d new Todo(todoDescription);","lastModifiedDate":"2021-09-14"},{"lineNumber":76,"author":{"gitId":"LouisLouis19"},"content":"            addDoneStatus(addedTodo, taskDetails);","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"LouisLouis19"},"content":"            taskList.add(addedTodo);","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"LouisLouis19"},"content":"        case \"D\":","lastModifiedDate":"2021-09-14"},{"lineNumber":80,"author":{"gitId":"LouisLouis19"},"content":"            String deadlineDescription \u003d taskDetails[2].trim();","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"LouisLouis19"},"content":"            String by \u003d taskDetails[3].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"LouisLouis19"},"content":"            //remove T in index 10 of task in save file before formatting","lastModifiedDate":"2021-09-27"},{"lineNumber":83,"author":{"gitId":"LouisLouis19"},"content":"            char[] byCharArray \u003d by.toCharArray();","lastModifiedDate":"2021-09-27"},{"lineNumber":84,"author":{"gitId":"LouisLouis19"},"content":"            if (byCharArray[10] \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-09-27"},{"lineNumber":85,"author":{"gitId":"LouisLouis19"},"content":"                byCharArray[10] \u003d \u0027 \u0027;","lastModifiedDate":"2021-09-27"},{"lineNumber":86,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":87,"author":{"gitId":"LouisLouis19"},"content":"            by \u003d String.valueOf(byCharArray);","lastModifiedDate":"2021-09-27"},{"lineNumber":88,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":89,"author":{"gitId":"LouisLouis19"},"content":"            LocalDateTime deadlineBy \u003d parseDateTime(by, FORMAT_DATE_TIME_INPUT);","lastModifiedDate":"2021-09-27"},{"lineNumber":90,"author":{"gitId":"LouisLouis19"},"content":"            Deadline addedDeadline \u003d new Deadline(deadlineDescription, deadlineBy);","lastModifiedDate":"2021-09-14"},{"lineNumber":91,"author":{"gitId":"LouisLouis19"},"content":"            addDoneStatus(addedDeadline, taskDetails);","lastModifiedDate":"2021-09-14"},{"lineNumber":92,"author":{"gitId":"LouisLouis19"},"content":"            taskList.add(addedDeadline);","lastModifiedDate":"2021-09-14"},{"lineNumber":93,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-14"},{"lineNumber":94,"author":{"gitId":"LouisLouis19"},"content":"        case \"E\":","lastModifiedDate":"2021-09-14"},{"lineNumber":95,"author":{"gitId":"LouisLouis19"},"content":"            String eventDescription \u003d taskDetails[2].trim();","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"LouisLouis19"},"content":"            String at \u003d taskDetails[3].trim();","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":98,"author":{"gitId":"LouisLouis19"},"content":"            char[] atCharArray \u003d at.toCharArray();","lastModifiedDate":"2021-09-27"},{"lineNumber":99,"author":{"gitId":"LouisLouis19"},"content":"            if (atCharArray[10] \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-09-27"},{"lineNumber":100,"author":{"gitId":"LouisLouis19"},"content":"                atCharArray[10] \u003d \u0027 \u0027;","lastModifiedDate":"2021-09-27"},{"lineNumber":101,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-27"},{"lineNumber":102,"author":{"gitId":"LouisLouis19"},"content":"            at \u003d String.valueOf(atCharArray);","lastModifiedDate":"2021-09-27"},{"lineNumber":103,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-27"},{"lineNumber":104,"author":{"gitId":"LouisLouis19"},"content":"            LocalDateTime eventAt \u003d parseDateTime(at, FORMAT_DATE_TIME_INPUT);","lastModifiedDate":"2021-09-27"},{"lineNumber":105,"author":{"gitId":"LouisLouis19"},"content":"            Event addedEvent \u003d new Event(eventDescription, eventAt);","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"LouisLouis19"},"content":"            addDoneStatus(addedEvent, taskDetails);","lastModifiedDate":"2021-09-14"},{"lineNumber":107,"author":{"gitId":"LouisLouis19"},"content":"            taskList.add(addedEvent);","lastModifiedDate":"2021-09-14"},{"lineNumber":108,"author":{"gitId":"LouisLouis19"},"content":"            break;","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"LouisLouis19"},"content":"        default:","lastModifiedDate":"2021-09-14"},{"lineNumber":110,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-14"},{"lineNumber":111,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":112,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"LouisLouis19"},"content":"    public static boolean checkValidDetails(String[] taskDetails) {","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"LouisLouis19"},"content":"        String status \u003d taskDetails[1].trim();","lastModifiedDate":"2021-09-14"},{"lineNumber":116,"author":{"gitId":"LouisLouis19"},"content":"        if (!status.equals(DONE_STATUS) \u0026\u0026 !status.equals(NOT_DONE_STATUS)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":117,"author":{"gitId":"LouisLouis19"},"content":"            return false;","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":120,"author":{"gitId":"LouisLouis19"},"content":"        return taskDetails.length \u003d\u003d 3 || taskDetails.length \u003d\u003d 4;","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":122,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":123,"author":{"gitId":"LouisLouis19"},"content":"    public static void addDoneStatus(Task addedTask, String[] taskDetails) {","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"LouisLouis19"},"content":"        String status \u003d taskDetails[1].trim();","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"LouisLouis19"},"content":"        if (status.equals(DONE_STATUS)) {","lastModifiedDate":"2021-09-14"},{"lineNumber":126,"author":{"gitId":"LouisLouis19"},"content":"            addedTask.markAsDone();","lastModifiedDate":"2021-09-14"},{"lineNumber":127,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"LouisLouis19"},"content":"    public static void manageSave(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-14"},{"lineNumber":131,"author":{"gitId":"LouisLouis19"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":132,"author":{"gitId":"LouisLouis19"},"content":"            saveFileContents(taskList);","lastModifiedDate":"2021-09-14"},{"lineNumber":133,"author":{"gitId":"LouisLouis19"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-09-14"},{"lineNumber":134,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.SaveIOException(ioException);","lastModifiedDate":"2021-09-14"},{"lineNumber":135,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":136,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":137,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":138,"author":{"gitId":"LouisLouis19"},"content":"    public static void saveFileContents(ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2021-09-14"},{"lineNumber":139,"author":{"gitId":"LouisLouis19"},"content":"        FileWriter writeFile \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2021-09-14"},{"lineNumber":140,"author":{"gitId":"LouisLouis19"},"content":"        configureTask(taskList, writeFile);","lastModifiedDate":"2021-09-14"},{"lineNumber":141,"author":{"gitId":"LouisLouis19"},"content":"        writeFile.close();","lastModifiedDate":"2021-09-14"},{"lineNumber":142,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":143,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":144,"author":{"gitId":"LouisLouis19"},"content":"    public static void configureTask(ArrayList\u003cTask\u003e taskList, FileWriter writeFile) throws IOException {","lastModifiedDate":"2021-09-14"},{"lineNumber":145,"author":{"gitId":"LouisLouis19"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-09-14"},{"lineNumber":146,"author":{"gitId":"LouisLouis19"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2021-09-25"},{"lineNumber":147,"author":{"gitId":"LouisLouis19"},"content":"                StringBuilder parsedTask \u003d new StringBuilder();","lastModifiedDate":"2021-09-14"},{"lineNumber":148,"author":{"gitId":"LouisLouis19"},"content":"                parseType(task, parsedTask);","lastModifiedDate":"2021-09-14"},{"lineNumber":149,"author":{"gitId":"LouisLouis19"},"content":"                parseStatus(task, parsedTask);","lastModifiedDate":"2021-09-14"},{"lineNumber":150,"author":{"gitId":"LouisLouis19"},"content":"                parseDescription(task, parsedTask);","lastModifiedDate":"2021-09-14"},{"lineNumber":151,"author":{"gitId":"LouisLouis19"},"content":"                writeFile.write(parsedTask + System.lineSeparator());","lastModifiedDate":"2021-09-14"},{"lineNumber":152,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":153,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":154,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":156,"author":{"gitId":"LouisLouis19"},"content":"    public static void parseType(Task task, StringBuilder parsedTask) {","lastModifiedDate":"2021-09-14"},{"lineNumber":157,"author":{"gitId":"LouisLouis19"},"content":"        String type \u003d task.getType();","lastModifiedDate":"2021-09-14"},{"lineNumber":158,"author":{"gitId":"LouisLouis19"},"content":"        parsedTask.append(type).append(DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":159,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":160,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":161,"author":{"gitId":"LouisLouis19"},"content":"    public static void parseStatus(Task task, StringBuilder parsedTask) {","lastModifiedDate":"2021-09-14"},{"lineNumber":162,"author":{"gitId":"LouisLouis19"},"content":"        if (task.getIsDone()) {","lastModifiedDate":"2021-09-14"},{"lineNumber":163,"author":{"gitId":"LouisLouis19"},"content":"            parsedTask.append(\"1\").append(DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":164,"author":{"gitId":"LouisLouis19"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":165,"author":{"gitId":"LouisLouis19"},"content":"            parsedTask.append(\"0\").append(DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":166,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":167,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":168,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":169,"author":{"gitId":"LouisLouis19"},"content":"    public static void parseDescription(Task task, StringBuilder parsedTask) {","lastModifiedDate":"2021-09-14"},{"lineNumber":170,"author":{"gitId":"LouisLouis19"},"content":"        parsedTask.append(task.getDescription()).append(DIVIDER);","lastModifiedDate":"2021-09-14"},{"lineNumber":171,"author":{"gitId":"LouisLouis19"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2021-09-14"},{"lineNumber":172,"author":{"gitId":"LouisLouis19"},"content":"            parsedTask.append(((Deadline) task).getBy());","lastModifiedDate":"2021-09-14"},{"lineNumber":173,"author":{"gitId":"LouisLouis19"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2021-09-14"},{"lineNumber":174,"author":{"gitId":"LouisLouis19"},"content":"            parsedTask.append(((Event) task).getAt());","lastModifiedDate":"2021-09-14"},{"lineNumber":175,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":176,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":177,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"LouisLouis19":177}},{"path":"src/main/java/Duke/Task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Commands.*;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Deadline;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Event;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Todo;","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"import Duke.UI.UserInterface;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.RunFile.DukeProgram.taskList;","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.UserInterface.taskDoneMessage;","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"public class TaskList {","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"    public static int listSize() {","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"        return taskList.size();","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"    public static void printTaskDone(String inWord) throws DukeException {","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"        if (DoneCommand.isValidDoneInstruction(inWord, taskList)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"            String[] commands \u003d DukeParser.parseDoneInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"            int taskDoneIndex \u003d Integer.parseInt(commands[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"            taskList.get(taskDoneIndex - 1).markAsDone();","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"            taskDoneMessage(taskDoneIndex, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"    public static void addTask(Task newTask) {","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"        taskList.add(newTask);","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"        UserInterface.taskAddedMessage(newTask, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"    public static void deleteTask(String inWord) throws DukeException {","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"        if (DeleteCommand.isValidDeleteInstruction(inWord, taskList)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"            String[] commands \u003d DukeParser.parseDeleteInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"            int taskDeleteIndex \u003d Integer.parseInt(commands[1]);","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"            Task deletedTask \u003d taskList.get(taskDeleteIndex - 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"            taskList.remove(taskDeleteIndex - 1);","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"            UserInterface.deleteMessage(deletedTask, taskList);","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"    public static void addEvent(String inWord) throws DukeException {","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseEventInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"        if (AddEventCommand.isValidEvent(inWord)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"            Event newEvent \u003d DukeParser.parseEventDescription(commands);","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"            if (newEvent !\u003d null) {","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"                addTask(newEvent);","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"LouisLouis19"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"LouisLouis19"},"content":"    public static void addTodo(String inWord) throws DukeException {","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseTodoInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"LouisLouis19"},"content":"        if(AddTodoCommand.checkValidTodo(inWord)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"LouisLouis19"},"content":"            String description \u003d commands[1];","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"LouisLouis19"},"content":"            Todo newTodo \u003d new Todo(description);","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"LouisLouis19"},"content":"            addTask(newTodo);","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"LouisLouis19"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"LouisLouis19"},"content":"    public static void addDeadline(String inWord) throws DukeException {","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"LouisLouis19"},"content":"        String[] commands \u003d DukeParser.parseDeadlineInstruction(inWord);","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"LouisLouis19"},"content":"        if (AddDeadlineCommand.checkValidDeadline(inWord)) {","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"LouisLouis19"},"content":"            Deadline newDeadline \u003d DukeParser.parseDeadlineDescription(commands);","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"LouisLouis19"},"content":"            if (newDeadline !\u003d null) {","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"LouisLouis19"},"content":"                addTask(newDeadline);","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"LouisLouis19"},"content":"            }","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"LouisLouis19"},"content":"        } else {","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"LouisLouis19"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":87}},{"path":"src/main/java/Duke/TaskTypes/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.TaskTypes;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.FORMAT_DATE_TIME_OUTPUT;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"     * Constructor for deadline class","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"     * @param description deadline description","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"     * @param by deadline by description","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"    //Add Getter and Setter","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"        return by;","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"    public void setBy(LocalDateTime by) {","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        return \"[D] \" + super.toString() +\" (by: \" + DukeParser.dateTimeToStringConverter(by, FORMAT_DATE_TIME_OUTPUT) + \")\";","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"    public String getType() {","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"        return \"D\";","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LouisLouis19":38}},{"path":"src/main/java/Duke/TaskTypes/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.TaskTypes;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.BackEnd.DukeParser;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.FORMAT_DATE_TIME_OUTPUT;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"    protected LocalDateTime at;","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"     * Constructor for event class","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * @param description event description","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     * @param at event at description","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"    public Event(String description, LocalDateTime at) {","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"    public LocalDateTime getAt() {","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"        return at;","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"    public void setAt(LocalDateTime newAt) {","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"        this.at \u003d newAt;","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"        return \"[E] \" + super.toString() + \" (at: \" + DukeParser.dateTimeToStringConverter(at, FORMAT_DATE_TIME_OUTPUT) + \")\";","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"    public String getType() {","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"        return \"E\";","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LouisLouis19":40}},{"path":"src/main/java/Duke/TaskTypes/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.TaskTypes;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"public class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"    protected String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"     * Constructor for Task class","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"     * @param description task description","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"    //Add Getter and Setter","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"        return description;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"    public void setDescription(String newDescription) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"        this.description \u003d newDescription;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"        return isDone;","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        // mark done task with X","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"        return (this.isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"        return \"[\" +getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"    public String getType() {","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"        return \"\";","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"LouisLouis19":47}},{"path":"src/main/java/Duke/TaskTypes/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.TaskTypes;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"     * Constructor for todo class","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"     * @param description deadline description","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"    public String getType() {","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"        return \"T\";","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LouisLouis19":22}},{"path":"src/main/java/Duke/UI/DukeConstants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.UI;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":" * Class which stores all the constants used in Duke Program","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"public class DukeConstants {","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"    //List of Special User Commands","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"    public static final String EXIT_STRING \u003d \"bye\";","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"    public static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"    public static final String DONE_COMMAND \u003d \"done\";","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"    public static final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"    public static final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"    public static final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"    public static final String HELP_COMMAND \u003d \"help\";","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"    public static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"    public static final String DUKE_LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"    public static final String EVENT_KEYWORD \u003d \" /at\";","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"    public static final String DEADLINE_KEYWORD \u003d \" /by\";","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"    public static final String GOODBYE_MESSAGE \u003d \" Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"    public static final String HELP_MESSAGE \u003d \" Type list to display your list of todos.\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"            +\" Type todo {description} to add a task into your list.\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"            +\" Type event {description} /at {at} to add an event into your list.\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"            +\" Type deadline {description} /by {by} to add a deadline into your list.\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"            +\" Type delete {index} to delete a task from your list of todos.\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"            +\" Type done {index} to mark a task as done in your list of todos.\\n\"","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"            +\" Type bye to exit Duke.\";","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"    public static final String FORMAT_DATE_TIME_INPUT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"    public static final String FORMAT_DATE_TIME_OUTPUT \u003d \"LLL dd yyyy HH:mma\";","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":35}},{"path":"src/main/java/Duke/UI/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"package Duke.UI;","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"import Duke.Exception.DukeException;","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"import Duke.TaskTypes.Task;","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"import static Duke.UI.DukeConstants.*;","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"/**","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":" * Class which stores all the command line printing methods","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":" */","lastModifiedDate":"2021-09-25"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"public class UserInterface {","lastModifiedDate":"2021-09-25"},{"lineNumber":14,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":15,"author":{"gitId":"LouisLouis19"},"content":"     * Print Duke welcome message","lastModifiedDate":"2021-09-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"LouisLouis19"},"content":"    public static void printDukeGreet() {","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Hello from\\n\" + DUKE_LOGO);","lastModifiedDate":"2021-09-25"},{"lineNumber":19,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" Hello! I\u0027m Duke\");","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" What can I do for you?\");","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"LouisLouis19"},"content":"     * Print user manual for duke program","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"LouisLouis19"},"content":"    public static void printDukeHelp() {","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(HELP_MESSAGE);","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"LouisLouis19"},"content":"     * prints all the tasks in the user\u0027s list","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the list which stores user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":38,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":39,"author":{"gitId":"LouisLouis19"},"content":"    public static void printList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":40,"author":{"gitId":"LouisLouis19"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-25"},{"lineNumber":41,"author":{"gitId":"LouisLouis19"},"content":"            DukeException.emptyTaskException();","lastModifiedDate":"2021-09-25"},{"lineNumber":42,"author":{"gitId":"LouisLouis19"},"content":"            return;","lastModifiedDate":"2021-09-25"},{"lineNumber":43,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":44,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":45,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":46,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" Here are the tasks in your list:\");","lastModifiedDate":"2021-09-25"},{"lineNumber":47,"author":{"gitId":"LouisLouis19"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-09-25"},{"lineNumber":48,"author":{"gitId":"LouisLouis19"},"content":"            System.out.println(\" \" + (i + 1) + \". \" + taskList.get(i).toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":49,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"LouisLouis19"},"content":"     * print which task is marked as done","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskDoneIndex the index of the task to be marked done","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the list which stores user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":60,"author":{"gitId":"LouisLouis19"},"content":"    public static void taskDoneMessage (int taskDoneIndex, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":61,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":62,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-09-25"},{"lineNumber":63,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"   \" + taskList.get(taskDoneIndex - 1).toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":64,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":65,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":66,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":67,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":68,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":69,"author":{"gitId":"LouisLouis19"},"content":"     * print which task is added to the task list","lastModifiedDate":"2021-09-25"},{"lineNumber":70,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":71,"author":{"gitId":"LouisLouis19"},"content":"     * @param newItem task to be added","lastModifiedDate":"2021-09-25"},{"lineNumber":72,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the list which stores user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":73,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"LouisLouis19"},"content":"    public static void taskAddedMessage (Task newItem, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"   \" + newItem);","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" Now you have \" + taskList.size() +\" tasks in the list.\");","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":80,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":82,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":83,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":84,"author":{"gitId":"LouisLouis19"},"content":"     * print which task is deleted from the task list","lastModifiedDate":"2021-09-25"},{"lineNumber":85,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":86,"author":{"gitId":"LouisLouis19"},"content":"     * @param deletedTask task to be deleted","lastModifiedDate":"2021-09-25"},{"lineNumber":87,"author":{"gitId":"LouisLouis19"},"content":"     * @param taskList the list which stores user\u0027s tasks","lastModifiedDate":"2021-09-25"},{"lineNumber":88,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":89,"author":{"gitId":"LouisLouis19"},"content":"    public static void deleteMessage(Task deletedTask, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-25"},{"lineNumber":90,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":91,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" Noted! I\u0027ve removed this task:\");","lastModifiedDate":"2021-09-25"},{"lineNumber":92,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"   \" + deletedTask.toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":93,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" Now you have \" + taskList.size() +\" tasks in the list.\");","lastModifiedDate":"2021-09-25"},{"lineNumber":94,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":95,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":96,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":97,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":98,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":99,"author":{"gitId":"LouisLouis19"},"content":"     * prints an error message for exceptions in Duke Program","lastModifiedDate":"2021-09-25"},{"lineNumber":100,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":101,"author":{"gitId":"LouisLouis19"},"content":"    public static void generalDukeException() {","lastModifiedDate":"2021-09-25"},{"lineNumber":102,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":103,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Please input a valid command!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":104,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":105,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":106,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":107,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":108,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"LouisLouis19"},"content":"     * prints goodbye message when Duke Program terminates","lastModifiedDate":"2021-09-25"},{"lineNumber":110,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":111,"author":{"gitId":"LouisLouis19"},"content":"    public static void printDukeExit() {","lastModifiedDate":"2021-09-25"},{"lineNumber":112,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":113,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(GOODBYE_MESSAGE);","lastModifiedDate":"2021-09-25"},{"lineNumber":114,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":115,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":116,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":117,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":118,"author":{"gitId":"LouisLouis19"},"content":"     * Prints error message when todo instruction has no description","lastModifiedDate":"2021-09-25"},{"lineNumber":119,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":120,"author":{"gitId":"LouisLouis19"},"content":"    public static void emptyTodoMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":121,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":122,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Your todo command does not have an argument!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":123,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"To input a valid todo command, type \\\"todo (argument)\\\"!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":124,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":125,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":126,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":127,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":128,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":129,"author":{"gitId":"LouisLouis19"},"content":"     * Prints error message when deadline instruction is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":130,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":131,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidDeadlineMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":132,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Your deadline command is invalid!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":134,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"To input a valid deadline command, type \\\"deadline (description) /by (deadline)\\\"!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":135,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":136,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":137,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":138,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":139,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":140,"author":{"gitId":"LouisLouis19"},"content":"     * Prints error message when event instruction is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":141,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":142,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidEventMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":143,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":144,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Your event command is invalid!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":145,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"To input a event command, type \\\"event (description) /at (when)\\\"!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":146,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":147,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":148,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":149,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":150,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":151,"author":{"gitId":"LouisLouis19"},"content":"     * Prints error message when done instruction is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":152,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":153,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidDoneMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":154,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Your done command is invalid!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":156,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"To input a done command, type \\\"done (task index)\\\"!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":157,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":158,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":159,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":160,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":161,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":162,"author":{"gitId":"LouisLouis19"},"content":"     * Prints error message when delete instruction is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":163,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":164,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidDeleteMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":165,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":166,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Your delete command is invalid!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":167,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"To input a delete command, type \\\"delete (task index)\\\"!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":168,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":169,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":170,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":171,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":172,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":173,"author":{"gitId":"LouisLouis19"},"content":"     * Prints message when task list is still empty","lastModifiedDate":"2021-09-25"},{"lineNumber":174,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":175,"author":{"gitId":"LouisLouis19"},"content":"    public static void emptyTaskMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":176,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":177,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\" No Tasks here yet. Go include some tasks!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":178,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":179,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":180,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":181,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":182,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":183,"author":{"gitId":"LouisLouis19"},"content":"     * Prints error message if save file is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":184,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":185,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidSaveFileMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":186,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":187,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Your save file is invalid!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":188,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":189,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":190,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":191,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":192,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":193,"author":{"gitId":"LouisLouis19"},"content":"     * prints error message if IO exception occurs when creating new file","lastModifiedDate":"2021-09-25"},{"lineNumber":194,"author":{"gitId":"LouisLouis19"},"content":"     * @param ioException the exception which occurs from running program","lastModifiedDate":"2021-09-25"},{"lineNumber":195,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":196,"author":{"gitId":"LouisLouis19"},"content":"    public static void createIOExceptionMessage(IOException ioException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":197,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":198,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Something went wrong: \" + ioException.getMessage());","lastModifiedDate":"2021-09-25"},{"lineNumber":199,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":200,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":201,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":202,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":203,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":204,"author":{"gitId":"LouisLouis19"},"content":"     * prints error message if IO exception occurs when saving file","lastModifiedDate":"2021-09-25"},{"lineNumber":205,"author":{"gitId":"LouisLouis19"},"content":"     * @param ioException the exception which occurs from running program","lastModifiedDate":"2021-09-25"},{"lineNumber":206,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":207,"author":{"gitId":"LouisLouis19"},"content":"    public static void SaveIOExceptionMessage(IOException ioException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":208,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":209,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Something went wrong: \" + ioException.getMessage());","lastModifiedDate":"2021-09-25"},{"lineNumber":210,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":211,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":212,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":213,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":214,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":215,"author":{"gitId":"LouisLouis19"},"content":"     * Prints error message when find instruction is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":216,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":217,"author":{"gitId":"LouisLouis19"},"content":"    public static void invalidFindMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":218,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":219,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Your find command is invalid!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":220,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"To input a find command, type \\\"find {searched word}\\\"!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":221,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":222,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":223,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":224,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":225,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":226,"author":{"gitId":"LouisLouis19"},"content":"     * Prints message when user query gives out no match","lastModifiedDate":"2021-09-25"},{"lineNumber":227,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":228,"author":{"gitId":"LouisLouis19"},"content":"    public static void noMatchMessage() {","lastModifiedDate":"2021-09-25"},{"lineNumber":229,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":230,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"There are no matching tasks in your list!\");","lastModifiedDate":"2021-09-25"},{"lineNumber":231,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":232,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":233,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":234,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":235,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":236,"author":{"gitId":"LouisLouis19"},"content":"     * Prints all the matched task from user query","lastModifiedDate":"2021-09-25"},{"lineNumber":237,"author":{"gitId":"LouisLouis19"},"content":"     *","lastModifiedDate":"2021-09-25"},{"lineNumber":238,"author":{"gitId":"LouisLouis19"},"content":"     * @param searchedWord the user query","lastModifiedDate":"2021-09-25"},{"lineNumber":239,"author":{"gitId":"LouisLouis19"},"content":"     * @param tasksWithQuery the list of matched tasks with query","lastModifiedDate":"2021-09-25"},{"lineNumber":240,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":241,"author":{"gitId":"LouisLouis19"},"content":"    public static void printAllMatchingTasks(String searchedWord, ArrayList\u003cTask\u003e tasksWithQuery) {","lastModifiedDate":"2021-09-25"},{"lineNumber":242,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":243,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Here are the matching tasks in your list to \\\"\" + searchedWord + \"\\\"\");","lastModifiedDate":"2021-09-25"},{"lineNumber":244,"author":{"gitId":"LouisLouis19"},"content":"        for (int i \u003d 0; i \u003c tasksWithQuery.size(); i++) {","lastModifiedDate":"2021-09-25"},{"lineNumber":245,"author":{"gitId":"LouisLouis19"},"content":"            System.out.println(\" \" + (i + 1) + \". \" + tasksWithQuery.get(i).toString());","lastModifiedDate":"2021-09-25"},{"lineNumber":246,"author":{"gitId":"LouisLouis19"},"content":"        }","lastModifiedDate":"2021-09-25"},{"lineNumber":247,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":248,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":249,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":250,"author":{"gitId":"LouisLouis19"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":251,"author":{"gitId":"LouisLouis19"},"content":"    /**","lastModifiedDate":"2021-09-25"},{"lineNumber":252,"author":{"gitId":"LouisLouis19"},"content":"     * Prints exception message if date-time format is invalid","lastModifiedDate":"2021-09-25"},{"lineNumber":253,"author":{"gitId":"LouisLouis19"},"content":"     * @param dtpException the exception which occurs from running duke program","lastModifiedDate":"2021-09-25"},{"lineNumber":254,"author":{"gitId":"LouisLouis19"},"content":"     */","lastModifiedDate":"2021-09-25"},{"lineNumber":255,"author":{"gitId":"LouisLouis19"},"content":"    public static void createDtpExceptionMessage(DateTimeParseException dtpException) {","lastModifiedDate":"2021-09-25"},{"lineNumber":256,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":257,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(\"Something went wrong: \" + dtpException.getMessage());","lastModifiedDate":"2021-09-25"},{"lineNumber":258,"author":{"gitId":"LouisLouis19"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-09-25"},{"lineNumber":259,"author":{"gitId":"LouisLouis19"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2021-09-25"},{"lineNumber":260,"author":{"gitId":"LouisLouis19"},"content":"    }","lastModifiedDate":"2021-09-25"},{"lineNumber":261,"author":{"gitId":"LouisLouis19"},"content":"}","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":261}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"deadline watch lecture /by today","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"LouisLouis19"},"content":"event movie /at 7","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"LouisLouis19"},"content":"list","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"LouisLouis19"},"content":"done 1","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"LouisLouis19"},"content":"done 3","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"LouisLouis19"},"content":"event","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"LouisLouis19"},"content":"event soccer / at 4 Sep","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"LouisLouis19"},"content":"deadline eat dinner / by tonight","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"LouisLouis19"},"content":"todo buy bread","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"list","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"LouisLouis19"},"content":"done 3","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"LouisLouis19"},"content":"list","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"LouisLouis19"},"content":"bye","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"LouisLouis19":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"LouisLouis19"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke\\RunFile\\*.java ..\\src\\main\\java\\Duke\\TaskTypes\\*.java ..\\src\\main\\java\\Duke\\Exception\\*.java","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"LouisLouis19"},"content":"java -classpath ..\\bin Duke.RunFile.DukeProgram \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LouisLouis19":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"LouisLouis19"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke/RunFile/*.java","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LouisLouis19":1,"-":37}},{"path":"text-ui-test/savedData/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LouisLouis19"},"content":"T | 0 | buy bread | ","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"LouisLouis19":1}}]
