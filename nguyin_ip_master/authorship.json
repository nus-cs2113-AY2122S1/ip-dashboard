[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"### Adding a Todo : `todo`","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"Adds a todo to the task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"Format : `todo TODO`","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"Examples : `todo Read book to my boyfriend`","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"Expected outcome :","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"Program shows the todo that has been added to the list and the total number of tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"Ok! I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"[T][ ] Read book to my boyfriend","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"Now you have 5 tasks in your list uwu","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"### Adding a Deadline : `deadline`","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"Adds a deadline and the date (and time) that it is due to the task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"Format : `deadline DEADLINE /by DATE_AND_TIME`","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"* Date and time will be stored the way that it is put in by the user, there is no specified format.","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"* Date or time **must** be provided","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"Examples : `deadline Break up with Boyfriend /by 1st October 2359`","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"Expected outcome :","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"Program shows the deadline that has been added to the list and the total number of tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"nguyin"},"content":"Ok! I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":40,"author":{"gitId":"nguyin"},"content":"  [D][ ] Break up with Boyfriend (by: 1st October 2359)","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"nguyin"},"content":"Now you have 4 tasks in your list uwu","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"nguyin"},"content":"### Adding an Event : `event`","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"nguyin"},"content":"Adds an event and the date (and time) that it is happening to the task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"nguyin"},"content":"Format : `event EVENT /at DATE_AND_TIME`","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"nguyin"},"content":"* Date and time will be stored the way that it is put in by the user, there is no specified format.","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"nguyin"},"content":"* Date or time **must** be provided","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"nguyin"},"content":"Examples : `event Spend time with Boyfriend /at 2nd October 0000`","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":55,"author":{"gitId":"nguyin"},"content":"Expected outcome :","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"nguyin"},"content":"Program shows the event that has been added to the list and the total number of tasks in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"nguyin"},"content":"Ok! I\u0027ve added this task:","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"nguyin"},"content":"  [E][ ] Spend time with Boyfriend (at: 2nd October 0000)","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"nguyin"},"content":"Now you have 4 tasks in your list uwu","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"nguyin"},"content":"### Listing all tasks : `list`","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"nguyin"},"content":"Shows a list of all the tasks that are currently in the task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":70,"author":{"gitId":"nguyin"},"content":"Format : `list`","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Expected outcome :","lastModifiedDate":"2019-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"nguyin"},"content":"Program will show the whole task list with all the remaining tasks left.","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"nguyin"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"nguyin"},"content":"1.   [E][ ] Go on a date with my boyfriend (at: Wed)","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"nguyin"},"content":"2.   [D][X] Break up with my boyfriend (by: 1st Oct 2359)","lastModifiedDate":"2021-10-01"},{"lineNumber":79,"author":{"gitId":"nguyin"},"content":"3.   [E][ ] Spend time with Boyfriend (at: 2nd October 0000)","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"nguyin"},"content":"4.   [D][ ] Break up with Boyfriend (by: 1st October 2359)","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"nguyin"},"content":"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"nguyin"},"content":"### Marking a Task as Completed : `done`","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"nguyin"},"content":"Marks an existing task in the task list as completed.","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"nguyin"},"content":"Format : `done INDEX`","lastModifiedDate":"2021-10-01"},{"lineNumber":91,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":92,"author":{"gitId":"nguyin"},"content":"* Marks task as completed at the specified `INDEX`. The index refers to the index number displayed in the task list. The index **must be a positive integer** 1, 2, 3, .. etc.","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"nguyin"},"content":"Examples : `done 1` marks the task at index 1 as completed.","lastModifiedDate":"2021-10-01"},{"lineNumber":95,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"nguyin"},"content":"Expected outcome :","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"nguyin"},"content":"Program will show the task that has been marked as completed.","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"nguyin"},"content":"Good job! I\u0027ve marked this task as done:","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"nguyin"},"content":"  [D][X] Break up with my boyfriend (by: 1st Oct 2359)","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":103,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":104,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"nguyin"},"content":"### Deleting a Task : `delete`","lastModifiedDate":"2021-10-01"},{"lineNumber":106,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"nguyin"},"content":"Deletes an existing task in the task list.","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"nguyin"},"content":"Format : `delete INDEX`","lastModifiedDate":"2021-10-01"},{"lineNumber":110,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":111,"author":{"gitId":"nguyin"},"content":"* Deletes task at the specified `INDEX`. The index refers to the index number displayed in the task list. The index **must be a positive integer** 1, 2, 3, ... etc.","lastModifiedDate":"2021-10-01"},{"lineNumber":112,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"nguyin"},"content":"Examples : `delete 1` deletes the task at index 1.","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"nguyin"},"content":"Expected outcome :","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"nguyin"},"content":"Program will show the task that has been recently deleted, the remaining number of tasks left in the list and the task list with the remaining tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"nguyin"},"content":"Okies! I\u0027ve removed this task \u003c3 :","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"nguyin"},"content":"  [T][ ] Buy a gift for my boyfriend","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"nguyin"},"content":"Now you have 1 tasks in your list uwu","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"nguyin"},"content":"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"nguyin"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"nguyin"},"content":"1.   [E][ ] Go on a date with my boyfriend (at: Wed)","lastModifiedDate":"2021-10-01"},{"lineNumber":125,"author":{"gitId":"nguyin"},"content":"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ","lastModifiedDate":"2021-10-01"},{"lineNumber":126,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"nguyin"},"content":"### Locating task by keyword : `find`","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"nguyin"},"content":"Find tasks which contain the keyword provided.","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"nguyin"},"content":"Format : `find KEYWORD`","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":137,"author":{"gitId":"nguyin"},"content":"* The search is case-sensitive. eg. boyfriend will not match Boyfriend","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"nguyin"},"content":"* Multiple keywords can be entered, but tasks will only be found if word orientation is the same.","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"nguyin"},"content":"* Date and time for Events and Deadlines can be searched for as well.","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"nguyin"},"content":"* Non-full words will be returned, eg. Boy will return Boyfriend","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"nguyin"},"content":"Examples : `find Book` returns `Read Book`","lastModifiedDate":"2021-10-01"},{"lineNumber":143,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":144,"author":{"gitId":"nguyin"},"content":"Expected outcome :","lastModifiedDate":"2021-10-01"},{"lineNumber":145,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":146,"author":{"gitId":"nguyin"},"content":"Program returns a list with all the matching tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":147,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":148,"author":{"gitId":"nguyin"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-10-01"},{"lineNumber":149,"author":{"gitId":"nguyin"},"content":"1.   [T][ ] Read Book","lastModifiedDate":"2021-10-01"},{"lineNumber":150,"author":{"gitId":"nguyin"},"content":"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ","lastModifiedDate":"2021-10-01"},{"lineNumber":151,"author":{"gitId":"nguyin"},"content":"```","lastModifiedDate":"2021-10-01"},{"lineNumber":152,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":153,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":154,"author":{"gitId":"nguyin"},"content":"### Exiting the Program : `bye`","lastModifiedDate":"2021-10-01"},{"lineNumber":155,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":156,"author":{"gitId":"nguyin"},"content":"Exits the program.","lastModifiedDate":"2021-10-01"},{"lineNumber":157,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":158,"author":{"gitId":"nguyin"},"content":"Format : `bye`","lastModifiedDate":"2021-10-01"},{"lineNumber":159,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":160,"author":{"gitId":"nguyin"},"content":"Expected outcome :","lastModifiedDate":"2021-10-01"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":163,"author":{"gitId":"nguyin"},"content":"Goodbye. I will miss you sooo much :(","lastModifiedDate":"2021-10-01"},{"lineNumber":164,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"nguyin":143,"-":21}},{"path":"lines.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"T 1 read book","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"T 0 ask akshay to help me","lastModifiedDate":"2021-10-01"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":"E 0 go sleepp | never","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"nguyin":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":" * Represents a task that is added to the list by a user. A Deadline object contains a description","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":" * represented by a String and a done status represented by a boolean. This is all inherited","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":" * from superclass Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":" * Deadline object contains date that task is to be completed by, represented by a String.","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":" * Inherits all methods from superclass Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"     * Saves the deadline to file in the correct format, so that it can be read easily by the program","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"     * @return The deadline in the correct format that it is saved as.","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"    public String saveToFile() {","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"        // return format","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"        String printStatus;","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"        // return format","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"        if (this.isDone \u003d\u003d true) {","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"            printStatus \u003d \"1\";","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"            printStatus \u003d \"0\";","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"        return \"D \" + printStatus + \" \" + description + \" | \" + by;","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"        return \"  [D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"nguyin":38}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"    private static TaskList taskList;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"    private static Ui ui;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"    private static Storage storage;","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"    private static Parser parser;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"    public static final int BYE \u003d 0;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"    public static final int LIST \u003d 1;","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"    public static final int DONE \u003d 2;","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"    public static final int DELETE \u003d 3;","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"    public static final int TODO \u003d 4;","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"    public static final int EVENT \u003d 5;","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"    public static final int DEADLINE \u003d 6;","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"    public static final int FIND \u003d 7;","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"    public static final int NOT_VALID \u003d -1;","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"        taskList \u003d storage.readFileContents(\"lines.txt\");","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"        ui.welcomeMessage();","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"        parser \u003d new Parser(input.nextLine());","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"        int command \u003d parser.command();","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"        while (command !\u003d BYE) {","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"            switch (command) {","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"            case LIST:","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"nguyin"},"content":"                ui.showTaskList(taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"nguyin"},"content":"            case DONE:","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"nguyin"},"content":"                try {","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"nguyin"},"content":"                    int doneIndex \u003d parser.doneTaskIndex();","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"nguyin"},"content":"                    Task doneTask \u003d taskList.markDone(doneIndex);","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"nguyin"},"content":"                    ui.showDone(doneTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"nguyin"},"content":"                } catch (IllegalDoneException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"nguyin"},"content":"                    ui.showLoadingError();","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"nguyin"},"content":"                }","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"nguyin"},"content":"            case DELETE:","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"nguyin"},"content":"                try {","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"nguyin"},"content":"                    int delIndex \u003d parser.deleteTaskIndex();","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"nguyin"},"content":"                    Task delTask \u003d taskList.deleteTask(delIndex);","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"nguyin"},"content":"                    ui.showDeleted(delTask, taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"nguyin"},"content":"                    ui.showTaskList(taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"nguyin"},"content":"                } catch (IllegalDoneException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"nguyin"},"content":"                    ui.showLoadingError();","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"nguyin"},"content":"                }","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":60,"author":{"gitId":"nguyin"},"content":"            case TODO:","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"nguyin"},"content":"                try {","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"nguyin"},"content":"                    taskList.addTask(parser.getTodo());","lastModifiedDate":"2021-09-30"},{"lineNumber":63,"author":{"gitId":"nguyin"},"content":"                    ui.showRecentTask(taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"nguyin"},"content":"                } catch (InvalidTask e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"nguyin"},"content":"                    ui.showInvalidTask();","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"nguyin"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"nguyin"},"content":"            case EVENT:","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"nguyin"},"content":"                try {","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"nguyin"},"content":"                    taskList.addTask(parser.getEvent());","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"nguyin"},"content":"                    ui.showRecentTask(taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"nguyin"},"content":"                } catch (InvalidEventFormat e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"nguyin"},"content":"                    ui.eventFormatError();","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"nguyin"},"content":"                } catch (InvalidTask e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"nguyin"},"content":"                    ui.showInvalidTask();","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"nguyin"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"nguyin"},"content":"            case DEADLINE:","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"nguyin"},"content":"                try {","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"nguyin"},"content":"                    taskList.addTask(parser.getDeadline());","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"nguyin"},"content":"                    ui.showRecentTask(taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"nguyin"},"content":"                } catch (InvalidDeadlineFormat e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"nguyin"},"content":"                    ui.deadlineFormatError();","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"nguyin"},"content":"                } catch (InvalidTask e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"nguyin"},"content":"                    ui.showInvalidTask();","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"nguyin"},"content":"                }","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"nguyin"},"content":"            case FIND:","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"nguyin"},"content":"                try {","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"nguyin"},"content":"                    String findTask \u003d parser.getTask();","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"nguyin"},"content":"                    TaskList foundTaskList \u003d taskList.findTasks(findTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"nguyin"},"content":"                    ui.showFoundTasks(foundTaskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"nguyin"},"content":"                } catch (TaskNotFoundException e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"nguyin"},"content":"                    ui.showNoTask();","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"nguyin"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"nguyin"},"content":"            case NOT_VALID:","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"nguyin"},"content":"                ui.showTypingError();","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"nguyin"},"content":"                break;","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"nguyin"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":101,"author":{"gitId":"nguyin"},"content":"            parser \u003d new Parser(input.nextLine());","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"nguyin"},"content":"            command \u003d parser.command();","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"nguyin"},"content":"        try {","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"nguyin"},"content":"            storage.writeToFile(\"lines.txt\", taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"nguyin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":108,"author":{"gitId":"nguyin"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"nguyin"},"content":"        ui.goodbyeMessage();","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"nguyin":108,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":" * Represents a task that is added to the list by a user. A Event object contains a description","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":" * represented by a String and a done status represented by a boolean. This is all inherited","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":" * from superclass Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":" * Event object contains date that event is happening, represented by a String.","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"    protected String by;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"    public Event(String description, String by) {","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"    public String getBy() {","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"        return by;","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"     * Saves the event to file in the correct format, so that it can be read easily by the program","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"     * @return The event in the correct format that it is saved as.","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"    public String saveToFile() {","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"        String printStatus;","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"        // return format","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"        if(this.isDone \u003d\u003d true) {","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"            printStatus \u003d \"1\";","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"            printStatus \u003d \"0\";","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"        return \"E \" + printStatus + \" \" + description + \" | \" + by;","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"        return \"  [E]\" + super.toString() + \" (at: \" + by + \")\";","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"nguyin":40}},{"path":"src/main/java/IllegalDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"public class IllegalDoneException extends Exception {","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"nguyin":2}},{"path":"src/main/java/IllegalTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":" * Throws an exception when starting word that user input is not \"todo\", \"deadline\", or \"event\".","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"public class IllegalTaskException extends Exception{","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"nguyin":5}},{"path":"src/main/java/InvalidDeadlineFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":" * Exception is thrown when deadline that is input by user is in an invalid format, ie. does not contain \"/by\".","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"public class InvalidDeadlineFormat extends Exception {","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"nguyin":5}},{"path":"src/main/java/InvalidEventFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":" * Exception is thrown when event that is input by user is in an invalid format, ie. does not contain \"/at\".","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"public class InvalidEventFormat extends Exception {","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"nguyin":5}},{"path":"src/main/java/InvalidTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"public class InvalidTask extends Exception {","lastModifiedDate":"2021-10-01"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"nguyin":2}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"public class Parser {","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"    public static final int BYE \u003d 0;","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":"    public static final int LIST \u003d 1;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"    public static final int DONE \u003d 2;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"    public static final int DELETE \u003d 3;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":"    public static final int TODO \u003d 4;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"    public static final int EVENT \u003d 5;","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"    public static final int DEADLINE \u003d 6;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"    public static final int FIND \u003d 7;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"    public static final int NOT_VALID \u003d -1;","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"    private String userInput;","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"    public Parser(String userInput) {","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"     * Reads user input and deciphers which command it is.","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"     * @return Integer to represent one of the commands.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"    public int command() {","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"        if (userInput.equals(\"bye\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"            return BYE;","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"        if (userInput.equals(\"list\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"            return LIST;","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"        if (userInput.startsWith(\"done\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"            return DONE;","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"        if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"            return DELETE;","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"        if (userInput.startsWith(\"todo\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"            return TODO;","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"        if (userInput.startsWith(\"event\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"nguyin"},"content":"            return EVENT;","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"nguyin"},"content":"        if (userInput.startsWith(\"deadline\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"nguyin"},"content":"            return DEADLINE;","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"nguyin"},"content":"        if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"nguyin"},"content":"            return FIND;","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"nguyin"},"content":"        return NOT_VALID;","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"nguyin"},"content":"     * Reads user input for the command \"done\" and returns the index of the task that has been completed.","lastModifiedDate":"2021-10-01"},{"lineNumber":52,"author":{"gitId":"nguyin"},"content":"     * @return The index of the task that is done.","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":54,"author":{"gitId":"nguyin"},"content":"    public int doneTaskIndex() {","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"nguyin"},"content":"        int doneIndex \u003d -1;","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"nguyin"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"nguyin"},"content":"            String n \u003d userInput.substring(5);","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"nguyin"},"content":"            doneIndex \u003d Integer.parseInt(n) - 1;","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"nguyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"nguyin"},"content":"        return doneIndex;","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"nguyin"},"content":"     * Reads user input for the command \"delete\" and returns the index of the task that has been deleted.","lastModifiedDate":"2021-10-01"},{"lineNumber":67,"author":{"gitId":"nguyin"},"content":"     * @return The index of the task that is deleted.","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":69,"author":{"gitId":"nguyin"},"content":"    public int deleteTaskIndex() {","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"nguyin"},"content":"        int delIndex \u003d -1;","lastModifiedDate":"2021-10-01"},{"lineNumber":71,"author":{"gitId":"nguyin"},"content":"        try {","lastModifiedDate":"2021-10-01"},{"lineNumber":72,"author":{"gitId":"nguyin"},"content":"            String n \u003d userInput.substring(7);","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"nguyin"},"content":"            delIndex \u003d Integer.parseInt(n) - 1;","lastModifiedDate":"2021-10-01"},{"lineNumber":74,"author":{"gitId":"nguyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"nguyin"},"content":"        return delIndex;","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"nguyin"},"content":"     * Reads user input for the command \"todo\" and finds the description of the Todo, to store it in the Task List.","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"nguyin"},"content":"     * @return The task that has been newly created, to be stored in the Task List.","lastModifiedDate":"2021-10-01"},{"lineNumber":82,"author":{"gitId":"nguyin"},"content":"     * @throws IllegalTaskException Exception thrown when there is no name of the task. Asks user to input valid task.","lastModifiedDate":"2021-10-01"},{"lineNumber":83,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":84,"author":{"gitId":"nguyin"},"content":"    public Todo getTodo() throws InvalidTask {","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"nguyin"},"content":"        String taskName \u003d userInput.substring(4).strip();","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"nguyin"},"content":"        if (taskName.isEmpty()) {","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"nguyin"},"content":"            throw new InvalidTask();","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"nguyin"},"content":"        Todo newTask \u003d new Todo(taskName);","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"nguyin"},"content":"        return newTask;","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":94,"author":{"gitId":"nguyin"},"content":"     * Reads in user input for the command \"event\" and finds the description of the Event, which will be stored in the","lastModifiedDate":"2021-10-01"},{"lineNumber":95,"author":{"gitId":"nguyin"},"content":"     * Task List.","lastModifiedDate":"2021-10-01"},{"lineNumber":96,"author":{"gitId":"nguyin"},"content":"     * @return The task that has been newly created, to be stored in the Task List.","lastModifiedDate":"2021-10-01"},{"lineNumber":97,"author":{"gitId":"nguyin"},"content":"     * @throws InvalidEventFormat Exception thrown when the format of the Event does not match what is expected, which","lastModifiedDate":"2021-10-01"},{"lineNumber":98,"author":{"gitId":"nguyin"},"content":"     * is \"/by\".","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"nguyin"},"content":"     * @throws InvalidTask Exception thrown when there is no description that has been added for the Event.","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"nguyin"},"content":"    public Event getEvent() throws InvalidEventFormat, InvalidTask {","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"nguyin"},"content":"        int startOfDate \u003d userInput.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"nguyin"},"content":"        if (!userInput.contains(\"/at\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"nguyin"},"content":"            throw new InvalidEventFormat();","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"nguyin"},"content":"        if (startOfDate - 1 \u003c 6) { // make sure the substring exists","lastModifiedDate":"2021-10-01"},{"lineNumber":107,"author":{"gitId":"nguyin"},"content":"            throw new InvalidTask();","lastModifiedDate":"2021-10-01"},{"lineNumber":108,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":109,"author":{"gitId":"nguyin"},"content":"        String task \u003d userInput.substring(6, startOfDate - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"nguyin"},"content":"        String date \u003d userInput.substring(startOfDate + 4);","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"nguyin"},"content":"        Event newTask \u003d new Event(task, date);","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"nguyin"},"content":"        return newTask;","lastModifiedDate":"2021-09-30"},{"lineNumber":113,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":114,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":115,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"nguyin"},"content":"     * Reads in user input for the command \"deadline\" and finds the description of the Deadline, which will be stored in","lastModifiedDate":"2021-10-01"},{"lineNumber":117,"author":{"gitId":"nguyin"},"content":"     * the Task List.","lastModifiedDate":"2021-10-01"},{"lineNumber":118,"author":{"gitId":"nguyin"},"content":"     * @return The task that has been newly created, to be stored in the Task List.","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"nguyin"},"content":"     * @throws InvalidDeadlineFormat Exception thrown when the format of the Deadline does not match what is expected,","lastModifiedDate":"2021-10-01"},{"lineNumber":120,"author":{"gitId":"nguyin"},"content":"     * which is \"/at\".","lastModifiedDate":"2021-10-01"},{"lineNumber":121,"author":{"gitId":"nguyin"},"content":"     * @throws InvalidTask Exception thrown when there is no description that has been added for the Deadline.","lastModifiedDate":"2021-10-01"},{"lineNumber":122,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":123,"author":{"gitId":"nguyin"},"content":"    public Deadline getDeadline() throws InvalidDeadlineFormat, InvalidTask {","lastModifiedDate":"2021-10-01"},{"lineNumber":124,"author":{"gitId":"nguyin"},"content":"        int startOfDate \u003d userInput.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-09-30"},{"lineNumber":125,"author":{"gitId":"nguyin"},"content":"        if (!userInput.contains(\"/by\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":126,"author":{"gitId":"nguyin"},"content":"            throw new InvalidDeadlineFormat();","lastModifiedDate":"2021-09-30"},{"lineNumber":127,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":128,"author":{"gitId":"nguyin"},"content":"        if (startOfDate - 1 \u003c 9) { // make sure the substring exists","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"nguyin"},"content":"            throw new InvalidTask();","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"nguyin"},"content":"        String task \u003d userInput.substring(9, startOfDate - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":132,"author":{"gitId":"nguyin"},"content":"        String date \u003d userInput.substring(startOfDate + 4);","lastModifiedDate":"2021-09-30"},{"lineNumber":133,"author":{"gitId":"nguyin"},"content":"        Deadline newTask \u003d new Deadline(task, date);","lastModifiedDate":"2021-09-30"},{"lineNumber":134,"author":{"gitId":"nguyin"},"content":"        return newTask;","lastModifiedDate":"2021-09-30"},{"lineNumber":135,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":136,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"nguyin"},"content":"     * Reads user input for the command \"find\", and takes the description in the task list that the user is trying to","lastModifiedDate":"2021-10-01"},{"lineNumber":139,"author":{"gitId":"nguyin"},"content":"     * find","lastModifiedDate":"2021-10-01"},{"lineNumber":140,"author":{"gitId":"nguyin"},"content":"     * @return The description in the task list that the user is trying to find.","lastModifiedDate":"2021-10-01"},{"lineNumber":141,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":142,"author":{"gitId":"nguyin"},"content":"    public String getTask() {","lastModifiedDate":"2021-09-30"},{"lineNumber":143,"author":{"gitId":"nguyin"},"content":"        String newTask \u003d userInput.substring(5);","lastModifiedDate":"2021-09-30"},{"lineNumber":144,"author":{"gitId":"nguyin"},"content":"        return newTask;","lastModifiedDate":"2021-09-30"},{"lineNumber":145,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":146,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":147,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"nguyin":147}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"import java.io.File;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"public class Storage {","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"     * Reads the file that has the user\u0027s previously stored Task List inside. Will use this exisiting Task List. If","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"     * there is no exisiting file, a new file will be created.","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"     * @param filePath Name of file","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"     * @return The exisiting Task List that the user has.","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"    public static TaskList readFileContents(String filePath) {","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"        try {","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"            if (!f.createNewFile()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"                Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"                while (s.hasNext()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"                    String line \u003d s.nextLine();","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"                    if (line.startsWith(\"E\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"                        int startDate \u003d line.indexOf(\u0027|\u0027);","lastModifiedDate":"2021-09-30"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"                        String description \u003d line.substring(4, startDate - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"                        String date \u003d line.substring(startDate + 2);","lastModifiedDate":"2021-09-30"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"                        Event newTask \u003d new Event(description, date);","lastModifiedDate":"2021-09-30"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"                        taskList.add(newTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"                        if (line.substring(2).startsWith(\"1\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"                            taskList.get(taskList.size() - 1).setDone();","lastModifiedDate":"2021-09-30"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"                        }","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"                    } else if (line.startsWith(\"D\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"                        int startDate \u003d line.indexOf(\u0027|\u0027);","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"                        String description \u003d line.substring(4, startDate - 1);","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"                        String date \u003d line.substring(startDate + 2);","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"                        Deadline newTask \u003d new Deadline(description, date);","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"                        taskList.add(newTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"                        if (line.substring(2).startsWith(\"1\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"nguyin"},"content":"                            taskList.get(taskList.size() - 1).setDone();","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"nguyin"},"content":"                        }","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"nguyin"},"content":"                    } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"nguyin"},"content":"                        String description \u003d line.substring(4);","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"nguyin"},"content":"                        Todo newTask \u003d new Todo(description);","lastModifiedDate":"2021-09-30"},{"lineNumber":44,"author":{"gitId":"nguyin"},"content":"                        taskList.add(newTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"nguyin"},"content":"                        if (line.substring(2).startsWith(\"1\")) {","lastModifiedDate":"2021-09-30"},{"lineNumber":46,"author":{"gitId":"nguyin"},"content":"                            taskList.get(taskList.size() - 1).setDone();","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"nguyin"},"content":"                        }","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"nguyin"},"content":"                    }","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"nguyin"},"content":"                }","lastModifiedDate":"2021-09-30"},{"lineNumber":50,"author":{"gitId":"nguyin"},"content":"            } return new TaskList(taskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"nguyin"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"nguyin"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"nguyin"},"content":"            return null;","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"nguyin"},"content":"     * Writes the user\u0027s current Task List to the file to be stored.","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"nguyin"},"content":"     * @param filePath Name of file to be written to.","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"nguyin"},"content":"     * @param taskList Current Task List that user has.","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"nguyin"},"content":"     * @throws IOException Exception is thrown when there is an error during storage.","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"nguyin"},"content":"    public static void writeToFile(String filePath, TaskList taskList) throws IOException {","lastModifiedDate":"2021-09-30"},{"lineNumber":64,"author":{"gitId":"nguyin"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-30"},{"lineNumber":65,"author":{"gitId":"nguyin"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-09-30"},{"lineNumber":66,"author":{"gitId":"nguyin"},"content":"        while(i \u003c taskList.size()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"nguyin"},"content":"            fw.write(taskList.get(i).saveToFile() + System.lineSeparator());","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"nguyin"},"content":"            i +\u003d 1;","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"nguyin"},"content":"        fw.close();","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":73,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"nguyin":73}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":" * Represents a task that is added to the list by a user. A Task object contains a description","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":" * represented by a String and the status of the task, represented by boolean.","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":"    protected String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"    public void setDone() {","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"    public abstract String saveToFile();","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"nguyin":29}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":"public class TaskList {","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"    public int size() {","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"        return taskList.size();","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"        return taskList.get(index);","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2021-09-30"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"        taskList.add(t);","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"     * Marks the task that is specified by user, from the list with first index starting from 1, as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"     * @param doneIndex Index of the task that is to be marked as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"     * @throws IllegalDoneException If doneIndex \u003e\u003d taskCount, the task that user wants to mark as","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"     * done does not exist in the list","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"    public Task markDone(int doneIndex) throws IllegalDoneException {","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"        if(doneIndex \u003e\u003d taskList.size() || doneIndex \u003c 0) {","lastModifiedDate":"2021-10-01"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"            throw new IllegalDoneException();","lastModifiedDate":"2021-09-30"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"        } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"            taskList.get(doneIndex).setDone();","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"            return taskList.get(doneIndex);","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":41,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"nguyin"},"content":"     * Deletes the task specified by user from the taskList.","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"nguyin"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"nguyin"},"content":"     * @param delIndex Index of task to be deleted.","lastModifiedDate":"2021-10-01"},{"lineNumber":45,"author":{"gitId":"nguyin"},"content":"     * @return Task that has been recently delted from the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"nguyin"},"content":"     * @throws IllegalDoneException Exception thrown when user inputs an incorrect index of the number.","lastModifiedDate":"2021-10-01"},{"lineNumber":47,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":48,"author":{"gitId":"nguyin"},"content":"    public Task deleteTask(int delIndex) throws IllegalDoneException {","lastModifiedDate":"2021-09-30"},{"lineNumber":49,"author":{"gitId":"nguyin"},"content":"        if (delIndex \u003e\u003d taskList.size() || delIndex \u003c 0) {","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"nguyin"},"content":"            throw new IllegalDoneException();","lastModifiedDate":"2021-09-30"},{"lineNumber":51,"author":{"gitId":"nguyin"},"content":"        } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"nguyin"},"content":"            Task delTask \u003d taskList.get(delIndex);","lastModifiedDate":"2021-09-30"},{"lineNumber":53,"author":{"gitId":"nguyin"},"content":"            taskList.remove(delIndex);","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"nguyin"},"content":"            return delTask;","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":59,"author":{"gitId":"nguyin"},"content":"     * Searches through the entire Task List to find matching searches. Stores the matches into an array to return","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"nguyin"},"content":"     * to user.","lastModifiedDate":"2021-10-01"},{"lineNumber":61,"author":{"gitId":"nguyin"},"content":"     *","lastModifiedDate":"2021-10-01"},{"lineNumber":62,"author":{"gitId":"nguyin"},"content":"     * @param task Description or date of task that user is trying to find.","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"nguyin"},"content":"     * @return List of all the matches.","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"nguyin"},"content":"     * @throws TaskNotFoundException Exception thrown when there is no matching tasks.","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"nguyin"},"content":"    public TaskList findTasks(String task) throws TaskNotFoundException {","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"nguyin"},"content":"        int pos \u003d 0;","lastModifiedDate":"2021-09-30"},{"lineNumber":68,"author":{"gitId":"nguyin"},"content":"        String currentTask;","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"nguyin"},"content":"        ArrayList\u003cTask\u003e foundTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"nguyin"},"content":"        while (pos \u003c taskList.size()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"nguyin"},"content":"            currentTask \u003d taskList.get(pos).toString();","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"nguyin"},"content":"            if (currentTask.contains(task)) {","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"nguyin"},"content":"                foundTaskList.add(taskList.get(pos));","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"nguyin"},"content":"            }","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"nguyin"},"content":"            pos +\u003d 1;","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"nguyin"},"content":"        if (foundTaskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"nguyin"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"nguyin"},"content":"        } else {","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"nguyin"},"content":"            return new TaskList(foundTaskList);","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":85,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"nguyin":85}},{"path":"src/main/java/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"public class TaskNotFoundException extends Exception {","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"nguyin":2}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":" * Represents a task that is added to the list by a user. A Todo object contains a description","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":" * represented by a String and a done status represented by a boolean. This is all inherited","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":" * from superclass Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":" * Inherits all methods from superclass Task.","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"        super(description);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"    public String toString() {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"        return \"  [T]\" + super.toString();","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"     * Saves the todo to file in the correct format, so that it can be read easily by the program","lastModifiedDate":"2021-10-01"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"     * @return The todo in the correct format that it is saved as.","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"    @Override","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"    public String saveToFile() {","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"        // return format","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"        String printStatus;","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"        // return format","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"        if (this.isDone \u003d\u003d true) {","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"            printStatus \u003d \"1\";","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"            printStatus \u003d \"0\";","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"        return \"T \" + printStatus + \" \" + description;","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"nguyin":35}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nguyin"},"content":"public class Ui {","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"nguyin"},"content":"    public void welcomeMessage() {","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"nguyin"},"content":"        String logo \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":5,"author":{"gitId":"nguyin"},"content":"                        \"     o o   \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"nguyin"},"content":"                        + \"      ^   \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"nguyin"},"content":"                        + \"     \u0027-\u0027   \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"nguyin"},"content":"                        + \"    __  __ \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"nguyin"},"content":"                        + \"   \\\\  \\\\/  /\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"nguyin"},"content":"                        + \"    \\\\    /\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":11,"author":{"gitId":"nguyin"},"content":"                        + \"     \\\\  / \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":12,"author":{"gitId":"nguyin"},"content":"                        + \"      \\\\/  \\n\";","lastModifiedDate":"2021-10-01"},{"lineNumber":13,"author":{"gitId":"nguyin"},"content":"        System.out.print(logo);","lastModifiedDate":"2021-10-01"},{"lineNumber":14,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Hello bby! I\u0027m Your Boyfriend \u003c3\");","lastModifiedDate":"2021-10-01"},{"lineNumber":15,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"How can I help you today? ;)\");","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":17,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":19,"author":{"gitId":"nguyin"},"content":"    public void goodbyeMessage() {","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Goodbye bby. I will miss you sooo much :(\");","lastModifiedDate":"2021-10-01"},{"lineNumber":21,"author":{"gitId":"nguyin"},"content":"        System.out.println();","lastModifiedDate":"2021-10-01"},{"lineNumber":22,"author":{"gitId":"nguyin"},"content":"        String logo \u003d","lastModifiedDate":"2021-10-01"},{"lineNumber":23,"author":{"gitId":"nguyin"},"content":"                \"        **   **    \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":24,"author":{"gitId":"nguyin"},"content":"                        + \"       **** **** \\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":25,"author":{"gitId":"nguyin"},"content":"                        + \"       *********\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":26,"author":{"gitId":"nguyin"},"content":"                        + \"        *******\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":27,"author":{"gitId":"nguyin"},"content":"                        + \"         *****\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":28,"author":{"gitId":"nguyin"},"content":"                        + \"          ***\\n\"","lastModifiedDate":"2021-10-01"},{"lineNumber":29,"author":{"gitId":"nguyin"},"content":"                        + \"           *\\n\";","lastModifiedDate":"2021-10-01"},{"lineNumber":30,"author":{"gitId":"nguyin"},"content":"        System.out.print(logo);","lastModifiedDate":"2021-10-01"},{"lineNumber":31,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":32,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":33,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":34,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":35,"author":{"gitId":"nguyin"},"content":"     * Message is printed to user when they input an incorrect number for \"delete\" and \"done\" command.","lastModifiedDate":"2021-10-01"},{"lineNumber":36,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":37,"author":{"gitId":"nguyin"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"You need to input a correct number bby... ;\u0027( try typing again\");","lastModifiedDate":"2021-10-01"},{"lineNumber":39,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":42,"author":{"gitId":"nguyin"},"content":"     * Message is shown when there is an invalid command. Prompts user to reenter the command.","lastModifiedDate":"2021-10-01"},{"lineNumber":43,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":44,"author":{"gitId":"nguyin"},"content":"    public void showTypingError() {","lastModifiedDate":"2021-09-30"},{"lineNumber":45,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"You have a typo bby.. ;\u0027( try typing again\");","lastModifiedDate":"2021-10-01"},{"lineNumber":46,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":48,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":49,"author":{"gitId":"nguyin"},"content":"     * Reminds user to use correct format for \"deadline\" command.","lastModifiedDate":"2021-10-01"},{"lineNumber":50,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":51,"author":{"gitId":"nguyin"},"content":"    public void deadlineFormatError() {","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"You need to input deadline with \u0027/by\u0027 ... ;\u0027( bby try typing again\");","lastModifiedDate":"2021-10-01"},{"lineNumber":53,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":55,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":56,"author":{"gitId":"nguyin"},"content":"     * Reminds user to use correct format for \"event\" command.","lastModifiedDate":"2021-10-01"},{"lineNumber":57,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":58,"author":{"gitId":"nguyin"},"content":"    public void eventFormatError() {","lastModifiedDate":"2021-09-30"},{"lineNumber":59,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"You need to input event with \u0027/at\u0027 ... ;\u0027( bby try typing again\");","lastModifiedDate":"2021-10-01"},{"lineNumber":60,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":61,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":62,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":63,"author":{"gitId":"nguyin"},"content":"     * Prints out the newly added task to the Task List. Notifies user how many tasks they have currently in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":64,"author":{"gitId":"nguyin"},"content":"     * @param taskList List of tasks that the user has.","lastModifiedDate":"2021-10-01"},{"lineNumber":65,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":66,"author":{"gitId":"nguyin"},"content":"    public void showRecentTask(TaskList taskList) {","lastModifiedDate":"2021-09-30"},{"lineNumber":67,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Ok! I\u0027ve added this task for you \u003c3 :\");","lastModifiedDate":"2021-10-01"},{"lineNumber":68,"author":{"gitId":"nguyin"},"content":"        int size \u003d taskList.size();","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"nguyin"},"content":"        System.out.println(taskList.get(size - 1));","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in your list uwu\");","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":75,"author":{"gitId":"nguyin"},"content":"     * Prints out the task that user has marked as done.","lastModifiedDate":"2021-10-01"},{"lineNumber":76,"author":{"gitId":"nguyin"},"content":"     * @param doneTask Task that has been completed.","lastModifiedDate":"2021-10-01"},{"lineNumber":77,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":78,"author":{"gitId":"nguyin"},"content":"    public void showDone(Task doneTask) {","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Good job bby! You\u0027re so productive :3 \");","lastModifiedDate":"2021-10-01"},{"lineNumber":80,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"I\u0027ve marked this task as done \u003c3 :\");","lastModifiedDate":"2021-10-01"},{"lineNumber":81,"author":{"gitId":"nguyin"},"content":"        System.out.println(doneTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":86,"author":{"gitId":"nguyin"},"content":"     * Prints out recently deleted task and shows how many tasks are left in the list.","lastModifiedDate":"2021-10-01"},{"lineNumber":87,"author":{"gitId":"nguyin"},"content":"     * @param delTask Task to be deleted.","lastModifiedDate":"2021-10-01"},{"lineNumber":88,"author":{"gitId":"nguyin"},"content":"     * @param taskList List of tasks that the user has.","lastModifiedDate":"2021-10-01"},{"lineNumber":89,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":90,"author":{"gitId":"nguyin"},"content":"    public void showDeleted(Task delTask, TaskList taskList) {","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"nguyin"},"content":"        int size \u003d taskList.size();","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Okies bby! I\u0027ve removed this task \u003c3 :\");","lastModifiedDate":"2021-10-01"},{"lineNumber":93,"author":{"gitId":"nguyin"},"content":"        System.out.println(delTask);","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in your list uwu\");","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \");","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":99,"author":{"gitId":"nguyin"},"content":"     * Prints out the entire task list of the user.","lastModifiedDate":"2021-10-01"},{"lineNumber":100,"author":{"gitId":"nguyin"},"content":"     * @param taskList List of tasks that the user has.","lastModifiedDate":"2021-10-01"},{"lineNumber":101,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":102,"author":{"gitId":"nguyin"},"content":"    public void showTaskList(TaskList taskList) {","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"nguyin"},"content":"        int pos \u003d 0;","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Here are the tasks in your list bby:\");","lastModifiedDate":"2021-10-01"},{"lineNumber":105,"author":{"gitId":"nguyin"},"content":"        while (pos \u003c taskList.size()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"nguyin"},"content":"            pos +\u003d 1;","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"nguyin"},"content":"            System.out.println(pos + \". \" + taskList.get(pos - 1));","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \");","lastModifiedDate":"2021-09-30"},{"lineNumber":110,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":111,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":112,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":113,"author":{"gitId":"nguyin"},"content":"     * Prints out the tasks that match what the user is searching","lastModifiedDate":"2021-10-01"},{"lineNumber":114,"author":{"gitId":"nguyin"},"content":"     * @param taskList List of tasks which match the user\u0027s search.","lastModifiedDate":"2021-10-01"},{"lineNumber":115,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":116,"author":{"gitId":"nguyin"},"content":"    public void showFoundTasks(TaskList taskList) {","lastModifiedDate":"2021-09-30"},{"lineNumber":117,"author":{"gitId":"nguyin"},"content":"        int pos \u003d 0;","lastModifiedDate":"2021-09-30"},{"lineNumber":118,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"Here are the matching tasks in your list bby:\");","lastModifiedDate":"2021-10-01"},{"lineNumber":119,"author":{"gitId":"nguyin"},"content":"        while (pos \u003c taskList.size()) {","lastModifiedDate":"2021-09-30"},{"lineNumber":120,"author":{"gitId":"nguyin"},"content":"            pos +\u003d 1;","lastModifiedDate":"2021-09-30"},{"lineNumber":121,"author":{"gitId":"nguyin"},"content":"            System.out.println(pos + \". \" + taskList.get(pos - 1));","lastModifiedDate":"2021-09-30"},{"lineNumber":122,"author":{"gitId":"nguyin"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":123,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \");","lastModifiedDate":"2021-09-30"},{"lineNumber":124,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":125,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":126,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":127,"author":{"gitId":"nguyin"},"content":"     * Prints out message to notify user when there is no task in the description.","lastModifiedDate":"2021-10-01"},{"lineNumber":128,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":129,"author":{"gitId":"nguyin"},"content":"    public void showInvalidTask() {","lastModifiedDate":"2021-10-01"},{"lineNumber":130,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"You have not inputted a task bby \u003e:(  angry uwu\");","lastModifiedDate":"2021-10-01"},{"lineNumber":131,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-10-01"},{"lineNumber":132,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":133,"author":{"gitId":"nguyin"},"content":"    /**","lastModifiedDate":"2021-10-01"},{"lineNumber":134,"author":{"gitId":"nguyin"},"content":"     * Prints out message when there is no task in the list that matches the user\u0027s search.","lastModifiedDate":"2021-10-01"},{"lineNumber":135,"author":{"gitId":"nguyin"},"content":"     */","lastModifiedDate":"2021-10-01"},{"lineNumber":136,"author":{"gitId":"nguyin"},"content":"    public void showNoTask() {","lastModifiedDate":"2021-09-30"},{"lineNumber":137,"author":{"gitId":"nguyin"},"content":"        System.out.println(\"There is no matching tasks for your search bby :( sad uwu\");","lastModifiedDate":"2021-10-01"},{"lineNumber":138,"author":{"gitId":"nguyin"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":139,"author":{"gitId":"nguyin"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":140,"author":{"gitId":"nguyin"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"nguyin":140}}]
